(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/iframe-resizer/js/iframeResizer.contentWindow.min.js":[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! iFrame Resizer (iframeSizer.contentWindow.min.js) - v3.6.0 - 2018-03-24
 *  Desc: Include this file in any page being loaded into an iframe
 *        to force the iframe to resize to the content size.
 *  Requires: iframeResizer.min.js on host page.
 *  Copyright: (c) 2018 David J. Bradshaw - dave@bradshaw.net
 *  License: MIT
 */

!function (a) {
  "use strict";
  function b(a, b, c) {
    "addEventListener" in window ? a.addEventListener(b, c, !1) : "attachEvent" in window && a.attachEvent("on" + b, c);
  }function c(a, b, c) {
    "removeEventListener" in window ? a.removeEventListener(b, c, !1) : "detachEvent" in window && a.detachEvent("on" + b, c);
  }function d(a) {
    return a.charAt(0).toUpperCase() + a.slice(1);
  }function e(a) {
    var b,
        c,
        d,
        e = null,
        f = 0,
        g = function g() {
      f = Ha(), e = null, d = a.apply(b, c), e || (b = c = null);
    };return function () {
      var h = Ha();f || (f = h);var i = xa - (h - f);return b = this, c = arguments, 0 >= i || i > xa ? (e && (clearTimeout(e), e = null), f = h, d = a.apply(b, c), e || (b = c = null)) : e || (e = setTimeout(g, i)), d;
    };
  }function f(a) {
    return ma + "[" + oa + "] " + a;
  }function g(a) {
    la && "object" == _typeof(window.console) && console.log(f(a));
  }function h(a) {
    "object" == _typeof(window.console) && console.warn(f(a));
  }function i() {
    j(), g("Initialising iFrame (" + location.href + ")"), k(), n(), m("background", W), m("padding", $), A(), s(), t(), o(), C(), u(), ia = B(), N("init", "Init message from host page"), Da();
  }function j() {
    function b(a) {
      return "true" === a ? !0 : !1;
    }var c = ha.substr(na).split(":");oa = c[0], X = a !== c[1] ? Number(c[1]) : X, _ = a !== c[2] ? b(c[2]) : _, la = a !== c[3] ? b(c[3]) : la, ja = a !== c[4] ? Number(c[4]) : ja, U = a !== c[6] ? b(c[6]) : U, Y = c[7], fa = a !== c[8] ? c[8] : fa, W = c[9], $ = c[10], ua = a !== c[11] ? Number(c[11]) : ua, ia.enable = a !== c[12] ? b(c[12]) : !1, qa = a !== c[13] ? c[13] : qa, Aa = a !== c[14] ? c[14] : Aa;
  }function k() {
    function a() {
      var a = window.iFrameResizer;g("Reading data from page: " + JSON.stringify(a)), Ca = "messageCallback" in a ? a.messageCallback : Ca, Da = "readyCallback" in a ? a.readyCallback : Da, ta = "targetOrigin" in a ? a.targetOrigin : ta, fa = "heightCalculationMethod" in a ? a.heightCalculationMethod : fa, Aa = "widthCalculationMethod" in a ? a.widthCalculationMethod : Aa;
    }function b(a, b) {
      return "function" == typeof a && (g("Setup custom " + b + "CalcMethod"), Fa[b] = a, a = "custom"), a;
    }"iFrameResizer" in window && Object === window.iFrameResizer.constructor && (a(), fa = b(fa, "height"), Aa = b(Aa, "width")), g("TargetOrigin for parent set to: " + ta);
  }function l(a, b) {
    return -1 !== b.indexOf("-") && (h("Negative CSS value ignored for " + a), b = ""), b;
  }function m(b, c) {
    a !== c && "" !== c && "null" !== c && (document.body.style[b] = c, g("Body " + b + ' set to "' + c + '"'));
  }function n() {
    a === Y && (Y = X + "px"), m("margin", l("margin", Y));
  }function o() {
    document.documentElement.style.height = "", document.body.style.height = "", g('HTML & body height set to "auto"');
  }function p(a) {
    var e = { add: function add(c) {
        function d() {
          N(a.eventName, a.eventType);
        }Ga[c] = d, b(window, c, d);
      }, remove: function remove(a) {
        var b = Ga[a];delete Ga[a], c(window, a, b);
      } };a.eventNames && Array.prototype.map ? (a.eventName = a.eventNames[0], a.eventNames.map(e[a.method])) : e[a.method](a.eventName), g(d(a.method) + " event listener: " + a.eventType);
  }function q(a) {
    p({ method: a, eventType: "Animation Start", eventNames: ["animationstart", "webkitAnimationStart"] }), p({ method: a, eventType: "Animation Iteration", eventNames: ["animationiteration", "webkitAnimationIteration"] }), p({ method: a, eventType: "Animation End", eventNames: ["animationend", "webkitAnimationEnd"] }), p({ method: a, eventType: "Input", eventName: "input" }), p({ method: a, eventType: "Mouse Up", eventName: "mouseup" }), p({ method: a, eventType: "Mouse Down", eventName: "mousedown" }), p({ method: a, eventType: "Orientation Change", eventName: "orientationchange" }), p({ method: a, eventType: "Print", eventName: ["afterprint", "beforeprint"] }), p({ method: a, eventType: "Ready State Change", eventName: "readystatechange" }), p({ method: a, eventType: "Touch Start", eventName: "touchstart" }), p({ method: a, eventType: "Touch End", eventName: "touchend" }), p({ method: a, eventType: "Touch Cancel", eventName: "touchcancel" }), p({ method: a, eventType: "Transition Start", eventNames: ["transitionstart", "webkitTransitionStart", "MSTransitionStart", "oTransitionStart", "otransitionstart"] }), p({ method: a, eventType: "Transition Iteration", eventNames: ["transitioniteration", "webkitTransitionIteration", "MSTransitionIteration", "oTransitionIteration", "otransitioniteration"] }), p({ method: a, eventType: "Transition End", eventNames: ["transitionend", "webkitTransitionEnd", "MSTransitionEnd", "oTransitionEnd", "otransitionend"] }), "child" === qa && p({ method: a, eventType: "IFrame Resized", eventName: "resize" });
  }function r(a, b, c, d) {
    return b !== a && (a in c || (h(a + " is not a valid option for " + d + "CalculationMethod."), a = b), g(d + ' calculation method set to "' + a + '"')), a;
  }function s() {
    fa = r(fa, ea, Ia, "height");
  }function t() {
    Aa = r(Aa, za, Ja, "width");
  }function u() {
    !0 === U ? (q("add"), F()) : g("Auto Resize disabled");
  }function v() {
    g("Disable outgoing messages"), ra = !1;
  }function w() {
    g("Remove event listener: Message"), c(window, "message", S);
  }function x() {
    null !== Z && Z.disconnect();
  }function y() {
    q("remove"), x(), clearInterval(ka);
  }function z() {
    v(), w(), !0 === U && y();
  }function A() {
    var a = document.createElement("div");a.style.clear = "both", a.style.display = "block", document.body.appendChild(a);
  }function B() {
    function c() {
      return { x: window.pageXOffset !== a ? window.pageXOffset : document.documentElement.scrollLeft, y: window.pageYOffset !== a ? window.pageYOffset : document.documentElement.scrollTop };
    }function d(a) {
      var b = a.getBoundingClientRect(),
          d = c();return { x: parseInt(b.left, 10) + parseInt(d.x, 10), y: parseInt(b.top, 10) + parseInt(d.y, 10) };
    }function e(b) {
      function c(a) {
        var b = d(a);g("Moving to in page link (#" + e + ") at x: " + b.x + " y: " + b.y), R(b.y, b.x, "scrollToOffset");
      }var e = b.split("#")[1] || b,
          f = decodeURIComponent(e),
          h = document.getElementById(f) || document.getElementsByName(f)[0];a !== h ? c(h) : (g("In page link (#" + e + ") not found in iFrame, so sending to parent"), R(0, 0, "inPageLink", "#" + e));
    }function f() {
      "" !== location.hash && "#" !== location.hash && e(location.href);
    }function i() {
      function a(a) {
        function c(a) {
          a.preventDefault(), e(this.getAttribute("href"));
        }"#" !== a.getAttribute("href") && b(a, "click", c);
      }Array.prototype.forEach.call(document.querySelectorAll('a[href^="#"]'), a);
    }function j() {
      b(window, "hashchange", f);
    }function k() {
      setTimeout(f, ba);
    }function l() {
      Array.prototype.forEach && document.querySelectorAll ? (g("Setting up location.hash handlers"), i(), j(), k()) : h("In page linking not fully supported in this browser! (See README.md for IE8 workaround)");
    }return ia.enable ? l() : g("In page linking not enabled"), { findTarget: e };
  }function C() {
    g("Enable public methods"), Ba.parentIFrame = { autoResize: function autoResize(a) {
        return !0 === a && !1 === U ? (U = !0, u()) : !1 === a && !0 === U && (U = !1, y()), U;
      }, close: function close() {
        R(0, 0, "close"), z();
      }, getId: function getId() {
        return oa;
      }, getPageInfo: function getPageInfo(a) {
        "function" == typeof a ? (Ea = a, R(0, 0, "pageInfo")) : (Ea = function Ea() {}, R(0, 0, "pageInfoStop"));
      }, moveToAnchor: function moveToAnchor(a) {
        ia.findTarget(a);
      }, reset: function reset() {
        Q("parentIFrame.reset");
      }, scrollTo: function scrollTo(a, b) {
        R(b, a, "scrollTo");
      }, scrollToOffset: function scrollToOffset(a, b) {
        R(b, a, "scrollToOffset");
      }, sendMessage: function sendMessage(a, b) {
        R(0, 0, "message", JSON.stringify(a), b);
      }, setHeightCalculationMethod: function setHeightCalculationMethod(a) {
        fa = a, s();
      }, setWidthCalculationMethod: function setWidthCalculationMethod(a) {
        Aa = a, t();
      }, setTargetOrigin: function setTargetOrigin(a) {
        g("Set targetOrigin: " + a), ta = a;
      }, size: function size(a, b) {
        var c = "" + (a ? a : "") + (b ? "," + b : "");N("size", "parentIFrame.size(" + c + ")", a, b);
      } };
  }function D() {
    0 !== ja && (g("setInterval: " + ja + "ms"), ka = setInterval(function () {
      N("interval", "setInterval: " + ja);
    }, Math.abs(ja)));
  }function E() {
    function b(a) {
      function b(a) {
        !1 === a.complete && (g("Attach listeners to " + a.src), a.addEventListener("load", f, !1), a.addEventListener("error", h, !1), k.push(a));
      }"attributes" === a.type && "src" === a.attributeName ? b(a.target) : "childList" === a.type && Array.prototype.forEach.call(a.target.querySelectorAll("img"), b);
    }function c(a) {
      k.splice(k.indexOf(a), 1);
    }function d(a) {
      g("Remove listeners from " + a.src), a.removeEventListener("load", f, !1), a.removeEventListener("error", h, !1), c(a);
    }function e(b, c, e) {
      d(b.target), N(c, e + ": " + b.target.src, a, a);
    }function f(a) {
      e(a, "imageLoad", "Image loaded");
    }function h(a) {
      e(a, "imageLoadFailed", "Image load failed");
    }function i(a) {
      N("mutationObserver", "mutationObserver: " + a[0].target + " " + a[0].type), a.forEach(b);
    }function j() {
      var a = document.querySelector("body"),
          b = { attributes: !0, attributeOldValue: !1, characterData: !0, characterDataOldValue: !1, childList: !0, subtree: !0 };return m = new l(i), g("Create body MutationObserver"), m.observe(a, b), m;
    }var k = [],
        l = window.MutationObserver || window.WebKitMutationObserver,
        m = j();return { disconnect: function disconnect() {
        "disconnect" in m && (g("Disconnect body MutationObserver"), m.disconnect(), k.forEach(d));
      } };
  }function F() {
    var a = 0 > ja;window.MutationObserver || window.WebKitMutationObserver ? a ? D() : Z = E() : (g("MutationObserver not supported in this browser!"), D());
  }function G(a, b) {
    function c(a) {
      var c = /^\d+(px)?$/i;if (c.test(a)) return parseInt(a, V);var d = b.style.left,
          e = b.runtimeStyle.left;return b.runtimeStyle.left = b.currentStyle.left, b.style.left = a || 0, a = b.style.pixelLeft, b.style.left = d, b.runtimeStyle.left = e, a;
    }var d = 0;return b = b || document.body, "defaultView" in document && "getComputedStyle" in document.defaultView ? (d = document.defaultView.getComputedStyle(b, null), d = null !== d ? d[a] : 0) : d = c(b.currentStyle[a]), parseInt(d, V);
  }function H(a) {
    a > xa / 2 && (xa = 2 * a, g("Event throttle increased to " + xa + "ms"));
  }function I(a, b) {
    for (var c = b.length, e = 0, f = 0, h = d(a), i = Ha(), j = 0; c > j; j++) {
      e = b[j].getBoundingClientRect()[a] + G("margin" + h, b[j]), e > f && (f = e);
    }return i = Ha() - i, g("Parsed " + c + " HTML elements"), g("Element position calculated in " + i + "ms"), H(i), f;
  }function J(a) {
    return [a.bodyOffset(), a.bodyScroll(), a.documentElementOffset(), a.documentElementScroll()];
  }function K(a, b) {
    function c() {
      return h("No tagged elements (" + b + ") found on page"), document.querySelectorAll("body *");
    }var d = document.querySelectorAll("[" + b + "]");return 0 === d.length && c(), I(a, d);
  }function L() {
    return document.querySelectorAll("body *");
  }function M(b, c, d, e) {
    function f() {
      da = m, ya = n, R(da, ya, b);
    }function h() {
      function b(a, b) {
        var c = Math.abs(a - b) <= ua;return !c;
      }return m = a !== d ? d : Ia[fa](), n = a !== e ? e : Ja[Aa](), b(da, m) || _ && b(ya, n);
    }function i() {
      return !(b in { init: 1, interval: 1, size: 1 });
    }function j() {
      return fa in pa || _ && Aa in pa;
    }function k() {
      g("No change in size detected");
    }function l() {
      i() && j() ? Q(c) : b in { interval: 1 } || k();
    }var m, n;h() || "init" === b ? (O(), f()) : l();
  }function N(a, b, c, d) {
    function e() {
      a in { reset: 1, resetPage: 1, init: 1 } || g("Trigger event: " + b);
    }function f() {
      return va && a in aa;
    }f() ? g("Trigger event cancelled: " + a) : (e(), "init" === a ? M(a, b, c, d) : Ka(a, b, c, d));
  }function O() {
    va || (va = !0, g("Trigger event lock on")), clearTimeout(wa), wa = setTimeout(function () {
      va = !1, g("Trigger event lock off"), g("--");
    }, ba);
  }function P(a) {
    da = Ia[fa](), ya = Ja[Aa](), R(da, ya, a);
  }function Q(a) {
    var b = fa;fa = ea, g("Reset trigger event: " + a), O(), P("reset"), fa = b;
  }function R(b, c, d, e, f) {
    function h() {
      a === f ? f = ta : g("Message targetOrigin: " + f);
    }function i() {
      var h = b + ":" + c,
          i = oa + ":" + h + ":" + d + (a !== e ? ":" + e : "");g("Sending message to host page (" + i + ")"), sa.postMessage(ma + i, f);
    }!0 === ra && (h(), i());
  }function S(a) {
    function c() {
      return ma === ("" + a.data).substr(0, na);
    }function d() {
      return a.data.split("]")[1].split(":")[0];
    }function e() {
      return a.data.substr(a.data.indexOf(":") + 1);
    }function f() {
      return !("undefined" != typeof module && module.exports) && "iFrameResize" in window;
    }function j() {
      return a.data.split(":")[2] in { "true": 1, "false": 1 };
    }function k() {
      var b = d();b in m ? m[b]() : f() || j() || h("Unexpected message (" + a.data + ")");
    }function l() {
      !1 === ca ? k() : j() ? m.init() : g('Ignored message of type "' + d() + '". Received before initialization.');
    }var m = { init: function init() {
        function c() {
          ha = a.data, sa = a.source, i(), ca = !1, setTimeout(function () {
            ga = !1;
          }, ba);
        }"interactive" === document.readyState || "complete" === document.readyState ? c() : (g("Waiting for page ready"), b(window, "readystatechange", m.initFromParent));
      }, reset: function reset() {
        ga ? g("Page reset ignored by init") : (g("Page size reset by host page"), P("resetPage"));
      }, resize: function resize() {
        N("resizeParent", "Parent window requested size check");
      }, moveToAnchor: function moveToAnchor() {
        ia.findTarget(e());
      }, inPageLink: function inPageLink() {
        this.moveToAnchor();
      }, pageInfo: function pageInfo() {
        var a = e();g("PageInfoFromParent called from parent: " + a), Ea(JSON.parse(a)), g(" --");
      }, message: function message() {
        var a = e();g("MessageCallback called from parent: " + a), Ca(JSON.parse(a)), g(" --");
      } };c() && l();
  }function T() {
    "loading" !== document.readyState && window.parent.postMessage("[iFrameResizerChild]Ready", "*");
  }if ("undefined" != typeof window) {
    var U = !0,
        V = 10,
        W = "",
        X = 0,
        Y = "",
        Z = null,
        $ = "",
        _ = !1,
        aa = { resize: 1, click: 1 },
        ba = 128,
        ca = !0,
        da = 1,
        ea = "bodyOffset",
        fa = ea,
        ga = !0,
        ha = "",
        ia = {},
        ja = 32,
        ka = null,
        la = !1,
        ma = "[iFrameSizer]",
        na = ma.length,
        oa = "",
        pa = { max: 1, min: 1, bodyScroll: 1, documentElementScroll: 1 },
        qa = "child",
        ra = !0,
        sa = window.parent,
        ta = "*",
        ua = 0,
        va = !1,
        wa = null,
        xa = 16,
        ya = 1,
        za = "scroll",
        Aa = za,
        Ba = window,
        Ca = function Ca() {
      h("MessageCallback function not defined");
    },
        Da = function Da() {},
        Ea = function Ea() {},
        Fa = { height: function height() {
        return h("Custom height calculation function not defined"), document.documentElement.offsetHeight;
      }, width: function width() {
        return h("Custom width calculation function not defined"), document.body.scrollWidth;
      } },
        Ga = {},
        Ha = Date.now || function () {
      return new Date().getTime();
    },
        Ia = { bodyOffset: function bodyOffset() {
        return document.body.offsetHeight + G("marginTop") + G("marginBottom");
      }, offset: function offset() {
        return Ia.bodyOffset();
      }, bodyScroll: function bodyScroll() {
        return document.body.scrollHeight;
      }, custom: function custom() {
        return Fa.height();
      }, documentElementOffset: function documentElementOffset() {
        return document.documentElement.offsetHeight;
      }, documentElementScroll: function documentElementScroll() {
        return document.documentElement.scrollHeight;
      }, max: function max() {
        return Math.max.apply(null, J(Ia));
      }, min: function min() {
        return Math.min.apply(null, J(Ia));
      }, grow: function grow() {
        return Ia.max();
      }, lowestElement: function lowestElement() {
        return Math.max(Ia.bodyOffset() || Ia.documentElementOffset(), I("bottom", L()));
      }, taggedElement: function taggedElement() {
        return K("bottom", "data-iframe-height");
      } },
        Ja = { bodyScroll: function bodyScroll() {
        return document.body.scrollWidth;
      }, bodyOffset: function bodyOffset() {
        return document.body.offsetWidth;
      }, custom: function custom() {
        return Fa.width();
      }, documentElementScroll: function documentElementScroll() {
        return document.documentElement.scrollWidth;
      }, documentElementOffset: function documentElementOffset() {
        return document.documentElement.offsetWidth;
      }, scroll: function scroll() {
        return Math.max(Ja.bodyScroll(), Ja.documentElementScroll());
      }, max: function max() {
        return Math.max.apply(null, J(Ja));
      }, min: function min() {
        return Math.min.apply(null, J(Ja));
      }, rightMostElement: function rightMostElement() {
        return I("right", L());
      }, taggedElement: function taggedElement() {
        return K("right", "data-iframe-width");
      } },
        Ka = e(M);b(window, "message", S), T();
  }
}();


},{}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/liveblog.js":[function(require,module,exports){
'use strict';

// Prerender functions

var theme = require('./theme');
document.addEventListener('DOMContentLoaded', function () {
  theme.init();
});
if (/complete|loaded|interactive/.test(document.readyState)) {
  theme.init();
}

module.exports = {};

},{"./theme":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/index.js"}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/ads-manager.js":[function(require,module,exports){
'use strict';

require('./templates');
var nunjucks = require('nunjucks/browser/nunjucks-slim');
var helpers = require('./helpers');
var events = require('./events');

var config = window.LB;
var apiHost = config.api_host.replace(/\/$/, '');
var blogId = config.blog._id;
var output = config.output || { settings: {} };
var outputId = output._id;
var endpoint = apiHost + '/api/advertisements/' + blogId + '/' + outputId + '/';

// ways to order the ads
var ASC = 1;
var DESC = -1;

// NOTE: temporal place to store advertisements, perhaps put them in localstorage
var advertisements = [];

var nunjucksEnv = new nunjucks.Environment();
nunjucksEnv.addFilter('date', helpers.convertTimestamp);
nunjucks.env = nunjucksEnv;

// TODO: Convert the adsManager into a completely theme agnostic module
// the idea is to receive the configuration from outside and handle ads according
// to theme configuration. Currently the config below is tight only to `Liveblog 3 SEO Theme`
var adsSettings = {
    postSelector: "section.lb-posts.normal > article.lb-post",
    adsSelector: "article.lb-post.advertisement",
    frequency: output.settings.frequency
};

function resetAds() {
    var ads = document.querySelectorAll(adsSettings.adsSelector);
    ads.forEach(function (e) {
        return e.parentNode.removeChild(e);
    });
}

function renderAds() {
    var articles = document.querySelectorAll(adsSettings.postSelector);
    var adsCount = advertisements.length;

    if (adsCount === 0) return;

    var postCount = articles.length;
    var frequency = adsSettings.frequency;
    var order = output.settings.order;

    var adsList = advertisements.slice();
    //check if we need to show ads in descending order
    if (order === DESC) adsList = adsList.reverse();

    var looper = helpers.range(0, postCount, frequency);
    looper.forEach(function (i) {
        var index = Math.ceil(i / frequency) % adsCount;
        var refNode = articles[i];
        var parentNode = refNode.parentNode;

        var rendered = nunjucks.env.render('template-ad-entry.html', {
            item: adsList[index],
            settings: config.settings,
            assets_root: window.LB.assets_root
        });

        var fragment = helpers.fragmentFromString(rendered.trim());
        parentNode.insertBefore(fragment.childNodes[0], refNode);
    });
}

module.exports = {
    init: function init() {
        // if we are not in an output channel
        if (!outputId) return;

        helpers.getJSON(endpoint).then(function (data) {
            advertisements = data;
        });

        // adding ability to refresh ads from anywhere via event handling
        var evtName = events.updateAds.type;
        document.addEventListener(evtName, function (e) {
            refreshAds();
        }, false);

        // render first loop of ads
        setTimeout(function () {
            renderAds();
        }, 1000);
    },

    refreshAds: function refreshAds() {
        // if we are not in an output channel
        if (!outputId) return;

        // @TODO: perhaps pull new ads?
        resetAds();
        renderAds();
    }
};

},{"./events":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/events.js","./helpers":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/helpers.js","./templates":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/templates.js","nunjucks/browser/nunjucks-slim":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/nunjucks/browser/nunjucks-slim.js"}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/events.js":[function(require,module,exports){
'use strict';

module.exports = {
    // simple event that will be triggered
    updateAds: new Event('updateAds')
};

},{}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/handlers.js":[function(require,module,exports){
/**
 * @author ps / @___paul
 */

'use strict';

var view = require('./view'),
    viewmodel = require('./viewmodel'),
    adsManager = require('./ads-manager'),
    helpers = require('./helpers');

/**
 * Contains a mapping of element data-selectors and click handlers
 * buttons.attach {function} - registers handlers found in handlers object
 */

var sendComment = function sendComment(e) {
  e.preventDefault();

  var name = document.querySelector('#comment-name').value;
  var comment = document.querySelector('#comment-content').value;

  view.clearCommentFormErrors();

  return viewmodel.sendComment(name, comment).then(view.clearCommentDialog).then(view.toggleCommentDialog).then(function () {
    return document.querySelector('form.comment').removeEventListener('submit', sendComment);
  }).then(view.showSuccessCommentMsg).catch(view.displayCommentFormErrors);
};

var showPendings = function showPendings(e) {
  var pendings = document.querySelectorAll('[data-post-id].mod--displaynone');
  pendings.forEach(function (pending) {
    pending.classList.toggle('mod--displaynone', false);
  });
  view.checkPending();
  view.attachSlideshow();
};

var buttons = {
  handlers: {
    "[data-load-more]": function dataLoadMore() {
      viewmodel.loadPostsPage().then(view.renderPosts).then(view.displayNewPosts).then(view.adsManager.refreshAds).then(view.updateTimestamps).catch(catchError);
    },

    "[data-js-sort_dropdown_button]": function dataJsSort_dropdown_button() {
      view.toggleSortDropdown();
    },

    "[data-js-orderby_ascending]": function dataJsOrderby_ascending() {
      loadSort('ascending');
    },

    "[data-js-orderby_descending]": function dataJsOrderby_descending() {
      loadSort('descending');
    },

    "[data-js-orderby_editorial]": function dataJsOrderby_editorial() {
      loadSort('editorial');
    },

    "[data-js-show-comment-dialog]": function dataJsShowCommentDialog() {
      var isVisible = view.toggleCommentDialog();
      var commentForm = document.querySelector('form.comment');

      if (isVisible) {
        commentForm.addEventListener('submit', sendComment);
      } else {
        commentForm.removeEventListener('submit', sendComment);
      }
    },

    '[data-js-close-comment-dialog]': function dataJsCloseCommentDialog(e) {
      e.preventDefault();
      view.toggleCommentDialog();
    },

    '[data-js-show-highlighted]': function dataJsShowHighlighted() {
      var highlightButton = document.querySelector('.header-bar__highlight');

      highlightButton.classList.toggle('header-bar__highlight--active');
      LB.settings.onlyHighlighted = !LB.settings.onlyHighlighted;
      return viewmodel.loadPosts().then(view.renderTimeline).then(view.displayNewPosts).catch(catchError);
    },
    '[data-one-new-update]': showPendings,
    '[data-new-updates]': showPendings
  },

  attach: function attach() {
    Object.keys(buttons.handlers).forEach(function (handler) {
      var el = helpers.getElems(handler)[0];

      if (!el) {
        return false;
      }

      el.addEventListener('click', buttons.handlers[handler], false);
    });

    view.attachSlideshow();
    view.attachPermalink();
    view.attachShareBox();
    if (view.permalink._changedSort) {
      loadSort(LB.settings.postOrder).then(checkForScroll);
    } else {
      checkForScroll();
    }
  }
};

function loadSort(sortBy) {
  // initialy on server sort params are set as newest_first, oldest_first
  // on client we dont use this, so this is temp fix
  switch (sortBy) {
    case 'oldest_first':
    case 'ascending':
      sortBy = 'ascending';
      break;
    case 'newest_first':
    case 'descending':
      sortBy = 'descending';
      break;
    default:
      sortBy = 'editorial';
  }

  return viewmodel.loadPosts({ sort: sortBy, notDeleted: true }).then(view.renderTimeline).then(view.displayNewPosts).then(view.toggleSortBtn(sortBy)).then(view.adsManager.refreshAds).catch(catchError);
}

function checkForScroll() {
  viewmodel.getAllPosts().then(function (posts) {
    if (view.checkPermalink(posts)) {
      loadForScroll();
    }
  });
}

function loadForScroll() {
  if (!view.permalinkScroll()) {
    viewmodel.loadPostsPage().then(view.renderPosts).then(view.displayNewPosts).then(loadForScroll).catch(catchError);
  }
}

function catchError(err) {
  console.error("Handler error: ", err);
}

var events = {
  attach: function attach() {} // todo
};

module.exports = {
  buttons: buttons,
  events: events
};

},{"./ads-manager":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/ads-manager.js","./helpers":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/helpers.js","./view":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/view.js","./viewmodel":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/viewmodel.js"}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/helpers.js":[function(require,module,exports){
/**
 * @author ps / @___paul
 */

'use strict';

var moment = require('moment'),
    settings = window.LB.settings;

require("moment/min/locales.min");
moment.locale(settings.language);
function convertTimestamp(timestamp) {
  if (!settings.datetimeFormat || settings.datetimeFormat === 'ago') {
    return moment(timestamp).fromNow();
  }
  return moment(timestamp).format(settings.datetimeFormat);
}

/**
 * Wrap element selector api
 * @param {string} query - a jQuery syntax DOM query (with dots)
 */
function getElems(query) {
  var isDataAttr = query.indexOf("data-") > -1;
  return isDataAttr ? document.querySelectorAll(query) : document.getElementsByClassName(query);
}

/**
 * jQuery's $.getJSON in a nutshell
 * @param {string} url - a request URL
 */
function getJSON(url) {
  return new Promise(function (resolve, reject) {
    var xhr = new XMLHttpRequest();

    xhr.open('GET', url);
    xhr.onload = function () {
      if (xhr.status === 200) {
        resolve(JSON.parse(xhr.responseText));
      } else {
        reject(xhr.responseText);
      }
    };

    xhr.send();
  });
}

function post(url, data) {
  return new Promise(function (resolve, reject) {
    var xhr = new XMLHttpRequest();

    xhr.open('POST', url);
    xhr.setRequestHeader("Content-type", "application/json");
    xhr.onload = function () {
      if (xhr.status === 201) {
        resolve(JSON.parse(xhr.responseText));
      } else {
        reject(xhr.responseText);
      }
    };

    xhr.send(JSON.stringify(data));
  });
}

/**
 * Simple function to convert plain text to html
 * @param {string} strHTML - plain html to be converted to DOM Nodes
 */
function fragmentFromString(strHTML) {
  return document.createRange().createContextualFragment(strHTML.trim());
}

/**
 * Simple `range` function that behaves like python's `range`
 * see https://docs.python.org/2/library/functions.html#range
 *
 * Create arrays containing arithmetic progressions
 * Thanks StackOverflow -> https://stackoverflow.com/a/8273091/240364
 */
function range(start, stop, step) {
  if (typeof stop === 'undefined') {
    // one param defined
    stop = start;
    start = 0;
  }

  if (typeof step === 'undefined') step = 1;

  if (step > 0 && start >= stop || step < 0 && start <= stop) return [];

  var result = [];
  for (var i = start; step > 0 ? i < stop : i > stop; i += step) {
    result.push(i);
  }

  return result;
};

module.exports = {
  getElems: getElems,
  getJSON: getJSON,
  post: post,
  convertTimestamp: convertTimestamp,
  fragmentFromString: fragmentFromString,
  range: range
};

},{"moment":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/moment/moment.js","moment/min/locales.min":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/moment/min/locales.min.js"}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/index.js":[function(require,module,exports){
/**
 * @author ps / @___paul
 */

'use strict';

var handlers = require('./handlers'),
    viewmodel = require('./viewmodel'),
    view = require('./view'),
    pageview = require('./pageview'),
    localAnalytics = require('./local-analytics'),
    adsManager = require('./ads-manager');

require("iframe-resizer/js/iframeResizer.contentWindow.min.js");
module.exports = {
  /**
   * On document loaded, do the following:
   */
  init: function init() {
    handlers.buttons.attach(); // Register Buttons Handlers
    handlers.events.attach(); // Register Event, Message Handlers
    viewmodel.init();
    localAnalytics.hit();
    pageview.init();

    adsManager.init();

    view.updateTimestamps();
    setInterval(function () {
      view.updateTimestamps(); // Convert ISO dates to timeago
    }, 1000);
  }
};

},{"./ads-manager":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/ads-manager.js","./handlers":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/handlers.js","./local-analytics":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/local-analytics.js","./pageview":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/pageview.js","./view":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/view.js","./viewmodel":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/viewmodel.js","iframe-resizer/js/iframeResizer.contentWindow.min.js":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/iframe-resizer/js/iframeResizer.contentWindow.min.js"}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/local-analytics.js":[function(require,module,exports){
'use strict';

var apiHost = window.hasOwnProperty('LB') ? window.LB.api_host.replace(/\/$/, '') : '';
var contextUrl = document.referrer;
var blogId = window.hasOwnProperty('LB') ? window.LB.blog._id : '';

apiHost += '/api/analytics/hit';

var createCookie = function createCookie(name, value, days) {
  var expires = '',
      date = new Date();

  if (days) {
    date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
    expires = '; expires=' + date.toUTCString();
  }
  document.cookie = name + '=' + value + expires + '; path=/';
};

var readCookie = function readCookie(name) {
  var nameEQ = name + '=';
  var ca = document.cookie.split(';');

  for (var i = 0; i < ca.length; i++) {
    var c = ca[i];

    while (c.charAt(0) === ' ') {
      c = c.substring(1, c.length);
    }

    if (c.indexOf(nameEQ) === 0) {
      return c.substring(nameEQ.length, c.length);
    }
  }
  return null;
};

var _hit = function _hit() {
  var xmlhttp = new XMLHttpRequest();
  var jsonData = JSON.stringify({
    context_url: contextUrl,
    blog_id: blogId
  });

  xmlhttp.open('POST', apiHost);
  xmlhttp.setRequestHeader('Content-Type', 'application/json');

  xmlhttp.onload = function () {
    if (xmlhttp.status === 200) {
      createCookie('hit', jsonData, 2);
    }
  };

  xmlhttp.send(jsonData);
};

module.exports = { hit: function hit() {
    if (!readCookie('hit')) {
      _hit();
    }
  } };

},{}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/pageview.js":[function(require,module,exports){
'use strict';

/*
  Send pageview signal to analytics providers
  IVW and Google Analytics. Not to be tied to angular app.
*/

var sendPageview = {
  _foundProviders: [], // Cache after first lookup

  _sendIVW: function _sendIVW() {
    if (!window.iom) {
      return;
    }

    var iam_data = {
      "st": window._iframeDataset.szmSt, // ID
      "cp": window._iframeDataset.szmCp, // Code
      "co": window._iframeDataset.szmCo, // Comment
      "sv": "ke" // Disable Q&A invite
    };

    window.iom.c(iam_data, 1); // where's the .h? ahahaha
  },

  _sendGA: function _sendGA() {
    if (window.ga.length > 0) {
      window.ga('create', window._iframeDataset.gaProperty, 'auto');
      window.ga('set', 'anonymizeIp', true);
    }

    if (window.ga.loaded) {
      window.ga('send', {
        hitType: 'pageview',
        location: window.document.referrer, // set to parent url
        hitCallback: function hitCallback() {}
      });
    }
  },

  _insertScript: function _insertScript(src, cb) {
    var script = document.createElement('script');script.src = src;
    document.getElementsByTagName("body")[0].appendChild(script);
    script.addEventListener("load", cb);
  },

  _getProviders: function _getProviders() {
    var foundProviders = [];

    if (this._foundProviders.length) {
      return this._foundProviders; // return early
    }

    for (var p in this._providers) {
      var provider = this._providers[p];
      var keysfound = provider.requiredData.reduce(function (prev, curr) {
        return window._iframeDataset.hasOwnProperty(curr);
      }, true); // needs initial value for one element

      if (keysfound === true) {
        // all required attrs found
        if (!provider.object) {
          this._insertScript(provider.scriptURL, provider.send); // not yet loaded
        } else {
          foundProviders.push(provider.send); // list of _send funcs
        }
      }
    }

    parent._foundProviders = foundProviders; // cache after initial
    return foundProviders;
  },

  send: function send() {
    // public, invoke w/o params
    if (!window.hasOwnProperty('_iframeDataset')) {
      return; // return early
    }

    var providers = this._getProviders(); // is cached on first call

    for (var i = providers.length - 1; i >= 0; i--) {
      providers[i](); // _send function calls
    }
  },

  receiveMessage: function receiveMessage(e) {
    if (e.data.type === 'analytics') {
      var payload = JSON.parse(e.data.payload);

      window._iframeDataset = payload; // store dataset from parentNode
    }
  },

  init: function init() {
    if (window.LB.settings.gaCode === '') {
      window.addEventListener('message', this.receiveMessage, false);
      window.addEventListener('sendpageview', this.send.bind(this), false);
    } else {
      window._iframeDataset = { gaProperty: window.LB.settings.gaCode };
      this.send = this.send.bind(this);
      this.send();
    }
  }
};

sendPageview._providers = {
  ivw: {
    send: sendPageview._sendIVW,
    requiredData: ['szmSt', 'szmCp', 'szmCo'],
    scriptURL: 'https://script.ioam.de/iam.js',
    object: window.hasOwnProperty('iom') ? window.iom : null
  },

  ga: {
    send: sendPageview._sendGA,
    requiredData: ['gaProperty'],
    scriptURL: 'https://www.google-analytics.com/analytics.js',
    object: window.hasOwnProperty('ga') ? window.ga : null
  }
};

module.exports = sendPageview;

},{}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/permalink.js":[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Permalink = function () {
  function Permalink() {
    _classCallCheck(this, Permalink);

    this.escapeRegExp = function (string) {
      return string.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, '\\$1');
    };

    this.PARAM_NAME = 'liveblog._id', // the parameter name for permalink.  
    this.regexHash = new RegExp(this.escapeRegExp(this.PARAM_NAME) + '=([^&#]*)');

    if (document.parent) {
      // use document parent if avalible, see iframe cors limitation.
      try {
        this.href = document.location.href;
      } catch (e) {
        // if not use the referrer of the iframe.
        this.href = document.referrer;
      }
    } else {
      this.href = document.location.href; // use this option if it is access directly not via iframe.
    }

    var matches = this.href.match(this.regexHash);

    if (matches) {
      var arr = decodeURIComponent(matches[1]).split('->');
      this._id = arr[0];
      if (LB.settings.postOrder !== arr[1]) {
        LB.settings.postOrder = arr[1];
        this._changedSort = true;
      }
    }
  }

  _createClass(Permalink, [{
    key: 'getUrl',
    value: function getUrl(id) {
      var permalink = false,
          DELIMITER = LB.settings.permalinkDelimiter || '?',
          // delimiter can be `?` or `#`.
      newHash = this.PARAM_NAME + '=' + id + '->' + LB.settings.postOrder;

      if (this.href.indexOf(DELIMITER) === -1) {
        permalink = this.href + DELIMITER + newHash;
      } else if (this.href.indexOf(this.PARAM_NAME + '=') !== -1) {
        permalink = this.href.replace(this.regexHash, newHash);
      } else {
        permalink = this.href + '&' + newHash;
      }

      return permalink;
    }
  }]);

  return Permalink;
}();

module.exports = Permalink;

},{}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/slideshow.js":[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var lory = require('lory.js').lory;

var Slideshow = function () {
  function Slideshow() {
    _classCallCheck(this, Slideshow);
  }

  _createClass(Slideshow, [{
    key: 'init',
    value: function init() {
      Array.prototype.slice.call(document.querySelectorAll('.lb-slideshow')).forEach(function (element, index) {
        lory(element, {
          classNameFrame: 'lb-slideshow_frame',
          classNameSlideContainer: 'lb-slideshow_slides',
          classNamePrevCtrl: 'lb-slideshow_prev',
          classNameNextCtrl: 'lb-slideshow_next',
          rewind: true
        });
      });
    }
  }]);

  return Slideshow;
}();

module.exports = Slideshow;

},{"lory.js":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/lory.js/dist/lory.js"}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/templates.js":[function(require,module,exports){
/**
 * @author ps / @___paul
 */

'use strict';

var nunjucks = require("nunjucks/browser/nunjucks-slim");
var settings = window.LB.settings;

var defaultTemplates = {
  postActions: require("../../templates/template-post-actions.html"),
  author: require("../../templates/template-author.html"),
  post: require("../../templates/template-post.html"),
  adentry: require("../../templates/template-ad-entry.html"),
  timeline: require("../../templates/template-timeline.html"),
  postComment: require("../../templates/template-post-comment.html"),
  itemImage: require("../../templates/template-item-image.html"),
  itemGalleryImage: require("../../templates/template-item-galleryImage.html"),
  itemEmbed: require("../../templates/template-item-embed.html"),
  itemQuote: require("../../templates/template-item-quote.html"),
  itemComment: require("../../templates/template-item-comment.html")
};

function getCustomTemplates() {
  var customTemplates = settings.customTemplates,
      mergedTemplates = defaultTemplates;

  var _loop = function _loop(template) {
    var customTemplateName = customTemplates[template];
    defaultTemplates[template] = function (ctx, cb) {
      nunjucks.render(customTemplateName, ctx, cb);
    };
  };

  for (var template in customTemplates) {
    _loop(template);
  }

  return mergedTemplates;
}

module.exports = settings.customTemplates ? getCustomTemplates() : defaultTemplates;

},{"../../templates/template-ad-entry.html":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/templates/template-ad-entry.html","../../templates/template-author.html":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/templates/template-author.html","../../templates/template-item-comment.html":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/templates/template-item-comment.html","../../templates/template-item-embed.html":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/templates/template-item-embed.html","../../templates/template-item-galleryImage.html":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/templates/template-item-galleryImage.html","../../templates/template-item-image.html":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/templates/template-item-image.html","../../templates/template-item-quote.html":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/templates/template-item-quote.html","../../templates/template-post-actions.html":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/templates/template-post-actions.html","../../templates/template-post-comment.html":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/templates/template-post-comment.html","../../templates/template-post.html":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/templates/template-post.html","../../templates/template-timeline.html":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/templates/template-timeline.html","nunjucks/browser/nunjucks-slim":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/nunjucks/browser/nunjucks-slim.js"}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/view.js":[function(require,module,exports){
/**
 * @author ps / @___paul
 */

'use strict';

require('./templates');
var helpers = require('./helpers');
var adsManager = require('./ads-manager');
var Slideshow = require('./slideshow');
var Permalink = require('./permalink');
var nunjucks = require('nunjucks/browser/nunjucks-slim');

var nunjucksEnv = new nunjucks.Environment();
nunjucksEnv.addFilter('date', helpers.convertTimestamp);
nunjucks.env = nunjucksEnv;

var permalink = new Permalink();
var els = {
  timelineSticky: document.querySelector("[data-timeline-sticky]"),
  timelineNormal: document.querySelector("[data-timeline-normal]"),
  emptyMessage: document.querySelector("[data-empty-message]"),
  loadMore: document.querySelector("[data-load-more]")
};

/**
 * Replace the current timeline unconditionally.
 * @typedef {Object} api_response – contains request opts.
 * @property {Object} requestOpts - API request params.
 */
function renderTimeline(api_response) {
  var renderedPosts = [];
  // for translation macro purposes
  var optionsObj = { i18n: window.LB.i18n };

  api_response._items.forEach(function (post) {
    renderedPosts.push(nunjucks.env.render('template-post.html', {
      item: post,
      options: optionsObj,
      settings: window.LB.settings,
      assets_root: window.LB.assets_root
    }));
  });

  els.emptyMessage.classList.toggle('mod--displaynone', Boolean(renderedPosts.length));
  els.timelineNormal.innerHTML = renderedPosts.length ? renderedPosts.join('') : '';

  updateTimestamps();
  loadEmbeds();
  attachSlideshow();
  attachPermalink();
  attachShareBox();
}

/**
 * Render posts currently in pipeline to template.
 * To reduce DOM calls/paints we hand off rendered HTML in bulk.
 * @typedef {Object} api_response – contains request opts.
 * @property {Object} requestOpts - API request params.
 */
function renderPosts(api_response) {
  var renderedPosts = [] // temporary store
  ,
      posts = api_response._items;

  for (var i = 0; i < posts.length; i++) {
    var post = posts[i];

    if (!api_response.requestOpts.page && post.deleted) {
      deletePost(post._id);
      continue; // early
    }
    var elem = document.querySelector('[data-post-id="' + post._id + '"]');
    var displaynone = api_response.requestOpts.fromDate && !window.LB.settings.autoApplyUpdates && !elem;
    // for translation macro purposes
    var optionsObj = { i18n: window.LB.i18n };

    var rendered = nunjucks.env.render('template-post.html', {
      item: post,
      settings: window.LB.settings,
      options: optionsObj,
      assets_root: window.LB.assets_root,
      displaynone: displaynone
    });

    if (updatePost(post, rendered)) {
      continue;
    }
    renderedPosts.push({ html: rendered, data: post }); // create operation
  }

  if (!renderedPosts.length) {
    return; // early
  }

  addPosts(renderedPosts, api_response.requestOpts.fromDate ? 'afterbegin' : 'beforeend');

  loadEmbeds();

  return api_response;
}

/**
 * Add post nodes to DOM, do so regardless of settings.autoApplyUpdates,
 * but rather set them to NOT BE DISPLAYED if auto-apply is false.
 * This way we don't have to mess with two stacks of posts.
 * @param {collection} posts - an array of object html, data for posts.
 * @param {string} position - afterbegin or beforeend
 */
function addPosts(posts, position) {

  var timelineNormal = posts.reduce(function (html, post) {
    return post.data.sticky ? '' : html.concat(post.html);
  }, '');
  var timelineSticky = posts.reduce(function (html, post) {
    return post.data.sticky ? html.concat(post.html) : '';
  }, '');

  els.timelineNormal.insertAdjacentHTML(position, timelineNormal);
  els.timelineSticky.insertAdjacentHTML(position, timelineSticky);
  els.timelineSticky.classList.remove('sticky--empty');

  checkPending();
  attachSlideshow();
  attachPermalink();
  attachShareBox();
}

function checkPending() {
  var pending = document.querySelectorAll("[data-post-id].mod--displaynone"),
      one = document.querySelector('[data-one-new-update]').classList,
      updates = document.querySelector('[data-new-updates]').classList;
  if (pending.length === 1) {
    one.toggle('mod--displaynone', false);
    updates.toggle('mod--displaynone', true);
  } else if (pending.length > 1) {
    one.toggle('mod--displaynone', true);
    updates.toggle('mod--displaynone', false);
  } else {
    one.toggle('mod--displaynone', true);
    updates.toggle('mod--displaynone', true);
  }
}
/**
 * Delete post <article> DOM node by data attribute.
 * @param {string} - a post URN
 */
function deletePost(id) {
  var elem = document.querySelector('[data-post-id="' + id + '"]');
  if (elem) {
    elem.remove();
  }
}

/**
 * Update post <article> DOM node by data attribute.
 * @param {string} - a post URN
 * @param {string} - a post rendered HTML
 */
function updatePost(post, rendered) {
  var elem = document.querySelector('[data-post-id="' + post._id + '"]');
  if (!elem) {
    return false;
  }

  // has change the sticky status so we should delete it and add it again.
  if (post.sticky !== (elem.getAttribute('data-post-sticky').toLowerCase() === 'true')) {
    deletePost(post._id);
    return false;
  }

  elem.outerHTML = rendered;
  attachSlideshow();
  attachPermalink();
  attachShareBox();
  return true;
}

/**
 * Show new posts loaded via XHR
 */
function displayNewPosts() {
  var newPosts = helpers.getElems("lb-post-new");
  for (var i = newPosts.length - 1; i >= 0; i--) {
    newPosts[i].classList.remove("lb-post-new");
  }
}

/**
 * Trigger embed provider unpacking
 */
function loadEmbeds() {
  if (window.instgrm) {
    instgrm.Embeds.process();
  }

  if (window.twttr) {
    twttr.widgets.load();
  }

  if (window.FB) {
    window.FB.XFBML.parse();
  }

  attachSlideshow();
}

function clearCommentDialog() {
  document.querySelector('#comment-name').value = '';
  document.querySelector('#comment-content').value = '';
}

function toggleCommentDialog() {
  var commentForm = document.querySelector('form.comment');
  var isHidden = false;

  document.querySelector('.header-bar__comment').classList.toggle('header-bar__comment--active');

  if (commentForm) {
    isHidden = commentForm.classList.toggle('hide');
  }

  return !isHidden;
}

/**
 * Set sorting order button of class @name to active.
 * @param {string} name - liveblog API response JSON.
 */
function toggleSortBtn(name) {
  var sortingBtns = document.querySelectorAll('.sorting-bar__order');

  sortingBtns.forEach(function (el) {
    var shouldBeActive = el.dataset.hasOwnProperty("jsOrderby_" + name);

    el.classList.toggle('sorting-bar__order--active', shouldBeActive);
    if (shouldBeActive) {
      document.querySelector('.sorting-bar__dropdownBtn').innerHTML = el.innerHTML;
    }
  });
  toggleSortDropdown(false);
}

/**
 * Toggles sorting dropdown visibility
 * @param {Boolean} open
 */
function toggleSortDropdown(open) {
  if (open !== undefined) {
    document.querySelector('.sorting-bar__dropdownContent').classList.toggle('sorting-bar__dropdownContent--active', open);
  } else {
    document.querySelector('.sorting-bar__dropdownContent').classList.toggle('sorting-bar__dropdownContent--active');
  }
}

/**
 * Conditionally hide load-more button.
 * @param {bool} hide
 */
function hideLoadMore(hide) {
  if (els.loadMore) {
    els.loadMore.classList.toggle('mod--hide', hide);
  }
}

/**
 * Delete post <article> DOM node by data attribute.
 * @param {string} - a post URN
 */
function updateTimestamps() {
  var dateElems = helpers.getElems("relativeDate");
  for (var i = 0; i < dateElems.length; i++) {
    var elem = dateElems[i],
        timestamp = elem.dataset.jsTimestamp;
    elem.classList.remove('mod--displaynone');
    elem.textContent = helpers.convertTimestamp(timestamp);
  }
  return null;
}

function showSuccessCommentMsg() {
  var commentSent = document.querySelector('div.comment-sent');

  commentSent.classList.toggle('hide');

  setTimeout(function () {
    commentSent.classList.toggle('hide');
  }, 5000);
}

function clearCommentFormErrors() {
  var errorsMsgs = document.querySelectorAll('p.err-msg');

  if (errorsMsgs) {
    errorsMsgs.forEach(function (errorsMsg) {
      return errorsMsg.remove();
    });
  }
}

function displayCommentFormErrors(errors) {
  if (Array.isArray(errors)) {
    errors.forEach(function (error) {
      var element = document.querySelector(error.id);

      if (element) {
        element.insertAdjacentHTML('afterend', '<p class="err-msg">' + error.msg + '</p>');
      }
    });
  }
}

function attachSlideshow() {
  var slideshow = new Slideshow();
  slideshow.init();
}

function attachPermalink() {
  var permalinks = document.querySelectorAll('.lb-post-permalink a');

  permalinks.forEach(function (link) {
    link.href = permalink.getUrl(link.id);
  });
}

function attachShareBox() {
  var shareLinks = document.querySelectorAll('.lb-post-shareBox__item');

  shareLinks.forEach(function (link) {
    link.href = link.getAttribute('data-link-base') + permalink.getUrl(link.getAttribute('data-link-id'));
  });
}

function checkPermalink(posts) {
  var found = false;

  if (permalink._id) {
    posts._items.forEach(function (post) {
      if (permalink._id === post._id) {
        found = true;
      }
    });
  }

  return found;
}

function permalinkScroll() {
  var scrollElem = document.querySelector('[data-post-id="' + permalink._id + '"]');

  if (scrollElem) {
    scrollElem.classList.add('lb-post-permalink-selected');
    scrollElem.scrollIntoView();
    window.onload = function () {
      scrollElem.scrollIntoView();
    };
    updateTimestamps();
    return true;
  }

  return false;
}

module.exports = {
  displayNewPosts: displayNewPosts,
  renderTimeline: renderTimeline,
  renderPosts: renderPosts,
  updateTimestamps: updateTimestamps,
  hideLoadMore: hideLoadMore,
  toggleSortBtn: toggleSortBtn,
  toggleSortDropdown: toggleSortDropdown,
  toggleCommentDialog: toggleCommentDialog,
  showSuccessCommentMsg: showSuccessCommentMsg,
  displayCommentFormErrors: displayCommentFormErrors,
  clearCommentFormErrors: clearCommentFormErrors,
  attachSlideshow: attachSlideshow,
  attachPermalink: attachPermalink,
  checkPermalink: checkPermalink,
  permalinkScroll: permalinkScroll,
  attachShareBox: attachShareBox,
  permalink: permalink,
  clearCommentDialog: clearCommentDialog,
  checkPending: checkPending,
  adsManager: adsManager
};

},{"./ads-manager":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/ads-manager.js","./helpers":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/helpers.js","./permalink":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/permalink.js","./slideshow":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/slideshow.js","./templates":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/templates.js","nunjucks/browser/nunjucks-slim":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/nunjucks/browser/nunjucks-slim.js"}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/viewmodel.js":[function(require,module,exports){
/**
 * @author ps / @___paul
 */

'use strict';

var helpers = require('./helpers'),
    view = require('./view');

var apiHost = LB.api_host.match(/\/$/i) ? LB.api_host : LB.api_host + '/';
var commentItemEndpoint = apiHost + 'api/client_items';
var commentPostEndpoint = apiHost + 'api/client_comments';

var endpoint = apiHost + "api/client_blogs/" + LB.blog._id + "/posts",
    settings = LB.settings,
    vm = {},
    latestUpdate;

// Check if last_created_post and last_updated_post are there.
// and use them properly
if (LB.blog.last_created_post && LB.blog.last_created_post._updated && LB.blog.last_updated_post && LB.blog.last_updated_post._updated) {
  latestUpdate = new Date(Math.max(new Date(LB.blog.last_created_post._updated), new Date(LB.blog.last_updated_post._updated))).toISOString();
} else if (LB.blog.last_created_post && LB.blog.last_created_post._updated) {
  latestUpdate = new Date(LB.blog.last_created_post._updated).toISOString();
} else {
  latestUpdate = new Date().toISOString();
}

/**
 * Get initial or reset viewmodel.
 * @returns {object} empty viewmodel store.
 */
function getEmptyVm(items) {
  return {
    _items: new Array(items) || 0,
    currentPage: 1,
    totalPosts: 0
  };
}

vm.sendComment = function (name, comment) {
  var errors = [];

  if (!name) {
    errors.push({ id: '#comment-name', msg: 'Missing name' });
  }

  if (!comment) {
    errors.push({ id: '#comment-content', msg: 'Missing content' });
  }

  if (errors.length > 0) {
    return new Promise(function (resolve, reject) {
      return reject(errors);
    });
  }

  return helpers.post(commentItemEndpoint, {
    item_type: "comment",
    client_blog: LB.blog._id,
    commenter: name,
    text: comment
  }).then(function (item) {
    return helpers.post(commentPostEndpoint, {
      post_status: "comment",
      client_blog: LB.blog._id,
      groups: [{
        id: "root",
        refs: [{ idRef: "main" }],
        role: "grpRole:NEP"
      }, {
        id: "main",
        refs: [{ residRef: item._id }],
        role: "grpRole:Main" }]
    });
  });
  //.catch((err) => {
  //  console.error(err);
  //});
};

/**
 * Private API request method
 * @param {object} opts - query builder options.
 * @param {number} opts.page - desired page/subset of posts, leave empty for polling.
 * @param {number} opts.fromDate - needed for polling.
 * @returns {object} Liveblog 3 API response
 */
vm.getPosts = function (opts) {
  var self = this;

  var dbQuery = self.getQuery({
    sort: opts.sort || self.settings.postOrder,
    highlightsOnly: self.settings.onlyHighlighted || false,
    notDeleted: opts.notDeleted,
    fromDate: opts.fromDate ? opts.fromDate : false,
    sticky: opts.sticky
  });

  var page = opts.fromDate ? '' : '&page=' + (opts.page ? opts.page : '1');
  var qs = '?max_results=' + settings.postsPerPage + page + '&source=',
      fullPath = endpoint + qs + dbQuery;

  return helpers.getJSON(fullPath).then(function (posts) {
    posts.requestOpts = opts;
    self.updateViewModel(posts);
    return posts;
  }).catch(function (err) {
    console.error(err);
  });
};

/**
 * Private API request method
 * @returns {object} Liveblog 3 API response
 */
vm.getAllPosts = function () {
  var self = this;

  var dbQuery = self.getQuery({});

  var qs = "?source=",
      fullPath = endpoint + qs + dbQuery;

  return helpers.getJSON(fullPath);
};

/**
 * Get next page of posts from API.
 * @param {object} opts - query builder options.
 * @returns {promise} resolves to posts array.
 */
vm.loadPostsPage = function (opts) {
  opts = opts || {};
  opts.notDeleted = true;
  opts.page = ++this.vm.currentPage;
  opts.sort = this.settings.postOrder;
  return this.getPosts(opts);
};

/**
 * Poll API for new posts.
 * @param {object} opts - query builder options.
 * @returns {promise} resolves to posts array.
 */
vm.loadPosts = function (opts) {
  opts = opts || {};
  //opts.fromDate = this.vm.latestUpdate || new Date().toISOString();
  return this.getPosts(opts);
};

/**
 * Add items in api response & latest update timestamp to viewmodel.
 * @param {object} api_response - liveblog API response JSON.
 */
vm.updateViewModel = function (api_response) {
  var self = this;

  if (!api_response.requestOpts.fromDate) {
    // Means we're not polling
    view.hideLoadMore(self.isTimelineEnd(api_response)); // the end?
  } else {
    // Means we're polling for new posts
    if (!api_response._items.length) {
      return;
    }

    latestUpdate = self.getLatestUpdate(api_response);
  }

  if (api_response.requestOpts.sort && api_response.requestOpts.sort !== self.settings.postOrder) {
    self.vm = getEmptyVm();
    view.hideLoadMore(self.isTimelineEnd(api_response));
    Object.assign(self.vm, api_response);
  } else {
    self.vm._items.push.apply(self.vm._items, api_response._items);
  }

  if (api_response.requestOpts.sort) {
    self.settings.postOrder = api_response.requestOpts.sort;
  }

  return api_response;
};

/**
 * Get the latest update timestamp from a number of posts.
 * @param {object} api_response - liveblog API response JSON.
 * @returns {string} - ISO 8601 encoded date
 */
vm.getLatestUpdate = function (api_response) {
  var timestamps = api_response._items.map(function (post) {
    return new Date(post._updated);
  });

  var latest = new Date(Math.max.apply(null, timestamps));
  return latest.toISOString(); // convert timestamp to ISO
};

/**
 * Check if we reached the end of the timeline.
 * @param {object} api_response - liveblog API response JSON.
 * @returns {bool}
 */
vm.isTimelineEnd = function (api_response) {
  var itemsInView = this.vm._items.length + settings.postsPerPage;
  // number of post loaded on top as updates
  var extraPosts = itemsInView % settings.postsPerPage;

  return api_response._meta.total <= itemsInView - extraPosts;
};

/**
 * Set up viewmodel.
 */
vm.init = function () {
  this.settings = settings;
  this.vm = getEmptyVm(settings.postsPerPage);
  this.vm.timeInitialized = new Date().toISOString();

  setInterval(function () {
    vm.loadPosts({ fromDate: latestUpdate }).then(view.renderPosts).then(function (resp) {
      if (resp && resp._items.length > 0) view.adsManager.refreshAds();
    });
  }, 10 * 1000);

  //return this.vm.latestUpdate;
};

/**
 * Build urlencoded ElasticSearch Querystring
 * TODO: abstract away, we only need sticky flag and order
 * @param {Object} opts - arguments object
 * @param {string} opts.sort - if "ascending", get items in ascending order
 * @param {string} opts.fromDate - results with a ISO 8601 timestamp gt this only
 * @param {bool} opts.highlightsOnly - get editorial/highlighted items only
 * @returns {string} Querystring
 */
vm.getQuery = function (opts) {
  var query = {
    "query": {
      "filtered": {
        "filter": {
          "and": [{ "term": { "sticky": false } }, { "term": { "post_status": "open" } }, { "range": { "_updated": { "lt": this.vm ? this.vm.timeInitialized : new Date().toISOString() } } }]
        }
      }
    },
    "sort": [{
      "published_date": { order: 'desc', missing: '_last', unmapped_type: 'long' }
    }]
  };

  if (opts.fromDate) {
    query.query.filtered.filter.and[2].range._updated = {
      "gt": opts.fromDate
    };
    // @TODO: remove `post_status` aswell so we can have unpublish posts
    // remove sticky posts from update polling request.
    query.query.filtered.filter.and.splice(0, 1);
  }

  if (opts.highlightsOnly === true) {
    query.query.filtered.filter.and.push({
      term: { lb_highlight: true }
    });
  }

  if (opts.notDeleted === true) {
    query.query.filtered.filter.and.push({
      not: { term: { deleted: true } }
    });
  }

  if (opts.sort === "ascending") {
    query.sort[0].published_date.order = "asc";
  } else if (opts.sort === "editorial") {
    query.sort = [{
      order: {
        order: "desc",
        missing: "_last",
        unmapped_type: "long"
      }
    }];
  }

  // Remove the range, we want all the results
  if (!opts.fromDate) {
    query.query.filtered.filter.and.forEach(function (rule, index) {
      if (rule.hasOwnProperty('range')) {
        query.query.filtered.filter.and.splice(index, 1);
      }
    });
  }

  return encodeURI(JSON.stringify(query));
};

module.exports = vm;

},{"./helpers":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/helpers.js","./view":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/theme/view.js"}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/templates/template-ad-entry.html":[function(require,module,exports){
var nunjucks = require( "nunjucks/browser/nunjucks-slim" );
module.exports = (function() {(window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["template-ad-entry.html"] = (function() {
function root(env, context, frame, runtime, cb) {
var lineno = null;
var colno = null;
var output = "";
try {
var parentTemplate = null;
var macro_t_1 = runtime.makeMacro(
["text"], 
[], 
function (l_text, kwargs) {
var callerFrame = frame;
frame = new runtime.Frame();
kwargs = kwargs || {};
if (kwargs.hasOwnProperty("caller")) {
frame.set("caller", kwargs.caller); }
frame.set("text", l_text);
var t_2 = "";if(!runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "options")),"i18n")),runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"language"))) {
t_2 += runtime.suppressValue(l_text, env.opts.autoescape);
;
}
else {
if(!runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "options")),"i18n")),runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"language"))),l_text)) {
t_2 += runtime.suppressValue(l_text, env.opts.autoescape);
;
}
else {
t_2 += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "options")),"i18n")),runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"language"))),l_text), env.opts.autoescape);
;
}
;
}
;
frame = callerFrame;
return new runtime.SafeString(t_2);
});
context.addExport("translate");
context.setVariable("translate", macro_t_1);
output += "\n\n<article\n    class=\"lb-post list-group-item show-author-avatar advertisement\"\n    data-post-id=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"_id"), env.opts.autoescape);
output += "\">\n    <div class=\"lb-post-header\">\n        <div class=\"lb-type lb-type--";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"type"), env.opts.autoescape);
output += "\"></div>\n\n        <div class=\"lb-post-date-icons\">\n            <div class=\"lb-advertisement\">";
output += runtime.suppressValue((lineno = 9, colno = 52, runtime.callWrap(macro_t_1, "translate", context, ["Advertisement"])), env.opts.autoescape);
output += "</div>\n        </div>\n  </div>\n\n  <!-- post start -->\n  <div class=\"items-container\">\n    <!-- item start -->\n    <div class=\"lb-item ";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"type"), env.opts.autoescape);
output += "\">\n        <article>";
output += runtime.suppressValue(env.getFilter("safe").call(context, runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"text")), env.opts.autoescape);
output += "</article>\n    </div>\n    <!-- item end -->\n  </div>\n  <!-- post end -->\n\n  <div class=\"lb-post-bottom\">\n\n    <div class=\"lb-post-actions\">\n\n      <div class=\"lb-post-share\">\n        <img src=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "assets_root"), env.opts.autoescape);
output += "images/action_share.svg\" class=\"lb-post-shareIcon\" />\n        <div class=\"lb-post-shareBox\">\n          <a class=\"lb-post-shareBox__item\"\n            onclick=\"window.open(this.href,'targetWindow','toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=570,height=400');return false;\"\n            data-link-base=\"//www.facebook.com/sharer.php?s=100&p[title]=&p[url]=\"\n            data-link-id=";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"_id"), env.opts.autoescape);
output += "><img src=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "assets_root"), env.opts.autoescape);
output += "images/share_facebook.svg\"/>\n          </a>\n          <a class=\"lb-post-shareBox__item\"\n            onclick=\"window.open(this.href,'targetWindow','toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=570,height=400');return false;\"\n            data-link-base=\"//plus.google.com/share?url=\"\n            data-link-id=";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"_id"), env.opts.autoescape);
output += "><img src=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "assets_root"), env.opts.autoescape);
output += "images/share_google.svg\"/>\n          </a>\n          <a class=\"lb-post-shareBox__item\"\n            onclick=\"window.open(this.href,'targetWindow','toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=570,height=400');return false;\"\n            data-link-base=\"//www.linkedin.com/shareArticle?mini=true&url=\"\n            data-link-id=";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"_id"), env.opts.autoescape);
output += "><img src=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "assets_root"), env.opts.autoescape);
output += "images/share_linkedin.svg\"/>\n          </a>\n          <a class=\"lb-post-shareBox__item\"\n            onclick=\"window.open(this.href,'targetWindow','toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=570,height=400');return false;\"\n            data-link-base=\"//twitter.com/home?status=\"\n            data-link-id=";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"_id"), env.opts.autoescape);
output += "><img src=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "assets_root"), env.opts.autoescape);
output += "images/share_twitter.svg\"/>\n          </a>\n          <a class=\"lb-post-shareBox__item\"\n            onclick=\"window.open(this.href,'targetWindow','toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=1024,height=768');return false;\"\n            data-link-base=\"mailto:?to=&subject=Liveblog&body=\"\n            data-link-id=";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"_id"), env.opts.autoescape);
output += "><img src=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "assets_root"), env.opts.autoescape);
output += "images/share_email.svg\"/>\n          </a>\n          <span> | </span>\n        </div>\n      </div>\n      <!-- end share -->\n\n      <!-- permalink -->\n      <div class=\"lb-post-permalink\">\n        <a id=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"_id"), env.opts.autoescape);
output += "\" target=\"_blank\">\n          <img src=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "assets_root"), env.opts.autoescape);
output += "images/action_link.svg\" class=\"lb-post-linkIcon\" />\n        </a>\n      </div>\n      <!-- end permalink -->\n\n    </div>\n\n</article>\n";
if(parentTemplate) {
parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);
} else {
cb(null, output);
}
;
} catch (e) {
  cb(runtime.handleError(e, lineno, colno));
}
}
return {
root: root
};

})();
return function(ctx, cb) { return nunjucks.render("template-ad-entry.html", ctx, cb); }
})();
;

},{"nunjucks/browser/nunjucks-slim":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/nunjucks/browser/nunjucks-slim.js"}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/templates/template-author.html":[function(require,module,exports){
var nunjucks = require( "nunjucks/browser/nunjucks-slim" );
module.exports = (function() {(window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["template-author.html"] = (function() {
function root(env, context, frame, runtime, cb) {
var lineno = null;
var colno = null;
var output = "";
try {
var parentTemplate = null;
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"post_items_type") != "advertisement") {
output += "\n<!-- author plus avatar -->\n<div class=\"lb-author ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"authorPosition") == "bottom") {
output += "lb-author--bottom";
;
}
output += "\">\n    ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "mainItem")),"commenter") && !(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"syndication_in") && !runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showSyndicatedAuthor"))) {
output += "\n      <div class=\"lb-author__name\">\n        ";
output += runtime.suppressValue((lineno = 5, colno = 18, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "translate"), "translate", context, ["Comment by"])), env.opts.autoescape);
output += " ";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "mainItem")),"commenter"), env.opts.autoescape);
output += "\n      </div>\n      <img class=\"lb-author__avatar lb-author__avatar--comment\" src=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "assets_root"), env.opts.autoescape);
output += "images/comment_icon.svg\">\n    ";
;
}
else {
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showAuthor")) {
output += "\n      <div class=\"lb-author__name\">\n      ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "mainItem")),"syndicated_creator") && runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showSyndicatedAuthor")) {
output += "\n        ";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "mainItem")),"syndicated_creator")),"display_name"), env.opts.autoescape);
output += "\n      ";
;
}
else {
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"original_creator")) {
output += "\n        ";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"original_creator")),"display_name"), env.opts.autoescape);
output += "\n      ";
;
}
else {
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"publisher")) {
output += "\n        ";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"publisher")),"display_name"), env.opts.autoescape);
output += "\n      ";
;
}
;
}
;
}
output += "\n      ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"syndication_in") && !runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showSyndicatedAuthor")) {
output += "\n        <span class=\"lb-producer";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showSyndicatedAuthor")) {
output += " lb-producer__author";
;
}
output += "\">";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"syndication_in")),"producer_blog_title"), env.opts.autoescape);
output += "</span>\n      ";
;
}
output += "\n      </div>\n      ";
if(runtime.contextOrFrameLookup(context, frame, "type") == "comment") {
output += "\n        <img class=\"lb-author__avatar lb-author__avatar--comment\" src=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "assets_root"), env.opts.autoescape);
output += "images/comment_icon.svg\">\n      ";
;
}
output += "\n      ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showAuthorAvatar") && runtime.contextOrFrameLookup(context, frame, "type") != "comment") {
output += "\n        ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "mainItem")),"syndicated_creator") && runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showSyndicatedAuthor") && runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "mainItem")),"syndicated_creator")),"picture_url")) {
output += "\n        <img class=\"lb-author__avatar\" src=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "mainItem")),"syndicated_creator")),"picture_url"), env.opts.autoescape);
output += "\" />\n        ";
;
}
else {
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"original_creator") && runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"original_creator")),"picture_url")) {
output += "\n        <img class=\"lb-author__avatar\" src=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"original_creator")),"picture_url"), env.opts.autoescape);
output += "\" />\n        ";
;
}
else {
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"publisher") && runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"publisher")),"picture_url")) {
output += "\n        <img class=\"lb-author__avatar\" src=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"publisher")),"picture_url"), env.opts.autoescape);
output += "\" />\n        ";
;
}
else {
output += "\n        <div class=\"lb-author__avatar\"></div>\n        ";
;
}
;
}
;
}
output += "\n      ";
;
}
output += "\n    ";
;
}
;
}
output += "\n  </div>\n  <!-- end author -->\n  ";
;
}
if(parentTemplate) {
parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);
} else {
cb(null, output);
}
;
} catch (e) {
  cb(runtime.handleError(e, lineno, colno));
}
}
return {
root: root
};

})();
return function(ctx, cb) { return nunjucks.render("template-author.html", ctx, cb); }
})();
;

},{"nunjucks/browser/nunjucks-slim":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/nunjucks/browser/nunjucks-slim.js"}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/templates/template-item-comment.html":[function(require,module,exports){
var nunjucks = require( "nunjucks/browser/nunjucks-slim" );
module.exports = (function() {(window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["template-item-comment.html"] = (function() {
function root(env, context, frame, runtime, cb) {
var lineno = null;
var colno = null;
var output = "";
try {
var parentTemplate = null;
output += "<div class=\"items-containerIndent\">\n  <!-- author plus avatar -->\n  <div class=\"lb-author lb-author--indent\">\n    ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item") && runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"commenter") && !(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"syndication_in") && !runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showSyndicatedAuthor"))) {
output += "\n      <img class=\"lb-author__avatar lb-author__avatar--comment\" src=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "assets_root"), env.opts.autoescape);
output += "images/comment_icon.svg\">\n      <div class=\"lb-author__name\">\n        ";
output += runtime.suppressValue((lineno = 6, colno = 18, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "translate"), "translate", context, ["Comment by"])), env.opts.autoescape);
output += " ";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"commenter"), env.opts.autoescape);
output += "\n      </div>\n    ";
;
}
else {
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showAuthor") && runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"syndication_in") && runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item") && (runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"original_creator") || runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"syndicated_creator"))) {
output += "\n      ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showAuthorAvatar")) {
output += "\n        <img class=\"lb-author__avatar lb-author__avatar--comment\" src=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "assets_root"), env.opts.autoescape);
output += "images/comment_icon.svg\">\n      ";
;
}
output += "\n      <div class=\"lb-author__name\">\n        <span class=\"lb-producer";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showSyndicatedAuthor")) {
output += " lb-producer__author";
;
}
output += "\">";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"syndication_in")),"producer_blog_title"), env.opts.autoescape);
output += "</span>\n      </div>\n    ";
;
}
;
}
output += "\n  </div>\n  <div class=\"lb-item text\">\n    <article>";
output += runtime.suppressValue(env.getFilter("safe").call(context, runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"text")), env.opts.autoescape);
output += "</article>\n  </div>\n</div>";
if(parentTemplate) {
parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);
} else {
cb(null, output);
}
;
} catch (e) {
  cb(runtime.handleError(e, lineno, colno));
}
}
return {
root: root
};

})();
return function(ctx, cb) { return nunjucks.render("template-item-comment.html", ctx, cb); }
})();
;

},{"nunjucks/browser/nunjucks-slim":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/nunjucks/browser/nunjucks-slim.js"}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/templates/template-item-embed.html":[function(require,module,exports){
var nunjucks = require( "nunjucks/browser/nunjucks-slim" );
module.exports = (function() {(window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["template-item-embed.html"] = (function() {
function root(env, context, frame, runtime, cb) {
var lineno = null;
var colno = null;
var output = "";
try {
var parentTemplate = null;
if(env.getFilter("lower").call(context, runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"provider_name")) == "youtube" && runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"html")) {
output += "\n    <div class=\"item--embed__element lb-responsive-video\">";
output += runtime.suppressValue(env.getFilter("safe").call(context, runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"html")), env.opts.autoescape);
output += "</div>\n";
;
}
else {
if((env.getFilter("lower").call(context, runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"provider_name")) == "twitter") && runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"html")) {
output += "\n    <div class=\"item--embed__element\">";
output += runtime.suppressValue(env.getFilter("safe").call(context, runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"html")), env.opts.autoescape);
output += "</div>\n";
;
}
else {
if(env.getFilter("lower").call(context, runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"provider_name")) == "facebook" && runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"original_url")) {
output += "\n    <blockquote class=\"embedly-card\" data-card-controls=\"0\">\n        <h4><a href=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"original_url"), env.opts.autoescape);
output += "\">";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"credit"), env.opts.autoescape);
output += "</a></h4>\n        <p>";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"title"), env.opts.autoescape);
output += "</p>\n    </blockquote>\n";
;
}
else {
if(env.getFilter("lower").call(context, runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"provider_name")) == "instagram" && runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"original_url")) {
output += "\n    <blockquote class=\"embedly-card\" data-card-controls=\"0\">\n        <h4><a href=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"original_url"), env.opts.autoescape);
output += "\">";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"credit"), env.opts.autoescape);
output += "</a></h4>\n        <p>";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"title"), env.opts.autoescape);
output += "</p>\n    </blockquote>\n";
;
}
else {
if(env.getFilter("lower").call(context, runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"provider_name")) == "brightcove" && runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"html")) {
output += "\n    <div class=\"item--embed__element lb-responsive-video\">";
output += runtime.suppressValue(env.getFilter("safe").call(context, runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"html")), env.opts.autoescape);
output += "</div>\n    <div class=\"item--embed__info\">\n        ";
if(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"title")) {
output += "\n        <div class=\"item--embed__title\">\n           ";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"title"), env.opts.autoescape);
output += "\n        </div>\n        ";
;
}
output += "\n        ";
if(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"description")) {
output += "\n        <div class=\"item--embed__description\">";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"description"), env.opts.autoescape);
output += "</div>\n        ";
;
}
output += "\n    </div>\n";
;
}
else {
output += "\n    ";
if(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"html")) {
output += "\n    <div class=\"item--embed__element\">";
output += runtime.suppressValue(env.getFilter("safe").call(context, runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"html")), env.opts.autoescape);
output += "</div>\n    ";
;
}
output += "\n    ";
if((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"title") || runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"description") || runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"credit") || (!runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"html") && runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"thumbnail_url")))) {
output += "\n    <article class=\"item--embed item--embed__wrapper\">\n        ";
if(!runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"html") && runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"thumbnail_url")) {
output += "\n        <a href=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"original_url"), env.opts.autoescape);
output += "\" target=\"_blank\" class=\"";
output += runtime.suppressValue((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"description")?"item--embed__illustration":"item--embed__only-illustration"), env.opts.autoescape);
output += "\">\n            <img src=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"thumbnail_url"), env.opts.autoescape);
output += "\"/>\n    </a>\n    ";
;
}
output += "\n    ";
if(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"title") || runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"description") || runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"credit")) {
output += "\n        <div class=\"item--embed__info\">\n            ";
if(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"title")) {
output += "\n            <div class=\"item--embed__title\">\n                <a href=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"original_url"), env.opts.autoescape);
output += "\" target=\"_blank\" title=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"title"), env.opts.autoescape);
output += "\">";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"title"), env.opts.autoescape);
output += "</a>\n            </div>\n            ";
;
}
output += "\n            ";
if(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"description")) {
output += "\n            <div class=\"item--embed__description\">";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"description"), env.opts.autoescape);
output += "</div>\n            ";
;
}
output += "\n            ";
if(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"credit")) {
output += "\n            <div class=\"item--embed__credit\">";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"credit"), env.opts.autoescape);
output += "</div>\n            ";
;
}
output += "\n        </div>\n        ";
;
}
output += "\n\n    </article>\n    ";
;
}
output += "\n";
;
}
;
}
;
}
;
}
;
}
if(parentTemplate) {
parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);
} else {
cb(null, output);
}
;
} catch (e) {
  cb(runtime.handleError(e, lineno, colno));
}
}
return {
root: root
};

})();
return function(ctx, cb) { return nunjucks.render("template-item-embed.html", ctx, cb); }
})();
;

},{"nunjucks/browser/nunjucks-slim":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/nunjucks/browser/nunjucks-slim.js"}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/templates/template-item-galleryImage.html":[function(require,module,exports){
var nunjucks = require( "nunjucks/browser/nunjucks-slim" );
module.exports = (function() {(window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["template-item-galleryImage.html"] = (function() {
function root(env, context, frame, runtime, cb) {
var lineno = null;
var colno = null;
var output = "";
try {
var parentTemplate = null;
output += "<figure>\n    <div class=\"lb-slideshow_imageContainer\">\n        <img\n          ";
if(runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"active")) {
output += "class=\"active\"";
;
}
output += "\n          src=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"media")),"renditions")),"thumbnail")),"href"), env.opts.autoescape);
output += "\"\n          srcset=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"media")),"renditions")),"baseImage")),"href"), env.opts.autoescape);
output += " 810w,\n          ";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"media")),"renditions")),"thumbnail")),"href"), env.opts.autoescape);
output += " 240w,\n          ";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"media")),"renditions")),"viewImage")),"href"), env.opts.autoescape);
output += " 540w\"\n          alt=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"caption"), env.opts.autoescape);
output += "\">\n    </div>\n    <figcaption>\n        ";
if(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"caption")) {
output += "\n        <span class=\"caption\">\n            ";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"caption"), env.opts.autoescape);
output += "\n        </span>&nbsp;\n        ";
;
}
output += "\n        ";
if(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"credit")) {
output += "\n        <b>";
output += runtime.suppressValue((lineno = 17, colno = 21, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "translate"), "translate", context, ["credit:"])), env.opts.autoescape);
output += "</b>\n        <span class=\"credit\">";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"credit"), env.opts.autoescape);
output += "</span>\n        ";
;
}
output += "\n    </figcaption>\n</figure>\n      ";
if(parentTemplate) {
parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);
} else {
cb(null, output);
}
;
} catch (e) {
  cb(runtime.handleError(e, lineno, colno));
}
}
return {
root: root
};

})();
return function(ctx, cb) { return nunjucks.render("template-item-galleryImage.html", ctx, cb); }
})();
;

},{"nunjucks/browser/nunjucks-slim":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/nunjucks/browser/nunjucks-slim.js"}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/templates/template-item-image.html":[function(require,module,exports){
var nunjucks = require( "nunjucks/browser/nunjucks-slim" );
module.exports = (function() {(window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["template-item-image.html"] = (function() {
function root(env, context, frame, runtime, cb) {
var lineno = null;
var colno = null;
var output = "";
try {
var parentTemplate = null;
output += "<figure>\n  <img\n    ";
if(runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"active")) {
output += "class=\"active\"";
;
}
output += "\n    src=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"media")),"renditions")),"thumbnail")),"href"), env.opts.autoescape);
output += "\"\n    srcset=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"media")),"renditions")),"baseImage")),"href"), env.opts.autoescape);
output += " 810w,\n    ";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"media")),"renditions")),"thumbnail")),"href"), env.opts.autoescape);
output += " 240w,\n    ";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"media")),"renditions")),"viewImage")),"href"), env.opts.autoescape);
output += " 540w\"\n    alt=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"caption"), env.opts.autoescape);
output += "\">\n  <figcaption>\n    ";
if(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"caption")) {
output += "\n      <span class=\"caption\">\n        ";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"caption"), env.opts.autoescape);
output += "\n      </span>&nbsp;\n    ";
;
}
output += "\n    ";
if(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"credit")) {
output += "\n      <b>";
output += runtime.suppressValue((lineno = 15, colno = 19, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "translate"), "translate", context, ["credit:"])), env.opts.autoescape);
output += "</b>\n      <span class=\"credit\">";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"credit"), env.opts.autoescape);
output += "</span>\n    ";
;
}
output += "\n  </figcaption>\n</figure>\n";
if(parentTemplate) {
parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);
} else {
cb(null, output);
}
;
} catch (e) {
  cb(runtime.handleError(e, lineno, colno));
}
}
return {
root: root
};

})();
return function(ctx, cb) { return nunjucks.render("template-item-image.html", ctx, cb); }
})();
;

},{"nunjucks/browser/nunjucks-slim":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/nunjucks/browser/nunjucks-slim.js"}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/templates/template-item-quote.html":[function(require,module,exports){
var nunjucks = require( "nunjucks/browser/nunjucks-slim" );
module.exports = (function() {(window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["template-item-quote.html"] = (function() {
function root(env, context, frame, runtime, cb) {
var lineno = null;
var colno = null;
var output = "";
try {
var parentTemplate = null;
output += "<div class=\"item--embed-quote\">\n    <blockquote>\n        <p>";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"quote"), env.opts.autoescape);
output += "</p>\n        ";
if(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"credit")) {
output += "\n            <h4>";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "ref")),"item")),"meta")),"credit"), env.opts.autoescape);
output += "</h4>\n        ";
;
}
output += "\n    </blockquote>\n</div>\n";
if(parentTemplate) {
parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);
} else {
cb(null, output);
}
;
} catch (e) {
  cb(runtime.handleError(e, lineno, colno));
}
}
return {
root: root
};

})();
return function(ctx, cb) { return nunjucks.render("template-item-quote.html", ctx, cb); }
})();
;

},{"nunjucks/browser/nunjucks-slim":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/nunjucks/browser/nunjucks-slim.js"}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/templates/template-post-actions.html":[function(require,module,exports){
var nunjucks = require( "nunjucks/browser/nunjucks-slim" );
module.exports = (function() {(window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["template-post-actions.html"] = (function() {
function root(env, context, frame, runtime, cb) {
var lineno = null;
var colno = null;
var output = "";
try {
var parentTemplate = null;
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"post_items_type") != "advertisement") {
output += "\n    <div class=\"lb-post-actions ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"authorPosition") == "bottom") {
output += "lb-post-actions--top";
;
}
output += "\">\n\n        <div class=\"lb-post-share\">\n        <img src=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "assets_root"), env.opts.autoescape);
output += "images/action_share.svg\" class=\"lb-post-shareIcon\" />\n        <div class=\"lb-post-shareBox\">\n            <a class=\"lb-post-shareBox__item\"\n            onclick=\"window.open(this.href,'targetWindow','toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=570,height=400');return false;\"\n            data-link-base=\"//www.facebook.com/sharer.php?s=100&p[title]=&p[url]=\"\n            data-link-id=";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"_id"), env.opts.autoescape);
output += "><img src=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "assets_root"), env.opts.autoescape);
output += "images/share_facebook.svg\"/>\n            </a>\n            <a class=\"lb-post-shareBox__item\"\n            onclick=\"window.open(this.href,'targetWindow','toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=570,height=400');return false;\"\n            data-link-base=\"//plus.google.com/share?url=\"\n            data-link-id=";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"_id"), env.opts.autoescape);
output += "><img src=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "assets_root"), env.opts.autoescape);
output += "images/share_google.svg\"/>\n            </a>\n            <a class=\"lb-post-shareBox__item\"\n            onclick=\"window.open(this.href,'targetWindow','toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=570,height=400');return false;\"\n            data-link-base=\"//www.linkedin.com/shareArticle?mini=true&url=\"\n            data-link-id=";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"_id"), env.opts.autoescape);
output += "><img src=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "assets_root"), env.opts.autoescape);
output += "images/share_linkedin.svg\"/>\n            </a>\n            <a class=\"lb-post-shareBox__item\"\n            onclick=\"window.open(this.href,'targetWindow','toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=570,height=400');return false;\"\n            data-link-base=\"//twitter.com/home?status=\"\n            data-link-id=";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"_id"), env.opts.autoescape);
output += "><img src=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "assets_root"), env.opts.autoescape);
output += "images/share_twitter.svg\"/>\n            </a>\n            <a class=\"lb-post-shareBox__item\"\n            onclick=\"window.open(this.href,'targetWindow','toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=1024,height=768');return false;\"\n            data-link-base=\"mailto:?to=&subject=Liveblog&body=\"\n            data-link-id=";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"_id"), env.opts.autoescape);
output += "><img src=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "assets_root"), env.opts.autoescape);
output += "images/share_email.svg\"/>\n            </a>\n            <span> | </span>\n        </div>\n        </div>\n        <!-- end share -->\n\n        <!-- permalink -->\n        <div class=\"lb-post-permalink\">\n        <a id=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"_id"), env.opts.autoescape);
output += "\" target=\"_blank\">\n            <img src=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "assets_root"), env.opts.autoescape);
output += "images/action_link.svg\" class=\"lb-post-linkIcon\" />\n        </a>\n        </div>\n        <!-- end permalink -->\n    </div>\n";
;
}
if(parentTemplate) {
parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);
} else {
cb(null, output);
}
;
} catch (e) {
  cb(runtime.handleError(e, lineno, colno));
}
}
return {
root: root
};

})();
return function(ctx, cb) { return nunjucks.render("template-post-actions.html", ctx, cb); }
})();
;

},{"nunjucks/browser/nunjucks-slim":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/nunjucks/browser/nunjucks-slim.js"}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/templates/template-post-comment.html":[function(require,module,exports){
var nunjucks = require( "nunjucks/browser/nunjucks-slim" );
module.exports = (function() {(window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["template-post-comment.html"] = (function() {
function root(env, context, frame, runtime, cb) {
var lineno = null;
var colno = null;
var output = "";
try {
var parentTemplate = null;
output += "<div class=\"lb-item commentItem\">\n    <article>";
output += runtime.suppressValue(env.getFilter("safe").call(context, runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups")),1)),"refs")),0)),"item")),"text")), env.opts.autoescape);
output += "</article>\n</div>\n";
if(env.getFilter("length").call(context, runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups")),1)),"refs")) > 1) {
output += "\n<div class=\"items-containerIndent\">\n";
var t_1;
t_1 = runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups")),1)),"refs")),1)),"item");
frame.set("secondary", t_1, true);
if(frame.topLevel) {
context.setVariable("secondary", t_1);
}
if(frame.topLevel) {
context.addExport("secondary", t_1);
}
output += "\n  <!-- author plus avatar -->\n  <div class=\"lb-author lb-author--indent\">\n    ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "secondary")),"original_creator") || runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "secondary")),"syndicated_creator")) {
output += "\n        ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "secondary")),"original_creator") && runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "secondary")),"original_creator")),"picture_url")) {
output += "\n        <img class=\"lb-author__avatar\" src=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "secondary")),"original_creator")),"picture_url"), env.opts.autoescape);
output += "\" />\n        ";
;
}
else {
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "secondary")),"original_creator") && runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "secondary")),"syndicated_creator") && runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showSyndicatedAuthor") && runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "mainItem")),"syndicated_creator")),"picture_url")) {
output += "\n        <img class=\"lb-author__avatar\" src=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "mainItem")),"syndicated_creator")),"picture_url"), env.opts.autoescape);
output += "\" />\n        ";
;
}
else {
output += "\n        <div class=\"lb-author__avatar\"></div>\n        ";
;
}
;
}
output += "\n        <div class=\"lb-author__name\">\n        ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "secondary")),"syndicated_creator") && runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showSyndicatedAuthor")) {
output += "\n            ";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "secondary")),"syndicated_creator")),"display_name"), env.opts.autoescape);
output += "\n        ";
;
}
else {
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "secondary")),"original_creator")) {
output += "\n            ";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "secondary")),"original_creator")),"display_name"), env.opts.autoescape);
output += "\n        ";
;
}
;
}
output += "\n        ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"syndication_in") && !runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showSyndicatedAuthor")) {
output += "\n            <span class=\"lb-producer";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showSyndicatedAuthor")) {
output += " lb-producer__author";
;
}
output += "\">";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"syndication_in")),"producer_blog_title"), env.opts.autoescape);
output += "</span>\n        ";
;
}
output += "\n        </div>\n    ";
;
}
output += "\n  </div>\n  <!-- end author -->\n    ";
if(runtime.contextOrFrameLookup(context, frame, "item") && runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups") && runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups")),1) && runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups")),1)),"refs") && (env.getFilter("length").call(context, runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups")),1)),"refs")) > 0)) {
output += "\n        ";
frame = frame.push();
var t_4 = runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups")),1)),"refs");
if(t_4) {var t_3 = t_4.length;
for(var t_2=0; t_2 < t_4.length; t_2++) {
var t_5 = t_4[t_2];
frame.set("ref", t_5);
frame.set("loop.index", t_2 + 1);
frame.set("loop.index0", t_2);
frame.set("loop.revindex", t_3 - t_2);
frame.set("loop.revindex0", t_3 - t_2 - 1);
frame.set("loop.first", t_2 === 0);
frame.set("loop.last", t_2 === t_3 - 1);
frame.set("loop.length", t_3);
output += "\n          ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "loop")),"index0") > 0) {
output += "\n              ";
if(runtime.memberLookup((runtime.memberLookup((t_5),"item")),"item_type") == "image") {
output += "\n              ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showGallery") && runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "loop")),"index0") + 1 < runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "loop")),"length") && runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups")),1)),"refs")),runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "loop")),"index0") + 1)),"item")),"item_type") == "image" && (runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "loop")),"index0") - 1 < 1 || !(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "loop")),"index0") > 1 && runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups")),1)),"refs")),runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "loop")),"index0") - 1)),"item")),"item_type") == "image"))) {
output += "\n              <div class=\"lb-slideshow\">\n              ";
;
}
output += "\n              <div class=\"lb-item ";
if(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((t_5),"item")),"meta")),"media")),"renditions")),"original")),"height") > runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((t_5),"item")),"meta")),"media")),"renditions")),"original")),"width")) {
output += "portrait";
;
}
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((t_5),"item")),"item_type"), env.opts.autoescape);
output += "\">\n              ";
;
}
else {
output += "\n              <div class=\"lb-item ";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((t_5),"item")),"item_type"), env.opts.autoescape);
output += "\">\n              ";
;
}
output += "\n              ";
if(runtime.memberLookup((runtime.memberLookup((t_5),"item")),"item_type") == "embed") {
output += "\n                ";
var tasks = [];
tasks.push(
function(callback) {
env.getTemplate("template-item-embed.html", false, "template-post-comment.html", null, function(t_8,t_6) {
if(t_8) { cb(t_8); return; }
callback(null,t_6);});
});
tasks.push(
function(template, callback){
template.render(context.getVariables(), frame, function(t_9,t_7) {
if(t_9) { cb(t_9); return; }
callback(null,t_7);});
});
tasks.push(
function(result, callback){
output += result;
callback(null);
});
env.waterfall(tasks, function(){
output += "\n              ";
});
}
else {
if(runtime.memberLookup((runtime.memberLookup((t_5),"item")),"item_type") == "image") {
output += "\n                ";
var tasks = [];
tasks.push(
function(callback) {
env.getTemplate("template-item-image.html", false, "template-post-comment.html", null, function(t_12,t_10) {
if(t_12) { cb(t_12); return; }
callback(null,t_10);});
});
tasks.push(
function(template, callback){
template.render(context.getVariables(), frame, function(t_13,t_11) {
if(t_13) { cb(t_13); return; }
callback(null,t_11);});
});
tasks.push(
function(result, callback){
output += result;
callback(null);
});
env.waterfall(tasks, function(){
output += "\n              ";
});
}
else {
if(runtime.memberLookup((runtime.memberLookup((t_5),"item")),"item_type") == "quote") {
output += "\n                ";
var tasks = [];
tasks.push(
function(callback) {
env.getTemplate("template-item-quote.html", false, "template-post-comment.html", null, function(t_16,t_14) {
if(t_16) { cb(t_16); return; }
callback(null,t_14);});
});
tasks.push(
function(template, callback){
template.render(context.getVariables(), frame, function(t_17,t_15) {
if(t_17) { cb(t_17); return; }
callback(null,t_15);});
});
tasks.push(
function(result, callback){
output += result;
callback(null);
});
env.waterfall(tasks, function(){
output += "\n              ";
});
}
else {
output += "\n                <article>";
output += runtime.suppressValue(env.getFilter("safe").call(context, runtime.memberLookup((runtime.memberLookup((t_5),"item")),"text")), env.opts.autoescape);
output += "</article>\n              ";
;
}
;
}
;
}
output += "\n              </div>\n              ";
if(runtime.memberLookup((runtime.memberLookup((t_5),"item")),"item_type") == "image" && runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "loop")),"index0") - 1 > 0 && runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups")),1)),"refs")),runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "loop")),"index0") - 1)),"item")),"item_type") == "image" && !(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "loop")),"index0") + 1 >= runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "loop")),"length") || runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups")),1)),"refs")),runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "loop")),"index0") + 1)),"item")),"item_type") == "image")) {
output += "\n              </div>\n              ";
;
}
output += "\n            ";
;
}
output += "\n        ";
;
}
}
frame = frame.pop();
output += "\n    ";
;
}
output += "\n</div>\n";
;
}
if(parentTemplate) {
parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);
} else {
cb(null, output);
}
;
} catch (e) {
  cb(runtime.handleError(e, lineno, colno));
}
}
return {
root: root
};

})();
return function(ctx, cb) { return nunjucks.render("template-post-comment.html", ctx, cb); }
})();
;

},{"nunjucks/browser/nunjucks-slim":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/nunjucks/browser/nunjucks-slim.js"}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/templates/template-post.html":[function(require,module,exports){
var nunjucks = require( "nunjucks/browser/nunjucks-slim" );
module.exports = (function() {(window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["template-post.html"] = (function() {
function root(env, context, frame, runtime, cb) {
var lineno = null;
var colno = null;
var output = "";
try {
var parentTemplate = null;
var macro_t_1 = runtime.makeMacro(
["text"], 
[], 
function (l_text, kwargs) {
var callerFrame = frame;
frame = new runtime.Frame();
kwargs = kwargs || {};
if (kwargs.hasOwnProperty("caller")) {
frame.set("caller", kwargs.caller); }
frame.set("text", l_text);
var t_2 = "";if(!runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "options")),"i18n")),runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"language"))) {
t_2 += runtime.suppressValue(l_text, env.opts.autoescape);
;
}
else {
if(!runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "options")),"i18n")),runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"language"))),l_text)) {
t_2 += runtime.suppressValue(l_text, env.opts.autoescape);
;
}
else {
t_2 += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "options")),"i18n")),runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"language"))),l_text), env.opts.autoescape);
;
}
;
}
;
frame = callerFrame;
return new runtime.SafeString(t_2);
});
context.addExport("translate");
context.setVariable("translate", macro_t_1);
output += "\n";
var t_3;
t_3 = runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups")),1)),"refs")),0)),"item");
frame.set("mainItem", t_3, true);
if(frame.topLevel) {
context.setVariable("mainItem", t_3);
}
if(frame.topLevel) {
context.addExport("mainItem", t_3);
}
output += "\n";
var t_4;
t_4 = runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"published_date");
frame.set("postDate", t_4, true);
if(frame.topLevel) {
context.setVariable("postDate", t_4);
}
if(frame.topLevel) {
context.addExport("postDate", t_4);
}
output += "\n";
var t_5;
t_5 = runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"post_items_type");
frame.set("type", t_5, true);
if(frame.topLevel) {
context.setVariable("type", t_5);
}
if(frame.topLevel) {
context.addExport("type", t_5);
}
output += "\n";
var t_6;
t_6 = false;
frame.set("galleryItem", t_6, true);
if(frame.topLevel) {
context.setVariable("galleryItem", t_6);
}
if(frame.topLevel) {
context.addExport("galleryItem", t_6);
}
output += "\n\n";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "mainItem")),"commenter")) {
output += "\n  ";
if(env.getFilter("length").call(context, runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups")),1)),"refs")) > 1) {
output += "\n    ";
var t_7;
t_7 = "comment";
frame.set("type", t_7, true);
if(frame.topLevel) {
context.setVariable("type", t_7);
}
if(frame.topLevel) {
context.addExport("type", t_7);
}
output += "\n  ";
;
}
output += "\n  ";
var t_8;
t_8 = runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "mainItem")),"_created");
frame.set("postDate", t_8, true);
if(frame.topLevel) {
context.setVariable("postDate", t_8);
}
if(frame.topLevel) {
context.addExport("postDate", t_8);
}
output += "\n  ";
if(runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "mainItem")),"meta")),"_created")) {
output += "\n    ";
var t_9;
t_9 = runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "mainItem")),"meta")),"_created");
frame.set("postDate", t_9, true);
if(frame.topLevel) {
context.setVariable("postDate", t_9);
}
if(frame.topLevel) {
context.addExport("postDate", t_9);
}
output += "\n  ";
;
}
output += "\n";
;
}
output += "\n\n<!-- sticky position toggle -->\n";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"sticky") && runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"stickyPosition") == "top") {
output += "\n<article\n  class=\"lb-sticky-top-post list-group-item ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "type"), env.opts.autoescape);
output += " ";
if(runtime.contextOrFrameLookup(context, frame, "displaynone")) {
output += "mod--displaynone";
;
}
output += "\"\n  data-post-id=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"_id"), env.opts.autoescape);
output += "\"\n  data-post-sticky=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"sticky"), env.opts.autoescape);
output += "\">\n  ";
;
}
else {
output += "\n<article\n  class=\"lb-post list-group-item show-author-avatar ";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "type"), env.opts.autoescape);
output += " ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"lb_highlight")) {
output += "lb-post--highlighted";
;
}
output += " ";
if(runtime.contextOrFrameLookup(context, frame, "displaynone")) {
output += "mod--displaynone";
;
}
output += "\"\n  data-post-id=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"_id"), env.opts.autoescape);
output += "\"\n  data-post-sticky=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"sticky"), env.opts.autoescape);
output += "\">\n  <div class=\"lb-post-header\">\n\n    <div class=\"lb-type lb-type--";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"post_items_type"), env.opts.autoescape);
output += "\"></div>\n\n    <div class=\"lb-post-date-icons\">\n      ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"sticky") && runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"lb_highlight")) {
output += "\n        <img src=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "assets_root"), env.opts.autoescape);
output += "images/pinpost.svg\" class=\"pin-icon\" />\n        <img src=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "assets_root"), env.opts.autoescape);
output += "images/highlighted.svg\" class=\"highlight-icon\" />\n      ";
;
}
else {
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"sticky")) {
output += "\n        <img src=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "assets_root"), env.opts.autoescape);
output += "images/pinpost.svg\" class=\"pin-icon\" />\n      ";
;
}
else {
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"lb_highlight")) {
output += "\n        <img src=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "assets_root"), env.opts.autoescape);
output += "images/highlighted.svg\" class=\"highlight-icon\" />\n      ";
;
}
else {
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"post_items_type") == "advertisement") {
output += "\n        <div class=\"lb-advertisement\">";
output += runtime.suppressValue((lineno = 40, colno = 48, runtime.callWrap(macro_t_1, "translate", context, ["Advertisement"])), env.opts.autoescape);
output += "</div>\n      ";
;
}
;
}
;
}
;
}
output += "\n\n      <!-- remove advertisement stylization-->\n      ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"post_items_type") != "advertisement") {
output += "\n        <div class=\"lb-post-date relativeDate";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"clientDatetimeOnly")) {
output += " mod--displaynone";
;
}
output += "\" data-js-timestamp=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "postDate"), env.opts.autoescape);
output += "\">";
output += runtime.suppressValue(env.getFilter("date").call(context, runtime.contextOrFrameLookup(context, frame, "postDate"),""), env.opts.autoescape);
output += "</div>\n      ";
;
}
output += "\n    </div>\n    ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"authorPosition") == "top") {
output += "\n      ";
var tasks = [];
tasks.push(
function(callback) {
env.getTemplate("template-author.html", false, "template-post.html", null, function(t_12,t_10) {
if(t_12) { cb(t_12); return; }
callback(null,t_10);});
});
tasks.push(
function(template, callback){
template.render(context.getVariables(), frame, function(t_13,t_11) {
if(t_13) { cb(t_13); return; }
callback(null,t_11);});
});
tasks.push(
function(result, callback){
output += result;
callback(null);
});
env.waterfall(tasks, function(){
output += "\n    ";
});
}
else {
output += "\n      ";
var tasks = [];
tasks.push(
function(callback) {
env.getTemplate("template-post-actions.html", false, "template-post.html", null, function(t_16,t_14) {
if(t_16) { cb(t_16); return; }
callback(null,t_14);});
});
tasks.push(
function(template, callback){
template.render(context.getVariables(), frame, function(t_17,t_15) {
if(t_17) { cb(t_17); return; }
callback(null,t_15);});
});
tasks.push(
function(result, callback){
output += result;
callback(null);
});
env.waterfall(tasks, function(){
output += "\n    ";
});
}
output += "\n\n  </div>\n\n  ";
;
}
output += "\n  <!-- end sticky position toggle -->\n\n  <!-- post start -->\n  <div class=\"items-container\">\n  ";
if(runtime.contextOrFrameLookup(context, frame, "type") == "comment") {
output += "\n    ";
var tasks = [];
tasks.push(
function(callback) {
env.getTemplate("template-post-comment.html", false, "template-post.html", null, function(t_20,t_18) {
if(t_20) { cb(t_20); return; }
callback(null,t_18);});
});
tasks.push(
function(template, callback){
template.render(context.getVariables(), frame, function(t_21,t_19) {
if(t_21) { cb(t_21); return; }
callback(null,t_19);});
});
tasks.push(
function(result, callback){
output += result;
callback(null);
});
env.waterfall(tasks, function(){
output += "\n  ";
});
}
else {
output += "\n    ";
if(runtime.contextOrFrameLookup(context, frame, "item") && runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups") && runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups")),1) && runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups")),1)),"refs") && (env.getFilter("length").call(context, runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups")),1)),"refs")) > 0)) {
output += "\n        ";
frame = frame.push();
var t_24 = runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups")),1)),"refs");
if(t_24) {var t_23 = t_24.length;
for(var t_22=0; t_22 < t_24.length; t_22++) {
var t_25 = t_24[t_22];
frame.set("ref", t_25);
frame.set("loop.index", t_22 + 1);
frame.set("loop.index0", t_22);
frame.set("loop.revindex", t_23 - t_22);
frame.set("loop.revindex0", t_23 - t_22 - 1);
frame.set("loop.first", t_22 === 0);
frame.set("loop.last", t_22 === t_23 - 1);
frame.set("loop.length", t_23);
output += "\n          ";
if(runtime.memberLookup((runtime.memberLookup((t_25),"item")),"item_type") == "image") {
output += "\n            ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showGallery") && runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "loop")),"index0") + 1 < runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "loop")),"length") && runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups")),1)),"refs")),runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "loop")),"index0") + 1)),"item")),"item_type") == "image" && (runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "loop")),"index0") - 1 < 0 || !(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "loop")),"index0") > 0 && runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups")),1)),"refs")),runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "loop")),"index0") - 1)),"item")),"item_type") == "image"))) {
output += "\n              ";
output += "\n              ";
var t_26;
t_26 = true;
frame.set("galleryItem", t_26, true);
if(frame.topLevel) {
context.setVariable("galleryItem", t_26);
}
if(frame.topLevel) {
context.addExport("galleryItem", t_26);
}
output += "\n              <!-- slideshow start -->\n              <div class=\"lb-slideshow\">\n                <div class=\"lb-slideshow_frame\">\n                  <div class=\"lb-slideshow_slides\">\n            ";
;
}
output += "\n            ";
output += "\n            ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showGallery") && runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups")),1)),"refs")),runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "loop")),"index0") - 1)),"item")),"item_type") == "image") {
output += "\n              ";
var t_27;
t_27 = true;
frame.set("galleryItem", t_27, true);
if(frame.topLevel) {
context.setVariable("galleryItem", t_27);
}
if(frame.topLevel) {
context.addExport("galleryItem", t_27);
}
output += "\n            ";
;
}
output += "\n            <!-- image item start -->\n            <div class=\"lb-item ";
if(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((t_25),"item")),"meta")),"media")),"renditions")),"original")),"height") > runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((t_25),"item")),"meta")),"media")),"renditions")),"original")),"width")) {
output += "portrait";
;
}
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((t_25),"item")),"item_type"), env.opts.autoescape);
output += "\">\n          ";
;
}
else {
output += "\n            <!-- item start -->\n            <div class=\"lb-item ";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((t_25),"item")),"item_type"), env.opts.autoescape);
output += "\">\n          ";
;
}
output += "\n          ";
if(runtime.memberLookup((runtime.memberLookup((t_25),"item")),"item_type") == "embed") {
output += "\n            ";
var tasks = [];
tasks.push(
function(callback) {
env.getTemplate("template-item-embed.html", false, "template-post.html", null, function(t_30,t_28) {
if(t_30) { cb(t_30); return; }
callback(null,t_28);});
});
tasks.push(
function(template, callback){
template.render(context.getVariables(), frame, function(t_31,t_29) {
if(t_31) { cb(t_31); return; }
callback(null,t_29);});
});
tasks.push(
function(result, callback){
output += result;
callback(null);
});
env.waterfall(tasks, function(){
output += "\n          ";
});
}
else {
if(runtime.memberLookup((runtime.memberLookup((t_25),"item")),"item_type") == "image" && runtime.contextOrFrameLookup(context, frame, "galleryItem")) {
output += "\n            ";
var tasks = [];
tasks.push(
function(callback) {
env.getTemplate("template-item-galleryImage.html", false, "template-post.html", null, function(t_34,t_32) {
if(t_34) { cb(t_34); return; }
callback(null,t_32);});
});
tasks.push(
function(template, callback){
template.render(context.getVariables(), frame, function(t_35,t_33) {
if(t_35) { cb(t_35); return; }
callback(null,t_33);});
});
tasks.push(
function(result, callback){
output += result;
callback(null);
});
env.waterfall(tasks, function(){
output += "\n          ";
});
}
else {
if(runtime.memberLookup((runtime.memberLookup((t_25),"item")),"item_type") == "image") {
output += "\n            ";
var tasks = [];
tasks.push(
function(callback) {
env.getTemplate("template-item-image.html", false, "template-post.html", null, function(t_38,t_36) {
if(t_38) { cb(t_38); return; }
callback(null,t_36);});
});
tasks.push(
function(template, callback){
template.render(context.getVariables(), frame, function(t_39,t_37) {
if(t_39) { cb(t_39); return; }
callback(null,t_37);});
});
tasks.push(
function(result, callback){
output += result;
callback(null);
});
env.waterfall(tasks, function(){
output += "\n          ";
});
}
else {
if(runtime.memberLookup((runtime.memberLookup((t_25),"item")),"item_type") == "quote") {
output += "\n            ";
var tasks = [];
tasks.push(
function(callback) {
env.getTemplate("template-item-quote.html", false, "template-post.html", null, function(t_42,t_40) {
if(t_42) { cb(t_42); return; }
callback(null,t_40);});
});
tasks.push(
function(template, callback){
template.render(context.getVariables(), frame, function(t_43,t_41) {
if(t_43) { cb(t_43); return; }
callback(null,t_41);});
});
tasks.push(
function(result, callback){
output += result;
callback(null);
});
env.waterfall(tasks, function(){
output += "\n          ";
});
}
else {
if(runtime.memberLookup((runtime.memberLookup((t_25),"item")),"item_type") == "comment") {
output += "\n            ";
var tasks = [];
tasks.push(
function(callback) {
env.getTemplate("template-item-comment.html", false, "template-post.html", null, function(t_46,t_44) {
if(t_46) { cb(t_46); return; }
callback(null,t_44);});
});
tasks.push(
function(template, callback){
template.render(context.getVariables(), frame, function(t_47,t_45) {
if(t_47) { cb(t_47); return; }
callback(null,t_45);});
});
tasks.push(
function(result, callback){
output += result;
callback(null);
});
env.waterfall(tasks, function(){
output += "\n          ";
});
}
else {
output += "\n            <article>";
output += runtime.suppressValue(env.getFilter("safe").call(context, runtime.memberLookup((runtime.memberLookup((t_25),"item")),"text")), env.opts.autoescape);
output += "</article>\n          ";
;
}
;
}
;
}
;
}
;
}
output += "\n          </div>\n          <!-- item end -->\n          ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showGallery") && runtime.memberLookup((runtime.memberLookup((t_25),"item")),"item_type") == "image" && runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "loop")),"index0") - 1 >= 0 && runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups")),1)),"refs")),runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "loop")),"index0") - 1)),"item")),"item_type") == "image" && runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"groups")),1)),"refs")),runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "loop")),"index0") + 1)),"item")),"item_type") != "image") {
output += "    </div>\n                <span class=\"lb-slideshow_prev\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" viewBox=\"0 0 501.5 501.5\"><g><path fill=\"#2E435A\" d=\"M302.67 90.877l55.77 55.508L254.575 250.75 358.44 355.116l-55.77 55.506L143.56 250.75z\"/></g></svg>\n                </span>\n                <span class=\"lb-slideshow_next\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" viewBox=\"0 0 501.5 501.5\"><g><path fill=\"#2E435A\" d=\"M199.33 410.622l-55.77-55.508L247.425 250.75 143.56 146.384l55.77-55.507L358.44 250.75z\"/></g></svg>\n                </span>\n              </div>\n            </div>\n            <!-- slideshow end -->\n          ";
;
}
output += "\n        ";
;
}
}
frame = frame.pop();
output += "\n    ";
;
}
output += "\n  ";
;
}
output += "\n  </div>\n  <!-- post end -->\n\n  <div class=\"lb-post-bottom\">\n    ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showUpdateDatetime") && (runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"content_updated_date") != runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"firstcreated")) && runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"post_items_type") != "advertisement") {
output += "\n      <div class=\"lb-post-updated\">\n        <span>";
output += runtime.suppressValue((lineno = 120, colno = 24, runtime.callWrap(macro_t_1, "translate", context, ["Updated"])), env.opts.autoescape);
output += "</span> <span class=\"lb-post-updated-time relativeDate";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"clientDatetimeOnly")) {
output += " mod--displaynone";
;
}
output += "\" data-js-timestamp=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"content_updated_date"), env.opts.autoescape);
output += "\">";
output += runtime.suppressValue(env.getFilter("date").call(context, runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "item")),"content_updated_date"),""), env.opts.autoescape);
output += "</span>\n      </div>\n    ";
;
}
output += "\n\n    ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"authorPosition") == "bottom") {
output += "\n      ";
var tasks = [];
tasks.push(
function(callback) {
env.getTemplate("template-author.html", false, "template-post.html", null, function(t_50,t_48) {
if(t_50) { cb(t_50); return; }
callback(null,t_48);});
});
tasks.push(
function(template, callback){
template.render(context.getVariables(), frame, function(t_51,t_49) {
if(t_51) { cb(t_51); return; }
callback(null,t_49);});
});
tasks.push(
function(result, callback){
output += result;
callback(null);
});
env.waterfall(tasks, function(){
output += "\n    ";
});
}
else {
output += "\n      ";
var tasks = [];
tasks.push(
function(callback) {
env.getTemplate("template-post-actions.html", false, "template-post.html", null, function(t_54,t_52) {
if(t_54) { cb(t_54); return; }
callback(null,t_52);});
});
tasks.push(
function(template, callback){
template.render(context.getVariables(), frame, function(t_55,t_53) {
if(t_55) { cb(t_55); return; }
callback(null,t_53);});
});
tasks.push(
function(result, callback){
output += result;
callback(null);
});
env.waterfall(tasks, function(){
output += "\n    ";
});
}
output += "\n\n    </div>\n\n</article>\n";
if(parentTemplate) {
parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);
} else {
cb(null, output);
}
;
} catch (e) {
  cb(runtime.handleError(e, lineno, colno));
}
}
return {
root: root
};

})();
return function(ctx, cb) { return nunjucks.render("template-post.html", ctx, cb); }
})();
;

},{"nunjucks/browser/nunjucks-slim":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/nunjucks/browser/nunjucks-slim.js"}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/templates/template-timeline.html":[function(require,module,exports){
var nunjucks = require( "nunjucks/browser/nunjucks-slim" );
module.exports = (function() {(window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["template-timeline.html"] = (function() {
function root(env, context, frame, runtime, cb) {
var lineno = null;
var colno = null;
var output = "";
try {
var parentTemplate = null;
var macro_t_1 = runtime.makeMacro(
["text"], 
[], 
function (l_text, kwargs) {
var callerFrame = frame;
frame = new runtime.Frame();
kwargs = kwargs || {};
if (kwargs.hasOwnProperty("caller")) {
frame.set("caller", kwargs.caller); }
frame.set("text", l_text);
var t_2 = "";if(!runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "options")),"i18n")),runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"language"))) {
t_2 += runtime.suppressValue(l_text, env.opts.autoescape);
;
}
else {
if(!runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "options")),"i18n")),runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"language"))),l_text)) {
t_2 += runtime.suppressValue(l_text, env.opts.autoescape);
;
}
else {
t_2 += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "options")),"i18n")),runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"language"))),l_text), env.opts.autoescape);
;
}
;
}
;
frame = callerFrame;
return new runtime.SafeString(t_2);
});
context.addExport("translate");
context.setVariable("translate", macro_t_1);
output += "\n\n";
(parentTemplate ? function(e, c, f, r, cb) { cb(""); } : context.getBlock("timeline"))(env, context, frame, runtime, function(t_4,t_3) {
if(t_4) { cb(t_4); return; }
output += t_3;
output += "\n\n";
var tasks = [];
tasks.push(
function(callback) {
env.getTemplate("template-embed-providers.html", false, "template-timeline.html", null, function(t_7,t_5) {
if(t_7) { cb(t_7); return; }
callback(null,t_5);});
});
tasks.push(
function(template, callback){
template.render(context.getVariables(), frame, function(t_8,t_6) {
if(t_8) { cb(t_8); return; }
callback(null,t_6);});
});
tasks.push(
function(result, callback){
output += result;
callback(null);
});
env.waterfall(tasks, function(){
output += "\n\n";
if(runtime.contextOrFrameLookup(context, frame, "include_js_options")) {
output += "\n  <script type=\"text/javascript\">\n    window.LB = ";
output += runtime.suppressValue(env.getFilter("safe").call(context, runtime.contextOrFrameLookup(context, frame, "json_options")), env.opts.autoescape);
output += ";\n  </script>\n";
;
}
output += "\n";
if(parentTemplate) {
parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);
} else {
cb(null, output);
}
})});
} catch (e) {
  cb(runtime.handleError(e, lineno, colno));
}
}
function b_timeline(env, context, frame, runtime, cb) {
var lineno = null;
var colno = null;
var output = "";
try {
var frame = frame.push(true);
output += "\n<div data-timeline class=\"lb-timeline ";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"language"), env.opts.autoescape);
output += "\">\n  ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showTitle") && runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "blog")),"title")) {
output += "\n    <h1>";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "blog")),"title"), env.opts.autoescape);
output += "</h1>\n  ";
;
}
output += "\n\n  ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showDescription") && runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "blog")),"description")) {
output += "\n    <div class=\"description\">\n      ";
output += runtime.suppressValue(env.getFilter("safe").call(context, runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "blog")),"description")), env.opts.autoescape);
output += "\n    </div>\n  ";
;
}
output += "\n\n  ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showImage") && runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "blog")),"picture_url")) {
output += "\n    <img src=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "blog")),"picture_url"), env.opts.autoescape);
output += "\" />\n  ";
;
}
output += "\n\n  ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"stickyPosition") == "top") {
output += "\n    <div class=\"timeline-top timeline-top--loaded\">\n      <section data-timeline-sticky class=\"lb-posts list-group";
if(!env.getFilter("length").call(context, runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "api_response")),"stickyPosts")),"_items"))) {
output += " sticky--empty";
;
}
output += "\">\n        ";
frame = frame.push();
var t_11 = runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "api_response")),"stickyPosts")),"_items");
if(t_11) {var t_10 = t_11.length;
for(var t_9=0; t_9 < t_11.length; t_9++) {
var t_12 = t_11[t_9];
frame.set("item", t_12);
frame.set("loop.index", t_9 + 1);
frame.set("loop.index0", t_9);
frame.set("loop.revindex", t_10 - t_9);
frame.set("loop.revindex0", t_10 - t_9 - 1);
frame.set("loop.first", t_9 === 0);
frame.set("loop.last", t_9 === t_10 - 1);
frame.set("loop.length", t_10);
output += "\n          ";
if(!runtime.memberLookup((t_12),"deleted")) {
output += "\n            ";
var tasks = [];
tasks.push(
function(callback) {
env.getTemplate("template-post.html", false, "template-timeline.html", null, function(t_15,t_13) {
if(t_15) { cb(t_15); return; }
callback(null,t_13);});
});
tasks.push(
function(template, callback){
template.render(context.getVariables(), frame, function(t_16,t_14) {
if(t_16) { cb(t_16); return; }
callback(null,t_14);});
});
tasks.push(
function(result, callback){
output += result;
callback(null);
});
env.waterfall(tasks, function(){
output += "\n          ";
});
}
output += "\n        ";
;
}
}
frame = frame.pop();
output += "\n      </section>\n    </div>\n  ";
;
}
output += "\n\n  <!-- Header -->\n  <div class=\"header-bar\">\n    <div class=\"sorting-bar\">\n      <div class=\"sorting-bar__orders\">\n        <div class=\"sorting-bar__dropdownBtn\" data-js-sort_dropdown_button>\n          ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"postOrder") == "editorial") {
output += "\n            ";
output += runtime.suppressValue((lineno = 36, colno = 23, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "translate"), "translate", context, ["Editorial"])), env.opts.autoescape);
output += "\n          ";
;
}
else {
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"postOrder") == "newest_first") {
output += "\n            ";
output += runtime.suppressValue((lineno = 38, colno = 23, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "translate"), "translate", context, ["Newest first"])), env.opts.autoescape);
output += "\n          ";
;
}
else {
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"postOrder") == "oldest_first") {
output += "\n            ";
output += runtime.suppressValue((lineno = 40, colno = 22, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "translate"), "translate", context, ["Oldest first"])), env.opts.autoescape);
output += "\n          ";
;
}
;
}
;
}
output += "\n        </div>\n        <div class=\"sorting-bar__dropdownContent\">\n          <div\n            class=\"sorting-bar__order ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"postOrder") == "editorial") {
output += "sorting-bar__order--active";
;
}
output += "\"\n            data-js-orderby_editorial>\n            ";
output += runtime.suppressValue((lineno = 47, colno = 23, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "translate"), "translate", context, ["Editorial"])), env.opts.autoescape);
output += "\n          </div>\n          <div\n            class=\"sorting-bar__order ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"postOrder") == "newest_first") {
output += "sorting-bar__order--active";
;
}
output += "\"\n            data-js-orderby_descending>\n            ";
output += runtime.suppressValue((lineno = 52, colno = 23, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "translate"), "translate", context, ["Newest first"])), env.opts.autoescape);
output += "\n          </div>\n          <div\n            class=\"sorting-bar__order ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"postOrder") == "oldest_first") {
output += "sorting-bar__order--active";
;
}
output += "\"\n            data-js-orderby_ascending>\n            ";
output += runtime.suppressValue((lineno = 57, colno = 22, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "translate"), "translate", context, ["Oldest first"])), env.opts.autoescape);
output += "\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"header-bar__actions\"></div>\n      ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"hasHighlights")) {
output += "\n          <button class=\"header-bar__highlight\" data-js-show-highlighted><span>";
output += runtime.suppressValue((lineno = 64, colno = 89, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "translate"), "translate", context, ["Highlights"])), env.opts.autoescape);
output += "</span></button>\n      ";
;
}
output += "\n\n      ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"canComment")) {
output += "\n        <button class=\"header-bar__comment\" data-js-show-comment-dialog>\n            ";
output += runtime.suppressValue((lineno = 69, colno = 22, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "translate"), "translate", context, ["Comment"])), env.opts.autoescape);
output += "\n        </button>\n      ";
;
}
output += "\n\n      ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"showLiveblogLogo") || runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "output")),"logo_url")) {
output += "\n        ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "output")),"logo_url")) {
output += "\n        <div class=\"header-bar__logo\">\n          <img src=\"";
output += runtime.suppressValue(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "output")),"logo_url"), env.opts.autoescape);
output += "\"/>\n        </div>\n        ";
;
}
else {
output += "\n        <a class=\"header-bar__logo\" href=\"https://www.liveblog.pro\" target=\"_blank\">\n          <span>";
output += runtime.suppressValue((lineno = 80, colno = 26, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "translate"), "translate", context, ["Powered by"])), env.opts.autoescape);
output += "</span>\n          <img src=\"";
output += runtime.suppressValue(runtime.contextOrFrameLookup(context, frame, "assets_root"), env.opts.autoescape);
output += "images/lb-logo.svg\" />\n        </a>\n        ";
;
}
output += "\n      ";
;
}
output += "\n    </div>\n  <!-- Header End -->\n\n  <!-- Comment -->\n  ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"canComment")) {
output += "\n    ";
var tasks = [];
tasks.push(
function(callback) {
env.getTemplate("template-comment.html", false, "template-timeline.html", null, function(t_19,t_17) {
if(t_19) { cb(t_19); return; }
callback(null,t_17);});
});
tasks.push(
function(template, callback){
template.render(context.getVariables(), frame, function(t_20,t_18) {
if(t_20) { cb(t_20); return; }
callback(null,t_18);});
});
tasks.push(
function(result, callback){
output += result;
callback(null);
});
env.waterfall(tasks, function(){
output += "\n  ";
});
}
output += "\n  <!-- Comment End -->\n\n  <!-- Timeline -->\n  <div class=\"timeline-body timeline-body--loaded\">\n      <div data-one-new-update class=\"lb-post new-updates mod--displaynone\">\n        <div>";
output += runtime.suppressValue((lineno = 97, colno = 23, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "translate"), "translate", context, ["See one new update"])), env.opts.autoescape);
output += "</div>\n      </div>\n      <div data-new-updates class=\"lb-post new-updates mod--displaynone\">\n        <div>";
output += runtime.suppressValue((lineno = 100, colno = 23, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "translate"), "translate", context, ["See new updates"])), env.opts.autoescape);
output += "</div>\n      </div>\n    ";
if(runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "settings")),"stickyPosition") == "bottom") {
output += "\n      <section data-timeline-sticky class=\"lb-posts list-group sticky";
if(!env.getFilter("length").call(context, runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "api_response")),"stickyPosts")),"_items"))) {
output += " sticky--empty";
;
}
output += "\">\n        ";
frame = frame.push();
var t_23 = runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "api_response")),"stickyPosts")),"_items");
if(t_23) {var t_22 = t_23.length;
for(var t_21=0; t_21 < t_23.length; t_21++) {
var t_24 = t_23[t_21];
frame.set("item", t_24);
frame.set("loop.index", t_21 + 1);
frame.set("loop.index0", t_21);
frame.set("loop.revindex", t_22 - t_21);
frame.set("loop.revindex0", t_22 - t_21 - 1);
frame.set("loop.first", t_21 === 0);
frame.set("loop.last", t_21 === t_22 - 1);
frame.set("loop.length", t_22);
output += "\n          ";
if(!runtime.memberLookup((t_24),"deleted")) {
output += "\n            ";
var tasks = [];
tasks.push(
function(callback) {
env.getTemplate("template-post.html", false, "template-timeline.html", null, function(t_27,t_25) {
if(t_27) { cb(t_27); return; }
callback(null,t_25);});
});
tasks.push(
function(template, callback){
template.render(context.getVariables(), frame, function(t_28,t_26) {
if(t_28) { cb(t_28); return; }
callback(null,t_26);});
});
tasks.push(
function(result, callback){
output += result;
callback(null);
});
env.waterfall(tasks, function(){
output += "\n          ";
});
}
output += "\n        ";
;
}
}
frame = frame.pop();
output += "\n      </section>\n    ";
;
}
output += "\n      <div data-empty-message class=\"lb-post empty-message ";
if(env.getFilter("length").call(context, runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "api_response")),"posts")),"_items"))) {
output += "mod--displaynone";
;
}
output += "\">\n        <div>";
output += runtime.suppressValue((lineno = 112, colno = 23, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "translate"), "translate", context, ["No posts for now"])), env.opts.autoescape);
output += "</div>\n      </div>\n      <section data-timeline-normal class=\"lb-posts list-group normal\">\n        ";
if(env.getFilter("length").call(context, runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "api_response")),"posts")),"_items")) > 0) {
output += "\n            ";
frame = frame.push();
var t_31 = runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "api_response")),"posts")),"_items");
if(t_31) {var t_30 = t_31.length;
for(var t_29=0; t_29 < t_31.length; t_29++) {
var t_32 = t_31[t_29];
frame.set("item", t_32);
frame.set("loop.index", t_29 + 1);
frame.set("loop.index0", t_29);
frame.set("loop.revindex", t_30 - t_29);
frame.set("loop.revindex0", t_30 - t_29 - 1);
frame.set("loop.first", t_29 === 0);
frame.set("loop.last", t_29 === t_30 - 1);
frame.set("loop.length", t_30);
output += "\n              ";
if(!runtime.memberLookup((t_32),"deleted")) {
output += "\n                ";
var tasks = [];
tasks.push(
function(callback) {
env.getTemplate("template-post.html", false, "template-timeline.html", null, function(t_35,t_33) {
if(t_35) { cb(t_35); return; }
callback(null,t_33);});
});
tasks.push(
function(template, callback){
template.render(context.getVariables(), frame, function(t_36,t_34) {
if(t_36) { cb(t_36); return; }
callback(null,t_34);});
});
tasks.push(
function(result, callback){
output += result;
callback(null);
});
env.waterfall(tasks, function(){
output += "\n              ";
});
}
output += "\n            ";
;
}
}
frame = frame.pop();
output += "\n        ";
;
}
output += "\n      </section>\n      ";
if(runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "api_response")),"posts")),"_meta")),"max_results") < runtime.memberLookup((runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "api_response")),"posts")),"_meta")),"total")) {
output += "\n        <button data-load-more class=\"lb-button load-more-posts\">\n            ";
output += runtime.suppressValue((lineno = 125, colno = 22, runtime.callWrap(runtime.contextOrFrameLookup(context, frame, "translate"), "translate", context, ["Load more posts"])), env.opts.autoescape);
output += "\n        </button>\n      ";
;
}
output += "\n  </div>\n  <!-- Timeline End -->\n\n</div>\n";
cb(null, output);
;
} catch (e) {
  cb(runtime.handleError(e, lineno, colno));
}
}
return {
b_timeline: b_timeline,
root: root
};

})();
return function(ctx, cb) { return nunjucks.render("template-timeline.html", ctx, cb); }
})();
;

},{"nunjucks/browser/nunjucks-slim":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/nunjucks/browser/nunjucks-slim.js"}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/lory.js/dist/lory.js":[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function webpackUniversalModuleDefinition(root, factory) {
    if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && (typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else {
        var a = factory();
        for (var i in a) {
            ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' ? exports : root)[i] = a[i];
        }
    }
})(typeof self !== 'undefined' ? self : undefined, function () {
    return (/******/function (modules) {
            // webpackBootstrap
            /******/ // The module cache
            /******/var installedModules = {};
            /******/
            /******/ // The require function
            /******/function __webpack_require__(moduleId) {
                /******/
                /******/ // Check if module is in cache
                /******/if (installedModules[moduleId]) {
                    /******/return installedModules[moduleId].exports;
                    /******/
                }
                /******/ // Create a new module (and put it into the cache)
                /******/var module = installedModules[moduleId] = {
                    /******/i: moduleId,
                    /******/l: false,
                    /******/exports: {}
                    /******/ };
                /******/
                /******/ // Execute the module function
                /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
                /******/
                /******/ // Flag the module as loaded
                /******/module.l = true;
                /******/
                /******/ // Return the exports of the module
                /******/return module.exports;
                /******/
            }
            /******/
            /******/
            /******/ // expose the modules object (__webpack_modules__)
            /******/__webpack_require__.m = modules;
            /******/
            /******/ // expose the module cache
            /******/__webpack_require__.c = installedModules;
            /******/
            /******/ // define getter function for harmony exports
            /******/__webpack_require__.d = function (exports, name, getter) {
                /******/if (!__webpack_require__.o(exports, name)) {
                    /******/Object.defineProperty(exports, name, {
                        /******/configurable: false,
                        /******/enumerable: true,
                        /******/get: getter
                        /******/ });
                    /******/
                }
                /******/
            };
            /******/
            /******/ // getDefaultExport function for compatibility with non-harmony modules
            /******/__webpack_require__.n = function (module) {
                /******/var getter = module && module.__esModule ?
                /******/function getDefault() {
                    return module['default'];
                } :
                /******/function getModuleExports() {
                    return module;
                };
                /******/__webpack_require__.d(getter, 'a', getter);
                /******/return getter;
                /******/
            };
            /******/
            /******/ // Object.prototype.hasOwnProperty.call
            /******/__webpack_require__.o = function (object, property) {
                return Object.prototype.hasOwnProperty.call(object, property);
            };
            /******/
            /******/ // __webpack_public_path__
            /******/__webpack_require__.p = "";
            /******/
            /******/ // Load entry module and return exports
            /******/return __webpack_require__(__webpack_require__.s = 7);
            /******/
        }(
        /************************************************************************/
        /******/[
        /* 0 */
        /***/function (module, exports) {

            var g;

            // This works in non-strict mode
            g = function () {
                return this;
            }();

            try {
                // This works if eval is allowed (see CSP)
                g = g || Function("return this")() || (1, eval)("this");
            } catch (e) {
                // This works if the window reference is available
                if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === "object") g = window;
            }

            // g can still be undefined, but nothing to do about it...
            // We return undefined, instead of nothing here, so it's
            // easier to handle this case. if(!global) { ...}

            module.exports = g;

            /***/
        },
        /* 1 */
        /***/function (module, exports, __webpack_require__) {

            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];for (var key in source) {
                        if (Object.prototype.hasOwnProperty.call(source, key)) {
                            target[key] = source[key];
                        }
                    }
                }return target;
            }; /* globals jQuery */

            exports.lory = lory;

            var _detectPrefixes = __webpack_require__(2);

            var _detectPrefixes2 = _interopRequireDefault(_detectPrefixes);

            var _detectSupportsPassive = __webpack_require__(3);

            var _detectSupportsPassive2 = _interopRequireDefault(_detectSupportsPassive);

            var _dispatchEvent = __webpack_require__(4);

            var _dispatchEvent2 = _interopRequireDefault(_dispatchEvent);

            var _defaults = __webpack_require__(6);

            var _defaults2 = _interopRequireDefault(_defaults);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            var slice = Array.prototype.slice;

            function lory(slider, opts) {
                var position = void 0;
                var slidesWidth = void 0;
                var frameWidth = void 0;
                var slides = void 0;

                /**
                 * slider DOM elements
                 */
                var frame = void 0;
                var slideContainer = void 0;
                var prevCtrl = void 0;
                var nextCtrl = void 0;
                var prefixes = void 0;
                var transitionEndCallback = void 0;

                var index = 0;
                var options = {};
                var touchEventParams = (0, _detectSupportsPassive2.default)() ? { passive: true } : false;

                /**
                 * if object is jQuery convert to native DOM element
                 */
                if (typeof jQuery !== 'undefined' && slider instanceof jQuery) {
                    slider = slider[0];
                }

                /**
                 * private
                 * set active class to element which is the current slide
                 */
                function setActiveElement(slides, currentIndex) {
                    var _options = options,
                        classNameActiveSlide = _options.classNameActiveSlide;

                    slides.forEach(function (element, index) {
                        if (element.classList.contains(classNameActiveSlide)) {
                            element.classList.remove(classNameActiveSlide);
                        }
                    });

                    slides[currentIndex].classList.add(classNameActiveSlide);
                }

                /**
                 * private
                 * setupInfinite: function to setup if infinite is set
                 *
                 * @param  {array} slideArray
                 * @return {array} array of updated slideContainer elements
                 */
                function setupInfinite(slideArray) {
                    var _options2 = options,
                        infinite = _options2.infinite;

                    var front = slideArray.slice(0, infinite);
                    var back = slideArray.slice(slideArray.length - infinite, slideArray.length);

                    front.forEach(function (element) {
                        var cloned = element.cloneNode(true);

                        slideContainer.appendChild(cloned);
                    });

                    back.reverse().forEach(function (element) {
                        var cloned = element.cloneNode(true);

                        slideContainer.insertBefore(cloned, slideContainer.firstChild);
                    });

                    slideContainer.addEventListener(prefixes.transitionEnd, onTransitionEnd);

                    return slice.call(slideContainer.children);
                }

                /**
                 * [dispatchSliderEvent description]
                 * @return {[type]} [description]
                 */
                function dispatchSliderEvent(phase, type, detail) {
                    (0, _dispatchEvent2.default)(slider, phase + '.lory.' + type, detail);
                }

                /**
                 * translates to a given position in a given time in milliseconds
                 *
                 * @to        {number} number in pixels where to translate to
                 * @duration  {number} time in milliseconds for the transistion
                 * @ease      {string} easing css property
                 */
                function translate(to, duration, ease) {
                    var style = slideContainer && slideContainer.style;

                    if (style) {
                        style[prefixes.transition + 'TimingFunction'] = ease;
                        style[prefixes.transition + 'Duration'] = duration + 'ms';

                        if (prefixes.hasTranslate3d) {
                            style[prefixes.transform] = 'translate3d(' + to + 'px, 0, 0)';
                        } else {
                            style[prefixes.transform] = 'translate(' + to + 'px, 0)';
                        }
                    }
                }

                /**
                 * slidefunction called by prev, next & touchend
                 *
                 * determine nextIndex and slide to next postion
                 * under restrictions of the defined options
                 *
                 * @direction  {boolean}
                 */
                function slide(nextIndex, direction) {
                    var _options3 = options,
                        slideSpeed = _options3.slideSpeed,
                        slidesToScroll = _options3.slidesToScroll,
                        infinite = _options3.infinite,
                        rewind = _options3.rewind,
                        rewindSpeed = _options3.rewindSpeed,
                        ease = _options3.ease,
                        classNameActiveSlide = _options3.classNameActiveSlide;

                    var duration = slideSpeed;

                    var nextSlide = direction ? index + 1 : index - 1;
                    var maxOffset = Math.round(slidesWidth - frameWidth);

                    dispatchSliderEvent('before', 'slide', {
                        index: index,
                        nextSlide: nextSlide
                    });

                    /**
                     * Reset control classes
                     */
                    if (prevCtrl) {
                        prevCtrl.classList.remove('disabled');
                    }
                    if (nextCtrl) {
                        nextCtrl.classList.remove('disabled');
                    }

                    if (typeof nextIndex !== 'number') {
                        if (direction) {
                            nextIndex = index + slidesToScroll;
                        } else {
                            nextIndex = index - slidesToScroll;
                        }
                    }

                    nextIndex = Math.min(Math.max(nextIndex, 0), slides.length - 1);

                    if (infinite && direction === undefined) {
                        nextIndex += infinite;
                    }

                    var nextOffset = Math.min(Math.max(slides[nextIndex].offsetLeft * -1, maxOffset * -1), 0);

                    if (rewind && Math.abs(position.x) === maxOffset && direction) {
                        nextOffset = 0;
                        nextIndex = 0;
                        duration = rewindSpeed;
                    }

                    /**
                     * translate to the nextOffset by a defined duration and ease function
                     */
                    translate(nextOffset, duration, ease);

                    /**
                     * update the position with the next position
                     */
                    position.x = nextOffset;

                    /**
                     * update the index with the nextIndex only if
                     * the offset of the nextIndex is in the range of the maxOffset
                     */
                    if (slides[nextIndex].offsetLeft <= maxOffset) {
                        index = nextIndex;
                    }

                    if (infinite && (nextIndex === slides.length - infinite || nextIndex === 0)) {
                        if (direction) {
                            index = infinite;
                        }

                        if (!direction) {
                            index = slides.length - infinite * 2;
                        }

                        position.x = slides[index].offsetLeft * -1;

                        transitionEndCallback = function transitionEndCallback() {
                            translate(slides[index].offsetLeft * -1, 0, undefined);
                        };
                    }

                    if (classNameActiveSlide) {
                        setActiveElement(slice.call(slides), index);
                    }

                    /**
                     * update classes for next and prev arrows
                     * based on user settings
                     */
                    if (prevCtrl && !infinite && nextIndex === 0) {
                        prevCtrl.classList.add('disabled');
                    }

                    if (nextCtrl && !infinite && !rewind && nextIndex + 1 === slides.length) {
                        nextCtrl.classList.add('disabled');
                    }

                    dispatchSliderEvent('after', 'slide', {
                        currentSlide: index
                    });
                }

                /**
                 * public
                 * setup function
                 */
                function setup() {
                    dispatchSliderEvent('before', 'init');

                    prefixes = (0, _detectPrefixes2.default)();
                    options = _extends({}, _defaults2.default, opts);

                    var _options4 = options,
                        classNameFrame = _options4.classNameFrame,
                        classNameSlideContainer = _options4.classNameSlideContainer,
                        classNamePrevCtrl = _options4.classNamePrevCtrl,
                        classNameNextCtrl = _options4.classNameNextCtrl,
                        enableMouseEvents = _options4.enableMouseEvents,
                        classNameActiveSlide = _options4.classNameActiveSlide,
                        initialIndex = _options4.initialIndex;

                    index = initialIndex;
                    frame = slider.getElementsByClassName(classNameFrame)[0];
                    slideContainer = frame.getElementsByClassName(classNameSlideContainer)[0];
                    prevCtrl = slider.getElementsByClassName(classNamePrevCtrl)[0];
                    nextCtrl = slider.getElementsByClassName(classNameNextCtrl)[0];

                    position = {
                        x: slideContainer.offsetLeft,
                        y: slideContainer.offsetTop
                    };

                    if (options.infinite) {
                        slides = setupInfinite(slice.call(slideContainer.children));
                    } else {
                        slides = slice.call(slideContainer.children);

                        if (prevCtrl) {
                            prevCtrl.classList.add('disabled');
                        }

                        if (nextCtrl && slides.length === 1 && !options.rewind) {
                            nextCtrl.classList.add('disabled');
                        }
                    }

                    reset();

                    if (classNameActiveSlide) {
                        setActiveElement(slides, index);
                    }

                    if (prevCtrl && nextCtrl) {
                        prevCtrl.addEventListener('click', prev);
                        nextCtrl.addEventListener('click', next);
                    }

                    frame.addEventListener('touchstart', onTouchstart, touchEventParams);

                    if (enableMouseEvents) {
                        frame.addEventListener('mousedown', onTouchstart);
                        frame.addEventListener('click', onClick);
                    }

                    options.window.addEventListener('resize', onResize);

                    dispatchSliderEvent('after', 'init');
                }

                /**
                 * public
                 * reset function: called on resize
                 */
                function reset() {
                    var _options5 = options,
                        infinite = _options5.infinite,
                        ease = _options5.ease,
                        rewindSpeed = _options5.rewindSpeed,
                        rewindOnResize = _options5.rewindOnResize,
                        classNameActiveSlide = _options5.classNameActiveSlide,
                        initialIndex = _options5.initialIndex;

                    slidesWidth = slideContainer.getBoundingClientRect().width || slideContainer.offsetWidth;
                    frameWidth = frame.getBoundingClientRect().width || frame.offsetWidth;

                    if (frameWidth === slidesWidth) {
                        slidesWidth = slides.reduce(function (previousValue, slide) {
                            return previousValue + slide.getBoundingClientRect().width || slide.offsetWidth;
                        }, 0);
                    }

                    if (rewindOnResize) {
                        index = initialIndex;
                    } else {
                        ease = null;
                        rewindSpeed = 0;
                    }

                    if (infinite) {
                        translate(slides[index + infinite].offsetLeft * -1, 0, null);

                        index = index + infinite;
                        position.x = slides[index].offsetLeft * -1;
                    } else {
                        translate(slides[index].offsetLeft * -1, rewindSpeed, ease);
                        position.x = slides[index].offsetLeft * -1;
                    }

                    if (classNameActiveSlide) {
                        setActiveElement(slice.call(slides), index);
                    }
                }

                /**
                 * public
                 * slideTo: called on clickhandler
                 */
                function slideTo(index) {
                    slide(index);
                }

                /**
                 * public
                 * returnIndex function: called on clickhandler
                 */
                function returnIndex() {
                    return index - options.infinite || 0;
                }

                /**
                 * public
                 * prev function: called on clickhandler
                 */
                function prev() {
                    slide(false, false);
                }

                /**
                 * public
                 * next function: called on clickhandler
                 */
                function next() {
                    slide(false, true);
                }

                /**
                 * public
                 * destroy function: called to gracefully destroy the lory instance
                 */
                function destroy() {
                    dispatchSliderEvent('before', 'destroy');

                    // remove event listeners
                    frame.removeEventListener(prefixes.transitionEnd, onTransitionEnd);
                    frame.removeEventListener('touchstart', onTouchstart, touchEventParams);
                    frame.removeEventListener('touchmove', onTouchmove, touchEventParams);
                    frame.removeEventListener('touchend', onTouchend);
                    frame.removeEventListener('mousemove', onTouchmove);
                    frame.removeEventListener('mousedown', onTouchstart);
                    frame.removeEventListener('mouseup', onTouchend);
                    frame.removeEventListener('mouseleave', onTouchend);
                    frame.removeEventListener('click', onClick);

                    options.window.removeEventListener('resize', onResize);

                    if (prevCtrl) {
                        prevCtrl.removeEventListener('click', prev);
                    }

                    if (nextCtrl) {
                        nextCtrl.removeEventListener('click', next);
                    }

                    // remove cloned slides if infinite is set
                    if (options.infinite) {
                        Array.apply(null, Array(options.infinite)).forEach(function () {
                            slideContainer.removeChild(slideContainer.firstChild);
                            slideContainer.removeChild(slideContainer.lastChild);
                        });
                    }

                    dispatchSliderEvent('after', 'destroy');
                }

                // event handling

                var touchOffset = void 0;
                var delta = void 0;
                var isScrolling = void 0;

                function onTransitionEnd() {
                    if (transitionEndCallback) {
                        transitionEndCallback();

                        transitionEndCallback = undefined;
                    }
                }

                function onTouchstart(event) {
                    var _options6 = options,
                        enableMouseEvents = _options6.enableMouseEvents;

                    var touches = event.touches ? event.touches[0] : event;

                    if (enableMouseEvents) {
                        frame.addEventListener('mousemove', onTouchmove);
                        frame.addEventListener('mouseup', onTouchend);
                        frame.addEventListener('mouseleave', onTouchend);
                    }

                    frame.addEventListener('touchmove', onTouchmove, touchEventParams);
                    frame.addEventListener('touchend', onTouchend);

                    var pageX = touches.pageX,
                        pageY = touches.pageY;

                    touchOffset = {
                        x: pageX,
                        y: pageY,
                        time: Date.now()
                    };

                    isScrolling = undefined;

                    delta = {};

                    dispatchSliderEvent('on', 'touchstart', {
                        event: event
                    });
                }

                function onTouchmove(event) {
                    var touches = event.touches ? event.touches[0] : event;
                    var pageX = touches.pageX,
                        pageY = touches.pageY;

                    delta = {
                        x: pageX - touchOffset.x,
                        y: pageY - touchOffset.y
                    };

                    if (typeof isScrolling === 'undefined') {
                        isScrolling = !!(isScrolling || Math.abs(delta.x) < Math.abs(delta.y));
                    }

                    if (!isScrolling && touchOffset) {
                        event.preventDefault();
                        translate(position.x + delta.x, 0, null);
                    }

                    // may be
                    dispatchSliderEvent('on', 'touchmove', {
                        event: event
                    });
                }

                function onTouchend(event) {
                    /**
                     * time between touchstart and touchend in milliseconds
                     * @duration {number}
                     */
                    var duration = touchOffset ? Date.now() - touchOffset.time : undefined;

                    /**
                     * is valid if:
                     *
                     * -> swipe attempt time is over 300 ms
                     * and
                     * -> swipe distance is greater than 25px
                     * or
                     * -> swipe distance is more then a third of the swipe area
                     *
                     * @isValidSlide {Boolean}
                     */
                    var isValid = Number(duration) < 300 && Math.abs(delta.x) > 25 || Math.abs(delta.x) > frameWidth / 3;

                    /**
                     * is out of bounds if:
                     *
                     * -> index is 0 and delta x is greater than 0
                     * or
                     * -> index is the last slide and delta is smaller than 0
                     *
                     * @isOutOfBounds {Boolean}
                     */
                    var isOutOfBounds = !index && delta.x > 0 || index === slides.length - 1 && delta.x < 0;

                    var direction = delta.x < 0;

                    if (!isScrolling) {
                        if (isValid && !isOutOfBounds) {
                            slide(false, direction);
                        } else {
                            translate(position.x, options.snapBackSpeed);
                        }
                    }

                    touchOffset = undefined;

                    /**
                     * remove eventlisteners after swipe attempt
                     */
                    frame.removeEventListener('touchmove', onTouchmove);
                    frame.removeEventListener('touchend', onTouchend);
                    frame.removeEventListener('mousemove', onTouchmove);
                    frame.removeEventListener('mouseup', onTouchend);
                    frame.removeEventListener('mouseleave', onTouchend);

                    dispatchSliderEvent('on', 'touchend', {
                        event: event
                    });
                }

                function onClick(event) {
                    if (delta.x) {
                        event.preventDefault();
                    }
                }

                function onResize(event) {
                    reset();

                    dispatchSliderEvent('on', 'resize', {
                        event: event
                    });
                }

                // trigger initial setup
                setup();

                // expose public api
                return {
                    setup: setup,
                    reset: reset,
                    slideTo: slideTo,
                    returnIndex: returnIndex,
                    prev: prev,
                    next: next,
                    destroy: destroy
                };
            }

            /***/
        },
        /* 2 */
        /***/function (module, exports, __webpack_require__) {

            "use strict";
            /* WEBPACK VAR INJECTION */
            (function (global) {

                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.default = detectPrefixes;
                /**
                 * Detecting prefixes for saving time and bytes
                 */
                function detectPrefixes() {
                    var transform = void 0;
                    var transition = void 0;
                    var transitionEnd = void 0;
                    var hasTranslate3d = void 0;

                    (function () {
                        var el = document.createElement('_');
                        var style = el.style;

                        var prop = void 0;

                        if (style[prop = 'webkitTransition'] === '') {
                            transitionEnd = 'webkitTransitionEnd';
                            transition = prop;
                        }

                        if (style[prop = 'transition'] === '') {
                            transitionEnd = 'transitionend';
                            transition = prop;
                        }

                        if (style[prop = 'webkitTransform'] === '') {
                            transform = prop;
                        }

                        if (style[prop = 'msTransform'] === '') {
                            transform = prop;
                        }

                        if (style[prop = 'transform'] === '') {
                            transform = prop;
                        }

                        document.body.insertBefore(el, null);
                        style[transform] = 'translate3d(0, 0, 0)';
                        hasTranslate3d = !!global.getComputedStyle(el).getPropertyValue(transform);
                        document.body.removeChild(el);
                    })();

                    return {
                        transform: transform,
                        transition: transition,
                        transitionEnd: transitionEnd,
                        hasTranslate3d: hasTranslate3d
                    };
                }
                /* WEBPACK VAR INJECTION */
            }).call(exports, __webpack_require__(0));

            /***/
        },
        /* 3 */
        /***/function (module, exports, __webpack_require__) {

            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = detectSupportsPassive;
            function detectSupportsPassive() {
                var supportsPassive = false;

                try {
                    var opts = Object.defineProperty({}, 'passive', {
                        get: function get() {
                            supportsPassive = true;
                        }
                    });

                    window.addEventListener('testPassive', null, opts);
                    window.removeEventListener('testPassive', null, opts);
                } catch (e) {}

                return supportsPassive;
            }

            /***/
        },
        /* 4 */
        /***/function (module, exports, __webpack_require__) {

            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = dispatchEvent;

            var _customEvent = __webpack_require__(5);

            var _customEvent2 = _interopRequireDefault(_customEvent);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            /**
             * dispatch custom events
             *
             * @param  {element} el         slideshow element
             * @param  {string}  type       custom event name
             * @param  {object}  detail     custom detail information
             */
            function dispatchEvent(target, type, detail) {
                var event = new _customEvent2.default(type, {
                    bubbles: true,
                    cancelable: true,
                    detail: detail
                });

                target.dispatchEvent(event);
            }

            /***/
        },
        /* 5 */
        /***/function (module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function (global) {
                var NativeCustomEvent = global.CustomEvent;

                function useNative() {
                    try {
                        var p = new NativeCustomEvent('cat', { detail: { foo: 'bar' } });
                        return 'cat' === p.type && 'bar' === p.detail.foo;
                    } catch (e) {}
                    return false;
                }

                /**
                 * Cross-browser `CustomEvent` constructor.
                 *
                 * https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent.CustomEvent
                 *
                 * @public
                 */

                module.exports = useNative() ? NativeCustomEvent :

                // IE >= 9
                'undefined' !== typeof document && 'function' === typeof document.createEvent ? function CustomEvent(type, params) {
                    var e = document.createEvent('CustomEvent');
                    if (params) {
                        e.initCustomEvent(type, params.bubbles, params.cancelable, params.detail);
                    } else {
                        e.initCustomEvent(type, false, false, void 0);
                    }
                    return e;
                } :

                // IE <= 8
                function CustomEvent(type, params) {
                    var e = document.createEventObject();
                    e.type = type;
                    if (params) {
                        e.bubbles = Boolean(params.bubbles);
                        e.cancelable = Boolean(params.cancelable);
                        e.detail = params.detail;
                    } else {
                        e.bubbles = false;
                        e.cancelable = false;
                        e.detail = void 0;
                    }
                    return e;
                };

                /* WEBPACK VAR INJECTION */
            }).call(exports, __webpack_require__(0));

            /***/
        },
        /* 6 */
        /***/function (module, exports, __webpack_require__) {

            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = {
                /**
                 * slides scrolled at once
                 * @slidesToScroll {Number}
                 */
                slidesToScroll: 1,

                /**
                 * time in milliseconds for the animation of a valid slide attempt
                 * @slideSpeed {Number}
                 */
                slideSpeed: 300,

                /**
                 * time in milliseconds for the animation of the rewind after the last slide
                 * @rewindSpeed {Number}
                 */
                rewindSpeed: 600,

                /**
                 * time for the snapBack of the slider if the slide attempt was not valid
                 * @snapBackSpeed {Number}
                 */
                snapBackSpeed: 200,

                /**
                 * Basic easing functions: https://developer.mozilla.org/de/docs/Web/CSS/transition-timing-function
                 * cubic bezier easing functions: http://easings.net/de
                 * @ease {String}
                 */
                ease: 'ease',

                /**
                 * if slider reached the last slide, with next click the slider goes back to the startindex.
                 * use infinite or rewind, not both
                 * @rewind {Boolean}
                 */
                rewind: false,

                /**
                 * number of visible slides or false
                 * use infinite or rewind, not both
                 * @infinite {number}
                 */
                infinite: false,

                /**
                 * the slide index to show when the slider is initialized.
                 * @initialIndex {number}
                 */
                initialIndex: 0,

                /**
                 * class name for slider frame
                 * @classNameFrame {string}
                 */
                classNameFrame: 'js_frame',

                /**
                 * class name for slides container
                 * @classNameSlideContainer {string}
                 */
                classNameSlideContainer: 'js_slides',

                /**
                 * class name for slider prev control
                 * @classNamePrevCtrl {string}
                 */
                classNamePrevCtrl: 'js_prev',

                /**
                 * class name for slider next control
                 * @classNameNextCtrl {string}
                 */
                classNameNextCtrl: 'js_next',

                /**
                 * class name for current active slide
                 * if emptyString then no class is set
                 * @classNameActiveSlide {string}
                 */
                classNameActiveSlide: 'active',

                /**
                 * enables mouse events for swiping on desktop devices
                 * @enableMouseEvents {boolean}
                 */
                enableMouseEvents: false,

                /**
                 * window instance
                 * @window {object}
                 */
                window: typeof window !== 'undefined' ? window : null,

                /**
                 * If false, slides lory to the first slide on window resize.
                 * @rewindOnResize {boolean}
                 */
                rewindOnResize: true
            };

            /***/
        },
        /* 7 */
        /***/function (module, exports, __webpack_require__) {

            module.exports = __webpack_require__(1);

            /***/
        }]
        /******/)
    );
});

},{}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/moment/min/locales.min.js":[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function (e, a) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module && "function" == typeof require ? a(require("../moment")) : "function" == typeof define && define.amd ? define(["../moment"], a) : a(e.moment);
}(undefined, function (e) {
  "use strict";
  e.defineLocale("af", { months: "Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"), monthsShort: "Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"), weekdays: "Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"), weekdaysShort: "Son_Maa_Din_Woe_Don_Vry_Sat".split("_"), weekdaysMin: "So_Ma_Di_Wo_Do_Vr_Sa".split("_"), meridiemParse: /vm|nm/i, isPM: function isPM(e) {
      return (/^nm$/i.test(e)
      );
    }, meridiem: function meridiem(e, a, _) {
      return e < 12 ? _ ? "vm" : "VM" : _ ? "nm" : "NM";
    }, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Vandag om] LT", nextDay: "[M\xf4re om] LT", nextWeek: "dddd [om] LT", lastDay: "[Gister om] LT", lastWeek: "[Laas] dddd [om] LT", sameElse: "L" }, relativeTime: { future: "oor %s", past: "%s gelede", s: "'n paar sekondes", ss: "%d sekondes", m: "'n minuut", mm: "%d minute", h: "'n uur", hh: "%d ure", d: "'n dag", dd: "%d dae", M: "'n maand", MM: "%d maande", y: "'n jaar", yy: "%d jaar" }, dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/, ordinal: function ordinal(e) {
      return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de");
    }, week: { dow: 1, doy: 4 } }), e.defineLocale("ar-dz", { months: "\u062C\u0627\u0646\u0641\u064A_\u0641\u064A\u0641\u0631\u064A_\u0645\u0627\u0631\u0633_\u0623\u0641\u0631\u064A\u0644_\u0645\u0627\u064A_\u062C\u0648\u0627\u0646_\u062C\u0648\u064A\u0644\u064A\u0629_\u0623\u0648\u062A_\u0633\u0628\u062A\u0645\u0628\u0631_\u0623\u0643\u062A\u0648\u0628\u0631_\u0646\u0648\u0641\u0645\u0628\u0631_\u062F\u064A\u0633\u0645\u0628\u0631".split("_"), monthsShort: "\u062C\u0627\u0646\u0641\u064A_\u0641\u064A\u0641\u0631\u064A_\u0645\u0627\u0631\u0633_\u0623\u0641\u0631\u064A\u0644_\u0645\u0627\u064A_\u062C\u0648\u0627\u0646_\u062C\u0648\u064A\u0644\u064A\u0629_\u0623\u0648\u062A_\u0633\u0628\u062A\u0645\u0628\u0631_\u0623\u0643\u062A\u0648\u0628\u0631_\u0646\u0648\u0641\u0645\u0628\u0631_\u062F\u064A\u0633\u0645\u0628\u0631".split("_"), weekdays: "\u0627\u0644\u0623\u062D\u062F_\u0627\u0644\u0625\u062B\u0646\u064A\u0646_\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062E\u0645\u064A\u0633_\u0627\u0644\u062C\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062A".split("_"), weekdaysShort: "\u0627\u062D\u062F_\u0627\u062B\u0646\u064A\u0646_\u062B\u0644\u0627\u062B\u0627\u0621_\u0627\u0631\u0628\u0639\u0627\u0621_\u062E\u0645\u064A\u0633_\u062C\u0645\u0639\u0629_\u0633\u0628\u062A".split("_"), weekdaysMin: "\u0623\u062D_\u0625\u062B_\u062B\u0644\u0627_\u0623\u0631_\u062E\u0645_\u062C\u0645_\u0633\u0628".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[\u0627\u0644\u064A\u0648\u0645 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", nextDay: "[\u063A\u062F\u0627 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", nextWeek: "dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", lastDay: "[\u0623\u0645\u0633 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", lastWeek: "dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", sameElse: "L" }, relativeTime: { future: "\u0641\u064A %s", past: "\u0645\u0646\u0630 %s", s: "\u062B\u0648\u0627\u0646", ss: "%d \u062B\u0627\u0646\u064A\u0629", m: "\u062F\u0642\u064A\u0642\u0629", mm: "%d \u062F\u0642\u0627\u0626\u0642", h: "\u0633\u0627\u0639\u0629", hh: "%d \u0633\u0627\u0639\u0627\u062A", d: "\u064A\u0648\u0645", dd: "%d \u0623\u064A\u0627\u0645", M: "\u0634\u0647\u0631", MM: "%d \u0623\u0634\u0647\u0631", y: "\u0633\u0646\u0629", yy: "%d \u0633\u0646\u0648\u0627\u062A" }, week: { dow: 0, doy: 4 } }), e.defineLocale("ar-kw", { months: "\u064A\u0646\u0627\u064A\u0631_\u0641\u0628\u0631\u0627\u064A\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064A\u0644_\u0645\u0627\u064A_\u064A\u0648\u0646\u064A\u0648_\u064A\u0648\u0644\u064A\u0648\u0632_\u063A\u0634\u062A_\u0634\u062A\u0646\u0628\u0631_\u0623\u0643\u062A\u0648\u0628\u0631_\u0646\u0648\u0646\u0628\u0631_\u062F\u062C\u0646\u0628\u0631".split("_"), monthsShort: "\u064A\u0646\u0627\u064A\u0631_\u0641\u0628\u0631\u0627\u064A\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064A\u0644_\u0645\u0627\u064A_\u064A\u0648\u0646\u064A\u0648_\u064A\u0648\u0644\u064A\u0648\u0632_\u063A\u0634\u062A_\u0634\u062A\u0646\u0628\u0631_\u0623\u0643\u062A\u0648\u0628\u0631_\u0646\u0648\u0646\u0628\u0631_\u062F\u062C\u0646\u0628\u0631".split("_"), weekdays: "\u0627\u0644\u0623\u062D\u062F_\u0627\u0644\u0625\u062A\u0646\u064A\u0646_\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062E\u0645\u064A\u0633_\u0627\u0644\u062C\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062A".split("_"), weekdaysShort: "\u0627\u062D\u062F_\u0627\u062A\u0646\u064A\u0646_\u062B\u0644\u0627\u062B\u0627\u0621_\u0627\u0631\u0628\u0639\u0627\u0621_\u062E\u0645\u064A\u0633_\u062C\u0645\u0639\u0629_\u0633\u0628\u062A".split("_"), weekdaysMin: "\u062D_\u0646_\u062B_\u0631_\u062E_\u062C_\u0633".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[\u0627\u0644\u064A\u0648\u0645 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", nextDay: "[\u063A\u062F\u0627 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", nextWeek: "dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", lastDay: "[\u0623\u0645\u0633 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", lastWeek: "dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", sameElse: "L" }, relativeTime: { future: "\u0641\u064A %s", past: "\u0645\u0646\u0630 %s", s: "\u062B\u0648\u0627\u0646", ss: "%d \u062B\u0627\u0646\u064A\u0629", m: "\u062F\u0642\u064A\u0642\u0629", mm: "%d \u062F\u0642\u0627\u0626\u0642", h: "\u0633\u0627\u0639\u0629", hh: "%d \u0633\u0627\u0639\u0627\u062A", d: "\u064A\u0648\u0645", dd: "%d \u0623\u064A\u0627\u0645", M: "\u0634\u0647\u0631", MM: "%d \u0623\u0634\u0647\u0631", y: "\u0633\u0646\u0629", yy: "%d \u0633\u0646\u0648\u0627\u062A" }, week: { dow: 0, doy: 12 } });var a = { 1: "1", 2: "2", 3: "3", 4: "4", 5: "5", 6: "6", 7: "7", 8: "8", 9: "9", 0: "0" },
      _ = function _(e) {
    return 0 === e ? 0 : 1 === e ? 1 : 2 === e ? 2 : e % 100 >= 3 && e % 100 <= 10 ? 3 : e % 100 >= 11 ? 4 : 5;
  },
      s = { s: ["\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u064A\u0629", "\u062B\u0627\u0646\u064A\u0629 \u0648\u0627\u062D\u062F\u0629", ["\u062B\u0627\u0646\u064A\u062A\u0627\u0646", "\u062B\u0627\u0646\u064A\u062A\u064A\u0646"], "%d \u062B\u0648\u0627\u0646", "%d \u062B\u0627\u0646\u064A\u0629", "%d \u062B\u0627\u0646\u064A\u0629"], m: ["\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u0629", "\u062F\u0642\u064A\u0642\u0629 \u0648\u0627\u062D\u062F\u0629", ["\u062F\u0642\u064A\u0642\u062A\u0627\u0646", "\u062F\u0642\u064A\u0642\u062A\u064A\u0646"], "%d \u062F\u0642\u0627\u0626\u0642", "%d \u062F\u0642\u064A\u0642\u0629", "%d \u062F\u0642\u064A\u0642\u0629"], h: ["\u0623\u0642\u0644 \u0645\u0646 \u0633\u0627\u0639\u0629", "\u0633\u0627\u0639\u0629 \u0648\u0627\u062D\u062F\u0629", ["\u0633\u0627\u0639\u062A\u0627\u0646", "\u0633\u0627\u0639\u062A\u064A\u0646"], "%d \u0633\u0627\u0639\u0627\u062A", "%d \u0633\u0627\u0639\u0629", "%d \u0633\u0627\u0639\u0629"], d: ["\u0623\u0642\u0644 \u0645\u0646 \u064A\u0648\u0645", "\u064A\u0648\u0645 \u0648\u0627\u062D\u062F", ["\u064A\u0648\u0645\u0627\u0646", "\u064A\u0648\u0645\u064A\u0646"], "%d \u0623\u064A\u0627\u0645", "%d \u064A\u0648\u0645\u064B\u0627", "%d \u064A\u0648\u0645"], M: ["\u0623\u0642\u0644 \u0645\u0646 \u0634\u0647\u0631", "\u0634\u0647\u0631 \u0648\u0627\u062D\u062F", ["\u0634\u0647\u0631\u0627\u0646", "\u0634\u0647\u0631\u064A\u0646"], "%d \u0623\u0634\u0647\u0631", "%d \u0634\u0647\u0631\u0627", "%d \u0634\u0647\u0631"], y: ["\u0623\u0642\u0644 \u0645\u0646 \u0639\u0627\u0645", "\u0639\u0627\u0645 \u0648\u0627\u062D\u062F", ["\u0639\u0627\u0645\u0627\u0646", "\u0639\u0627\u0645\u064A\u0646"], "%d \u0623\u0639\u0648\u0627\u0645", "%d \u0639\u0627\u0645\u064B\u0627", "%d \u0639\u0627\u0645"] },
      d = function d(e) {
    return function (a, d, t, n) {
      var r = _(a),
          i = s[e][_(a)];return 2 === r && (i = i[d ? 0 : 1]), i.replace(/%d/i, a);
    };
  },
      t = ["\u064A\u0646\u0627\u064A\u0631", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u064A\u0648", "\u064A\u0648\u0644\u064A\u0648", "\u0623\u063A\u0633\u0637\u0633", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"];e.defineLocale("ar-ly", { months: t, monthsShort: t, weekdays: "\u0627\u0644\u0623\u062D\u062F_\u0627\u0644\u0625\u062B\u0646\u064A\u0646_\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062E\u0645\u064A\u0633_\u0627\u0644\u062C\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062A".split("_"), weekdaysShort: "\u0623\u062D\u062F_\u0625\u062B\u0646\u064A\u0646_\u062B\u0644\u0627\u062B\u0627\u0621_\u0623\u0631\u0628\u0639\u0627\u0621_\u062E\u0645\u064A\u0633_\u062C\u0645\u0639\u0629_\u0633\u0628\u062A".split("_"), weekdaysMin: "\u062D_\u0646_\u062B_\u0631_\u062E_\u062C_\u0633".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "D/\u200FM/\u200FYYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, meridiemParse: /\u0635|\u0645/, isPM: function isPM(e) {
      return "\u0645" === e;
    }, meridiem: function meridiem(e, a, _) {
      return e < 12 ? "\u0635" : "\u0645";
    }, calendar: { sameDay: "[\u0627\u0644\u064A\u0648\u0645 \u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629] LT", nextDay: "[\u063A\u062F\u064B\u0627 \u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629] LT", nextWeek: "dddd [\u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629] LT", lastDay: "[\u0623\u0645\u0633 \u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629] LT", lastWeek: "dddd [\u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629] LT", sameElse: "L" }, relativeTime: { future: "\u0628\u0639\u062F %s", past: "\u0645\u0646\u0630 %s", s: d("s"), ss: d("s"), m: d("m"), mm: d("m"), h: d("h"), hh: d("h"), d: d("d"), dd: d("d"), M: d("M"), MM: d("M"), y: d("y"), yy: d("y") }, preparse: function preparse(e) {
      return e.replace(/\u060c/g, ",");
    }, postformat: function postformat(e) {
      return e.replace(/\d/g, function (e) {
        return a[e];
      }).replace(/,/g, "\u060C");
    }, week: { dow: 6, doy: 12 } }), e.defineLocale("ar-ma", { months: "\u064A\u0646\u0627\u064A\u0631_\u0641\u0628\u0631\u0627\u064A\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064A\u0644_\u0645\u0627\u064A_\u064A\u0648\u0646\u064A\u0648_\u064A\u0648\u0644\u064A\u0648\u0632_\u063A\u0634\u062A_\u0634\u062A\u0646\u0628\u0631_\u0623\u0643\u062A\u0648\u0628\u0631_\u0646\u0648\u0646\u0628\u0631_\u062F\u062C\u0646\u0628\u0631".split("_"), monthsShort: "\u064A\u0646\u0627\u064A\u0631_\u0641\u0628\u0631\u0627\u064A\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064A\u0644_\u0645\u0627\u064A_\u064A\u0648\u0646\u064A\u0648_\u064A\u0648\u0644\u064A\u0648\u0632_\u063A\u0634\u062A_\u0634\u062A\u0646\u0628\u0631_\u0623\u0643\u062A\u0648\u0628\u0631_\u0646\u0648\u0646\u0628\u0631_\u062F\u062C\u0646\u0628\u0631".split("_"), weekdays: "\u0627\u0644\u0623\u062D\u062F_\u0627\u0644\u0625\u062A\u0646\u064A\u0646_\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062E\u0645\u064A\u0633_\u0627\u0644\u062C\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062A".split("_"), weekdaysShort: "\u0627\u062D\u062F_\u0627\u062A\u0646\u064A\u0646_\u062B\u0644\u0627\u062B\u0627\u0621_\u0627\u0631\u0628\u0639\u0627\u0621_\u062E\u0645\u064A\u0633_\u062C\u0645\u0639\u0629_\u0633\u0628\u062A".split("_"), weekdaysMin: "\u062D_\u0646_\u062B_\u0631_\u062E_\u062C_\u0633".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[\u0627\u0644\u064A\u0648\u0645 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", nextDay: "[\u063A\u062F\u0627 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", nextWeek: "dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", lastDay: "[\u0623\u0645\u0633 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", lastWeek: "dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", sameElse: "L" }, relativeTime: { future: "\u0641\u064A %s", past: "\u0645\u0646\u0630 %s", s: "\u062B\u0648\u0627\u0646", ss: "%d \u062B\u0627\u0646\u064A\u0629", m: "\u062F\u0642\u064A\u0642\u0629", mm: "%d \u062F\u0642\u0627\u0626\u0642", h: "\u0633\u0627\u0639\u0629", hh: "%d \u0633\u0627\u0639\u0627\u062A", d: "\u064A\u0648\u0645", dd: "%d \u0623\u064A\u0627\u0645", M: "\u0634\u0647\u0631", MM: "%d \u0623\u0634\u0647\u0631", y: "\u0633\u0646\u0629", yy: "%d \u0633\u0646\u0648\u0627\u062A" }, week: { dow: 6, doy: 12 } });var n = { 1: "\u0661", 2: "\u0662", 3: "\u0663", 4: "\u0664", 5: "\u0665", 6: "\u0666", 7: "\u0667", 8: "\u0668", 9: "\u0669", 0: "\u0660" },
      r = { "\u0661": "1", "\u0662": "2", "\u0663": "3", "\u0664": "4", "\u0665": "5", "\u0666": "6", "\u0667": "7", "\u0668": "8", "\u0669": "9", "\u0660": "0" };e.defineLocale("ar-sa", { months: "\u064A\u0646\u0627\u064A\u0631_\u0641\u0628\u0631\u0627\u064A\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064A\u0644_\u0645\u0627\u064A\u0648_\u064A\u0648\u0646\u064A\u0648_\u064A\u0648\u0644\u064A\u0648_\u0623\u063A\u0633\u0637\u0633_\u0633\u0628\u062A\u0645\u0628\u0631_\u0623\u0643\u062A\u0648\u0628\u0631_\u0646\u0648\u0641\u0645\u0628\u0631_\u062F\u064A\u0633\u0645\u0628\u0631".split("_"), monthsShort: "\u064A\u0646\u0627\u064A\u0631_\u0641\u0628\u0631\u0627\u064A\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064A\u0644_\u0645\u0627\u064A\u0648_\u064A\u0648\u0646\u064A\u0648_\u064A\u0648\u0644\u064A\u0648_\u0623\u063A\u0633\u0637\u0633_\u0633\u0628\u062A\u0645\u0628\u0631_\u0623\u0643\u062A\u0648\u0628\u0631_\u0646\u0648\u0641\u0645\u0628\u0631_\u062F\u064A\u0633\u0645\u0628\u0631".split("_"), weekdays: "\u0627\u0644\u0623\u062D\u062F_\u0627\u0644\u0625\u062B\u0646\u064A\u0646_\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062E\u0645\u064A\u0633_\u0627\u0644\u062C\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062A".split("_"), weekdaysShort: "\u0623\u062D\u062F_\u0625\u062B\u0646\u064A\u0646_\u062B\u0644\u0627\u062B\u0627\u0621_\u0623\u0631\u0628\u0639\u0627\u0621_\u062E\u0645\u064A\u0633_\u062C\u0645\u0639\u0629_\u0633\u0628\u062A".split("_"), weekdaysMin: "\u062D_\u0646_\u062B_\u0631_\u062E_\u062C_\u0633".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, meridiemParse: /\u0635|\u0645/, isPM: function isPM(e) {
      return "\u0645" === e;
    }, meridiem: function meridiem(e, a, _) {
      return e < 12 ? "\u0635" : "\u0645";
    }, calendar: { sameDay: "[\u0627\u0644\u064A\u0648\u0645 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", nextDay: "[\u063A\u062F\u0627 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", nextWeek: "dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", lastDay: "[\u0623\u0645\u0633 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", lastWeek: "dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", sameElse: "L" }, relativeTime: { future: "\u0641\u064A %s", past: "\u0645\u0646\u0630 %s", s: "\u062B\u0648\u0627\u0646", ss: "%d \u062B\u0627\u0646\u064A\u0629", m: "\u062F\u0642\u064A\u0642\u0629", mm: "%d \u062F\u0642\u0627\u0626\u0642", h: "\u0633\u0627\u0639\u0629", hh: "%d \u0633\u0627\u0639\u0627\u062A", d: "\u064A\u0648\u0645", dd: "%d \u0623\u064A\u0627\u0645", M: "\u0634\u0647\u0631", MM: "%d \u0623\u0634\u0647\u0631", y: "\u0633\u0646\u0629", yy: "%d \u0633\u0646\u0648\u0627\u062A" }, preparse: function preparse(e) {
      return e.replace(/[\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\u0660]/g, function (e) {
        return r[e];
      }).replace(/\u060c/g, ",");
    }, postformat: function postformat(e) {
      return e.replace(/\d/g, function (e) {
        return n[e];
      }).replace(/,/g, "\u060C");
    }, week: { dow: 0, doy: 6 } }), e.defineLocale("ar-tn", { months: "\u062C\u0627\u0646\u0641\u064A_\u0641\u064A\u0641\u0631\u064A_\u0645\u0627\u0631\u0633_\u0623\u0641\u0631\u064A\u0644_\u0645\u0627\u064A_\u062C\u0648\u0627\u0646_\u062C\u0648\u064A\u0644\u064A\u0629_\u0623\u0648\u062A_\u0633\u0628\u062A\u0645\u0628\u0631_\u0623\u0643\u062A\u0648\u0628\u0631_\u0646\u0648\u0641\u0645\u0628\u0631_\u062F\u064A\u0633\u0645\u0628\u0631".split("_"), monthsShort: "\u062C\u0627\u0646\u0641\u064A_\u0641\u064A\u0641\u0631\u064A_\u0645\u0627\u0631\u0633_\u0623\u0641\u0631\u064A\u0644_\u0645\u0627\u064A_\u062C\u0648\u0627\u0646_\u062C\u0648\u064A\u0644\u064A\u0629_\u0623\u0648\u062A_\u0633\u0628\u062A\u0645\u0628\u0631_\u0623\u0643\u062A\u0648\u0628\u0631_\u0646\u0648\u0641\u0645\u0628\u0631_\u062F\u064A\u0633\u0645\u0628\u0631".split("_"), weekdays: "\u0627\u0644\u0623\u062D\u062F_\u0627\u0644\u0625\u062B\u0646\u064A\u0646_\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062E\u0645\u064A\u0633_\u0627\u0644\u062C\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062A".split("_"), weekdaysShort: "\u0623\u062D\u062F_\u0625\u062B\u0646\u064A\u0646_\u062B\u0644\u0627\u062B\u0627\u0621_\u0623\u0631\u0628\u0639\u0627\u0621_\u062E\u0645\u064A\u0633_\u062C\u0645\u0639\u0629_\u0633\u0628\u062A".split("_"), weekdaysMin: "\u062D_\u0646_\u062B_\u0631_\u062E_\u062C_\u0633".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[\u0627\u0644\u064A\u0648\u0645 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", nextDay: "[\u063A\u062F\u0627 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", nextWeek: "dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", lastDay: "[\u0623\u0645\u0633 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", lastWeek: "dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT", sameElse: "L" }, relativeTime: { future: "\u0641\u064A %s", past: "\u0645\u0646\u0630 %s", s: "\u062B\u0648\u0627\u0646", ss: "%d \u062B\u0627\u0646\u064A\u0629", m: "\u062F\u0642\u064A\u0642\u0629", mm: "%d \u062F\u0642\u0627\u0626\u0642", h: "\u0633\u0627\u0639\u0629", hh: "%d \u0633\u0627\u0639\u0627\u062A", d: "\u064A\u0648\u0645", dd: "%d \u0623\u064A\u0627\u0645", M: "\u0634\u0647\u0631", MM: "%d \u0623\u0634\u0647\u0631", y: "\u0633\u0646\u0629", yy: "%d \u0633\u0646\u0648\u0627\u062A" }, week: { dow: 1, doy: 4 } });var i = { 1: "\u0661", 2: "\u0662", 3: "\u0663", 4: "\u0664", 5: "\u0665", 6: "\u0666", 7: "\u0667", 8: "\u0668", 9: "\u0669", 0: "\u0660" },
      m = { "\u0661": "1", "\u0662": "2", "\u0663": "3", "\u0664": "4", "\u0665": "5", "\u0666": "6", "\u0667": "7", "\u0668": "8", "\u0669": "9", "\u0660": "0" },
      o = function o(e) {
    return 0 === e ? 0 : 1 === e ? 1 : 2 === e ? 2 : e % 100 >= 3 && e % 100 <= 10 ? 3 : e % 100 >= 11 ? 4 : 5;
  },
      u = { s: ["\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u064A\u0629", "\u062B\u0627\u0646\u064A\u0629 \u0648\u0627\u062D\u062F\u0629", ["\u062B\u0627\u0646\u064A\u062A\u0627\u0646", "\u062B\u0627\u0646\u064A\u062A\u064A\u0646"], "%d \u062B\u0648\u0627\u0646", "%d \u062B\u0627\u0646\u064A\u0629", "%d \u062B\u0627\u0646\u064A\u0629"], m: ["\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u0629", "\u062F\u0642\u064A\u0642\u0629 \u0648\u0627\u062D\u062F\u0629", ["\u062F\u0642\u064A\u0642\u062A\u0627\u0646", "\u062F\u0642\u064A\u0642\u062A\u064A\u0646"], "%d \u062F\u0642\u0627\u0626\u0642", "%d \u062F\u0642\u064A\u0642\u0629", "%d \u062F\u0642\u064A\u0642\u0629"], h: ["\u0623\u0642\u0644 \u0645\u0646 \u0633\u0627\u0639\u0629", "\u0633\u0627\u0639\u0629 \u0648\u0627\u062D\u062F\u0629", ["\u0633\u0627\u0639\u062A\u0627\u0646", "\u0633\u0627\u0639\u062A\u064A\u0646"], "%d \u0633\u0627\u0639\u0627\u062A", "%d \u0633\u0627\u0639\u0629", "%d \u0633\u0627\u0639\u0629"], d: ["\u0623\u0642\u0644 \u0645\u0646 \u064A\u0648\u0645", "\u064A\u0648\u0645 \u0648\u0627\u062D\u062F", ["\u064A\u0648\u0645\u0627\u0646", "\u064A\u0648\u0645\u064A\u0646"], "%d \u0623\u064A\u0627\u0645", "%d \u064A\u0648\u0645\u064B\u0627", "%d \u064A\u0648\u0645"], M: ["\u0623\u0642\u0644 \u0645\u0646 \u0634\u0647\u0631", "\u0634\u0647\u0631 \u0648\u0627\u062D\u062F", ["\u0634\u0647\u0631\u0627\u0646", "\u0634\u0647\u0631\u064A\u0646"], "%d \u0623\u0634\u0647\u0631", "%d \u0634\u0647\u0631\u0627", "%d \u0634\u0647\u0631"], y: ["\u0623\u0642\u0644 \u0645\u0646 \u0639\u0627\u0645", "\u0639\u0627\u0645 \u0648\u0627\u062D\u062F", ["\u0639\u0627\u0645\u0627\u0646", "\u0639\u0627\u0645\u064A\u0646"], "%d \u0623\u0639\u0648\u0627\u0645", "%d \u0639\u0627\u0645\u064B\u0627", "%d \u0639\u0627\u0645"] },
      l = function l(e) {
    return function (a, _, s, d) {
      var t = o(a),
          n = u[e][o(a)];return 2 === t && (n = n[_ ? 0 : 1]), n.replace(/%d/i, a);
    };
  },
      M = ["\u064A\u0646\u0627\u064A\u0631", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u064A\u0648", "\u064A\u0648\u0644\u064A\u0648", "\u0623\u063A\u0633\u0637\u0633", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"];e.defineLocale("ar", { months: M, monthsShort: M, weekdays: "\u0627\u0644\u0623\u062D\u062F_\u0627\u0644\u0625\u062B\u0646\u064A\u0646_\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062E\u0645\u064A\u0633_\u0627\u0644\u062C\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062A".split("_"), weekdaysShort: "\u0623\u062D\u062F_\u0625\u062B\u0646\u064A\u0646_\u062B\u0644\u0627\u062B\u0627\u0621_\u0623\u0631\u0628\u0639\u0627\u0621_\u062E\u0645\u064A\u0633_\u062C\u0645\u0639\u0629_\u0633\u0628\u062A".split("_"), weekdaysMin: "\u062D_\u0646_\u062B_\u0631_\u062E_\u062C_\u0633".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "D/\u200FM/\u200FYYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, meridiemParse: /\u0635|\u0645/, isPM: function isPM(e) {
      return "\u0645" === e;
    }, meridiem: function meridiem(e, a, _) {
      return e < 12 ? "\u0635" : "\u0645";
    }, calendar: { sameDay: "[\u0627\u0644\u064A\u0648\u0645 \u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629] LT", nextDay: "[\u063A\u062F\u064B\u0627 \u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629] LT", nextWeek: "dddd [\u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629] LT", lastDay: "[\u0623\u0645\u0633 \u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629] LT", lastWeek: "dddd [\u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629] LT", sameElse: "L" }, relativeTime: { future: "\u0628\u0639\u062F %s", past: "\u0645\u0646\u0630 %s", s: l("s"), ss: l("s"), m: l("m"), mm: l("m"), h: l("h"), hh: l("h"), d: l("d"), dd: l("d"), M: l("M"), MM: l("M"), y: l("y"), yy: l("y") }, preparse: function preparse(e) {
      return e.replace(/[\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669\u0660]/g, function (e) {
        return m[e];
      }).replace(/\u060c/g, ",");
    }, postformat: function postformat(e) {
      return e.replace(/\d/g, function (e) {
        return i[e];
      }).replace(/,/g, "\u060C");
    }, week: { dow: 6, doy: 12 } });var L = { 1: "-inci", 5: "-inci", 8: "-inci", 70: "-inci", 80: "-inci", 2: "-nci", 7: "-nci", 20: "-nci", 50: "-nci", 3: "-\xfcnc\xfc", 4: "-\xfcnc\xfc", 100: "-\xfcnc\xfc", 6: "-nc\u0131", 9: "-uncu", 10: "-uncu", 30: "-uncu", 60: "-\u0131nc\u0131", 90: "-\u0131nc\u0131" };function Y(e, a, _) {
    var s, d;return "m" === _ ? a ? "\u0445\u0432\u0456\u043B\u0456\u043D\u0430" : "\u0445\u0432\u0456\u043B\u0456\u043D\u0443" : "h" === _ ? a ? "\u0433\u0430\u0434\u0437\u0456\u043D\u0430" : "\u0433\u0430\u0434\u0437\u0456\u043D\u0443" : e + " " + (s = +e, d = { ss: a ? "\u0441\u0435\u043A\u0443\u043D\u0434\u0430_\u0441\u0435\u043A\u0443\u043D\u0434\u044B_\u0441\u0435\u043A\u0443\u043D\u0434" : "\u0441\u0435\u043A\u0443\u043D\u0434\u0443_\u0441\u0435\u043A\u0443\u043D\u0434\u044B_\u0441\u0435\u043A\u0443\u043D\u0434", mm: a ? "\u0445\u0432\u0456\u043B\u0456\u043D\u0430_\u0445\u0432\u0456\u043B\u0456\u043D\u044B_\u0445\u0432\u0456\u043B\u0456\u043D" : "\u0445\u0432\u0456\u043B\u0456\u043D\u0443_\u0445\u0432\u0456\u043B\u0456\u043D\u044B_\u0445\u0432\u0456\u043B\u0456\u043D", hh: a ? "\u0433\u0430\u0434\u0437\u0456\u043D\u0430_\u0433\u0430\u0434\u0437\u0456\u043D\u044B_\u0433\u0430\u0434\u0437\u0456\u043D" : "\u0433\u0430\u0434\u0437\u0456\u043D\u0443_\u0433\u0430\u0434\u0437\u0456\u043D\u044B_\u0433\u0430\u0434\u0437\u0456\u043D", dd: "\u0434\u0437\u0435\u043D\u044C_\u0434\u043D\u0456_\u0434\u0437\u0451\u043D", MM: "\u043C\u0435\u0441\u044F\u0446_\u043C\u0435\u0441\u044F\u0446\u044B_\u043C\u0435\u0441\u044F\u0446\u0430\u045E", yy: "\u0433\u043E\u0434_\u0433\u0430\u0434\u044B_\u0433\u0430\u0434\u043E\u045E" }[_].split("_"), s % 10 == 1 && s % 100 != 11 ? d[0] : s % 10 >= 2 && s % 10 <= 4 && (s % 100 < 10 || s % 100 >= 20) ? d[1] : d[2]);
  }e.defineLocale("az", { months: "yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"), monthsShort: "yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"), weekdays: "Bazar_Bazar ert\u0259si_\xC7\u0259r\u015F\u0259nb\u0259 ax\u015Fam\u0131_\xC7\u0259r\u015F\u0259nb\u0259_C\xFCm\u0259 ax\u015Fam\u0131_C\xFCm\u0259_\u015E\u0259nb\u0259".split("_"), weekdaysShort: "Baz_BzE_\xC7Ax_\xC7\u0259r_CAx_C\xFCm_\u015E\u0259n".split("_"), weekdaysMin: "Bz_BE_\xC7A_\xC7\u0259_CA_C\xFC_\u015E\u0259".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[bug\xfcn saat] LT", nextDay: "[sabah saat] LT", nextWeek: "[g\u0259l\u0259n h\u0259ft\u0259] dddd [saat] LT", lastDay: "[d\xFCn\u0259n] LT", lastWeek: "[ke\xE7\u0259n h\u0259ft\u0259] dddd [saat] LT", sameElse: "L" }, relativeTime: { future: "%s sonra", past: "%s \u0259vv\u0259l", s: "birne\xE7\u0259 saniyy\u0259", ss: "%d saniy\u0259", m: "bir d\u0259qiq\u0259", mm: "%d d\u0259qiq\u0259", h: "bir saat", hh: "%d saat", d: "bir g\xfcn", dd: "%d g\xfcn", M: "bir ay", MM: "%d ay", y: "bir il", yy: "%d il" }, meridiemParse: /gec\u0259|s\u0259h\u0259r|g\xfcnd\xfcz|ax\u015fam/, isPM: function isPM(e) {
      return (/^(g\xfcnd\xfcz|ax\u015fam)$/.test(e)
      );
    }, meridiem: function meridiem(e, a, _) {
      return e < 4 ? "gec\u0259" : e < 12 ? "s\u0259h\u0259r" : e < 17 ? "g\xfcnd\xfcz" : "ax\u015Fam";
    }, dayOfMonthOrdinalParse: /\d{1,2}-(\u0131nc\u0131|inci|nci|\xfcnc\xfc|nc\u0131|uncu)/, ordinal: function ordinal(e) {
      if (0 === e) return e + "-\u0131nc\u0131";var a = e % 10;return e + (L[a] || L[e % 100 - a] || L[e >= 100 ? 100 : null]);
    }, week: { dow: 1, doy: 7 } }), e.defineLocale("be", { months: { format: "\u0441\u0442\u0443\u0434\u0437\u0435\u043D\u044F_\u043B\u044E\u0442\u0430\u0433\u0430_\u0441\u0430\u043A\u0430\u0432\u0456\u043A\u0430_\u043A\u0440\u0430\u0441\u0430\u0432\u0456\u043A\u0430_\u0442\u0440\u0430\u045E\u043D\u044F_\u0447\u044D\u0440\u0432\u0435\u043D\u044F_\u043B\u0456\u043F\u0435\u043D\u044F_\u0436\u043D\u0456\u045E\u043D\u044F_\u0432\u0435\u0440\u0430\u0441\u043D\u044F_\u043A\u0430\u0441\u0442\u0440\u044B\u0447\u043D\u0456\u043A\u0430_\u043B\u0456\u0441\u0442\u0430\u043F\u0430\u0434\u0430_\u0441\u043D\u0435\u0436\u043D\u044F".split("_"), standalone: "\u0441\u0442\u0443\u0434\u0437\u0435\u043D\u044C_\u043B\u044E\u0442\u044B_\u0441\u0430\u043A\u0430\u0432\u0456\u043A_\u043A\u0440\u0430\u0441\u0430\u0432\u0456\u043A_\u0442\u0440\u0430\u0432\u0435\u043D\u044C_\u0447\u044D\u0440\u0432\u0435\u043D\u044C_\u043B\u0456\u043F\u0435\u043D\u044C_\u0436\u043D\u0456\u0432\u0435\u043D\u044C_\u0432\u0435\u0440\u0430\u0441\u0435\u043D\u044C_\u043A\u0430\u0441\u0442\u0440\u044B\u0447\u043D\u0456\u043A_\u043B\u0456\u0441\u0442\u0430\u043F\u0430\u0434_\u0441\u043D\u0435\u0436\u0430\u043D\u044C".split("_") }, monthsShort: "\u0441\u0442\u0443\u0434_\u043B\u044E\u0442_\u0441\u0430\u043A_\u043A\u0440\u0430\u0441_\u0442\u0440\u0430\u0432_\u0447\u044D\u0440\u0432_\u043B\u0456\u043F_\u0436\u043D\u0456\u0432_\u0432\u0435\u0440_\u043A\u0430\u0441\u0442_\u043B\u0456\u0441\u0442_\u0441\u043D\u0435\u0436".split("_"), weekdays: { format: "\u043D\u044F\u0434\u0437\u0435\u043B\u044E_\u043F\u0430\u043D\u044F\u0434\u0437\u0435\u043B\u0430\u043A_\u0430\u045E\u0442\u043E\u0440\u0430\u043A_\u0441\u0435\u0440\u0430\u0434\u0443_\u0447\u0430\u0446\u0432\u0435\u0440_\u043F\u044F\u0442\u043D\u0456\u0446\u0443_\u0441\u0443\u0431\u043E\u0442\u0443".split("_"), standalone: "\u043D\u044F\u0434\u0437\u0435\u043B\u044F_\u043F\u0430\u043D\u044F\u0434\u0437\u0435\u043B\u0430\u043A_\u0430\u045E\u0442\u043E\u0440\u0430\u043A_\u0441\u0435\u0440\u0430\u0434\u0430_\u0447\u0430\u0446\u0432\u0435\u0440_\u043F\u044F\u0442\u043D\u0456\u0446\u0430_\u0441\u0443\u0431\u043E\u0442\u0430".split("_"), isFormat: /\[ ?[\u0412\u0432] ?(?:\u043c\u0456\u043d\u0443\u043b\u0443\u044e|\u043d\u0430\u0441\u0442\u0443\u043f\u043d\u0443\u044e)? ?\] ?dddd/ }, weekdaysShort: "\u043D\u0434_\u043F\u043D_\u0430\u0442_\u0441\u0440_\u0447\u0446_\u043F\u0442_\u0441\u0431".split("_"), weekdaysMin: "\u043D\u0434_\u043F\u043D_\u0430\u0442_\u0441\u0440_\u0447\u0446_\u043F\u0442_\u0441\u0431".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY \u0433.", LLL: "D MMMM YYYY \u0433., HH:mm", LLLL: "dddd, D MMMM YYYY \u0433., HH:mm" }, calendar: { sameDay: "[\u0421\u0451\u043D\u043D\u044F \u045E] LT", nextDay: "[\u0417\u0430\u045E\u0442\u0440\u0430 \u045E] LT", lastDay: "[\u0423\u0447\u043E\u0440\u0430 \u045E] LT", nextWeek: function nextWeek() {
        return "[\u0423] dddd [\u045E] LT";
      }, lastWeek: function lastWeek() {
        switch (this.day()) {case 0:case 3:case 5:case 6:
            return "[\u0423 \u043C\u0456\u043D\u0443\u043B\u0443\u044E] dddd [\u045E] LT";case 1:case 2:case 4:
            return "[\u0423 \u043C\u0456\u043D\u0443\u043B\u044B] dddd [\u045E] LT";}
      }, sameElse: "L" }, relativeTime: { future: "\u043F\u0440\u0430\u0437 %s", past: "%s \u0442\u0430\u043C\u0443", s: "\u043D\u0435\u043A\u0430\u043B\u044C\u043A\u0456 \u0441\u0435\u043A\u0443\u043D\u0434", m: Y, mm: Y, h: Y, hh: Y, d: "\u0434\u0437\u0435\u043D\u044C", dd: Y, M: "\u043C\u0435\u0441\u044F\u0446", MM: Y, y: "\u0433\u043E\u0434", yy: Y }, meridiemParse: /\u043d\u043e\u0447\u044b|\u0440\u0430\u043d\u0456\u0446\u044b|\u0434\u043d\u044f|\u0432\u0435\u0447\u0430\u0440\u0430/, isPM: function isPM(e) {
      return (/^(\u0434\u043d\u044f|\u0432\u0435\u0447\u0430\u0440\u0430)$/.test(e)
      );
    }, meridiem: function meridiem(e, a, _) {
      return e < 4 ? "\u043D\u043E\u0447\u044B" : e < 12 ? "\u0440\u0430\u043D\u0456\u0446\u044B" : e < 17 ? "\u0434\u043D\u044F" : "\u0432\u0435\u0447\u0430\u0440\u0430";
    }, dayOfMonthOrdinalParse: /\d{1,2}-(\u0456|\u044b|\u0433\u0430)/, ordinal: function ordinal(e, a) {
      switch (a) {case "M":case "d":case "DDD":case "w":case "W":
          return e % 10 != 2 && e % 10 != 3 || e % 100 == 12 || e % 100 == 13 ? e + "-\u044B" : e + "-\u0456";case "D":
          return e + "-\u0433\u0430";default:
          return e;}
    }, week: { dow: 1, doy: 7 } }), e.defineLocale("bg", { months: "\u044F\u043D\u0443\u0430\u0440\u0438_\u0444\u0435\u0432\u0440\u0443\u0430\u0440\u0438_\u043C\u0430\u0440\u0442_\u0430\u043F\u0440\u0438\u043B_\u043C\u0430\u0439_\u044E\u043D\u0438_\u044E\u043B\u0438_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043F\u0442\u0435\u043C\u0432\u0440\u0438_\u043E\u043A\u0442\u043E\u043C\u0432\u0440\u0438_\u043D\u043E\u0435\u043C\u0432\u0440\u0438_\u0434\u0435\u043A\u0435\u043C\u0432\u0440\u0438".split("_"), monthsShort: "\u044F\u043D\u0440_\u0444\u0435\u0432_\u043C\u0430\u0440_\u0430\u043F\u0440_\u043C\u0430\u0439_\u044E\u043D\u0438_\u044E\u043B\u0438_\u0430\u0432\u0433_\u0441\u0435\u043F_\u043E\u043A\u0442_\u043D\u043E\u0435_\u0434\u0435\u043A".split("_"), weekdays: "\u043D\u0435\u0434\u0435\u043B\u044F_\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u043D\u0438\u043A_\u0432\u0442\u043E\u0440\u043D\u0438\u043A_\u0441\u0440\u044F\u0434\u0430_\u0447\u0435\u0442\u0432\u044A\u0440\u0442\u044A\u043A_\u043F\u0435\u0442\u044A\u043A_\u0441\u044A\u0431\u043E\u0442\u0430".split("_"), weekdaysShort: "\u043D\u0435\u0434_\u043F\u043E\u043D_\u0432\u0442\u043E_\u0441\u0440\u044F_\u0447\u0435\u0442_\u043F\u0435\u0442_\u0441\u044A\u0431".split("_"), weekdaysMin: "\u043D\u0434_\u043F\u043D_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043F\u0442_\u0441\u0431".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "D.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY H:mm", LLLL: "dddd, D MMMM YYYY H:mm" }, calendar: { sameDay: "[\u0414\u043D\u0435\u0441 \u0432] LT", nextDay: "[\u0423\u0442\u0440\u0435 \u0432] LT", nextWeek: "dddd [\u0432] LT", lastDay: "[\u0412\u0447\u0435\u0440\u0430 \u0432] LT", lastWeek: function lastWeek() {
        switch (this.day()) {case 0:case 3:case 6:
            return "[\u0412 \u0438\u0437\u043C\u0438\u043D\u0430\u043B\u0430\u0442\u0430] dddd [\u0432] LT";case 1:case 2:case 4:case 5:
            return "[\u0412 \u0438\u0437\u043C\u0438\u043D\u0430\u043B\u0438\u044F] dddd [\u0432] LT";}
      }, sameElse: "L" }, relativeTime: { future: "\u0441\u043B\u0435\u0434 %s", past: "\u043F\u0440\u0435\u0434\u0438 %s", s: "\u043D\u044F\u043A\u043E\u043B\u043A\u043E \u0441\u0435\u043A\u0443\u043D\u0434\u0438", ss: "%d \u0441\u0435\u043A\u0443\u043D\u0434\u0438", m: "\u043C\u0438\u043D\u0443\u0442\u0430", mm: "%d \u043C\u0438\u043D\u0443\u0442\u0438", h: "\u0447\u0430\u0441", hh: "%d \u0447\u0430\u0441\u0430", d: "\u0434\u0435\u043D", dd: "%d \u0434\u043D\u0438", M: "\u043C\u0435\u0441\u0435\u0446", MM: "%d \u043C\u0435\u0441\u0435\u0446\u0430", y: "\u0433\u043E\u0434\u0438\u043D\u0430", yy: "%d \u0433\u043E\u0434\u0438\u043D\u0438" }, dayOfMonthOrdinalParse: /\d{1,2}-(\u0435\u0432|\u0435\u043d|\u0442\u0438|\u0432\u0438|\u0440\u0438|\u043c\u0438)/, ordinal: function ordinal(e) {
      var a = e % 10,
          _ = e % 100;return 0 === e ? e + "-\u0435\u0432" : 0 === _ ? e + "-\u0435\u043D" : _ > 10 && _ < 20 ? e + "-\u0442\u0438" : 1 === a ? e + "-\u0432\u0438" : 2 === a ? e + "-\u0440\u0438" : 7 === a || 8 === a ? e + "-\u043C\u0438" : e + "-\u0442\u0438";
    }, week: { dow: 1, doy: 7 } }), e.defineLocale("bm", { months: "Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_M\u025Bkalo_Zuw\u025Bnkalo_Zuluyekalo_Utikalo_S\u025Btanburukalo_\u0254kut\u0254burukalo_Nowanburukalo_Desanburukalo".split("_"), monthsShort: "Zan_Few_Mar_Awi_M\u025B_Zuw_Zul_Uti_S\u025Bt_\u0254ku_Now_Des".split("_"), weekdays: "Kari_Nt\u025Bn\u025Bn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"), weekdaysShort: "Kar_Nt\u025B_Tar_Ara_Ala_Jum_Sib".split("_"), weekdaysMin: "Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "MMMM [tile] D [san] YYYY", LLL: "MMMM [tile] D [san] YYYY [l\u025Br\u025B] HH:mm", LLLL: "dddd MMMM [tile] D [san] YYYY [l\u025Br\u025B] HH:mm" }, calendar: { sameDay: "[Bi l\u025Br\u025B] LT", nextDay: "[Sini l\u025Br\u025B] LT", nextWeek: "dddd [don l\u025Br\u025B] LT", lastDay: "[Kunu l\u025Br\u025B] LT", lastWeek: "dddd [t\u025Bm\u025Bnen l\u025Br\u025B] LT", sameElse: "L" }, relativeTime: { future: "%s k\u0254n\u0254", past: "a b\u025B %s b\u0254", s: "sanga dama dama", ss: "sekondi %d", m: "miniti kelen", mm: "miniti %d", h: "l\u025Br\u025B kelen", hh: "l\u025Br\u025B %d", d: "tile kelen", dd: "tile %d", M: "kalo kelen", MM: "kalo %d", y: "san kelen", yy: "san %d" }, week: { dow: 1, doy: 4 } });var h = { 1: "\u09E7", 2: "\u09E8", 3: "\u09E9", 4: "\u09EA", 5: "\u09EB", 6: "\u09EC", 7: "\u09ED", 8: "\u09EE", 9: "\u09EF", 0: "\u09E6" },
      y = { "\u09E7": "1", "\u09E8": "2", "\u09E9": "3", "\u09EA": "4", "\u09EB": "5", "\u09EC": "6", "\u09ED": "7", "\u09EE": "8", "\u09EF": "9", "\u09E6": "0" };e.defineLocale("bn", { months: "\u099C\u09BE\u09A8\u09C1\u09DF\u09BE\u09B0\u09C0_\u09AB\u09C7\u09AC\u09CD\u09B0\u09C1\u09DF\u09BE\u09B0\u09BF_\u09AE\u09BE\u09B0\u09CD\u099A_\u098F\u09AA\u09CD\u09B0\u09BF\u09B2_\u09AE\u09C7_\u099C\u09C1\u09A8_\u099C\u09C1\u09B2\u09BE\u0987_\u0986\u0997\u09B8\u09CD\u099F_\u09B8\u09C7\u09AA\u09CD\u099F\u09C7\u09AE\u09CD\u09AC\u09B0_\u0985\u0995\u09CD\u099F\u09CB\u09AC\u09B0_\u09A8\u09AD\u09C7\u09AE\u09CD\u09AC\u09B0_\u09A1\u09BF\u09B8\u09C7\u09AE\u09CD\u09AC\u09B0".split("_"), monthsShort: "\u099C\u09BE\u09A8\u09C1_\u09AB\u09C7\u09AC_\u09AE\u09BE\u09B0\u09CD\u099A_\u098F\u09AA\u09CD\u09B0_\u09AE\u09C7_\u099C\u09C1\u09A8_\u099C\u09C1\u09B2_\u0986\u0997_\u09B8\u09C7\u09AA\u09CD\u099F_\u0985\u0995\u09CD\u099F\u09CB_\u09A8\u09AD\u09C7_\u09A1\u09BF\u09B8\u09C7".split("_"), weekdays: "\u09B0\u09AC\u09BF\u09AC\u09BE\u09B0_\u09B8\u09CB\u09AE\u09AC\u09BE\u09B0_\u09AE\u0999\u09CD\u0997\u09B2\u09AC\u09BE\u09B0_\u09AC\u09C1\u09A7\u09AC\u09BE\u09B0_\u09AC\u09C3\u09B9\u09B8\u09CD\u09AA\u09A4\u09BF\u09AC\u09BE\u09B0_\u09B6\u09C1\u0995\u09CD\u09B0\u09AC\u09BE\u09B0_\u09B6\u09A8\u09BF\u09AC\u09BE\u09B0".split("_"), weekdaysShort: "\u09B0\u09AC\u09BF_\u09B8\u09CB\u09AE_\u09AE\u0999\u09CD\u0997\u09B2_\u09AC\u09C1\u09A7_\u09AC\u09C3\u09B9\u09B8\u09CD\u09AA\u09A4\u09BF_\u09B6\u09C1\u0995\u09CD\u09B0_\u09B6\u09A8\u09BF".split("_"), weekdaysMin: "\u09B0\u09AC\u09BF_\u09B8\u09CB\u09AE_\u09AE\u0999\u09CD\u0997_\u09AC\u09C1\u09A7_\u09AC\u09C3\u09B9\u0983_\u09B6\u09C1\u0995\u09CD\u09B0_\u09B6\u09A8\u09BF".split("_"), longDateFormat: { LT: "A h:mm \u09B8\u09AE\u09DF", LTS: "A h:mm:ss \u09B8\u09AE\u09DF", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm \u09B8\u09AE\u09DF", LLLL: "dddd, D MMMM YYYY, A h:mm \u09B8\u09AE\u09DF" }, calendar: { sameDay: "[\u0986\u099C] LT", nextDay: "[\u0986\u0997\u09BE\u09AE\u09C0\u0995\u09BE\u09B2] LT", nextWeek: "dddd, LT", lastDay: "[\u0997\u09A4\u0995\u09BE\u09B2] LT", lastWeek: "[\u0997\u09A4] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s \u09AA\u09B0\u09C7", past: "%s \u0986\u0997\u09C7", s: "\u0995\u09DF\u09C7\u0995 \u09B8\u09C7\u0995\u09C7\u09A8\u09CD\u09A1", ss: "%d \u09B8\u09C7\u0995\u09C7\u09A8\u09CD\u09A1", m: "\u098F\u0995 \u09AE\u09BF\u09A8\u09BF\u099F", mm: "%d \u09AE\u09BF\u09A8\u09BF\u099F", h: "\u098F\u0995 \u0998\u09A8\u09CD\u099F\u09BE", hh: "%d \u0998\u09A8\u09CD\u099F\u09BE", d: "\u098F\u0995 \u09A6\u09BF\u09A8", dd: "%d \u09A6\u09BF\u09A8", M: "\u098F\u0995 \u09AE\u09BE\u09B8", MM: "%d \u09AE\u09BE\u09B8", y: "\u098F\u0995 \u09AC\u099B\u09B0", yy: "%d \u09AC\u099B\u09B0" }, preparse: function preparse(e) {
      return e.replace(/[\u09e7\u09e8\u09e9\u09ea\u09eb\u09ec\u09ed\u09ee\u09ef\u09e6]/g, function (e) {
        return y[e];
      });
    }, postformat: function postformat(e) {
      return e.replace(/\d/g, function (e) {
        return h[e];
      });
    }, meridiemParse: /\u09b0\u09be\u09a4|\u09b8\u0995\u09be\u09b2|\u09a6\u09c1\u09aa\u09c1\u09b0|\u09ac\u09bf\u0995\u09be\u09b2|\u09b0\u09be\u09a4/, meridiemHour: function meridiemHour(e, a) {
      return 12 === e && (e = 0), "\u09B0\u09BE\u09A4" === a && e >= 4 || "\u09A6\u09C1\u09AA\u09C1\u09B0" === a && e < 5 || "\u09AC\u09BF\u0995\u09BE\u09B2" === a ? e + 12 : e;
    }, meridiem: function meridiem(e, a, _) {
      return e < 4 ? "\u09B0\u09BE\u09A4" : e < 10 ? "\u09B8\u0995\u09BE\u09B2" : e < 17 ? "\u09A6\u09C1\u09AA\u09C1\u09B0" : e < 20 ? "\u09AC\u09BF\u0995\u09BE\u09B2" : "\u09B0\u09BE\u09A4";
    }, week: { dow: 0, doy: 6 } });var c = { 1: "\u0F21", 2: "\u0F22", 3: "\u0F23", 4: "\u0F24", 5: "\u0F25", 6: "\u0F26", 7: "\u0F27", 8: "\u0F28", 9: "\u0F29", 0: "\u0F20" },
      k = { "\u0F21": "1", "\u0F22": "2", "\u0F23": "3", "\u0F24": "4", "\u0F25": "5", "\u0F26": "6", "\u0F27": "7", "\u0F28": "8", "\u0F29": "9", "\u0F20": "0" };function p(e, a, _) {
    return e + " " + function (e, a) {
      if (2 === a) return function (e) {
        var a = { m: "v", b: "v", d: "z" };if (void 0 === a[e.charAt(0)]) return e;return a[e.charAt(0)] + e.substring(1);
      }(e);return e;
    }({ mm: "munutenn", MM: "miz", dd: "devezh" }[_], e);
  }function D(e, a, _) {
    var s = e + " ";switch (_) {case "ss":
        return s += 1 === e ? "sekunda" : 2 === e || 3 === e || 4 === e ? "sekunde" : "sekundi";case "m":
        return a ? "jedna minuta" : "jedne minute";case "mm":
        return s += 1 === e ? "minuta" : 2 === e || 3 === e || 4 === e ? "minute" : "minuta";case "h":
        return a ? "jedan sat" : "jednog sata";case "hh":
        return s += 1 === e ? "sat" : 2 === e || 3 === e || 4 === e ? "sata" : "sati";case "dd":
        return s += 1 === e ? "dan" : "dana";case "MM":
        return s += 1 === e ? "mjesec" : 2 === e || 3 === e || 4 === e ? "mjeseca" : "mjeseci";case "yy":
        return s += 1 === e ? "godina" : 2 === e || 3 === e || 4 === e ? "godine" : "godina";}
  }e.defineLocale("bo", { months: "\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F51\u0F44\u0F0B\u0F54\u0F7C_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F42\u0F49\u0F72\u0F66\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F42\u0F66\u0F74\u0F58\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F5E\u0F72\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F63\u0F94\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F51\u0FB2\u0F74\u0F42\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F51\u0F74\u0F53\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F62\u0F92\u0FB1\u0F51\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F51\u0F42\u0F74\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F45\u0F74\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F45\u0F74\u0F0B\u0F42\u0F45\u0F72\u0F42\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F45\u0F74\u0F0B\u0F42\u0F49\u0F72\u0F66\u0F0B\u0F54".split("_"), monthsShort: "\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F51\u0F44\u0F0B\u0F54\u0F7C_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F42\u0F49\u0F72\u0F66\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F42\u0F66\u0F74\u0F58\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F5E\u0F72\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F63\u0F94\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F51\u0FB2\u0F74\u0F42\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F51\u0F74\u0F53\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F62\u0F92\u0FB1\u0F51\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F51\u0F42\u0F74\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F45\u0F74\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F45\u0F74\u0F0B\u0F42\u0F45\u0F72\u0F42\u0F0B\u0F54_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F56\u0F45\u0F74\u0F0B\u0F42\u0F49\u0F72\u0F66\u0F0B\u0F54".split("_"), weekdays: "\u0F42\u0F5F\u0F60\u0F0B\u0F49\u0F72\u0F0B\u0F58\u0F0B_\u0F42\u0F5F\u0F60\u0F0B\u0F5F\u0FB3\u0F0B\u0F56\u0F0B_\u0F42\u0F5F\u0F60\u0F0B\u0F58\u0F72\u0F42\u0F0B\u0F51\u0F58\u0F62\u0F0B_\u0F42\u0F5F\u0F60\u0F0B\u0F63\u0FB7\u0F42\u0F0B\u0F54\u0F0B_\u0F42\u0F5F\u0F60\u0F0B\u0F55\u0F74\u0F62\u0F0B\u0F56\u0F74_\u0F42\u0F5F\u0F60\u0F0B\u0F54\u0F0B\u0F66\u0F44\u0F66\u0F0B_\u0F42\u0F5F\u0F60\u0F0B\u0F66\u0FA4\u0F7A\u0F53\u0F0B\u0F54\u0F0B".split("_"), weekdaysShort: "\u0F49\u0F72\u0F0B\u0F58\u0F0B_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B_\u0F58\u0F72\u0F42\u0F0B\u0F51\u0F58\u0F62\u0F0B_\u0F63\u0FB7\u0F42\u0F0B\u0F54\u0F0B_\u0F55\u0F74\u0F62\u0F0B\u0F56\u0F74_\u0F54\u0F0B\u0F66\u0F44\u0F66\u0F0B_\u0F66\u0FA4\u0F7A\u0F53\u0F0B\u0F54\u0F0B".split("_"), weekdaysMin: "\u0F49\u0F72\u0F0B\u0F58\u0F0B_\u0F5F\u0FB3\u0F0B\u0F56\u0F0B_\u0F58\u0F72\u0F42\u0F0B\u0F51\u0F58\u0F62\u0F0B_\u0F63\u0FB7\u0F42\u0F0B\u0F54\u0F0B_\u0F55\u0F74\u0F62\u0F0B\u0F56\u0F74_\u0F54\u0F0B\u0F66\u0F44\u0F66\u0F0B_\u0F66\u0FA4\u0F7A\u0F53\u0F0B\u0F54\u0F0B".split("_"), longDateFormat: { LT: "A h:mm", LTS: "A h:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm", LLLL: "dddd, D MMMM YYYY, A h:mm" }, calendar: { sameDay: "[\u0F51\u0F72\u0F0B\u0F62\u0F72\u0F44] LT", nextDay: "[\u0F66\u0F44\u0F0B\u0F49\u0F72\u0F53] LT", nextWeek: "[\u0F56\u0F51\u0F74\u0F53\u0F0B\u0F55\u0FB2\u0F42\u0F0B\u0F62\u0F97\u0F7A\u0F66\u0F0B\u0F58], LT", lastDay: "[\u0F41\u0F0B\u0F66\u0F44] LT", lastWeek: "[\u0F56\u0F51\u0F74\u0F53\u0F0B\u0F55\u0FB2\u0F42\u0F0B\u0F58\u0F50\u0F60\u0F0B\u0F58] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s \u0F63\u0F0B", past: "%s \u0F66\u0F94\u0F53\u0F0B\u0F63", s: "\u0F63\u0F58\u0F0B\u0F66\u0F44", ss: "%d \u0F66\u0F90\u0F62\u0F0B\u0F46\u0F0D", m: "\u0F66\u0F90\u0F62\u0F0B\u0F58\u0F0B\u0F42\u0F45\u0F72\u0F42", mm: "%d \u0F66\u0F90\u0F62\u0F0B\u0F58", h: "\u0F46\u0F74\u0F0B\u0F5A\u0F7C\u0F51\u0F0B\u0F42\u0F45\u0F72\u0F42", hh: "%d \u0F46\u0F74\u0F0B\u0F5A\u0F7C\u0F51", d: "\u0F49\u0F72\u0F53\u0F0B\u0F42\u0F45\u0F72\u0F42", dd: "%d \u0F49\u0F72\u0F53\u0F0B", M: "\u0F5F\u0FB3\u0F0B\u0F56\u0F0B\u0F42\u0F45\u0F72\u0F42", MM: "%d \u0F5F\u0FB3\u0F0B\u0F56", y: "\u0F63\u0F7C\u0F0B\u0F42\u0F45\u0F72\u0F42", yy: "%d \u0F63\u0F7C" }, preparse: function preparse(e) {
      return e.replace(/[\u0f21\u0f22\u0f23\u0f24\u0f25\u0f26\u0f27\u0f28\u0f29\u0f20]/g, function (e) {
        return k[e];
      });
    }, postformat: function postformat(e) {
      return e.replace(/\d/g, function (e) {
        return c[e];
      });
    }, meridiemParse: /\u0f58\u0f5a\u0f53\u0f0b\u0f58\u0f7c|\u0f5e\u0f7c\u0f42\u0f66\u0f0b\u0f40\u0f66|\u0f49\u0f72\u0f53\u0f0b\u0f42\u0f74\u0f44|\u0f51\u0f42\u0f7c\u0f44\u0f0b\u0f51\u0f42|\u0f58\u0f5a\u0f53\u0f0b\u0f58\u0f7c/, meridiemHour: function meridiemHour(e, a) {
      return 12 === e && (e = 0), "\u0F58\u0F5A\u0F53\u0F0B\u0F58\u0F7C" === a && e >= 4 || "\u0F49\u0F72\u0F53\u0F0B\u0F42\u0F74\u0F44" === a && e < 5 || "\u0F51\u0F42\u0F7C\u0F44\u0F0B\u0F51\u0F42" === a ? e + 12 : e;
    }, meridiem: function meridiem(e, a, _) {
      return e < 4 ? "\u0F58\u0F5A\u0F53\u0F0B\u0F58\u0F7C" : e < 10 ? "\u0F5E\u0F7C\u0F42\u0F66\u0F0B\u0F40\u0F66" : e < 17 ? "\u0F49\u0F72\u0F53\u0F0B\u0F42\u0F74\u0F44" : e < 20 ? "\u0F51\u0F42\u0F7C\u0F44\u0F0B\u0F51\u0F42" : "\u0F58\u0F5A\u0F53\u0F0B\u0F58\u0F7C";
    }, week: { dow: 0, doy: 6 } }), e.defineLocale("br", { months: "Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"), monthsShort: "Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"), weekdays: "Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"), weekdaysShort: "Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"), weekdaysMin: "Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "h[e]mm A", LTS: "h[e]mm:ss A", L: "DD/MM/YYYY", LL: "D [a viz] MMMM YYYY", LLL: "D [a viz] MMMM YYYY h[e]mm A", LLLL: "dddd, D [a viz] MMMM YYYY h[e]mm A" }, calendar: { sameDay: "[Hiziv da] LT", nextDay: "[Warc'hoazh da] LT", nextWeek: "dddd [da] LT", lastDay: "[Dec'h da] LT", lastWeek: "dddd [paset da] LT", sameElse: "L" }, relativeTime: { future: "a-benn %s", past: "%s 'zo", s: "un nebeud segondenno\xf9", ss: "%d eilenn", m: "ur vunutenn", mm: p, h: "un eur", hh: "%d eur", d: "un devezh", dd: p, M: "ur miz", MM: p, y: "ur bloaz", yy: function yy(e) {
        switch (function e(a) {
          return a > 9 ? e(a % 10) : a;
        }(e)) {case 1:case 3:case 4:case 5:case 9:
            return e + " bloaz";default:
            return e + " vloaz";}
      } }, dayOfMonthOrdinalParse: /\d{1,2}(a\xf1|vet)/, ordinal: function ordinal(e) {
      return e + (1 === e ? "a\xf1" : "vet");
    }, week: { dow: 1, doy: 4 } }), e.defineLocale("bs", { months: "januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"), monthsShort: "jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"), monthsParseExact: !0, weekdays: "nedjelja_ponedjeljak_utorak_srijeda_\u010Detvrtak_petak_subota".split("_"), weekdaysShort: "ned._pon._uto._sri._\u010Det._pet._sub.".split("_"), weekdaysMin: "ne_po_ut_sr_\u010De_pe_su".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[danas u] LT", nextDay: "[sutra u] LT", nextWeek: function nextWeek() {
        switch (this.day()) {case 0:
            return "[u] [nedjelju] [u] LT";case 3:
            return "[u] [srijedu] [u] LT";case 6:
            return "[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:
            return "[u] dddd [u] LT";}
      }, lastDay: "[ju\u010Der u] LT", lastWeek: function lastWeek() {
        switch (this.day()) {case 0:case 3:
            return "[pro\u0161lu] dddd [u] LT";case 6:
            return "[pro\u0161le] [subote] [u] LT";case 1:case 2:case 4:case 5:
            return "[pro\u0161li] dddd [u] LT";}
      }, sameElse: "L" }, relativeTime: { future: "za %s", past: "prije %s", s: "par sekundi", ss: D, m: D, mm: D, h: D, hh: D, d: "dan", dd: D, M: "mjesec", MM: D, y: "godinu", yy: D }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }), e.defineLocale("ca", { months: { standalone: "gener_febrer_mar\xe7_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"), format: "de gener_de febrer_de mar\xe7_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"), isFormat: /D[oD]?(\s)+MMMM/ }, monthsShort: "gen._febr._mar\xe7_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"), monthsParseExact: !0, weekdays: "diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"), weekdaysShort: "dg._dl._dt._dc._dj._dv._ds.".split("_"), weekdaysMin: "dg_dl_dt_dc_dj_dv_ds".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM [de] YYYY", ll: "D MMM YYYY", LLL: "D MMMM [de] YYYY [a les] H:mm", lll: "D MMM YYYY, H:mm", LLLL: "dddd D MMMM [de] YYYY [a les] H:mm", llll: "ddd D MMM YYYY, H:mm" }, calendar: { sameDay: function sameDay() {
        return "[avui a " + (1 !== this.hours() ? "les" : "la") + "] LT";
      }, nextDay: function nextDay() {
        return "[dem\xe0 a " + (1 !== this.hours() ? "les" : "la") + "] LT";
      }, nextWeek: function nextWeek() {
        return "dddd [a " + (1 !== this.hours() ? "les" : "la") + "] LT";
      }, lastDay: function lastDay() {
        return "[ahir a " + (1 !== this.hours() ? "les" : "la") + "] LT";
      }, lastWeek: function lastWeek() {
        return "[el] dddd [passat a " + (1 !== this.hours() ? "les" : "la") + "] LT";
      }, sameElse: "L" }, relativeTime: { future: "d'aqu\xed %s", past: "fa %s", s: "uns segons", ss: "%d segons", m: "un minut", mm: "%d minuts", h: "una hora", hh: "%d hores", d: "un dia", dd: "%d dies", M: "un mes", MM: "%d mesos", y: "un any", yy: "%d anys" }, dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|\xe8|a)/, ordinal: function ordinal(e, a) {
      var _ = 1 === e ? "r" : 2 === e ? "n" : 3 === e ? "r" : 4 === e ? "t" : "\xe8";return "w" !== a && "W" !== a || (_ = "a"), e + _;
    }, week: { dow: 1, doy: 4 } });var T = "leden_\xFAnor_b\u0159ezen_duben_kv\u011Bten_\u010Derven_\u010Dervenec_srpen_z\xE1\u0159\xED_\u0159\xEDjen_listopad_prosinec".split("_"),
      f = "led_\xFAno_b\u0159e_dub_kv\u011B_\u010Dvn_\u010Dvc_srp_z\xE1\u0159_\u0159\xEDj_lis_pro".split("_");function w(e) {
    return e > 1 && e < 5 && 1 != ~~(e / 10);
  }function g(e, a, _, s) {
    var d = e + " ";switch (_) {case "s":
        return a || s ? "p\xe1r sekund" : "p\xe1r sekundami";case "ss":
        return a || s ? d + (w(e) ? "sekundy" : "sekund") : d + "sekundami";break;case "m":
        return a ? "minuta" : s ? "minutu" : "minutou";case "mm":
        return a || s ? d + (w(e) ? "minuty" : "minut") : d + "minutami";break;case "h":
        return a ? "hodina" : s ? "hodinu" : "hodinou";case "hh":
        return a || s ? d + (w(e) ? "hodiny" : "hodin") : d + "hodinami";break;case "d":
        return a || s ? "den" : "dnem";case "dd":
        return a || s ? d + (w(e) ? "dny" : "dn\xed") : d + "dny";break;case "M":
        return a || s ? "m\u011Bs\xEDc" : "m\u011Bs\xEDcem";case "MM":
        return a || s ? d + (w(e) ? "m\u011Bs\xEDce" : "m\u011Bs\xEDc\u016F") : d + "m\u011Bs\xEDci";break;case "y":
        return a || s ? "rok" : "rokem";case "yy":
        return a || s ? d + (w(e) ? "roky" : "let") : d + "lety";break;}
  }function H(e, a, _, s) {
    var d = { m: ["eine Minute", "einer Minute"], h: ["eine Stunde", "einer Stunde"], d: ["ein Tag", "einem Tag"], dd: [e + " Tage", e + " Tagen"], M: ["ein Monat", "einem Monat"], MM: [e + " Monate", e + " Monaten"], y: ["ein Jahr", "einem Jahr"], yy: [e + " Jahre", e + " Jahren"] };return a ? d[_][0] : d[_][1];
  }function b(e, a, _, s) {
    var d = { m: ["eine Minute", "einer Minute"], h: ["eine Stunde", "einer Stunde"], d: ["ein Tag", "einem Tag"], dd: [e + " Tage", e + " Tagen"], M: ["ein Monat", "einem Monat"], MM: [e + " Monate", e + " Monaten"], y: ["ein Jahr", "einem Jahr"], yy: [e + " Jahre", e + " Jahren"] };return a ? d[_][0] : d[_][1];
  }function S(e, a, _, s) {
    var d = { m: ["eine Minute", "einer Minute"], h: ["eine Stunde", "einer Stunde"], d: ["ein Tag", "einem Tag"], dd: [e + " Tage", e + " Tagen"], M: ["ein Monat", "einem Monat"], MM: [e + " Monate", e + " Monaten"], y: ["ein Jahr", "einem Jahr"], yy: [e + " Jahre", e + " Jahren"] };return a ? d[_][0] : d[_][1];
  }e.defineLocale("cs", { months: T, monthsShort: f, monthsParse: function (e, a) {
      var _,
          s = [];for (_ = 0; _ < 12; _++) {
        s[_] = new RegExp("^" + e[_] + "$|^" + a[_] + "$", "i");
      }return s;
    }(T, f), shortMonthsParse: function (e) {
      var a,
          _ = [];for (a = 0; a < 12; a++) {
        _[a] = new RegExp("^" + e[a] + "$", "i");
      }return _;
    }(f), longMonthsParse: function (e) {
      var a,
          _ = [];for (a = 0; a < 12; a++) {
        _[a] = new RegExp("^" + e[a] + "$", "i");
      }return _;
    }(T), weekdays: "ned\u011Ble_pond\u011Bl\xED_\xFAter\xFD_st\u0159eda_\u010Dtvrtek_p\xE1tek_sobota".split("_"), weekdaysShort: "ne_po_\xFAt_st_\u010Dt_p\xE1_so".split("_"), weekdaysMin: "ne_po_\xFAt_st_\u010Dt_p\xE1_so".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd D. MMMM YYYY H:mm", l: "D. M. YYYY" }, calendar: { sameDay: "[dnes v] LT", nextDay: "[z\xedtra v] LT", nextWeek: function nextWeek() {
        switch (this.day()) {case 0:
            return "[v ned\u011Bli v] LT";case 1:case 2:
            return "[v] dddd [v] LT";case 3:
            return "[ve st\u0159edu v] LT";case 4:
            return "[ve \u010Dtvrtek v] LT";case 5:
            return "[v p\xe1tek v] LT";case 6:
            return "[v sobotu v] LT";}
      }, lastDay: "[v\u010Dera v] LT", lastWeek: function lastWeek() {
        switch (this.day()) {case 0:
            return "[minulou ned\u011Bli v] LT";case 1:case 2:
            return "[minul\xe9] dddd [v] LT";case 3:
            return "[minulou st\u0159edu v] LT";case 4:case 5:
            return "[minul\xfd] dddd [v] LT";case 6:
            return "[minulou sobotu v] LT";}
      }, sameElse: "L" }, relativeTime: { future: "za %s", past: "p\u0159ed %s", s: g, ss: g, m: g, mm: g, h: g, hh: g, d: g, dd: g, M: g, MM: g, y: g, yy: g }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), e.defineLocale("cv", { months: "\u043A\u04D1\u0440\u043B\u0430\u0447_\u043D\u0430\u0440\u04D1\u0441_\u043F\u0443\u0448_\u0430\u043A\u0430_\u043C\u0430\u0439_\u04AB\u04D7\u0440\u0442\u043C\u0435_\u0443\u0442\u04D1_\u04AB\u0443\u0440\u043B\u0430_\u0430\u0432\u04D1\u043D_\u044E\u043F\u0430_\u0447\u04F3\u043A_\u0440\u0430\u0448\u0442\u0430\u0432".split("_"), monthsShort: "\u043A\u04D1\u0440_\u043D\u0430\u0440_\u043F\u0443\u0448_\u0430\u043A\u0430_\u043C\u0430\u0439_\u04AB\u04D7\u0440_\u0443\u0442\u04D1_\u04AB\u0443\u0440_\u0430\u0432\u043D_\u044E\u043F\u0430_\u0447\u04F3\u043A_\u0440\u0430\u0448".split("_"), weekdays: "\u0432\u044B\u0440\u0441\u0430\u0440\u043D\u0438\u043A\u0443\u043D_\u0442\u0443\u043D\u0442\u0438\u043A\u0443\u043D_\u044B\u0442\u043B\u0430\u0440\u0438\u043A\u0443\u043D_\u044E\u043D\u043A\u0443\u043D_\u043A\u04D7\u04AB\u043D\u0435\u0440\u043D\u0438\u043A\u0443\u043D_\u044D\u0440\u043D\u0435\u043A\u0443\u043D_\u0448\u04D1\u043C\u0430\u0442\u043A\u0443\u043D".split("_"), weekdaysShort: "\u0432\u044B\u0440_\u0442\u0443\u043D_\u044B\u0442\u043B_\u044E\u043D_\u043A\u04D7\u04AB_\u044D\u0440\u043D_\u0448\u04D1\u043C".split("_"), weekdaysMin: "\u0432\u0440_\u0442\u043D_\u044B\u0442_\u044E\u043D_\u043A\u04AB_\u044D\u0440_\u0448\u043C".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD-MM-YYYY", LL: "YYYY [\u04AB\u0443\u043B\u0445\u0438] MMMM [\u0443\u0439\u04D1\u0445\u04D7\u043D] D[-\u043C\u04D7\u0448\u04D7]", LLL: "YYYY [\u04AB\u0443\u043B\u0445\u0438] MMMM [\u0443\u0439\u04D1\u0445\u04D7\u043D] D[-\u043C\u04D7\u0448\u04D7], HH:mm", LLLL: "dddd, YYYY [\u04AB\u0443\u043B\u0445\u0438] MMMM [\u0443\u0439\u04D1\u0445\u04D7\u043D] D[-\u043C\u04D7\u0448\u04D7], HH:mm" }, calendar: { sameDay: "[\u041F\u0430\u044F\u043D] LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]", nextDay: "[\u042B\u0440\u0430\u043D] LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]", lastDay: "[\u04D6\u043D\u0435\u0440] LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]", nextWeek: "[\u04AA\u0438\u0442\u0435\u0441] dddd LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]", lastWeek: "[\u0418\u0440\u0442\u043D\u04D7] dddd LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]", sameElse: "L" }, relativeTime: { future: function future(e) {
        return e + (/\u0441\u0435\u0445\u0435\u0442$/i.exec(e) ? "\u0440\u0435\u043D" : /\u04ab\u0443\u043b$/i.exec(e) ? "\u0442\u0430\u043D" : "\u0440\u0430\u043D");
      }, past: "%s \u043A\u0430\u044F\u043B\u043B\u0430", s: "\u043F\u04D7\u0440-\u0438\u043A \u04AB\u0435\u043A\u043A\u0443\u043D\u0442", ss: "%d \u04AB\u0435\u043A\u043A\u0443\u043D\u0442", m: "\u043F\u04D7\u0440 \u043C\u0438\u043D\u0443\u0442", mm: "%d \u043C\u0438\u043D\u0443\u0442", h: "\u043F\u04D7\u0440 \u0441\u0435\u0445\u0435\u0442", hh: "%d \u0441\u0435\u0445\u0435\u0442", d: "\u043F\u04D7\u0440 \u043A\u0443\u043D", dd: "%d \u043A\u0443\u043D", M: "\u043F\u04D7\u0440 \u0443\u0439\u04D1\u0445", MM: "%d \u0443\u0439\u04D1\u0445", y: "\u043F\u04D7\u0440 \u04AB\u0443\u043B", yy: "%d \u04AB\u0443\u043B" }, dayOfMonthOrdinalParse: /\d{1,2}-\u043c\u04d7\u0448/, ordinal: "%d-\u043C\u04D7\u0448", week: { dow: 1, doy: 7 } }), e.defineLocale("cy", { months: "Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"), monthsShort: "Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"), weekdays: "Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"), weekdaysShort: "Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"), weekdaysMin: "Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Heddiw am] LT", nextDay: "[Yfory am] LT", nextWeek: "dddd [am] LT", lastDay: "[Ddoe am] LT", lastWeek: "dddd [diwethaf am] LT", sameElse: "L" }, relativeTime: { future: "mewn %s", past: "%s yn \xf4l", s: "ychydig eiliadau", ss: "%d eiliad", m: "munud", mm: "%d munud", h: "awr", hh: "%d awr", d: "diwrnod", dd: "%d diwrnod", M: "mis", MM: "%d mis", y: "blwyddyn", yy: "%d flynedd" }, dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/, ordinal: function ordinal(e) {
      var a = "";return e > 20 ? a = 40 === e || 50 === e || 60 === e || 80 === e || 100 === e ? "fed" : "ain" : e > 0 && (a = ["", "af", "il", "ydd", "ydd", "ed", "ed", "ed", "fed", "fed", "fed", "eg", "fed", "eg", "eg", "fed", "eg", "eg", "fed", "eg", "fed"][e]), e + a;
    }, week: { dow: 1, doy: 4 } }), e.defineLocale("da", { months: "januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"), monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"), weekdays: "s\xf8ndag_mandag_tirsdag_onsdag_torsdag_fredag_l\xf8rdag".split("_"), weekdaysShort: "s\xf8n_man_tir_ons_tor_fre_l\xf8r".split("_"), weekdaysMin: "s\xf8_ma_ti_on_to_fr_l\xf8".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY HH:mm", LLLL: "dddd [d.] D. MMMM YYYY [kl.] HH:mm" }, calendar: { sameDay: "[i dag kl.] LT", nextDay: "[i morgen kl.] LT", nextWeek: "p\xe5 dddd [kl.] LT", lastDay: "[i g\xe5r kl.] LT", lastWeek: "[i] dddd[s kl.] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "%s siden", s: "f\xe5 sekunder", ss: "%d sekunder", m: "et minut", mm: "%d minutter", h: "en time", hh: "%d timer", d: "en dag", dd: "%d dage", M: "en m\xe5ned", MM: "%d m\xe5neder", y: "et \xe5r", yy: "%d \xe5r" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), e.defineLocale("de-at", { months: "J\xe4nner_Februar_M\xe4rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "J\xe4n._Feb._M\xe4rz_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"), monthsParseExact: !0, weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"), weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"), weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY HH:mm", LLLL: "dddd, D. MMMM YYYY HH:mm" }, calendar: { sameDay: "[heute um] LT [Uhr]", sameElse: "L", nextDay: "[morgen um] LT [Uhr]", nextWeek: "dddd [um] LT [Uhr]", lastDay: "[gestern um] LT [Uhr]", lastWeek: "[letzten] dddd [um] LT [Uhr]" }, relativeTime: { future: "in %s", past: "vor %s", s: "ein paar Sekunden", ss: "%d Sekunden", m: H, mm: "%d Minuten", h: H, hh: "%d Stunden", d: H, dd: H, M: H, MM: H, y: H, yy: H }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), e.defineLocale("de-ch", { months: "Januar_Februar_M\xe4rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jan._Feb._M\xe4rz_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"), monthsParseExact: !0, weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"), weekdaysShort: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"), weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY HH:mm", LLLL: "dddd, D. MMMM YYYY HH:mm" }, calendar: { sameDay: "[heute um] LT [Uhr]", sameElse: "L", nextDay: "[morgen um] LT [Uhr]", nextWeek: "dddd [um] LT [Uhr]", lastDay: "[gestern um] LT [Uhr]", lastWeek: "[letzten] dddd [um] LT [Uhr]" }, relativeTime: { future: "in %s", past: "vor %s", s: "ein paar Sekunden", ss: "%d Sekunden", m: b, mm: "%d Minuten", h: b, hh: "%d Stunden", d: b, dd: b, M: b, MM: b, y: b, yy: b }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), e.defineLocale("de", { months: "Januar_Februar_M\xe4rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jan._Feb._M\xe4rz_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"), monthsParseExact: !0, weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"), weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"), weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY HH:mm", LLLL: "dddd, D. MMMM YYYY HH:mm" }, calendar: { sameDay: "[heute um] LT [Uhr]", sameElse: "L", nextDay: "[morgen um] LT [Uhr]", nextWeek: "dddd [um] LT [Uhr]", lastDay: "[gestern um] LT [Uhr]", lastWeek: "[letzten] dddd [um] LT [Uhr]" }, relativeTime: { future: "in %s", past: "vor %s", s: "ein paar Sekunden", ss: "%d Sekunden", m: S, mm: "%d Minuten", h: S, hh: "%d Stunden", d: S, dd: S, M: S, MM: S, y: S, yy: S }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } });var v = ["\u0796\u07AC\u0782\u07AA\u0787\u07A6\u0783\u07A9", "\u078A\u07AC\u0784\u07B0\u0783\u07AA\u0787\u07A6\u0783\u07A9", "\u0789\u07A7\u0783\u07A8\u0797\u07AA", "\u0787\u07AD\u0795\u07B0\u0783\u07A9\u078D\u07AA", "\u0789\u07AD", "\u0796\u07AB\u0782\u07B0", "\u0796\u07AA\u078D\u07A6\u0787\u07A8", "\u0787\u07AF\u078E\u07A6\u0790\u07B0\u0793\u07AA", "\u0790\u07AC\u0795\u07B0\u0793\u07AC\u0789\u07B0\u0784\u07A6\u0783\u07AA", "\u0787\u07AE\u0786\u07B0\u0793\u07AF\u0784\u07A6\u0783\u07AA", "\u0782\u07AE\u0788\u07AC\u0789\u07B0\u0784\u07A6\u0783\u07AA", "\u0791\u07A8\u0790\u07AC\u0789\u07B0\u0784\u07A6\u0783\u07AA"],
      j = ["\u0787\u07A7\u078B\u07A8\u0787\u07B0\u078C\u07A6", "\u0780\u07AF\u0789\u07A6", "\u0787\u07A6\u0782\u07B0\u078E\u07A7\u0783\u07A6", "\u0784\u07AA\u078B\u07A6", "\u0784\u07AA\u0783\u07A7\u0790\u07B0\u078A\u07A6\u078C\u07A8", "\u0780\u07AA\u0786\u07AA\u0783\u07AA", "\u0780\u07AE\u0782\u07A8\u0780\u07A8\u0783\u07AA"];e.defineLocale("dv", { months: v, monthsShort: v, weekdays: j, weekdaysShort: j, weekdaysMin: "\u0787\u07A7\u078B\u07A8_\u0780\u07AF\u0789\u07A6_\u0787\u07A6\u0782\u07B0_\u0784\u07AA\u078B\u07A6_\u0784\u07AA\u0783\u07A7_\u0780\u07AA\u0786\u07AA_\u0780\u07AE\u0782\u07A8".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "D/M/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, meridiemParse: /\u0789\u0786|\u0789\u078a/, isPM: function isPM(e) {
      return "\u0789\u078A" === e;
    }, meridiem: function meridiem(e, a, _) {
      return e < 12 ? "\u0789\u0786" : "\u0789\u078A";
    }, calendar: { sameDay: "[\u0789\u07A8\u0787\u07A6\u078B\u07AA] LT", nextDay: "[\u0789\u07A7\u078B\u07A6\u0789\u07A7] LT", nextWeek: "dddd LT", lastDay: "[\u0787\u07A8\u0787\u07B0\u0794\u07AC] LT", lastWeek: "[\u078A\u07A7\u0787\u07A8\u078C\u07AA\u0788\u07A8] dddd LT", sameElse: "L" }, relativeTime: { future: "\u078C\u07AC\u0783\u07AD\u078E\u07A6\u0787\u07A8 %s", past: "\u0786\u07AA\u0783\u07A8\u0782\u07B0 %s", s: "\u0790\u07A8\u0786\u07AA\u0782\u07B0\u078C\u07AA\u0786\u07AE\u0785\u07AC\u0787\u07B0", ss: "d% \u0790\u07A8\u0786\u07AA\u0782\u07B0\u078C\u07AA", m: "\u0789\u07A8\u0782\u07A8\u0793\u07AC\u0787\u07B0", mm: "\u0789\u07A8\u0782\u07A8\u0793\u07AA %d", h: "\u078E\u07A6\u0791\u07A8\u0787\u07A8\u0783\u07AC\u0787\u07B0", hh: "\u078E\u07A6\u0791\u07A8\u0787\u07A8\u0783\u07AA %d", d: "\u078B\u07AA\u0788\u07A6\u0780\u07AC\u0787\u07B0", dd: "\u078B\u07AA\u0788\u07A6\u0790\u07B0 %d", M: "\u0789\u07A6\u0780\u07AC\u0787\u07B0", MM: "\u0789\u07A6\u0790\u07B0 %d", y: "\u0787\u07A6\u0780\u07A6\u0783\u07AC\u0787\u07B0", yy: "\u0787\u07A6\u0780\u07A6\u0783\u07AA %d" }, preparse: function preparse(e) {
      return e.replace(/\u060c/g, ",");
    }, postformat: function postformat(e) {
      return e.replace(/,/g, "\u060C");
    }, week: { dow: 7, doy: 12 } }), e.defineLocale("el", { monthsNominativeEl: "\u0399\u03B1\u03BD\u03BF\u03C5\u03AC\u03C1\u03B9\u03BF\u03C2_\u03A6\u03B5\u03B2\u03C1\u03BF\u03C5\u03AC\u03C1\u03B9\u03BF\u03C2_\u039C\u03AC\u03C1\u03C4\u03B9\u03BF\u03C2_\u0391\u03C0\u03C1\u03AF\u03BB\u03B9\u03BF\u03C2_\u039C\u03AC\u03B9\u03BF\u03C2_\u0399\u03BF\u03CD\u03BD\u03B9\u03BF\u03C2_\u0399\u03BF\u03CD\u03BB\u03B9\u03BF\u03C2_\u0391\u03CD\u03B3\u03BF\u03C5\u03C3\u03C4\u03BF\u03C2_\u03A3\u03B5\u03C0\u03C4\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2_\u039F\u03BA\u03C4\u03CE\u03B2\u03C1\u03B9\u03BF\u03C2_\u039D\u03BF\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2_\u0394\u03B5\u03BA\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2".split("_"), monthsGenitiveEl: "\u0399\u03B1\u03BD\u03BF\u03C5\u03B1\u03C1\u03AF\u03BF\u03C5_\u03A6\u03B5\u03B2\u03C1\u03BF\u03C5\u03B1\u03C1\u03AF\u03BF\u03C5_\u039C\u03B1\u03C1\u03C4\u03AF\u03BF\u03C5_\u0391\u03C0\u03C1\u03B9\u03BB\u03AF\u03BF\u03C5_\u039C\u03B1\u0390\u03BF\u03C5_\u0399\u03BF\u03C5\u03BD\u03AF\u03BF\u03C5_\u0399\u03BF\u03C5\u03BB\u03AF\u03BF\u03C5_\u0391\u03C5\u03B3\u03BF\u03CD\u03C3\u03C4\u03BF\u03C5_\u03A3\u03B5\u03C0\u03C4\u03B5\u03BC\u03B2\u03C1\u03AF\u03BF\u03C5_\u039F\u03BA\u03C4\u03C9\u03B2\u03C1\u03AF\u03BF\u03C5_\u039D\u03BF\u03B5\u03BC\u03B2\u03C1\u03AF\u03BF\u03C5_\u0394\u03B5\u03BA\u03B5\u03BC\u03B2\u03C1\u03AF\u03BF\u03C5".split("_"), months: function months(e, a) {
      return e ? "string" == typeof a && /D/.test(a.substring(0, a.indexOf("MMMM"))) ? this._monthsGenitiveEl[e.month()] : this._monthsNominativeEl[e.month()] : this._monthsNominativeEl;
    }, monthsShort: "\u0399\u03B1\u03BD_\u03A6\u03B5\u03B2_\u039C\u03B1\u03C1_\u0391\u03C0\u03C1_\u039C\u03B1\u03CA_\u0399\u03BF\u03C5\u03BD_\u0399\u03BF\u03C5\u03BB_\u0391\u03C5\u03B3_\u03A3\u03B5\u03C0_\u039F\u03BA\u03C4_\u039D\u03BF\u03B5_\u0394\u03B5\u03BA".split("_"), weekdays: "\u039A\u03C5\u03C1\u03B9\u03B1\u03BA\u03AE_\u0394\u03B5\u03C5\u03C4\u03AD\u03C1\u03B1_\u03A4\u03C1\u03AF\u03C4\u03B7_\u03A4\u03B5\u03C4\u03AC\u03C1\u03C4\u03B7_\u03A0\u03AD\u03BC\u03C0\u03C4\u03B7_\u03A0\u03B1\u03C1\u03B1\u03C3\u03BA\u03B5\u03C5\u03AE_\u03A3\u03AC\u03B2\u03B2\u03B1\u03C4\u03BF".split("_"), weekdaysShort: "\u039A\u03C5\u03C1_\u0394\u03B5\u03C5_\u03A4\u03C1\u03B9_\u03A4\u03B5\u03C4_\u03A0\u03B5\u03BC_\u03A0\u03B1\u03C1_\u03A3\u03B1\u03B2".split("_"), weekdaysMin: "\u039A\u03C5_\u0394\u03B5_\u03A4\u03C1_\u03A4\u03B5_\u03A0\u03B5_\u03A0\u03B1_\u03A3\u03B1".split("_"), meridiem: function meridiem(e, a, _) {
      return e > 11 ? _ ? "\u03BC\u03BC" : "\u039C\u039C" : _ ? "\u03C0\u03BC" : "\u03A0\u039C";
    }, isPM: function isPM(e) {
      return "\u03BC" === (e + "").toLowerCase()[0];
    }, meridiemParse: /[\u03a0\u039c]\.?\u039c?\.?/i, longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendarEl: { sameDay: "[\u03A3\u03AE\u03BC\u03B5\u03C1\u03B1 {}] LT", nextDay: "[\u0391\u03CD\u03C1\u03B9\u03BF {}] LT", nextWeek: "dddd [{}] LT", lastDay: "[\u03A7\u03B8\u03B5\u03C2 {}] LT", lastWeek: function lastWeek() {
        switch (this.day()) {case 6:
            return "[\u03C4\u03BF \u03C0\u03C1\u03BF\u03B7\u03B3\u03BF\u03CD\u03BC\u03B5\u03BD\u03BF] dddd [{}] LT";default:
            return "[\u03C4\u03B7\u03BD \u03C0\u03C1\u03BF\u03B7\u03B3\u03BF\u03CD\u03BC\u03B5\u03BD\u03B7] dddd [{}] LT";}
      }, sameElse: "L" }, calendar: function calendar(e, a) {
      var _,
          s = this._calendarEl[e],
          d = a && a.hours();return ((_ = s) instanceof Function || "[object Function]" === Object.prototype.toString.call(_)) && (s = s.apply(a)), s.replace("{}", d % 12 == 1 ? "\u03C3\u03C4\u03B7" : "\u03C3\u03C4\u03B9\u03C2");
    }, relativeTime: { future: "\u03C3\u03B5 %s", past: "%s \u03C0\u03C1\u03B9\u03BD", s: "\u03BB\u03AF\u03B3\u03B1 \u03B4\u03B5\u03C5\u03C4\u03B5\u03C1\u03CC\u03BB\u03B5\u03C0\u03C4\u03B1", ss: "%d \u03B4\u03B5\u03C5\u03C4\u03B5\u03C1\u03CC\u03BB\u03B5\u03C0\u03C4\u03B1", m: "\u03AD\u03BD\u03B1 \u03BB\u03B5\u03C0\u03C4\u03CC", mm: "%d \u03BB\u03B5\u03C0\u03C4\u03AC", h: "\u03BC\u03AF\u03B1 \u03CE\u03C1\u03B1", hh: "%d \u03CE\u03C1\u03B5\u03C2", d: "\u03BC\u03AF\u03B1 \u03BC\u03AD\u03C1\u03B1", dd: "%d \u03BC\u03AD\u03C1\u03B5\u03C2", M: "\u03AD\u03BD\u03B1\u03C2 \u03BC\u03AE\u03BD\u03B1\u03C2", MM: "%d \u03BC\u03AE\u03BD\u03B5\u03C2", y: "\u03AD\u03BD\u03B1\u03C2 \u03C7\u03C1\u03CC\u03BD\u03BF\u03C2", yy: "%d \u03C7\u03C1\u03CC\u03BD\u03B9\u03B1" }, dayOfMonthOrdinalParse: /\d{1,2}\u03b7/, ordinal: "%d\u03B7", week: { dow: 1, doy: 4 } }), e.defineLocale("en-au", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", ss: "%d seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function ordinal(e) {
      var a = e % 10;return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === a ? "st" : 2 === a ? "nd" : 3 === a ? "rd" : "th");
    }, week: { dow: 1, doy: 4 } }), e.defineLocale("en-ca", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "YYYY-MM-DD", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", ss: "%d seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function ordinal(e) {
      var a = e % 10;return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === a ? "st" : 2 === a ? "nd" : 3 === a ? "rd" : "th");
    } }), e.defineLocale("en-gb", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", ss: "%d seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function ordinal(e) {
      var a = e % 10;return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === a ? "st" : 2 === a ? "nd" : 3 === a ? "rd" : "th");
    }, week: { dow: 1, doy: 4 } }), e.defineLocale("en-ie", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD-MM-YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", ss: "%d seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function ordinal(e) {
      var a = e % 10;return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === a ? "st" : 2 === a ? "nd" : 3 === a ? "rd" : "th");
    }, week: { dow: 1, doy: 4 } }), e.defineLocale("en-il", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function ordinal(e) {
      var a = e % 10;return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === a ? "st" : 2 === a ? "nd" : 3 === a ? "rd" : "th");
    } }), e.defineLocale("en-nz", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", ss: "%d seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function ordinal(e) {
      var a = e % 10;return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === a ? "st" : 2 === a ? "nd" : 3 === a ? "rd" : "th");
    }, week: { dow: 1, doy: 4 } }), e.defineLocale("eo", { months: "januaro_februaro_marto_aprilo_majo_junio_julio_a\u016Dgusto_septembro_oktobro_novembro_decembro".split("_"), monthsShort: "jan_feb_mar_apr_maj_jun_jul_a\u016Dg_sep_okt_nov_dec".split("_"), weekdays: "diman\u0109o_lundo_mardo_merkredo_\u0135a\u016Ddo_vendredo_sabato".split("_"), weekdaysShort: "dim_lun_mard_merk_\u0135a\u016D_ven_sab".split("_"), weekdaysMin: "di_lu_ma_me_\u0135a_ve_sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "D[-a de] MMMM, YYYY", LLL: "D[-a de] MMMM, YYYY HH:mm", LLLL: "dddd, [la] D[-a de] MMMM, YYYY HH:mm" }, meridiemParse: /[ap]\.t\.m/i, isPM: function isPM(e) {
      return "p" === e.charAt(0).toLowerCase();
    }, meridiem: function meridiem(e, a, _) {
      return e > 11 ? _ ? "p.t.m." : "P.T.M." : _ ? "a.t.m." : "A.T.M.";
    }, calendar: { sameDay: "[Hodia\u016D je] LT", nextDay: "[Morga\u016D je] LT", nextWeek: "dddd [je] LT", lastDay: "[Hiera\u016D je] LT", lastWeek: "[pasinta] dddd [je] LT", sameElse: "L" }, relativeTime: { future: "post %s", past: "anta\u016D %s", s: "sekundoj", ss: "%d sekundoj", m: "minuto", mm: "%d minutoj", h: "horo", hh: "%d horoj", d: "tago", dd: "%d tagoj", M: "monato", MM: "%d monatoj", y: "jaro", yy: "%d jaroj" }, dayOfMonthOrdinalParse: /\d{1,2}a/, ordinal: "%da", week: { dow: 1, doy: 7 } });var x = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),
      P = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),
      W = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i],
      A = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do", { months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"), monthsShort: function monthsShort(e, a) {
      return e ? /-MMM-/.test(a) ? P[e.month()] : x[e.month()] : x;
    }, monthsRegex: A, monthsShortRegex: A, monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i, monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i, monthsParse: W, longMonthsParse: W, shortMonthsParse: W, weekdays: "domingo_lunes_martes_mi\xe9rcoles_jueves_viernes_s\xe1bado".split("_"), weekdaysShort: "dom._lun._mar._mi\xe9._jue._vie._s\xe1b.".split("_"), weekdaysMin: "do_lu_ma_mi_ju_vi_s\xe1".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY h:mm A", LLLL: "dddd, D [de] MMMM [de] YYYY h:mm A" }, calendar: { sameDay: function sameDay() {
        return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, nextDay: function nextDay() {
        return "[ma\xf1ana a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, nextWeek: function nextWeek() {
        return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, lastDay: function lastDay() {
        return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, lastWeek: function lastWeek() {
        return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, sameElse: "L" }, relativeTime: { future: "en %s", past: "hace %s", s: "unos segundos", ss: "%d segundos", m: "un minuto", mm: "%d minutos", h: "una hora", hh: "%d horas", d: "un d\xeda", dd: "%d d\xedas", M: "un mes", MM: "%d meses", y: "un a\xf1o", yy: "%d a\xf1os" }, dayOfMonthOrdinalParse: /\d{1,2}\xba/, ordinal: "%d\xba", week: { dow: 1, doy: 4 } });var E = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),
      O = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_");e.defineLocale("es-us", { months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"), monthsShort: function monthsShort(e, a) {
      return e ? /-MMM-/.test(a) ? O[e.month()] : E[e.month()] : E;
    }, monthsParseExact: !0, weekdays: "domingo_lunes_martes_mi\xe9rcoles_jueves_viernes_s\xe1bado".split("_"), weekdaysShort: "dom._lun._mar._mi\xe9._jue._vie._s\xe1b.".split("_"), weekdaysMin: "do_lu_ma_mi_ju_vi_s\xe1".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "MM/DD/YYYY", LL: "MMMM [de] D [de] YYYY", LLL: "MMMM [de] D [de] YYYY h:mm A", LLLL: "dddd, MMMM [de] D [de] YYYY h:mm A" }, calendar: { sameDay: function sameDay() {
        return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, nextDay: function nextDay() {
        return "[ma\xf1ana a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, nextWeek: function nextWeek() {
        return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, lastDay: function lastDay() {
        return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, lastWeek: function lastWeek() {
        return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, sameElse: "L" }, relativeTime: { future: "en %s", past: "hace %s", s: "unos segundos", ss: "%d segundos", m: "un minuto", mm: "%d minutos", h: "una hora", hh: "%d horas", d: "un d\xeda", dd: "%d d\xedas", M: "un mes", MM: "%d meses", y: "un a\xf1o", yy: "%d a\xf1os" }, dayOfMonthOrdinalParse: /\d{1,2}\xba/, ordinal: "%d\xba", week: { dow: 0, doy: 6 } });var F = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),
      z = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),
      J = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i],
      I = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;function N(e, a, _, s) {
    var d = { s: ["m\xf5ne sekundi", "m\xf5ni sekund", "paar sekundit"], ss: [e + "sekundi", e + "sekundit"], m: ["\xfche minuti", "\xfcks minut"], mm: [e + " minuti", e + " minutit"], h: ["\xfche tunni", "tund aega", "\xfcks tund"], hh: [e + " tunni", e + " tundi"], d: ["\xfche p\xe4eva", "\xfcks p\xe4ev"], M: ["kuu aja", "kuu aega", "\xfcks kuu"], MM: [e + " kuu", e + " kuud"], y: ["\xfche aasta", "aasta", "\xfcks aasta"], yy: [e + " aasta", e + " aastat"] };return a ? d[_][2] ? d[_][2] : d[_][1] : s ? d[_][0] : d[_][1];
  }e.defineLocale("es", { months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"), monthsShort: function monthsShort(e, a) {
      return e ? /-MMM-/.test(a) ? z[e.month()] : F[e.month()] : F;
    }, monthsRegex: I, monthsShortRegex: I, monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i, monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i, monthsParse: J, longMonthsParse: J, shortMonthsParse: J, weekdays: "domingo_lunes_martes_mi\xe9rcoles_jueves_viernes_s\xe1bado".split("_"), weekdaysShort: "dom._lun._mar._mi\xe9._jue._vie._s\xe1b.".split("_"), weekdaysMin: "do_lu_ma_mi_ju_vi_s\xe1".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY H:mm", LLLL: "dddd, D [de] MMMM [de] YYYY H:mm" }, calendar: { sameDay: function sameDay() {
        return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, nextDay: function nextDay() {
        return "[ma\xf1ana a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, nextWeek: function nextWeek() {
        return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, lastDay: function lastDay() {
        return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, lastWeek: function lastWeek() {
        return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT";
      }, sameElse: "L" }, relativeTime: { future: "en %s", past: "hace %s", s: "unos segundos", ss: "%d segundos", m: "un minuto", mm: "%d minutos", h: "una hora", hh: "%d horas", d: "un d\xeda", dd: "%d d\xedas", M: "un mes", MM: "%d meses", y: "un a\xf1o", yy: "%d a\xf1os" }, dayOfMonthOrdinalParse: /\d{1,2}\xba/, ordinal: "%d\xba", week: { dow: 1, doy: 4 } }), e.defineLocale("et", { months: "jaanuar_veebruar_m\xe4rts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"), monthsShort: "jaan_veebr_m\xe4rts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"), weekdays: "p\xfchap\xe4ev_esmasp\xe4ev_teisip\xe4ev_kolmap\xe4ev_neljap\xe4ev_reede_laup\xe4ev".split("_"), weekdaysShort: "P_E_T_K_N_R_L".split("_"), weekdaysMin: "P_E_T_K_N_R_L".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[T\xe4na,] LT", nextDay: "[Homme,] LT", nextWeek: "[J\xe4rgmine] dddd LT", lastDay: "[Eile,] LT", lastWeek: "[Eelmine] dddd LT", sameElse: "L" }, relativeTime: { future: "%s p\xe4rast", past: "%s tagasi", s: N, ss: N, m: N, mm: N, h: N, hh: N, d: N, dd: "%d p\xe4eva", M: N, MM: N, y: N, yy: N }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), e.defineLocale("eu", { months: "urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"), monthsShort: "urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"), monthsParseExact: !0, weekdays: "igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"), weekdaysShort: "ig._al._ar._az._og._ol._lr.".split("_"), weekdaysMin: "ig_al_ar_az_og_ol_lr".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "YYYY[ko] MMMM[ren] D[a]", LLL: "YYYY[ko] MMMM[ren] D[a] HH:mm", LLLL: "dddd, YYYY[ko] MMMM[ren] D[a] HH:mm", l: "YYYY-M-D", ll: "YYYY[ko] MMM D[a]", lll: "YYYY[ko] MMM D[a] HH:mm", llll: "ddd, YYYY[ko] MMM D[a] HH:mm" }, calendar: { sameDay: "[gaur] LT[etan]", nextDay: "[bihar] LT[etan]", nextWeek: "dddd LT[etan]", lastDay: "[atzo] LT[etan]", lastWeek: "[aurreko] dddd LT[etan]", sameElse: "L" }, relativeTime: { future: "%s barru", past: "duela %s", s: "segundo batzuk", ss: "%d segundo", m: "minutu bat", mm: "%d minutu", h: "ordu bat", hh: "%d ordu", d: "egun bat", dd: "%d egun", M: "hilabete bat", MM: "%d hilabete", y: "urte bat", yy: "%d urte" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } });var R = { 1: "\u06F1", 2: "\u06F2", 3: "\u06F3", 4: "\u06F4", 5: "\u06F5", 6: "\u06F6", 7: "\u06F7", 8: "\u06F8", 9: "\u06F9", 0: "\u06F0" },
      K = { "\u06F1": "1", "\u06F2": "2", "\u06F3": "3", "\u06F4": "4", "\u06F5": "5", "\u06F6": "6", "\u06F7": "7", "\u06F8": "8", "\u06F9": "9", "\u06F0": "0" };e.defineLocale("fa", { months: "\u0698\u0627\u0646\u0648\u06CC\u0647_\u0641\u0648\u0631\u06CC\u0647_\u0645\u0627\u0631\u0633_\u0622\u0648\u0631\u06CC\u0644_\u0645\u0647_\u0698\u0648\u0626\u0646_\u0698\u0648\u0626\u06CC\u0647_\u0627\u0648\u062A_\u0633\u067E\u062A\u0627\u0645\u0628\u0631_\u0627\u06A9\u062A\u0628\u0631_\u0646\u0648\u0627\u0645\u0628\u0631_\u062F\u0633\u0627\u0645\u0628\u0631".split("_"), monthsShort: "\u0698\u0627\u0646\u0648\u06CC\u0647_\u0641\u0648\u0631\u06CC\u0647_\u0645\u0627\u0631\u0633_\u0622\u0648\u0631\u06CC\u0644_\u0645\u0647_\u0698\u0648\u0626\u0646_\u0698\u0648\u0626\u06CC\u0647_\u0627\u0648\u062A_\u0633\u067E\u062A\u0627\u0645\u0628\u0631_\u0627\u06A9\u062A\u0628\u0631_\u0646\u0648\u0627\u0645\u0628\u0631_\u062F\u0633\u0627\u0645\u0628\u0631".split("_"), weekdays: "\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u062C\u0645\u0639\u0647_\u0634\u0646\u0628\u0647".split("_"), weekdaysShort: "\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u062C\u0645\u0639\u0647_\u0634\u0646\u0628\u0647".split("_"), weekdaysMin: "\u06CC_\u062F_\u0633_\u0686_\u067E_\u062C_\u0634".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, meridiemParse: /\u0642\u0628\u0644 \u0627\u0632 \u0638\u0647\u0631|\u0628\u0639\u062f \u0627\u0632 \u0638\u0647\u0631/, isPM: function isPM(e) {
      return (/\u0628\u0639\u062f \u0627\u0632 \u0638\u0647\u0631/.test(e)
      );
    }, meridiem: function meridiem(e, a, _) {
      return e < 12 ? "\u0642\u0628\u0644 \u0627\u0632 \u0638\u0647\u0631" : "\u0628\u0639\u062F \u0627\u0632 \u0638\u0647\u0631";
    }, calendar: { sameDay: "[\u0627\u0645\u0631\u0648\u0632 \u0633\u0627\u0639\u062A] LT", nextDay: "[\u0641\u0631\u062F\u0627 \u0633\u0627\u0639\u062A] LT", nextWeek: "dddd [\u0633\u0627\u0639\u062A] LT", lastDay: "[\u062F\u06CC\u0631\u0648\u0632 \u0633\u0627\u0639\u062A] LT", lastWeek: "dddd [\u067E\u06CC\u0634] [\u0633\u0627\u0639\u062A] LT", sameElse: "L" }, relativeTime: { future: "\u062F\u0631 %s", past: "%s \u067E\u06CC\u0634", s: "\u0686\u0646\u062F \u062B\u0627\u0646\u06CC\u0647", ss: "\u062B\u0627\u0646\u06CC\u0647 d%", m: "\u06CC\u06A9 \u062F\u0642\u06CC\u0642\u0647", mm: "%d \u062F\u0642\u06CC\u0642\u0647", h: "\u06CC\u06A9 \u0633\u0627\u0639\u062A", hh: "%d \u0633\u0627\u0639\u062A", d: "\u06CC\u06A9 \u0631\u0648\u0632", dd: "%d \u0631\u0648\u0632", M: "\u06CC\u06A9 \u0645\u0627\u0647", MM: "%d \u0645\u0627\u0647", y: "\u06CC\u06A9 \u0633\u0627\u0644", yy: "%d \u0633\u0627\u0644" }, preparse: function preparse(e) {
      return e.replace(/[\u06f0-\u06f9]/g, function (e) {
        return K[e];
      }).replace(/\u060c/g, ",");
    }, postformat: function postformat(e) {
      return e.replace(/\d/g, function (e) {
        return R[e];
      }).replace(/,/g, "\u060C");
    }, dayOfMonthOrdinalParse: /\d{1,2}\u0645/, ordinal: "%d\u0645", week: { dow: 6, doy: 12 } });var C = "nolla yksi kaksi kolme nelj\xe4 viisi kuusi seitsem\xe4n kahdeksan yhdeks\xe4n".split(" "),
      G = ["nolla", "yhden", "kahden", "kolmen", "nelj\xe4n", "viiden", "kuuden", C[7], C[8], C[9]];function B(e, a, _, s) {
    var d,
        t,
        n = "";switch (_) {case "s":
        return s ? "muutaman sekunnin" : "muutama sekunti";case "ss":
        return s ? "sekunnin" : "sekuntia";case "m":
        return s ? "minuutin" : "minuutti";case "mm":
        n = s ? "minuutin" : "minuuttia";break;case "h":
        return s ? "tunnin" : "tunti";case "hh":
        n = s ? "tunnin" : "tuntia";break;case "d":
        return s ? "p\xe4iv\xe4n" : "p\xe4iv\xe4";case "dd":
        n = s ? "p\xe4iv\xe4n" : "p\xe4iv\xe4\xe4";break;case "M":
        return s ? "kuukauden" : "kuukausi";case "MM":
        n = s ? "kuukauden" : "kuukautta";break;case "y":
        return s ? "vuoden" : "vuosi";case "yy":
        n = s ? "vuoden" : "vuotta";break;}return t = s, n = ((d = e) < 10 ? t ? G[d] : C[d] : d) + " " + n;
  }e.defineLocale("fi", { months: "tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kes\xe4kuu_hein\xe4kuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"), monthsShort: "tammi_helmi_maalis_huhti_touko_kes\xe4_hein\xe4_elo_syys_loka_marras_joulu".split("_"), weekdays: "sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"), weekdaysShort: "su_ma_ti_ke_to_pe_la".split("_"), weekdaysMin: "su_ma_ti_ke_to_pe_la".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD.MM.YYYY", LL: "Do MMMM[ta] YYYY", LLL: "Do MMMM[ta] YYYY, [klo] HH.mm", LLLL: "dddd, Do MMMM[ta] YYYY, [klo] HH.mm", l: "D.M.YYYY", ll: "Do MMM YYYY", lll: "Do MMM YYYY, [klo] HH.mm", llll: "ddd, Do MMM YYYY, [klo] HH.mm" }, calendar: { sameDay: "[t\xe4n\xe4\xe4n] [klo] LT", nextDay: "[huomenna] [klo] LT", nextWeek: "dddd [klo] LT", lastDay: "[eilen] [klo] LT", lastWeek: "[viime] dddd[na] [klo] LT", sameElse: "L" }, relativeTime: { future: "%s p\xe4\xe4st\xe4", past: "%s sitten", s: B, ss: B, m: B, mm: B, h: B, hh: B, d: B, dd: B, M: B, MM: B, y: B, yy: B }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), e.defineLocale("fo", { months: "januar_februar_mars_apr\xedl_mai_juni_juli_august_september_oktober_november_desember".split("_"), monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"), weekdays: "sunnudagur_m\xe1nadagur_t\xfdsdagur_mikudagur_h\xf3sdagur_fr\xedggjadagur_leygardagur".split("_"), weekdaysShort: "sun_m\xe1n_t\xfds_mik_h\xf3s_fr\xed_ley".split("_"), weekdaysMin: "su_m\xe1_t\xfd_mi_h\xf3_fr_le".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D. MMMM, YYYY HH:mm" }, calendar: { sameDay: "[\xcd dag kl.] LT", nextDay: "[\xcd morgin kl.] LT", nextWeek: "dddd [kl.] LT", lastDay: "[\xcd gj\xe1r kl.] LT", lastWeek: "[s\xed\xf0stu] dddd [kl] LT", sameElse: "L" }, relativeTime: { future: "um %s", past: "%s s\xed\xf0ani", s: "f\xe1 sekund", ss: "%d sekundir", m: "ein minutt", mm: "%d minuttir", h: "ein t\xedmi", hh: "%d t\xedmar", d: "ein dagur", dd: "%d dagar", M: "ein m\xe1na\xf0i", MM: "%d m\xe1na\xf0ir", y: "eitt \xe1r", yy: "%d \xe1r" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), e.defineLocale("fr-ca", { months: "janvier_f\xe9vrier_mars_avril_mai_juin_juillet_ao\xfbt_septembre_octobre_novembre_d\xe9cembre".split("_"), monthsShort: "janv._f\xe9vr._mars_avr._mai_juin_juil._ao\xfbt_sept._oct._nov._d\xe9c.".split("_"), monthsParseExact: !0, weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"), weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"), weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Aujourd\u2019hui \xE0] LT", nextDay: "[Demain \xe0] LT", nextWeek: "dddd [\xe0] LT", lastDay: "[Hier \xe0] LT", lastWeek: "dddd [dernier \xe0] LT", sameElse: "L" }, relativeTime: { future: "dans %s", past: "il y a %s", s: "quelques secondes", ss: "%d secondes", m: "une minute", mm: "%d minutes", h: "une heure", hh: "%d heures", d: "un jour", dd: "%d jours", M: "un mois", MM: "%d mois", y: "un an", yy: "%d ans" }, dayOfMonthOrdinalParse: /\d{1,2}(er|e)/, ordinal: function ordinal(e, a) {
      switch (a) {default:case "M":case "Q":case "D":case "DDD":case "d":
          return e + (1 === e ? "er" : "e");case "w":case "W":
          return e + (1 === e ? "re" : "e");}
    } }), e.defineLocale("fr-ch", { months: "janvier_f\xe9vrier_mars_avril_mai_juin_juillet_ao\xfbt_septembre_octobre_novembre_d\xe9cembre".split("_"), monthsShort: "janv._f\xe9vr._mars_avr._mai_juin_juil._ao\xfbt_sept._oct._nov._d\xe9c.".split("_"), monthsParseExact: !0, weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"), weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"), weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Aujourd\u2019hui \xE0] LT", nextDay: "[Demain \xe0] LT", nextWeek: "dddd [\xe0] LT", lastDay: "[Hier \xe0] LT", lastWeek: "dddd [dernier \xe0] LT", sameElse: "L" }, relativeTime: { future: "dans %s", past: "il y a %s", s: "quelques secondes", ss: "%d secondes", m: "une minute", mm: "%d minutes", h: "une heure", hh: "%d heures", d: "un jour", dd: "%d jours", M: "un mois", MM: "%d mois", y: "un an", yy: "%d ans" }, dayOfMonthOrdinalParse: /\d{1,2}(er|e)/, ordinal: function ordinal(e, a) {
      switch (a) {default:case "M":case "Q":case "D":case "DDD":case "d":
          return e + (1 === e ? "er" : "e");case "w":case "W":
          return e + (1 === e ? "re" : "e");}
    }, week: { dow: 1, doy: 4 } }), e.defineLocale("fr", { months: "janvier_f\xe9vrier_mars_avril_mai_juin_juillet_ao\xfbt_septembre_octobre_novembre_d\xe9cembre".split("_"), monthsShort: "janv._f\xe9vr._mars_avr._mai_juin_juil._ao\xfbt_sept._oct._nov._d\xe9c.".split("_"), monthsParseExact: !0, weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"), weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"), weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Aujourd\u2019hui \xE0] LT", nextDay: "[Demain \xe0] LT", nextWeek: "dddd [\xe0] LT", lastDay: "[Hier \xe0] LT", lastWeek: "dddd [dernier \xe0] LT", sameElse: "L" }, relativeTime: { future: "dans %s", past: "il y a %s", s: "quelques secondes", ss: "%d secondes", m: "une minute", mm: "%d minutes", h: "une heure", hh: "%d heures", d: "un jour", dd: "%d jours", M: "un mois", MM: "%d mois", y: "un an", yy: "%d ans" }, dayOfMonthOrdinalParse: /\d{1,2}(er|)/, ordinal: function ordinal(e, a) {
      switch (a) {case "D":
          return e + (1 === e ? "er" : "");default:case "M":case "Q":case "DDD":case "d":
          return e + (1 === e ? "er" : "e");case "w":case "W":
          return e + (1 === e ? "re" : "e");}
    }, week: { dow: 1, doy: 4 } });var q = "jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),
      $ = "jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy", { months: "jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"), monthsShort: function monthsShort(e, a) {
      return e ? /-MMM-/.test(a) ? $[e.month()] : q[e.month()] : q;
    }, monthsParseExact: !0, weekdays: "snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"), weekdaysShort: "si._mo._ti._wo._to._fr._so.".split("_"), weekdaysMin: "Si_Mo_Ti_Wo_To_Fr_So".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD-MM-YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[hjoed om] LT", nextDay: "[moarn om] LT", nextWeek: "dddd [om] LT", lastDay: "[juster om] LT", lastWeek: "[\xf4fr\xfbne] dddd [om] LT", sameElse: "L" }, relativeTime: { future: "oer %s", past: "%s lyn", s: "in pear sekonden", ss: "%d sekonden", m: "ien min\xfat", mm: "%d minuten", h: "ien oere", hh: "%d oeren", d: "ien dei", dd: "%d dagen", M: "ien moanne", MM: "%d moannen", y: "ien jier", yy: "%d jierren" }, dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/, ordinal: function ordinal(e) {
      return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de");
    }, week: { dow: 1, doy: 4 } });function U(e, a, _, s) {
    var d = { s: ["thodde secondanim", "thodde second"], ss: [e + " secondanim", e + " second"], m: ["eka mintan", "ek minute"], mm: [e + " mintanim", e + " mintam"], h: ["eka horan", "ek hor"], hh: [e + " horanim", e + " hor"], d: ["eka disan", "ek dis"], dd: [e + " disanim", e + " dis"], M: ["eka mhoinean", "ek mhoino"], MM: [e + " mhoineanim", e + " mhoine"], y: ["eka vorsan", "ek voros"], yy: [e + " vorsanim", e + " vorsam"] };return a ? d[_][0] : d[_][1];
  }e.defineLocale("gd", { months: ["Am Faoilleach", "An Gearran", "Am M\xe0rt", "An Giblean", "An C\xe8itean", "An t-\xd2gmhios", "An t-Iuchar", "An L\xf9nastal", "An t-Sultain", "An D\xe0mhair", "An t-Samhain", "An D\xf9bhlachd"], monthsShort: ["Faoi", "Gear", "M\xe0rt", "Gibl", "C\xe8it", "\xd2gmh", "Iuch", "L\xf9n", "Sult", "D\xe0mh", "Samh", "D\xf9bh"], monthsParseExact: !0, weekdays: ["Did\xf2mhnaich", "Diluain", "Dim\xe0irt", "Diciadain", "Diardaoin", "Dihaoine", "Disathairne"], weekdaysShort: ["Did", "Dil", "Dim", "Dic", "Dia", "Dih", "Dis"], weekdaysMin: ["D\xf2", "Lu", "M\xe0", "Ci", "Ar", "Ha", "Sa"], longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[An-diugh aig] LT", nextDay: "[A-m\xe0ireach aig] LT", nextWeek: "dddd [aig] LT", lastDay: "[An-d\xe8 aig] LT", lastWeek: "dddd [seo chaidh] [aig] LT", sameElse: "L" }, relativeTime: { future: "ann an %s", past: "bho chionn %s", s: "beagan diogan", ss: "%d diogan", m: "mionaid", mm: "%d mionaidean", h: "uair", hh: "%d uairean", d: "latha", dd: "%d latha", M: "m\xecos", MM: "%d m\xecosan", y: "bliadhna", yy: "%d bliadhna" }, dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/, ordinal: function ordinal(e) {
      return e + (1 === e ? "d" : e % 10 == 2 ? "na" : "mh");
    }, week: { dow: 1, doy: 4 } }), e.defineLocale("gl", { months: "xaneiro_febreiro_marzo_abril_maio_xu\xf1o_xullo_agosto_setembro_outubro_novembro_decembro".split("_"), monthsShort: "xan._feb._mar._abr._mai._xu\xf1._xul._ago._set._out._nov._dec.".split("_"), monthsParseExact: !0, weekdays: "domingo_luns_martes_m\xe9rcores_xoves_venres_s\xe1bado".split("_"), weekdaysShort: "dom._lun._mar._m\xe9r._xov._ven._s\xe1b.".split("_"), weekdaysMin: "do_lu_ma_m\xe9_xo_ve_s\xe1".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY H:mm", LLLL: "dddd, D [de] MMMM [de] YYYY H:mm" }, calendar: { sameDay: function sameDay() {
        return "[hoxe " + (1 !== this.hours() ? "\xe1s" : "\xe1") + "] LT";
      }, nextDay: function nextDay() {
        return "[ma\xf1\xe1 " + (1 !== this.hours() ? "\xe1s" : "\xe1") + "] LT";
      }, nextWeek: function nextWeek() {
        return "dddd [" + (1 !== this.hours() ? "\xe1s" : "a") + "] LT";
      }, lastDay: function lastDay() {
        return "[onte " + (1 !== this.hours() ? "\xe1" : "a") + "] LT";
      }, lastWeek: function lastWeek() {
        return "[o] dddd [pasado " + (1 !== this.hours() ? "\xe1s" : "a") + "] LT";
      }, sameElse: "L" }, relativeTime: { future: function future(e) {
        return 0 === e.indexOf("un") ? "n" + e : "en " + e;
      }, past: "hai %s", s: "uns segundos", ss: "%d segundos", m: "un minuto", mm: "%d minutos", h: "unha hora", hh: "%d horas", d: "un d\xeda", dd: "%d d\xedas", M: "un mes", MM: "%d meses", y: "un ano", yy: "%d anos" }, dayOfMonthOrdinalParse: /\d{1,2}\xba/, ordinal: "%d\xba", week: { dow: 1, doy: 4 } }), e.defineLocale("gom-latn", { months: "Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"), monthsShort: "Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"), monthsParseExact: !0, weekdays: "Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son'var".split("_"), weekdaysShort: "Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"), weekdaysMin: "Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "A h:mm [vazta]", LTS: "A h:mm:ss [vazta]", L: "DD-MM-YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY A h:mm [vazta]", LLLL: "dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]", llll: "ddd, D MMM YYYY, A h:mm [vazta]" }, calendar: { sameDay: "[Aiz] LT", nextDay: "[Faleam] LT", nextWeek: "[Ieta to] dddd[,] LT", lastDay: "[Kal] LT", lastWeek: "[Fatlo] dddd[,] LT", sameElse: "L" }, relativeTime: { future: "%s", past: "%s adim", s: U, ss: U, m: U, mm: U, h: U, hh: U, d: U, dd: U, M: U, MM: U, y: U, yy: U }, dayOfMonthOrdinalParse: /\d{1,2}(er)/, ordinal: function ordinal(e, a) {
      switch (a) {case "D":
          return e + "er";default:case "M":case "Q":case "DDD":case "d":case "w":case "W":
          return e;}
    }, week: { dow: 1, doy: 4 }, meridiemParse: /rati|sokalli|donparam|sanje/, meridiemHour: function meridiemHour(e, a) {
      return 12 === e && (e = 0), "rati" === a ? e < 4 ? e : e + 12 : "sokalli" === a ? e : "donparam" === a ? e > 12 ? e : e + 12 : "sanje" === a ? e + 12 : void 0;
    }, meridiem: function meridiem(e, a, _) {
      return e < 4 ? "rati" : e < 12 ? "sokalli" : e < 16 ? "donparam" : e < 20 ? "sanje" : "rati";
    } });var Q = { 1: "\u0AE7", 2: "\u0AE8", 3: "\u0AE9", 4: "\u0AEA", 5: "\u0AEB", 6: "\u0AEC", 7: "\u0AED", 8: "\u0AEE", 9: "\u0AEF", 0: "\u0AE6" },
      V = { "\u0AE7": "1", "\u0AE8": "2", "\u0AE9": "3", "\u0AEA": "4", "\u0AEB": "5", "\u0AEC": "6", "\u0AED": "7", "\u0AEE": "8", "\u0AEF": "9", "\u0AE6": "0" };e.defineLocale("gu", { months: "\u0A9C\u0ABE\u0AA8\u0ACD\u0AAF\u0AC1\u0A86\u0AB0\u0AC0_\u0AAB\u0AC7\u0AAC\u0ACD\u0AB0\u0AC1\u0A86\u0AB0\u0AC0_\u0AAE\u0ABE\u0AB0\u0ACD\u0A9A_\u0A8F\u0AAA\u0ACD\u0AB0\u0ABF\u0AB2_\u0AAE\u0AC7_\u0A9C\u0AC2\u0AA8_\u0A9C\u0AC1\u0AB2\u0ABE\u0A88_\u0A91\u0A97\u0AB8\u0ACD\u0A9F_\u0AB8\u0AAA\u0ACD\u0A9F\u0AC7\u0AAE\u0ACD\u0AAC\u0AB0_\u0A91\u0A95\u0ACD\u0A9F\u0ACD\u0AAC\u0AB0_\u0AA8\u0AB5\u0AC7\u0AAE\u0ACD\u0AAC\u0AB0_\u0AA1\u0ABF\u0AB8\u0AC7\u0AAE\u0ACD\u0AAC\u0AB0".split("_"), monthsShort: "\u0A9C\u0ABE\u0AA8\u0ACD\u0AAF\u0AC1._\u0AAB\u0AC7\u0AAC\u0ACD\u0AB0\u0AC1._\u0AAE\u0ABE\u0AB0\u0ACD\u0A9A_\u0A8F\u0AAA\u0ACD\u0AB0\u0ABF._\u0AAE\u0AC7_\u0A9C\u0AC2\u0AA8_\u0A9C\u0AC1\u0AB2\u0ABE._\u0A91\u0A97._\u0AB8\u0AAA\u0ACD\u0A9F\u0AC7._\u0A91\u0A95\u0ACD\u0A9F\u0ACD._\u0AA8\u0AB5\u0AC7._\u0AA1\u0ABF\u0AB8\u0AC7.".split("_"), monthsParseExact: !0, weekdays: "\u0AB0\u0AB5\u0ABF\u0AB5\u0ABE\u0AB0_\u0AB8\u0ACB\u0AAE\u0AB5\u0ABE\u0AB0_\u0AAE\u0A82\u0A97\u0AB3\u0AB5\u0ABE\u0AB0_\u0AAC\u0AC1\u0AA7\u0ACD\u0AB5\u0ABE\u0AB0_\u0A97\u0AC1\u0AB0\u0AC1\u0AB5\u0ABE\u0AB0_\u0AB6\u0AC1\u0A95\u0ACD\u0AB0\u0AB5\u0ABE\u0AB0_\u0AB6\u0AA8\u0ABF\u0AB5\u0ABE\u0AB0".split("_"), weekdaysShort: "\u0AB0\u0AB5\u0ABF_\u0AB8\u0ACB\u0AAE_\u0AAE\u0A82\u0A97\u0AB3_\u0AAC\u0AC1\u0AA7\u0ACD_\u0A97\u0AC1\u0AB0\u0AC1_\u0AB6\u0AC1\u0A95\u0ACD\u0AB0_\u0AB6\u0AA8\u0ABF".split("_"), weekdaysMin: "\u0AB0_\u0AB8\u0ACB_\u0AAE\u0A82_\u0AAC\u0AC1_\u0A97\u0AC1_\u0AB6\u0AC1_\u0AB6".split("_"), longDateFormat: { LT: "A h:mm \u0AB5\u0ABE\u0A97\u0ACD\u0AAF\u0AC7", LTS: "A h:mm:ss \u0AB5\u0ABE\u0A97\u0ACD\u0AAF\u0AC7", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm \u0AB5\u0ABE\u0A97\u0ACD\u0AAF\u0AC7", LLLL: "dddd, D MMMM YYYY, A h:mm \u0AB5\u0ABE\u0A97\u0ACD\u0AAF\u0AC7" }, calendar: { sameDay: "[\u0A86\u0A9C] LT", nextDay: "[\u0A95\u0ABE\u0AB2\u0AC7] LT", nextWeek: "dddd, LT", lastDay: "[\u0A97\u0A87\u0A95\u0ABE\u0AB2\u0AC7] LT", lastWeek: "[\u0AAA\u0ABE\u0A9B\u0AB2\u0ABE] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s \u0AAE\u0ABE", past: "%s \u0AAA\u0AC7\u0AB9\u0AB2\u0ABE", s: "\u0A85\u0AAE\u0AC1\u0A95 \u0AAA\u0AB3\u0ACB", ss: "%d \u0AB8\u0AC7\u0A95\u0A82\u0AA1", m: "\u0A8F\u0A95 \u0AAE\u0ABF\u0AA8\u0ABF\u0A9F", mm: "%d \u0AAE\u0ABF\u0AA8\u0ABF\u0A9F", h: "\u0A8F\u0A95 \u0A95\u0AB2\u0ABE\u0A95", hh: "%d \u0A95\u0AB2\u0ABE\u0A95", d: "\u0A8F\u0A95 \u0AA6\u0ABF\u0AB5\u0AB8", dd: "%d \u0AA6\u0ABF\u0AB5\u0AB8", M: "\u0A8F\u0A95 \u0AAE\u0AB9\u0ABF\u0AA8\u0ACB", MM: "%d \u0AAE\u0AB9\u0ABF\u0AA8\u0ACB", y: "\u0A8F\u0A95 \u0AB5\u0AB0\u0ACD\u0AB7", yy: "%d \u0AB5\u0AB0\u0ACD\u0AB7" }, preparse: function preparse(e) {
      return e.replace(/[\u0ae7\u0ae8\u0ae9\u0aea\u0aeb\u0aec\u0aed\u0aee\u0aef\u0ae6]/g, function (e) {
        return V[e];
      });
    }, postformat: function postformat(e) {
      return e.replace(/\d/g, function (e) {
        return Q[e];
      });
    }, meridiemParse: /\u0ab0\u0abe\u0aa4|\u0aac\u0aaa\u0acb\u0ab0|\u0ab8\u0ab5\u0abe\u0ab0|\u0ab8\u0abe\u0a82\u0a9c/, meridiemHour: function meridiemHour(e, a) {
      return 12 === e && (e = 0), "\u0AB0\u0ABE\u0AA4" === a ? e < 4 ? e : e + 12 : "\u0AB8\u0AB5\u0ABE\u0AB0" === a ? e : "\u0AAC\u0AAA\u0ACB\u0AB0" === a ? e >= 10 ? e : e + 12 : "\u0AB8\u0ABE\u0A82\u0A9C" === a ? e + 12 : void 0;
    }, meridiem: function meridiem(e, a, _) {
      return e < 4 ? "\u0AB0\u0ABE\u0AA4" : e < 10 ? "\u0AB8\u0AB5\u0ABE\u0AB0" : e < 17 ? "\u0AAC\u0AAA\u0ACB\u0AB0" : e < 20 ? "\u0AB8\u0ABE\u0A82\u0A9C" : "\u0AB0\u0ABE\u0AA4";
    }, week: { dow: 0, doy: 6 } }), e.defineLocale("he", { months: "\u05D9\u05E0\u05D5\u05D0\u05E8_\u05E4\u05D1\u05E8\u05D5\u05D0\u05E8_\u05DE\u05E8\u05E5_\u05D0\u05E4\u05E8\u05D9\u05DC_\u05DE\u05D0\u05D9_\u05D9\u05D5\u05E0\u05D9_\u05D9\u05D5\u05DC\u05D9_\u05D0\u05D5\u05D2\u05D5\u05E1\u05D8_\u05E1\u05E4\u05D8\u05DE\u05D1\u05E8_\u05D0\u05D5\u05E7\u05D8\u05D5\u05D1\u05E8_\u05E0\u05D5\u05D1\u05DE\u05D1\u05E8_\u05D3\u05E6\u05DE\u05D1\u05E8".split("_"), monthsShort: "\u05D9\u05E0\u05D5\u05F3_\u05E4\u05D1\u05E8\u05F3_\u05DE\u05E8\u05E5_\u05D0\u05E4\u05E8\u05F3_\u05DE\u05D0\u05D9_\u05D9\u05D5\u05E0\u05D9_\u05D9\u05D5\u05DC\u05D9_\u05D0\u05D5\u05D2\u05F3_\u05E1\u05E4\u05D8\u05F3_\u05D0\u05D5\u05E7\u05F3_\u05E0\u05D5\u05D1\u05F3_\u05D3\u05E6\u05DE\u05F3".split("_"), weekdays: "\u05E8\u05D0\u05E9\u05D5\u05DF_\u05E9\u05E0\u05D9_\u05E9\u05DC\u05D9\u05E9\u05D9_\u05E8\u05D1\u05D9\u05E2\u05D9_\u05D7\u05DE\u05D9\u05E9\u05D9_\u05E9\u05D9\u05E9\u05D9_\u05E9\u05D1\u05EA".split("_"), weekdaysShort: "\u05D0\u05F3_\u05D1\u05F3_\u05D2\u05F3_\u05D3\u05F3_\u05D4\u05F3_\u05D5\u05F3_\u05E9\u05F3".split("_"), weekdaysMin: "\u05D0_\u05D1_\u05D2_\u05D3_\u05D4_\u05D5_\u05E9".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D [\u05D1]MMMM YYYY", LLL: "D [\u05D1]MMMM YYYY HH:mm", LLLL: "dddd, D [\u05D1]MMMM YYYY HH:mm", l: "D/M/YYYY", ll: "D MMM YYYY", lll: "D MMM YYYY HH:mm", llll: "ddd, D MMM YYYY HH:mm" }, calendar: { sameDay: "[\u05D4\u05D9\u05D5\u05DD \u05D1\u05BE]LT", nextDay: "[\u05DE\u05D7\u05E8 \u05D1\u05BE]LT", nextWeek: "dddd [\u05D1\u05E9\u05E2\u05D4] LT", lastDay: "[\u05D0\u05EA\u05DE\u05D5\u05DC \u05D1\u05BE]LT", lastWeek: "[\u05D1\u05D9\u05D5\u05DD] dddd [\u05D4\u05D0\u05D7\u05E8\u05D5\u05DF \u05D1\u05E9\u05E2\u05D4] LT", sameElse: "L" }, relativeTime: { future: "\u05D1\u05E2\u05D5\u05D3 %s", past: "\u05DC\u05E4\u05E0\u05D9 %s", s: "\u05DE\u05E1\u05E4\u05E8 \u05E9\u05E0\u05D9\u05D5\u05EA", ss: "%d \u05E9\u05E0\u05D9\u05D5\u05EA", m: "\u05D3\u05E7\u05D4", mm: "%d \u05D3\u05E7\u05D5\u05EA", h: "\u05E9\u05E2\u05D4", hh: function hh(e) {
        return 2 === e ? "\u05E9\u05E2\u05EA\u05D9\u05D9\u05DD" : e + " \u05E9\u05E2\u05D5\u05EA";
      }, d: "\u05D9\u05D5\u05DD", dd: function dd(e) {
        return 2 === e ? "\u05D9\u05D5\u05DE\u05D9\u05D9\u05DD" : e + " \u05D9\u05DE\u05D9\u05DD";
      }, M: "\u05D7\u05D5\u05D3\u05E9", MM: function MM(e) {
        return 2 === e ? "\u05D7\u05D5\u05D3\u05E9\u05D9\u05D9\u05DD" : e + " \u05D7\u05D5\u05D3\u05E9\u05D9\u05DD";
      }, y: "\u05E9\u05E0\u05D4", yy: function yy(e) {
        return 2 === e ? "\u05E9\u05E0\u05EA\u05D9\u05D9\u05DD" : e % 10 == 0 && 10 !== e ? e + " \u05E9\u05E0\u05D4" : e + " \u05E9\u05E0\u05D9\u05DD";
      } }, meridiemParse: /\u05d0\u05d7\u05d4"\u05e6|\u05dc\u05e4\u05e0\u05d4"\u05e6|\u05d0\u05d7\u05e8\u05d9 \u05d4\u05e6\u05d4\u05e8\u05d9\u05d9\u05dd|\u05dc\u05e4\u05e0\u05d9 \u05d4\u05e6\u05d4\u05e8\u05d9\u05d9\u05dd|\u05dc\u05e4\u05e0\u05d5\u05ea \u05d1\u05d5\u05e7\u05e8|\u05d1\u05d1\u05d5\u05e7\u05e8|\u05d1\u05e2\u05e8\u05d1/i, isPM: function isPM(e) {
      return (/^(\u05d0\u05d7\u05d4"\u05e6|\u05d0\u05d7\u05e8\u05d9 \u05d4\u05e6\u05d4\u05e8\u05d9\u05d9\u05dd|\u05d1\u05e2\u05e8\u05d1)$/.test(e)
      );
    }, meridiem: function meridiem(e, a, _) {
      return e < 5 ? "\u05DC\u05E4\u05E0\u05D5\u05EA \u05D1\u05D5\u05E7\u05E8" : e < 10 ? "\u05D1\u05D1\u05D5\u05E7\u05E8" : e < 12 ? _ ? "\u05DC\u05E4\u05E0\u05D4\"\u05E6" : "\u05DC\u05E4\u05E0\u05D9 \u05D4\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD" : e < 18 ? _ ? "\u05D0\u05D7\u05D4\"\u05E6" : "\u05D0\u05D7\u05E8\u05D9 \u05D4\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD" : "\u05D1\u05E2\u05E8\u05D1";
    } });var Z = { 1: "\u0967", 2: "\u0968", 3: "\u0969", 4: "\u096A", 5: "\u096B", 6: "\u096C", 7: "\u096D", 8: "\u096E", 9: "\u096F", 0: "\u0966" },
      X = { "\u0967": "1", "\u0968": "2", "\u0969": "3", "\u096A": "4", "\u096B": "5", "\u096C": "6", "\u096D": "7", "\u096E": "8", "\u096F": "9", "\u0966": "0" };function ee(e, a, _) {
    var s = e + " ";switch (_) {case "ss":
        return s += 1 === e ? "sekunda" : 2 === e || 3 === e || 4 === e ? "sekunde" : "sekundi";case "m":
        return a ? "jedna minuta" : "jedne minute";case "mm":
        return s += 1 === e ? "minuta" : 2 === e || 3 === e || 4 === e ? "minute" : "minuta";case "h":
        return a ? "jedan sat" : "jednog sata";case "hh":
        return s += 1 === e ? "sat" : 2 === e || 3 === e || 4 === e ? "sata" : "sati";case "dd":
        return s += 1 === e ? "dan" : "dana";case "MM":
        return s += 1 === e ? "mjesec" : 2 === e || 3 === e || 4 === e ? "mjeseca" : "mjeseci";case "yy":
        return s += 1 === e ? "godina" : 2 === e || 3 === e || 4 === e ? "godine" : "godina";}
  }e.defineLocale("hi", { months: "\u091C\u0928\u0935\u0930\u0940_\u092B\u093C\u0930\u0935\u0930\u0940_\u092E\u093E\u0930\u094D\u091A_\u0905\u092A\u094D\u0930\u0948\u0932_\u092E\u0908_\u091C\u0942\u0928_\u091C\u0941\u0932\u093E\u0908_\u0905\u0917\u0938\u094D\u0924_\u0938\u093F\u0924\u092E\u094D\u092C\u0930_\u0905\u0915\u094D\u091F\u0942\u092C\u0930_\u0928\u0935\u092E\u094D\u092C\u0930_\u0926\u093F\u0938\u092E\u094D\u092C\u0930".split("_"), monthsShort: "\u091C\u0928._\u092B\u093C\u0930._\u092E\u093E\u0930\u094D\u091A_\u0905\u092A\u094D\u0930\u0948._\u092E\u0908_\u091C\u0942\u0928_\u091C\u0941\u0932._\u0905\u0917._\u0938\u093F\u0924._\u0905\u0915\u094D\u091F\u0942._\u0928\u0935._\u0926\u093F\u0938.".split("_"), monthsParseExact: !0, weekdays: "\u0930\u0935\u093F\u0935\u093E\u0930_\u0938\u094B\u092E\u0935\u093E\u0930_\u092E\u0902\u0917\u0932\u0935\u093E\u0930_\u092C\u0941\u0927\u0935\u093E\u0930_\u0917\u0941\u0930\u0942\u0935\u093E\u0930_\u0936\u0941\u0915\u094D\u0930\u0935\u093E\u0930_\u0936\u0928\u093F\u0935\u093E\u0930".split("_"), weekdaysShort: "\u0930\u0935\u093F_\u0938\u094B\u092E_\u092E\u0902\u0917\u0932_\u092C\u0941\u0927_\u0917\u0941\u0930\u0942_\u0936\u0941\u0915\u094D\u0930_\u0936\u0928\u093F".split("_"), weekdaysMin: "\u0930_\u0938\u094B_\u092E\u0902_\u092C\u0941_\u0917\u0941_\u0936\u0941_\u0936".split("_"), longDateFormat: { LT: "A h:mm \u092C\u091C\u0947", LTS: "A h:mm:ss \u092C\u091C\u0947", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm \u092C\u091C\u0947", LLLL: "dddd, D MMMM YYYY, A h:mm \u092C\u091C\u0947" }, calendar: { sameDay: "[\u0906\u091C] LT", nextDay: "[\u0915\u0932] LT", nextWeek: "dddd, LT", lastDay: "[\u0915\u0932] LT", lastWeek: "[\u092A\u093F\u091B\u0932\u0947] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s \u092E\u0947\u0902", past: "%s \u092A\u0939\u0932\u0947", s: "\u0915\u0941\u091B \u0939\u0940 \u0915\u094D\u0937\u0923", ss: "%d \u0938\u0947\u0915\u0902\u0921", m: "\u090F\u0915 \u092E\u093F\u0928\u091F", mm: "%d \u092E\u093F\u0928\u091F", h: "\u090F\u0915 \u0918\u0902\u091F\u093E", hh: "%d \u0918\u0902\u091F\u0947", d: "\u090F\u0915 \u0926\u093F\u0928", dd: "%d \u0926\u093F\u0928", M: "\u090F\u0915 \u092E\u0939\u0940\u0928\u0947", MM: "%d \u092E\u0939\u0940\u0928\u0947", y: "\u090F\u0915 \u0935\u0930\u094D\u0937", yy: "%d \u0935\u0930\u094D\u0937" }, preparse: function preparse(e) {
      return e.replace(/[\u0967\u0968\u0969\u096a\u096b\u096c\u096d\u096e\u096f\u0966]/g, function (e) {
        return X[e];
      });
    }, postformat: function postformat(e) {
      return e.replace(/\d/g, function (e) {
        return Z[e];
      });
    }, meridiemParse: /\u0930\u093e\u0924|\u0938\u0941\u092c\u0939|\u0926\u094b\u092a\u0939\u0930|\u0936\u093e\u092e/, meridiemHour: function meridiemHour(e, a) {
      return 12 === e && (e = 0), "\u0930\u093E\u0924" === a ? e < 4 ? e : e + 12 : "\u0938\u0941\u092C\u0939" === a ? e : "\u0926\u094B\u092A\u0939\u0930" === a ? e >= 10 ? e : e + 12 : "\u0936\u093E\u092E" === a ? e + 12 : void 0;
    }, meridiem: function meridiem(e, a, _) {
      return e < 4 ? "\u0930\u093E\u0924" : e < 10 ? "\u0938\u0941\u092C\u0939" : e < 17 ? "\u0926\u094B\u092A\u0939\u0930" : e < 20 ? "\u0936\u093E\u092E" : "\u0930\u093E\u0924";
    }, week: { dow: 0, doy: 6 } }), e.defineLocale("hr", { months: { format: "sije\u010Dnja_velja\u010De_o\u017Eujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"), standalone: "sije\u010Danj_velja\u010Da_o\u017Eujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_") }, monthsShort: "sij._velj._o\u017Eu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"), monthsParseExact: !0, weekdays: "nedjelja_ponedjeljak_utorak_srijeda_\u010Detvrtak_petak_subota".split("_"), weekdaysShort: "ned._pon._uto._sri._\u010Det._pet._sub.".split("_"), weekdaysMin: "ne_po_ut_sr_\u010De_pe_su".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[danas u] LT", nextDay: "[sutra u] LT", nextWeek: function nextWeek() {
        switch (this.day()) {case 0:
            return "[u] [nedjelju] [u] LT";case 3:
            return "[u] [srijedu] [u] LT";case 6:
            return "[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:
            return "[u] dddd [u] LT";}
      }, lastDay: "[ju\u010Der u] LT", lastWeek: function lastWeek() {
        switch (this.day()) {case 0:case 3:
            return "[pro\u0161lu] dddd [u] LT";case 6:
            return "[pro\u0161le] [subote] [u] LT";case 1:case 2:case 4:case 5:
            return "[pro\u0161li] dddd [u] LT";}
      }, sameElse: "L" }, relativeTime: { future: "za %s", past: "prije %s", s: "par sekundi", ss: ee, m: ee, mm: ee, h: ee, hh: ee, d: "dan", dd: ee, M: "mjesec", MM: ee, y: "godinu", yy: ee }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } });var ae = "vas\xE1rnap h\xE9tf\u0151n kedden szerd\xE1n cs\xFCt\xF6rt\xF6k\xF6n p\xE9nteken szombaton".split(" ");function _e(e, a, _, s) {
    var d = e;switch (_) {case "s":
        return s || a ? "n\xe9h\xe1ny m\xe1sodperc" : "n\xe9h\xe1ny m\xe1sodperce";case "ss":
        return d + (s || a) ? " m\xe1sodperc" : " m\xe1sodperce";case "m":
        return "egy" + (s || a ? " perc" : " perce");case "mm":
        return d + (s || a ? " perc" : " perce");case "h":
        return "egy" + (s || a ? " \xf3ra" : " \xf3r\xe1ja");case "hh":
        return d + (s || a ? " \xf3ra" : " \xf3r\xe1ja");case "d":
        return "egy" + (s || a ? " nap" : " napja");case "dd":
        return d + (s || a ? " nap" : " napja");case "M":
        return "egy" + (s || a ? " h\xf3nap" : " h\xf3napja");case "MM":
        return d + (s || a ? " h\xf3nap" : " h\xf3napja");case "y":
        return "egy" + (s || a ? " \xe9v" : " \xe9ve");case "yy":
        return d + (s || a ? " \xe9v" : " \xe9ve");}return "";
  }function se(e) {
    return (e ? "" : "[m\xfalt] ") + "[" + ae[this.day()] + "] LT[-kor]";
  }function de(e) {
    return e % 100 == 11 || e % 10 != 1;
  }function te(e, a, _, s) {
    var d = e + " ";switch (_) {case "s":
        return a || s ? "nokkrar sek\xfandur" : "nokkrum sek\xfandum";case "ss":
        return de(e) ? d + (a || s ? "sek\xfandur" : "sek\xfandum") : d + "sek\xfanda";case "m":
        return a ? "m\xedn\xfata" : "m\xedn\xfatu";case "mm":
        return de(e) ? d + (a || s ? "m\xedn\xfatur" : "m\xedn\xfatum") : a ? d + "m\xedn\xfata" : d + "m\xedn\xfatu";case "hh":
        return de(e) ? d + (a || s ? "klukkustundir" : "klukkustundum") : d + "klukkustund";case "d":
        return a ? "dagur" : s ? "dag" : "degi";case "dd":
        return de(e) ? a ? d + "dagar" : d + (s ? "daga" : "d\xf6gum") : a ? d + "dagur" : d + (s ? "dag" : "degi");case "M":
        return a ? "m\xe1nu\xf0ur" : s ? "m\xe1nu\xf0" : "m\xe1nu\xf0i";case "MM":
        return de(e) ? a ? d + "m\xe1nu\xf0ir" : d + (s ? "m\xe1nu\xf0i" : "m\xe1nu\xf0um") : a ? d + "m\xe1nu\xf0ur" : d + (s ? "m\xe1nu\xf0" : "m\xe1nu\xf0i");case "y":
        return a || s ? "\xe1r" : "\xe1ri";case "yy":
        return de(e) ? d + (a || s ? "\xe1r" : "\xe1rum") : d + (a || s ? "\xe1r" : "\xe1ri");}
  }e.defineLocale("hu", { months: "janu\xe1r_febru\xe1r_m\xe1rcius_\xe1prilis_m\xe1jus_j\xfanius_j\xfalius_augusztus_szeptember_okt\xf3ber_november_december".split("_"), monthsShort: "jan_feb_m\xe1rc_\xe1pr_m\xe1j_j\xfan_j\xfal_aug_szept_okt_nov_dec".split("_"), weekdays: "vas\xE1rnap_h\xE9tf\u0151_kedd_szerda_cs\xFCt\xF6rt\xF6k_p\xE9ntek_szombat".split("_"), weekdaysShort: "vas_h\xe9t_kedd_sze_cs\xfct_p\xe9n_szo".split("_"), weekdaysMin: "v_h_k_sze_cs_p_szo".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "YYYY.MM.DD.", LL: "YYYY. MMMM D.", LLL: "YYYY. MMMM D. H:mm", LLLL: "YYYY. MMMM D., dddd H:mm" }, meridiemParse: /de|du/i, isPM: function isPM(e) {
      return "u" === e.charAt(1).toLowerCase();
    }, meridiem: function meridiem(e, a, _) {
      return e < 12 ? !0 === _ ? "de" : "DE" : !0 === _ ? "du" : "DU";
    }, calendar: { sameDay: "[ma] LT[-kor]", nextDay: "[holnap] LT[-kor]", nextWeek: function nextWeek() {
        return se.call(this, !0);
      }, lastDay: "[tegnap] LT[-kor]", lastWeek: function lastWeek() {
        return se.call(this, !1);
      }, sameElse: "L" }, relativeTime: { future: "%s m\xfalva", past: "%s", s: _e, ss: _e, m: _e, mm: _e, h: _e, hh: _e, d: _e, dd: _e, M: _e, MM: _e, y: _e, yy: _e }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), e.defineLocale("hy-am", { months: { format: "\u0570\u0578\u0582\u0576\u057E\u0561\u0580\u056B_\u0583\u0565\u057F\u0580\u057E\u0561\u0580\u056B_\u0574\u0561\u0580\u057F\u056B_\u0561\u057A\u0580\u056B\u056C\u056B_\u0574\u0561\u0575\u056B\u057D\u056B_\u0570\u0578\u0582\u0576\u056B\u057D\u056B_\u0570\u0578\u0582\u056C\u056B\u057D\u056B_\u0585\u0563\u0578\u057D\u057F\u0578\u057D\u056B_\u057D\u0565\u057A\u057F\u0565\u0574\u0562\u0565\u0580\u056B_\u0570\u0578\u056F\u057F\u0565\u0574\u0562\u0565\u0580\u056B_\u0576\u0578\u0575\u0565\u0574\u0562\u0565\u0580\u056B_\u0564\u0565\u056F\u057F\u0565\u0574\u0562\u0565\u0580\u056B".split("_"), standalone: "\u0570\u0578\u0582\u0576\u057E\u0561\u0580_\u0583\u0565\u057F\u0580\u057E\u0561\u0580_\u0574\u0561\u0580\u057F_\u0561\u057A\u0580\u056B\u056C_\u0574\u0561\u0575\u056B\u057D_\u0570\u0578\u0582\u0576\u056B\u057D_\u0570\u0578\u0582\u056C\u056B\u057D_\u0585\u0563\u0578\u057D\u057F\u0578\u057D_\u057D\u0565\u057A\u057F\u0565\u0574\u0562\u0565\u0580_\u0570\u0578\u056F\u057F\u0565\u0574\u0562\u0565\u0580_\u0576\u0578\u0575\u0565\u0574\u0562\u0565\u0580_\u0564\u0565\u056F\u057F\u0565\u0574\u0562\u0565\u0580".split("_") }, monthsShort: "\u0570\u0576\u057E_\u0583\u057F\u0580_\u0574\u0580\u057F_\u0561\u057A\u0580_\u0574\u0575\u057D_\u0570\u0576\u057D_\u0570\u056C\u057D_\u0585\u0563\u057D_\u057D\u057A\u057F_\u0570\u056F\u057F_\u0576\u0574\u0562_\u0564\u056F\u057F".split("_"), weekdays: "\u056F\u056B\u0580\u0561\u056F\u056B_\u0565\u0580\u056F\u0578\u0582\u0577\u0561\u0562\u0569\u056B_\u0565\u0580\u0565\u0584\u0577\u0561\u0562\u0569\u056B_\u0579\u0578\u0580\u0565\u0584\u0577\u0561\u0562\u0569\u056B_\u0570\u056B\u0576\u0563\u0577\u0561\u0562\u0569\u056B_\u0578\u0582\u0580\u0562\u0561\u0569_\u0577\u0561\u0562\u0561\u0569".split("_"), weekdaysShort: "\u056F\u0580\u056F_\u0565\u0580\u056F_\u0565\u0580\u0584_\u0579\u0580\u0584_\u0570\u0576\u0563_\u0578\u0582\u0580\u0562_\u0577\u0562\u0569".split("_"), weekdaysMin: "\u056F\u0580\u056F_\u0565\u0580\u056F_\u0565\u0580\u0584_\u0579\u0580\u0584_\u0570\u0576\u0563_\u0578\u0582\u0580\u0562_\u0577\u0562\u0569".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY \u0569.", LLL: "D MMMM YYYY \u0569., HH:mm", LLLL: "dddd, D MMMM YYYY \u0569., HH:mm" }, calendar: { sameDay: "[\u0561\u0575\u057D\u0585\u0580] LT", nextDay: "[\u057E\u0561\u0572\u0568] LT", lastDay: "[\u0565\u0580\u0565\u056F] LT", nextWeek: function nextWeek() {
        return "dddd [\u0585\u0580\u0568 \u056A\u0561\u0574\u0568] LT";
      }, lastWeek: function lastWeek() {
        return "[\u0561\u0576\u0581\u0561\u056E] dddd [\u0585\u0580\u0568 \u056A\u0561\u0574\u0568] LT";
      }, sameElse: "L" }, relativeTime: { future: "%s \u0570\u0565\u057F\u0578", past: "%s \u0561\u057C\u0561\u057B", s: "\u0574\u056B \u0584\u0561\u0576\u056B \u057E\u0561\u0575\u0580\u056F\u0575\u0561\u0576", ss: "%d \u057E\u0561\u0575\u0580\u056F\u0575\u0561\u0576", m: "\u0580\u0578\u057A\u0565", mm: "%d \u0580\u0578\u057A\u0565", h: "\u056A\u0561\u0574", hh: "%d \u056A\u0561\u0574", d: "\u0585\u0580", dd: "%d \u0585\u0580", M: "\u0561\u0574\u056B\u057D", MM: "%d \u0561\u0574\u056B\u057D", y: "\u057F\u0561\u0580\u056B", yy: "%d \u057F\u0561\u0580\u056B" }, meridiemParse: /\u0563\u056b\u0577\u0565\u0580\u057e\u0561|\u0561\u057c\u0561\u057e\u0578\u057f\u057e\u0561|\u0581\u0565\u0580\u0565\u056f\u057e\u0561|\u0565\u0580\u0565\u056f\u0578\u0575\u0561\u0576/, isPM: function isPM(e) {
      return (/^(\u0581\u0565\u0580\u0565\u056f\u057e\u0561|\u0565\u0580\u0565\u056f\u0578\u0575\u0561\u0576)$/.test(e)
      );
    }, meridiem: function meridiem(e) {
      return e < 4 ? "\u0563\u056B\u0577\u0565\u0580\u057E\u0561" : e < 12 ? "\u0561\u057C\u0561\u057E\u0578\u057F\u057E\u0561" : e < 17 ? "\u0581\u0565\u0580\u0565\u056F\u057E\u0561" : "\u0565\u0580\u0565\u056F\u0578\u0575\u0561\u0576";
    }, dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(\u056b\u0576|\u0580\u0564)/, ordinal: function ordinal(e, a) {
      switch (a) {case "DDD":case "w":case "W":case "DDDo":
          return 1 === e ? e + "-\u056B\u0576" : e + "-\u0580\u0564";default:
          return e;}
    }, week: { dow: 1, doy: 7 } }), e.defineLocale("id", { months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"), monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"), weekdays: "Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"), weekdaysShort: "Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"), weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [pukul] HH.mm", LLLL: "dddd, D MMMM YYYY [pukul] HH.mm" }, meridiemParse: /pagi|siang|sore|malam/, meridiemHour: function meridiemHour(e, a) {
      return 12 === e && (e = 0), "pagi" === a ? e : "siang" === a ? e >= 11 ? e : e + 12 : "sore" === a || "malam" === a ? e + 12 : void 0;
    }, meridiem: function meridiem(e, a, _) {
      return e < 11 ? "pagi" : e < 15 ? "siang" : e < 19 ? "sore" : "malam";
    }, calendar: { sameDay: "[Hari ini pukul] LT", nextDay: "[Besok pukul] LT", nextWeek: "dddd [pukul] LT", lastDay: "[Kemarin pukul] LT", lastWeek: "dddd [lalu pukul] LT", sameElse: "L" }, relativeTime: { future: "dalam %s", past: "%s yang lalu", s: "beberapa detik", ss: "%d detik", m: "semenit", mm: "%d menit", h: "sejam", hh: "%d jam", d: "sehari", dd: "%d hari", M: "sebulan", MM: "%d bulan", y: "setahun", yy: "%d tahun" }, week: { dow: 1, doy: 7 } }), e.defineLocale("is", { months: "jan\xfaar_febr\xfaar_mars_apr\xedl_ma\xed_j\xfan\xed_j\xfal\xed_\xe1g\xfast_september_okt\xf3ber_n\xf3vember_desember".split("_"), monthsShort: "jan_feb_mar_apr_ma\xed_j\xfan_j\xfal_\xe1g\xfa_sep_okt_n\xf3v_des".split("_"), weekdays: "sunnudagur_m\xe1nudagur_\xferi\xf0judagur_mi\xf0vikudagur_fimmtudagur_f\xf6studagur_laugardagur".split("_"), weekdaysShort: "sun_m\xe1n_\xferi_mi\xf0_fim_f\xf6s_lau".split("_"), weekdaysMin: "Su_M\xe1_\xder_Mi_Fi_F\xf6_La".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY [kl.] H:mm", LLLL: "dddd, D. MMMM YYYY [kl.] H:mm" }, calendar: { sameDay: "[\xed dag kl.] LT", nextDay: "[\xe1 morgun kl.] LT", nextWeek: "dddd [kl.] LT", lastDay: "[\xed g\xe6r kl.] LT", lastWeek: "[s\xed\xf0asta] dddd [kl.] LT", sameElse: "L" }, relativeTime: { future: "eftir %s", past: "fyrir %s s\xed\xf0an", s: te, ss: te, m: te, mm: te, h: "klukkustund", hh: te, d: te, dd: te, M: te, MM: te, y: te, yy: te }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), e.defineLocale("it", { months: "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"), monthsShort: "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"), weekdays: "domenica_luned\xec_marted\xec_mercoled\xec_gioved\xec_venerd\xec_sabato".split("_"), weekdaysShort: "dom_lun_mar_mer_gio_ven_sab".split("_"), weekdaysMin: "do_lu_ma_me_gi_ve_sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Oggi alle] LT", nextDay: "[Domani alle] LT", nextWeek: "dddd [alle] LT", lastDay: "[Ieri alle] LT", lastWeek: function lastWeek() {
        switch (this.day()) {case 0:
            return "[la scorsa] dddd [alle] LT";default:
            return "[lo scorso] dddd [alle] LT";}
      }, sameElse: "L" }, relativeTime: { future: function future(e) {
        return (/^[0-9].+$/.test(e) ? "tra" : "in") + " " + e;
      }, past: "%s fa", s: "alcuni secondi", ss: "%d secondi", m: "un minuto", mm: "%d minuti", h: "un'ora", hh: "%d ore", d: "un giorno", dd: "%d giorni", M: "un mese", MM: "%d mesi", y: "un anno", yy: "%d anni" }, dayOfMonthOrdinalParse: /\d{1,2}\xba/, ordinal: "%d\xba", week: { dow: 1, doy: 4 } }), e.defineLocale("ja", { months: "1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708".split("_"), monthsShort: "1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708".split("_"), weekdays: "\u65E5\u66DC\u65E5_\u6708\u66DC\u65E5_\u706B\u66DC\u65E5_\u6C34\u66DC\u65E5_\u6728\u66DC\u65E5_\u91D1\u66DC\u65E5_\u571F\u66DC\u65E5".split("_"), weekdaysShort: "\u65E5_\u6708_\u706B_\u6C34_\u6728_\u91D1_\u571F".split("_"), weekdaysMin: "\u65E5_\u6708_\u706B_\u6C34_\u6728_\u91D1_\u571F".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY/MM/DD", LL: "YYYY\u5E74M\u6708D\u65E5", LLL: "YYYY\u5E74M\u6708D\u65E5 HH:mm", LLLL: "YYYY\u5E74M\u6708D\u65E5 HH:mm dddd", l: "YYYY/MM/DD", ll: "YYYY\u5E74M\u6708D\u65E5", lll: "YYYY\u5E74M\u6708D\u65E5 HH:mm", llll: "YYYY\u5E74M\u6708D\u65E5 HH:mm dddd" }, meridiemParse: /\u5348\u524d|\u5348\u5f8c/i, isPM: function isPM(e) {
      return "\u5348\u5F8C" === e;
    }, meridiem: function meridiem(e, a, _) {
      return e < 12 ? "\u5348\u524D" : "\u5348\u5F8C";
    }, calendar: { sameDay: "[\u4ECA\u65E5] LT", nextDay: "[\u660E\u65E5] LT", nextWeek: "[\u6765\u9031]dddd LT", lastDay: "[\u6628\u65E5] LT", lastWeek: "[\u524D\u9031]dddd LT", sameElse: "L" }, dayOfMonthOrdinalParse: /\d{1,2}\u65e5/, ordinal: function ordinal(e, a) {
      switch (a) {case "d":case "D":case "DDD":
          return e + "\u65E5";default:
          return e;}
    }, relativeTime: { future: "%s\u5F8C", past: "%s\u524D", s: "\u6570\u79D2", ss: "%d\u79D2", m: "1\u5206", mm: "%d\u5206", h: "1\u6642\u9593", hh: "%d\u6642\u9593", d: "1\u65E5", dd: "%d\u65E5", M: "1\u30F6\u6708", MM: "%d\u30F6\u6708", y: "1\u5E74", yy: "%d\u5E74" } }), e.defineLocale("jv", { months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"), monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"), weekdays: "Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"), weekdaysShort: "Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"), weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [pukul] HH.mm", LLLL: "dddd, D MMMM YYYY [pukul] HH.mm" }, meridiemParse: /enjing|siyang|sonten|ndalu/, meridiemHour: function meridiemHour(e, a) {
      return 12 === e && (e = 0), "enjing" === a ? e : "siyang" === a ? e >= 11 ? e : e + 12 : "sonten" === a || "ndalu" === a ? e + 12 : void 0;
    }, meridiem: function meridiem(e, a, _) {
      return e < 11 ? "enjing" : e < 15 ? "siyang" : e < 19 ? "sonten" : "ndalu";
    }, calendar: { sameDay: "[Dinten puniko pukul] LT", nextDay: "[Mbenjang pukul] LT", nextWeek: "dddd [pukul] LT", lastDay: "[Kala wingi pukul] LT", lastWeek: "dddd [kepengker pukul] LT", sameElse: "L" }, relativeTime: { future: "wonten ing %s", past: "%s ingkang kepengker", s: "sawetawis detik", ss: "%d detik", m: "setunggal menit", mm: "%d menit", h: "setunggal jam", hh: "%d jam", d: "sedinten", dd: "%d dinten", M: "sewulan", MM: "%d wulan", y: "setaun", yy: "%d taun" }, week: { dow: 1, doy: 7 } }), e.defineLocale("ka", { months: { standalone: "\u10D8\u10D0\u10DC\u10D5\u10D0\u10E0\u10D8_\u10D7\u10D4\u10D1\u10D4\u10E0\u10D5\u10D0\u10DA\u10D8_\u10DB\u10D0\u10E0\u10E2\u10D8_\u10D0\u10DE\u10E0\u10D8\u10DA\u10D8_\u10DB\u10D0\u10D8\u10E1\u10D8_\u10D8\u10D5\u10DC\u10D8\u10E1\u10D8_\u10D8\u10D5\u10DA\u10D8\u10E1\u10D8_\u10D0\u10D2\u10D5\u10D8\u10E1\u10E2\u10DD_\u10E1\u10D4\u10E5\u10E2\u10D4\u10DB\u10D1\u10D4\u10E0\u10D8_\u10DD\u10E5\u10E2\u10DD\u10DB\u10D1\u10D4\u10E0\u10D8_\u10DC\u10DD\u10D4\u10DB\u10D1\u10D4\u10E0\u10D8_\u10D3\u10D4\u10D9\u10D4\u10DB\u10D1\u10D4\u10E0\u10D8".split("_"), format: "\u10D8\u10D0\u10DC\u10D5\u10D0\u10E0\u10E1_\u10D7\u10D4\u10D1\u10D4\u10E0\u10D5\u10D0\u10DA\u10E1_\u10DB\u10D0\u10E0\u10E2\u10E1_\u10D0\u10DE\u10E0\u10D8\u10DA\u10D8\u10E1_\u10DB\u10D0\u10D8\u10E1\u10E1_\u10D8\u10D5\u10DC\u10D8\u10E1\u10E1_\u10D8\u10D5\u10DA\u10D8\u10E1\u10E1_\u10D0\u10D2\u10D5\u10D8\u10E1\u10E2\u10E1_\u10E1\u10D4\u10E5\u10E2\u10D4\u10DB\u10D1\u10D4\u10E0\u10E1_\u10DD\u10E5\u10E2\u10DD\u10DB\u10D1\u10D4\u10E0\u10E1_\u10DC\u10DD\u10D4\u10DB\u10D1\u10D4\u10E0\u10E1_\u10D3\u10D4\u10D9\u10D4\u10DB\u10D1\u10D4\u10E0\u10E1".split("_") }, monthsShort: "\u10D8\u10D0\u10DC_\u10D7\u10D4\u10D1_\u10DB\u10D0\u10E0_\u10D0\u10DE\u10E0_\u10DB\u10D0\u10D8_\u10D8\u10D5\u10DC_\u10D8\u10D5\u10DA_\u10D0\u10D2\u10D5_\u10E1\u10D4\u10E5_\u10DD\u10E5\u10E2_\u10DC\u10DD\u10D4_\u10D3\u10D4\u10D9".split("_"), weekdays: { standalone: "\u10D9\u10D5\u10D8\u10E0\u10D0_\u10DD\u10E0\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8_\u10E1\u10D0\u10DB\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8_\u10DD\u10D7\u10EE\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8_\u10EE\u10E3\u10D7\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8_\u10DE\u10D0\u10E0\u10D0\u10E1\u10D9\u10D4\u10D5\u10D8_\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8".split("_"), format: "\u10D9\u10D5\u10D8\u10E0\u10D0\u10E1_\u10DD\u10E0\u10E8\u10D0\u10D1\u10D0\u10D7\u10E1_\u10E1\u10D0\u10DB\u10E8\u10D0\u10D1\u10D0\u10D7\u10E1_\u10DD\u10D7\u10EE\u10E8\u10D0\u10D1\u10D0\u10D7\u10E1_\u10EE\u10E3\u10D7\u10E8\u10D0\u10D1\u10D0\u10D7\u10E1_\u10DE\u10D0\u10E0\u10D0\u10E1\u10D9\u10D4\u10D5\u10E1_\u10E8\u10D0\u10D1\u10D0\u10D7\u10E1".split("_"), isFormat: /(\u10ec\u10d8\u10dc\u10d0|\u10e8\u10d4\u10db\u10d3\u10d4\u10d2)/ }, weekdaysShort: "\u10D9\u10D5\u10D8_\u10DD\u10E0\u10E8_\u10E1\u10D0\u10DB_\u10DD\u10D7\u10EE_\u10EE\u10E3\u10D7_\u10DE\u10D0\u10E0_\u10E8\u10D0\u10D1".split("_"), weekdaysMin: "\u10D9\u10D5_\u10DD\u10E0_\u10E1\u10D0_\u10DD\u10D7_\u10EE\u10E3_\u10DE\u10D0_\u10E8\u10D0".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendar: { sameDay: "[\u10D3\u10E6\u10D4\u10E1] LT[-\u10D6\u10D4]", nextDay: "[\u10EE\u10D5\u10D0\u10DA] LT[-\u10D6\u10D4]", lastDay: "[\u10D2\u10E3\u10E8\u10D8\u10DC] LT[-\u10D6\u10D4]", nextWeek: "[\u10E8\u10D4\u10DB\u10D3\u10D4\u10D2] dddd LT[-\u10D6\u10D4]", lastWeek: "[\u10EC\u10D8\u10DC\u10D0] dddd LT-\u10D6\u10D4", sameElse: "L" }, relativeTime: { future: function future(e) {
        return (/(\u10ec\u10d0\u10db\u10d8|\u10ec\u10e3\u10d7\u10d8|\u10e1\u10d0\u10d0\u10d7\u10d8|\u10ec\u10d4\u10da\u10d8)/.test(e) ? e.replace(/\u10d8$/, "\u10E8\u10D8") : e + "\u10E8\u10D8"
        );
      }, past: function past(e) {
        return (/(\u10ec\u10d0\u10db\u10d8|\u10ec\u10e3\u10d7\u10d8|\u10e1\u10d0\u10d0\u10d7\u10d8|\u10d3\u10e6\u10d4|\u10d7\u10d5\u10d4)/.test(e) ? e.replace(/(\u10d8|\u10d4)$/, "\u10D8\u10E1 \u10E3\u10D9\u10D0\u10DC") : /\u10ec\u10d4\u10da\u10d8/.test(e) ? e.replace(/\u10ec\u10d4\u10da\u10d8$/, "\u10EC\u10DA\u10D8\u10E1 \u10E3\u10D9\u10D0\u10DC") : void 0
        );
      }, s: "\u10E0\u10D0\u10DB\u10D3\u10D4\u10DC\u10D8\u10DB\u10D4 \u10EC\u10D0\u10DB\u10D8", ss: "%d \u10EC\u10D0\u10DB\u10D8", m: "\u10EC\u10E3\u10D7\u10D8", mm: "%d \u10EC\u10E3\u10D7\u10D8", h: "\u10E1\u10D0\u10D0\u10D7\u10D8", hh: "%d \u10E1\u10D0\u10D0\u10D7\u10D8", d: "\u10D3\u10E6\u10D4", dd: "%d \u10D3\u10E6\u10D4", M: "\u10D7\u10D5\u10D4", MM: "%d \u10D7\u10D5\u10D4", y: "\u10EC\u10D4\u10DA\u10D8", yy: "%d \u10EC\u10D4\u10DA\u10D8" }, dayOfMonthOrdinalParse: /0|1-\u10da\u10d8|\u10db\u10d4-\d{1,2}|\d{1,2}-\u10d4/, ordinal: function ordinal(e) {
      return 0 === e ? e : 1 === e ? e + "-\u10DA\u10D8" : e < 20 || e <= 100 && e % 20 == 0 || e % 100 == 0 ? "\u10DB\u10D4-" + e : e + "-\u10D4";
    }, week: { dow: 1, doy: 7 } });var ne = { 0: "-\u0448\u0456", 1: "-\u0448\u0456", 2: "-\u0448\u0456", 3: "-\u0448\u0456", 4: "-\u0448\u0456", 5: "-\u0448\u0456", 6: "-\u0448\u044B", 7: "-\u0448\u0456", 8: "-\u0448\u0456", 9: "-\u0448\u044B", 10: "-\u0448\u044B", 20: "-\u0448\u044B", 30: "-\u0448\u044B", 40: "-\u0448\u044B", 50: "-\u0448\u0456", 60: "-\u0448\u044B", 70: "-\u0448\u0456", 80: "-\u0448\u0456", 90: "-\u0448\u044B", 100: "-\u0448\u0456" };e.defineLocale("kk", { months: "\u049B\u0430\u04A3\u0442\u0430\u0440_\u0430\u049B\u043F\u0430\u043D_\u043D\u0430\u0443\u0440\u044B\u0437_\u0441\u04D9\u0443\u0456\u0440_\u043C\u0430\u043C\u044B\u0440_\u043C\u0430\u0443\u0441\u044B\u043C_\u0448\u0456\u043B\u0434\u0435_\u0442\u0430\u043C\u044B\u0437_\u049B\u044B\u0440\u043A\u04AF\u0439\u0435\u043A_\u049B\u0430\u0437\u0430\u043D_\u049B\u0430\u0440\u0430\u0448\u0430_\u0436\u0435\u043B\u0442\u043E\u049B\u0441\u0430\u043D".split("_"), monthsShort: "\u049B\u0430\u04A3_\u0430\u049B\u043F_\u043D\u0430\u0443_\u0441\u04D9\u0443_\u043C\u0430\u043C_\u043C\u0430\u0443_\u0448\u0456\u043B_\u0442\u0430\u043C_\u049B\u044B\u0440_\u049B\u0430\u0437_\u049B\u0430\u0440_\u0436\u0435\u043B".split("_"), weekdays: "\u0436\u0435\u043A\u0441\u0435\u043D\u0431\u0456_\u0434\u04AF\u0439\u0441\u0435\u043D\u0431\u0456_\u0441\u0435\u0439\u0441\u0435\u043D\u0431\u0456_\u0441\u04D9\u0440\u0441\u0435\u043D\u0431\u0456_\u0431\u0435\u0439\u0441\u0435\u043D\u0431\u0456_\u0436\u04B1\u043C\u0430_\u0441\u0435\u043D\u0431\u0456".split("_"), weekdaysShort: "\u0436\u0435\u043A_\u0434\u04AF\u0439_\u0441\u0435\u0439_\u0441\u04D9\u0440_\u0431\u0435\u0439_\u0436\u04B1\u043C_\u0441\u0435\u043D".split("_"), weekdaysMin: "\u0436\u043A_\u0434\u0439_\u0441\u0439_\u0441\u0440_\u0431\u0439_\u0436\u043C_\u0441\u043D".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[\u0411\u04AF\u0433\u0456\u043D \u0441\u0430\u0493\u0430\u0442] LT", nextDay: "[\u0415\u0440\u0442\u0435\u04A3 \u0441\u0430\u0493\u0430\u0442] LT", nextWeek: "dddd [\u0441\u0430\u0493\u0430\u0442] LT", lastDay: "[\u041A\u0435\u0448\u0435 \u0441\u0430\u0493\u0430\u0442] LT", lastWeek: "[\u04E8\u0442\u043A\u0435\u043D \u0430\u043F\u0442\u0430\u043D\u044B\u04A3] dddd [\u0441\u0430\u0493\u0430\u0442] LT", sameElse: "L" }, relativeTime: { future: "%s \u0456\u0448\u0456\u043D\u0434\u0435", past: "%s \u0431\u04B1\u0440\u044B\u043D", s: "\u0431\u0456\u0440\u043D\u0435\u0448\u0435 \u0441\u0435\u043A\u0443\u043D\u0434", ss: "%d \u0441\u0435\u043A\u0443\u043D\u0434", m: "\u0431\u0456\u0440 \u043C\u0438\u043D\u0443\u0442", mm: "%d \u043C\u0438\u043D\u0443\u0442", h: "\u0431\u0456\u0440 \u0441\u0430\u0493\u0430\u0442", hh: "%d \u0441\u0430\u0493\u0430\u0442", d: "\u0431\u0456\u0440 \u043A\u04AF\u043D", dd: "%d \u043A\u04AF\u043D", M: "\u0431\u0456\u0440 \u0430\u0439", MM: "%d \u0430\u0439", y: "\u0431\u0456\u0440 \u0436\u044B\u043B", yy: "%d \u0436\u044B\u043B" }, dayOfMonthOrdinalParse: /\d{1,2}-(\u0448\u0456|\u0448\u044b)/, ordinal: function ordinal(e) {
      return e + (ne[e] || ne[e % 10] || ne[e >= 100 ? 100 : null]);
    }, week: { dow: 1, doy: 7 } }), e.defineLocale("km", { months: "\u1798\u1780\u179A\u17B6_\u1780\u17BB\u1798\u17D2\u1797\u17C8_\u1798\u17B8\u1793\u17B6_\u1798\u17C1\u179F\u17B6_\u17A7\u179F\u1797\u17B6_\u1798\u17B7\u1790\u17BB\u1793\u17B6_\u1780\u1780\u17D2\u1780\u178A\u17B6_\u179F\u17B8\u17A0\u17B6_\u1780\u1789\u17D2\u1789\u17B6_\u178F\u17BB\u179B\u17B6_\u179C\u17B7\u1785\u17D2\u1786\u17B7\u1780\u17B6_\u1792\u17D2\u1793\u17BC".split("_"), monthsShort: "\u1798\u1780\u179A\u17B6_\u1780\u17BB\u1798\u17D2\u1797\u17C8_\u1798\u17B8\u1793\u17B6_\u1798\u17C1\u179F\u17B6_\u17A7\u179F\u1797\u17B6_\u1798\u17B7\u1790\u17BB\u1793\u17B6_\u1780\u1780\u17D2\u1780\u178A\u17B6_\u179F\u17B8\u17A0\u17B6_\u1780\u1789\u17D2\u1789\u17B6_\u178F\u17BB\u179B\u17B6_\u179C\u17B7\u1785\u17D2\u1786\u17B7\u1780\u17B6_\u1792\u17D2\u1793\u17BC".split("_"), weekdays: "\u17A2\u17B6\u1791\u17B7\u178F\u17D2\u1799_\u1785\u17D0\u1793\u17D2\u1791_\u17A2\u1784\u17D2\u1782\u17B6\u179A_\u1796\u17BB\u1792_\u1796\u17D2\u179A\u17A0\u179F\u17D2\u1794\u178F\u17B7\u17CD_\u179F\u17BB\u1780\u17D2\u179A_\u179F\u17C5\u179A\u17CD".split("_"), weekdaysShort: "\u17A2\u17B6\u1791\u17B7\u178F\u17D2\u1799_\u1785\u17D0\u1793\u17D2\u1791_\u17A2\u1784\u17D2\u1782\u17B6\u179A_\u1796\u17BB\u1792_\u1796\u17D2\u179A\u17A0\u179F\u17D2\u1794\u178F\u17B7\u17CD_\u179F\u17BB\u1780\u17D2\u179A_\u179F\u17C5\u179A\u17CD".split("_"), weekdaysMin: "\u17A2\u17B6\u1791\u17B7\u178F\u17D2\u1799_\u1785\u17D0\u1793\u17D2\u1791_\u17A2\u1784\u17D2\u1782\u17B6\u179A_\u1796\u17BB\u1792_\u1796\u17D2\u179A\u17A0\u179F\u17D2\u1794\u178F\u17B7\u17CD_\u179F\u17BB\u1780\u17D2\u179A_\u179F\u17C5\u179A\u17CD".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[\u1790\u17D2\u1784\u17C3\u1793\u17C1\u17C7 \u1798\u17C9\u17C4\u1784] LT", nextDay: "[\u179F\u17D2\u17A2\u17C2\u1780 \u1798\u17C9\u17C4\u1784] LT", nextWeek: "dddd [\u1798\u17C9\u17C4\u1784] LT", lastDay: "[\u1798\u17D2\u179F\u17B7\u179B\u1798\u17B7\u1789 \u1798\u17C9\u17C4\u1784] LT", lastWeek: "dddd [\u179F\u1794\u17D2\u178F\u17B6\u17A0\u17CD\u1798\u17BB\u1793] [\u1798\u17C9\u17C4\u1784] LT", sameElse: "L" }, relativeTime: { future: "%s\u1791\u17C0\u178F", past: "%s\u1798\u17BB\u1793", s: "\u1794\u17C9\u17BB\u1793\u17D2\u1798\u17B6\u1793\u179C\u17B7\u1793\u17B6\u1791\u17B8", ss: "%d \u179C\u17B7\u1793\u17B6\u1791\u17B8", m: "\u1798\u17BD\u1799\u1793\u17B6\u1791\u17B8", mm: "%d \u1793\u17B6\u1791\u17B8", h: "\u1798\u17BD\u1799\u1798\u17C9\u17C4\u1784", hh: "%d \u1798\u17C9\u17C4\u1784", d: "\u1798\u17BD\u1799\u1790\u17D2\u1784\u17C3", dd: "%d \u1790\u17D2\u1784\u17C3", M: "\u1798\u17BD\u1799\u1781\u17C2", MM: "%d \u1781\u17C2", y: "\u1798\u17BD\u1799\u1786\u17D2\u1793\u17B6\u17C6", yy: "%d \u1786\u17D2\u1793\u17B6\u17C6" }, week: { dow: 1, doy: 4 } });var re = { 1: "\u0CE7", 2: "\u0CE8", 3: "\u0CE9", 4: "\u0CEA", 5: "\u0CEB", 6: "\u0CEC", 7: "\u0CED", 8: "\u0CEE", 9: "\u0CEF", 0: "\u0CE6" },
      ie = { "\u0CE7": "1", "\u0CE8": "2", "\u0CE9": "3", "\u0CEA": "4", "\u0CEB": "5", "\u0CEC": "6", "\u0CED": "7", "\u0CEE": "8", "\u0CEF": "9", "\u0CE6": "0" };e.defineLocale("kn", { months: "\u0C9C\u0CA8\u0CB5\u0CB0\u0CBF_\u0CAB\u0CC6\u0CAC\u0CCD\u0CB0\u0CB5\u0CB0\u0CBF_\u0CAE\u0CBE\u0CB0\u0CCD\u0C9A\u0CCD_\u0C8F\u0CAA\u0CCD\u0CB0\u0CBF\u0CB2\u0CCD_\u0CAE\u0CC6\u0CD5_\u0C9C\u0CC2\u0CA8\u0CCD_\u0C9C\u0CC1\u0CB2\u0CC6\u0CD6_\u0C86\u0C97\u0CB8\u0CCD\u0C9F\u0CCD_\u0CB8\u0CC6\u0CAA\u0CCD\u0C9F\u0CC6\u0C82\u0CAC\u0CB0\u0CCD_\u0C85\u0C95\u0CCD\u0C9F\u0CC6\u0CC2\u0CD5\u0CAC\u0CB0\u0CCD_\u0CA8\u0CB5\u0CC6\u0C82\u0CAC\u0CB0\u0CCD_\u0CA1\u0CBF\u0CB8\u0CC6\u0C82\u0CAC\u0CB0\u0CCD".split("_"), monthsShort: "\u0C9C\u0CA8_\u0CAB\u0CC6\u0CAC\u0CCD\u0CB0_\u0CAE\u0CBE\u0CB0\u0CCD\u0C9A\u0CCD_\u0C8F\u0CAA\u0CCD\u0CB0\u0CBF\u0CB2\u0CCD_\u0CAE\u0CC6\u0CD5_\u0C9C\u0CC2\u0CA8\u0CCD_\u0C9C\u0CC1\u0CB2\u0CC6\u0CD6_\u0C86\u0C97\u0CB8\u0CCD\u0C9F\u0CCD_\u0CB8\u0CC6\u0CAA\u0CCD\u0C9F\u0CC6\u0C82_\u0C85\u0C95\u0CCD\u0C9F\u0CC6\u0CC2\u0CD5_\u0CA8\u0CB5\u0CC6\u0C82_\u0CA1\u0CBF\u0CB8\u0CC6\u0C82".split("_"), monthsParseExact: !0, weekdays: "\u0CAD\u0CBE\u0CA8\u0CC1\u0CB5\u0CBE\u0CB0_\u0CB8\u0CC6\u0CC2\u0CD5\u0CAE\u0CB5\u0CBE\u0CB0_\u0CAE\u0C82\u0C97\u0CB3\u0CB5\u0CBE\u0CB0_\u0CAC\u0CC1\u0CA7\u0CB5\u0CBE\u0CB0_\u0C97\u0CC1\u0CB0\u0CC1\u0CB5\u0CBE\u0CB0_\u0CB6\u0CC1\u0C95\u0CCD\u0CB0\u0CB5\u0CBE\u0CB0_\u0CB6\u0CA8\u0CBF\u0CB5\u0CBE\u0CB0".split("_"), weekdaysShort: "\u0CAD\u0CBE\u0CA8\u0CC1_\u0CB8\u0CC6\u0CC2\u0CD5\u0CAE_\u0CAE\u0C82\u0C97\u0CB3_\u0CAC\u0CC1\u0CA7_\u0C97\u0CC1\u0CB0\u0CC1_\u0CB6\u0CC1\u0C95\u0CCD\u0CB0_\u0CB6\u0CA8\u0CBF".split("_"), weekdaysMin: "\u0CAD\u0CBE_\u0CB8\u0CC6\u0CC2\u0CD5_\u0CAE\u0C82_\u0CAC\u0CC1_\u0C97\u0CC1_\u0CB6\u0CC1_\u0CB6".split("_"), longDateFormat: { LT: "A h:mm", LTS: "A h:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm", LLLL: "dddd, D MMMM YYYY, A h:mm" }, calendar: { sameDay: "[\u0C87\u0C82\u0CA6\u0CC1] LT", nextDay: "[\u0CA8\u0CBE\u0CB3\u0CC6] LT", nextWeek: "dddd, LT", lastDay: "[\u0CA8\u0CBF\u0CA8\u0CCD\u0CA8\u0CC6] LT", lastWeek: "[\u0C95\u0CC6\u0CC2\u0CA8\u0CC6\u0CAF] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s \u0CA8\u0C82\u0CA4\u0CB0", past: "%s \u0CB9\u0CBF\u0C82\u0CA6\u0CC6", s: "\u0C95\u0CC6\u0CB2\u0CB5\u0CC1 \u0C95\u0CCD\u0CB7\u0CA3\u0C97\u0CB3\u0CC1", ss: "%d \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CC1\u0C97\u0CB3\u0CC1", m: "\u0C92\u0C82\u0CA6\u0CC1 \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7", mm: "%d \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7", h: "\u0C92\u0C82\u0CA6\u0CC1 \u0C97\u0C82\u0C9F\u0CC6", hh: "%d \u0C97\u0C82\u0C9F\u0CC6", d: "\u0C92\u0C82\u0CA6\u0CC1 \u0CA6\u0CBF\u0CA8", dd: "%d \u0CA6\u0CBF\u0CA8", M: "\u0C92\u0C82\u0CA6\u0CC1 \u0CA4\u0CBF\u0C82\u0C97\u0CB3\u0CC1", MM: "%d \u0CA4\u0CBF\u0C82\u0C97\u0CB3\u0CC1", y: "\u0C92\u0C82\u0CA6\u0CC1 \u0CB5\u0CB0\u0CCD\u0CB7", yy: "%d \u0CB5\u0CB0\u0CCD\u0CB7" }, preparse: function preparse(e) {
      return e.replace(/[\u0ce7\u0ce8\u0ce9\u0cea\u0ceb\u0cec\u0ced\u0cee\u0cef\u0ce6]/g, function (e) {
        return ie[e];
      });
    }, postformat: function postformat(e) {
      return e.replace(/\d/g, function (e) {
        return re[e];
      });
    }, meridiemParse: /\u0cb0\u0cbe\u0ca4\u0ccd\u0cb0\u0cbf|\u0cac\u0cc6\u0cb3\u0cbf\u0c97\u0ccd\u0c97\u0cc6|\u0cae\u0ca7\u0ccd\u0caf\u0cbe\u0cb9\u0ccd\u0ca8|\u0cb8\u0c82\u0c9c\u0cc6/, meridiemHour: function meridiemHour(e, a) {
      return 12 === e && (e = 0), "\u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF" === a ? e < 4 ? e : e + 12 : "\u0CAC\u0CC6\u0CB3\u0CBF\u0C97\u0CCD\u0C97\u0CC6" === a ? e : "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CB9\u0CCD\u0CA8" === a ? e >= 10 ? e : e + 12 : "\u0CB8\u0C82\u0C9C\u0CC6" === a ? e + 12 : void 0;
    }, meridiem: function meridiem(e, a, _) {
      return e < 4 ? "\u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF" : e < 10 ? "\u0CAC\u0CC6\u0CB3\u0CBF\u0C97\u0CCD\u0C97\u0CC6" : e < 17 ? "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CB9\u0CCD\u0CA8" : e < 20 ? "\u0CB8\u0C82\u0C9C\u0CC6" : "\u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF";
    }, dayOfMonthOrdinalParse: /\d{1,2}(\u0ca8\u0cc6\u0cd5)/, ordinal: function ordinal(e) {
      return e + "\u0CA8\u0CC6\u0CD5";
    }, week: { dow: 0, doy: 6 } }), e.defineLocale("ko", { months: "1\uC6D4_2\uC6D4_3\uC6D4_4\uC6D4_5\uC6D4_6\uC6D4_7\uC6D4_8\uC6D4_9\uC6D4_10\uC6D4_11\uC6D4_12\uC6D4".split("_"), monthsShort: "1\uC6D4_2\uC6D4_3\uC6D4_4\uC6D4_5\uC6D4_6\uC6D4_7\uC6D4_8\uC6D4_9\uC6D4_10\uC6D4_11\uC6D4_12\uC6D4".split("_"), weekdays: "\uC77C\uC694\uC77C_\uC6D4\uC694\uC77C_\uD654\uC694\uC77C_\uC218\uC694\uC77C_\uBAA9\uC694\uC77C_\uAE08\uC694\uC77C_\uD1A0\uC694\uC77C".split("_"), weekdaysShort: "\uC77C_\uC6D4_\uD654_\uC218_\uBAA9_\uAE08_\uD1A0".split("_"), weekdaysMin: "\uC77C_\uC6D4_\uD654_\uC218_\uBAA9_\uAE08_\uD1A0".split("_"), longDateFormat: { LT: "A h:mm", LTS: "A h:mm:ss", L: "YYYY.MM.DD.", LL: "YYYY\uB144 MMMM D\uC77C", LLL: "YYYY\uB144 MMMM D\uC77C A h:mm", LLLL: "YYYY\uB144 MMMM D\uC77C dddd A h:mm", l: "YYYY.MM.DD.", ll: "YYYY\uB144 MMMM D\uC77C", lll: "YYYY\uB144 MMMM D\uC77C A h:mm", llll: "YYYY\uB144 MMMM D\uC77C dddd A h:mm" }, calendar: { sameDay: "\uC624\uB298 LT", nextDay: "\uB0B4\uC77C LT", nextWeek: "dddd LT", lastDay: "\uC5B4\uC81C LT", lastWeek: "\uC9C0\uB09C\uC8FC dddd LT", sameElse: "L" }, relativeTime: { future: "%s \uD6C4", past: "%s \uC804", s: "\uBA87 \uCD08", ss: "%d\uCD08", m: "1\uBD84", mm: "%d\uBD84", h: "\uD55C \uC2DC\uAC04", hh: "%d\uC2DC\uAC04", d: "\uD558\uB8E8", dd: "%d\uC77C", M: "\uD55C \uB2EC", MM: "%d\uB2EC", y: "\uC77C \uB144", yy: "%d\uB144" }, dayOfMonthOrdinalParse: /\d{1,2}(\uc77c|\uc6d4|\uc8fc)/, ordinal: function ordinal(e, a) {
      switch (a) {case "d":case "D":case "DDD":
          return e + "\uC77C";case "M":
          return e + "\uC6D4";case "w":case "W":
          return e + "\uC8FC";default:
          return e;}
    }, meridiemParse: /\uc624\uc804|\uc624\ud6c4/, isPM: function isPM(e) {
      return "\uC624\uD6C4" === e;
    }, meridiem: function meridiem(e, a, _) {
      return e < 12 ? "\uC624\uC804" : "\uC624\uD6C4";
    } });var me = { 0: "-\u0447\u04AF", 1: "-\u0447\u0438", 2: "-\u0447\u0438", 3: "-\u0447\u04AF", 4: "-\u0447\u04AF", 5: "-\u0447\u0438", 6: "-\u0447\u044B", 7: "-\u0447\u0438", 8: "-\u0447\u0438", 9: "-\u0447\u0443", 10: "-\u0447\u0443", 20: "-\u0447\u044B", 30: "-\u0447\u0443", 40: "-\u0447\u044B", 50: "-\u0447\u04AF", 60: "-\u0447\u044B", 70: "-\u0447\u0438", 80: "-\u0447\u0438", 90: "-\u0447\u0443", 100: "-\u0447\u04AF" };function oe(e, a, _, s) {
    var d = { m: ["eng Minutt", "enger Minutt"], h: ["eng Stonn", "enger Stonn"], d: ["een Dag", "engem Dag"], M: ["ee Mount", "engem Mount"], y: ["ee Joer", "engem Joer"] };return a ? d[_][0] : d[_][1];
  }function ue(e) {
    if (e = parseInt(e, 10), isNaN(e)) return !1;if (e < 0) return !0;if (e < 10) return 4 <= e && e <= 7;if (e < 100) {
      var a = e % 10;return ue(0 === a ? e / 10 : a);
    }if (e < 1e4) {
      for (; e >= 10;) {
        e /= 10;
      }return ue(e);
    }return ue(e /= 1e3);
  }e.defineLocale("ky", { months: "\u044F\u043D\u0432\u0430\u0440\u044C_\u0444\u0435\u0432\u0440\u0430\u043B\u044C_\u043C\u0430\u0440\u0442_\u0430\u043F\u0440\u0435\u043B\u044C_\u043C\u0430\u0439_\u0438\u044E\u043D\u044C_\u0438\u044E\u043B\u044C_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044C_\u043E\u043A\u0442\u044F\u0431\u0440\u044C_\u043D\u043E\u044F\u0431\u0440\u044C_\u0434\u0435\u043A\u0430\u0431\u0440\u044C".split("_"), monthsShort: "\u044F\u043D\u0432_\u0444\u0435\u0432_\u043C\u0430\u0440\u0442_\u0430\u043F\u0440_\u043C\u0430\u0439_\u0438\u044E\u043D\u044C_\u0438\u044E\u043B\u044C_\u0430\u0432\u0433_\u0441\u0435\u043D_\u043E\u043A\u0442_\u043D\u043E\u044F_\u0434\u0435\u043A".split("_"), weekdays: "\u0416\u0435\u043A\u0448\u0435\u043C\u0431\u0438_\u0414\u04AF\u0439\u0448\u04E9\u043C\u0431\u04AF_\u0428\u0435\u0439\u0448\u0435\u043C\u0431\u0438_\u0428\u0430\u0440\u0448\u0435\u043C\u0431\u0438_\u0411\u0435\u0439\u0448\u0435\u043C\u0431\u0438_\u0416\u0443\u043C\u0430_\u0418\u0448\u0435\u043C\u0431\u0438".split("_"), weekdaysShort: "\u0416\u0435\u043A_\u0414\u04AF\u0439_\u0428\u0435\u0439_\u0428\u0430\u0440_\u0411\u0435\u0439_\u0416\u0443\u043C_\u0418\u0448\u0435".split("_"), weekdaysMin: "\u0416\u043A_\u0414\u0439_\u0428\u0439_\u0428\u0440_\u0411\u0439_\u0416\u043C_\u0418\u0448".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[\u0411\u04AF\u0433\u04AF\u043D \u0441\u0430\u0430\u0442] LT", nextDay: "[\u042D\u0440\u0442\u0435\u04A3 \u0441\u0430\u0430\u0442] LT", nextWeek: "dddd [\u0441\u0430\u0430\u0442] LT", lastDay: "[\u041A\u0435\u0447\u0435 \u0441\u0430\u0430\u0442] LT", lastWeek: "[\u04E8\u0442\u043A\u0435\u043D \u0430\u043F\u0442\u0430\u043D\u044B\u043D] dddd [\u043A\u04AF\u043D\u04AF] [\u0441\u0430\u0430\u0442] LT", sameElse: "L" }, relativeTime: { future: "%s \u0438\u0447\u0438\u043D\u0434\u0435", past: "%s \u043C\u0443\u0440\u0443\u043D", s: "\u0431\u0438\u0440\u043D\u0435\u0447\u0435 \u0441\u0435\u043A\u0443\u043D\u0434", ss: "%d \u0441\u0435\u043A\u0443\u043D\u0434", m: "\u0431\u0438\u0440 \u043C\u04AF\u043D\u04E9\u0442", mm: "%d \u043C\u04AF\u043D\u04E9\u0442", h: "\u0431\u0438\u0440 \u0441\u0430\u0430\u0442", hh: "%d \u0441\u0430\u0430\u0442", d: "\u0431\u0438\u0440 \u043A\u04AF\u043D", dd: "%d \u043A\u04AF\u043D", M: "\u0431\u0438\u0440 \u0430\u0439", MM: "%d \u0430\u0439", y: "\u0431\u0438\u0440 \u0436\u044B\u043B", yy: "%d \u0436\u044B\u043B" }, dayOfMonthOrdinalParse: /\d{1,2}-(\u0447\u0438|\u0447\u044b|\u0447\u04af|\u0447\u0443)/, ordinal: function ordinal(e) {
      return e + (me[e] || me[e % 10] || me[e >= 100 ? 100 : null]);
    }, week: { dow: 1, doy: 7 } }), e.defineLocale("lb", { months: "Januar_Februar_M\xe4erz_Abr\xebll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"), monthsParseExact: !0, weekdays: "Sonndeg_M\xe9indeg_D\xebnschdeg_M\xebttwoch_Donneschdeg_Freideg_Samschdeg".split("_"), weekdaysShort: "So._M\xe9._D\xeb._M\xeb._Do._Fr._Sa.".split("_"), weekdaysMin: "So_M\xe9_D\xeb_M\xeb_Do_Fr_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm [Auer]", LTS: "H:mm:ss [Auer]", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm [Auer]", LLLL: "dddd, D. MMMM YYYY H:mm [Auer]" }, calendar: { sameDay: "[Haut um] LT", sameElse: "L", nextDay: "[Muer um] LT", nextWeek: "dddd [um] LT", lastDay: "[G\xebschter um] LT", lastWeek: function lastWeek() {
        switch (this.day()) {case 2:case 4:
            return "[Leschten] dddd [um] LT";default:
            return "[Leschte] dddd [um] LT";}
      } }, relativeTime: { future: function future(e) {
        return ue(e.substr(0, e.indexOf(" "))) ? "a " + e : "an " + e;
      }, past: function past(e) {
        return ue(e.substr(0, e.indexOf(" "))) ? "viru " + e : "virun " + e;
      }, s: "e puer Sekonnen", ss: "%d Sekonnen", m: oe, mm: "%d Minutten", h: oe, hh: "%d Stonnen", d: oe, dd: "%d Deeg", M: oe, MM: "%d M\xe9int", y: oe, yy: "%d Joer" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), e.defineLocale("lo", { months: "\u0EA1\u0EB1\u0E87\u0E81\u0EAD\u0E99_\u0E81\u0EB8\u0EA1\u0E9E\u0EB2_\u0EA1\u0EB5\u0E99\u0EB2_\u0EC0\u0EA1\u0EAA\u0EB2_\u0E9E\u0EB6\u0E94\u0EAA\u0EB0\u0E9E\u0EB2_\u0EA1\u0EB4\u0E96\u0EB8\u0E99\u0EB2_\u0E81\u0ECD\u0EA5\u0EB0\u0E81\u0EBB\u0E94_\u0EAA\u0EB4\u0E87\u0EAB\u0EB2_\u0E81\u0EB1\u0E99\u0E8D\u0EB2_\u0E95\u0EB8\u0EA5\u0EB2_\u0E9E\u0EB0\u0E88\u0EB4\u0E81_\u0E97\u0EB1\u0E99\u0EA7\u0EB2".split("_"), monthsShort: "\u0EA1\u0EB1\u0E87\u0E81\u0EAD\u0E99_\u0E81\u0EB8\u0EA1\u0E9E\u0EB2_\u0EA1\u0EB5\u0E99\u0EB2_\u0EC0\u0EA1\u0EAA\u0EB2_\u0E9E\u0EB6\u0E94\u0EAA\u0EB0\u0E9E\u0EB2_\u0EA1\u0EB4\u0E96\u0EB8\u0E99\u0EB2_\u0E81\u0ECD\u0EA5\u0EB0\u0E81\u0EBB\u0E94_\u0EAA\u0EB4\u0E87\u0EAB\u0EB2_\u0E81\u0EB1\u0E99\u0E8D\u0EB2_\u0E95\u0EB8\u0EA5\u0EB2_\u0E9E\u0EB0\u0E88\u0EB4\u0E81_\u0E97\u0EB1\u0E99\u0EA7\u0EB2".split("_"), weekdays: "\u0EAD\u0EB2\u0E97\u0EB4\u0E94_\u0E88\u0EB1\u0E99_\u0EAD\u0EB1\u0E87\u0E84\u0EB2\u0E99_\u0E9E\u0EB8\u0E94_\u0E9E\u0EB0\u0EAB\u0EB1\u0E94_\u0EAA\u0EB8\u0E81_\u0EC0\u0EAA\u0EBB\u0EB2".split("_"), weekdaysShort: "\u0E97\u0EB4\u0E94_\u0E88\u0EB1\u0E99_\u0EAD\u0EB1\u0E87\u0E84\u0EB2\u0E99_\u0E9E\u0EB8\u0E94_\u0E9E\u0EB0\u0EAB\u0EB1\u0E94_\u0EAA\u0EB8\u0E81_\u0EC0\u0EAA\u0EBB\u0EB2".split("_"), weekdaysMin: "\u0E97_\u0E88_\u0EAD\u0E84_\u0E9E_\u0E9E\u0EAB_\u0EAA\u0E81_\u0EAA".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "\u0EA7\u0EB1\u0E99dddd D MMMM YYYY HH:mm" }, meridiemParse: /\u0e95\u0ead\u0e99\u0ec0\u0e8a\u0ebb\u0ec9\u0eb2|\u0e95\u0ead\u0e99\u0ec1\u0ea5\u0e87/, isPM: function isPM(e) {
      return "\u0E95\u0EAD\u0E99\u0EC1\u0EA5\u0E87" === e;
    }, meridiem: function meridiem(e, a, _) {
      return e < 12 ? "\u0E95\u0EAD\u0E99\u0EC0\u0E8A\u0EBB\u0EC9\u0EB2" : "\u0E95\u0EAD\u0E99\u0EC1\u0EA5\u0E87";
    }, calendar: { sameDay: "[\u0EA1\u0EB7\u0EC9\u0E99\u0EB5\u0EC9\u0EC0\u0EA7\u0EA5\u0EB2] LT", nextDay: "[\u0EA1\u0EB7\u0EC9\u0EAD\u0EB7\u0EC8\u0E99\u0EC0\u0EA7\u0EA5\u0EB2] LT", nextWeek: "[\u0EA7\u0EB1\u0E99]dddd[\u0EDC\u0EC9\u0EB2\u0EC0\u0EA7\u0EA5\u0EB2] LT", lastDay: "[\u0EA1\u0EB7\u0EC9\u0EA7\u0EB2\u0E99\u0E99\u0EB5\u0EC9\u0EC0\u0EA7\u0EA5\u0EB2] LT", lastWeek: "[\u0EA7\u0EB1\u0E99]dddd[\u0EC1\u0EA5\u0EC9\u0EA7\u0E99\u0EB5\u0EC9\u0EC0\u0EA7\u0EA5\u0EB2] LT", sameElse: "L" }, relativeTime: { future: "\u0EAD\u0EB5\u0E81 %s", past: "%s\u0E9C\u0EC8\u0EB2\u0E99\u0EA1\u0EB2", s: "\u0E9A\u0ECD\u0EC8\u0EC0\u0E97\u0EBB\u0EC8\u0EB2\u0EC3\u0E94\u0EA7\u0EB4\u0E99\u0EB2\u0E97\u0EB5", ss: "%d \u0EA7\u0EB4\u0E99\u0EB2\u0E97\u0EB5", m: "1 \u0E99\u0EB2\u0E97\u0EB5", mm: "%d \u0E99\u0EB2\u0E97\u0EB5", h: "1 \u0E8A\u0EBB\u0EC8\u0EA7\u0EC2\u0EA1\u0E87", hh: "%d \u0E8A\u0EBB\u0EC8\u0EA7\u0EC2\u0EA1\u0E87", d: "1 \u0EA1\u0EB7\u0EC9", dd: "%d \u0EA1\u0EB7\u0EC9", M: "1 \u0EC0\u0E94\u0EB7\u0EAD\u0E99", MM: "%d \u0EC0\u0E94\u0EB7\u0EAD\u0E99", y: "1 \u0E9B\u0EB5", yy: "%d \u0E9B\u0EB5" }, dayOfMonthOrdinalParse: /(\u0e97\u0eb5\u0ec8)\d{1,2}/, ordinal: function ordinal(e) {
      return "\u0E97\u0EB5\u0EC8" + e;
    } });var le = { ss: "sekund\u0117_sekund\u017Ei\u0173_sekundes", m: "minut\u0117_minut\u0117s_minut\u0119", mm: "minut\u0117s_minu\u010Di\u0173_minutes", h: "valanda_valandos_valand\u0105", hh: "valandos_valand\u0173_valandas", d: "diena_dienos_dien\u0105", dd: "dienos_dien\u0173_dienas", M: "m\u0117nuo_m\u0117nesio_m\u0117nes\u012F", MM: "m\u0117nesiai_m\u0117nesi\u0173_m\u0117nesius", y: "metai_met\u0173_metus", yy: "metai_met\u0173_metus" };function Me(e, a, _, s) {
    return a ? Ye(_)[0] : s ? Ye(_)[1] : Ye(_)[2];
  }function Le(e) {
    return e % 10 == 0 || e > 10 && e < 20;
  }function Ye(e) {
    return le[e].split("_");
  }function he(e, a, _, s) {
    var d = e + " ";return 1 === e ? d + Me(0, a, _[0], s) : a ? d + (Le(e) ? Ye(_)[1] : Ye(_)[0]) : s ? d + Ye(_)[1] : d + (Le(e) ? Ye(_)[1] : Ye(_)[2]);
  }e.defineLocale("lt", { months: { format: "sausio_vasario_kovo_baland\u017Eio_gegu\u017E\u0117s_bir\u017Eelio_liepos_rugpj\u016B\u010Dio_rugs\u0117jo_spalio_lapkri\u010Dio_gruod\u017Eio".split("_"), standalone: "sausis_vasaris_kovas_balandis_gegu\u017E\u0117_bir\u017Eelis_liepa_rugpj\u016Btis_rugs\u0117jis_spalis_lapkritis_gruodis".split("_"), isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/ }, monthsShort: "sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"), weekdays: { format: "sekmadien\u012F_pirmadien\u012F_antradien\u012F_tre\u010Diadien\u012F_ketvirtadien\u012F_penktadien\u012F_\u0161e\u0161tadien\u012F".split("_"), standalone: "sekmadienis_pirmadienis_antradienis_tre\u010Diadienis_ketvirtadienis_penktadienis_\u0161e\u0161tadienis".split("_"), isFormat: /dddd HH:mm/ }, weekdaysShort: "Sek_Pir_Ant_Tre_Ket_Pen_\u0160e\u0161".split("_"), weekdaysMin: "S_P_A_T_K_Pn_\u0160".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "YYYY [m.] MMMM D [d.]", LLL: "YYYY [m.] MMMM D [d.], HH:mm [val.]", LLLL: "YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]", l: "YYYY-MM-DD", ll: "YYYY [m.] MMMM D [d.]", lll: "YYYY [m.] MMMM D [d.], HH:mm [val.]", llll: "YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]" }, calendar: { sameDay: "[\u0160iandien] LT", nextDay: "[Rytoj] LT", nextWeek: "dddd LT", lastDay: "[Vakar] LT", lastWeek: "[Pra\u0117jus\u012F] dddd LT", sameElse: "L" }, relativeTime: { future: "po %s", past: "prie\u0161 %s", s: function s(e, a, _, _s) {
        return a ? "kelios sekund\u0117s" : _s ? "keli\u0173 sekund\u017Ei\u0173" : "kelias sekundes";
      }, ss: he, m: Me, mm: he, h: Me, hh: he, d: Me, dd: he, M: Me, MM: he, y: Me, yy: he }, dayOfMonthOrdinalParse: /\d{1,2}-oji/, ordinal: function ordinal(e) {
      return e + "-oji";
    }, week: { dow: 1, doy: 4 } });var ye = { ss: "sekundes_sekund\u0113m_sekunde_sekundes".split("_"), m: "min\u016Btes_min\u016Bt\u0113m_min\u016Bte_min\u016Btes".split("_"), mm: "min\u016Btes_min\u016Bt\u0113m_min\u016Bte_min\u016Btes".split("_"), h: "stundas_stund\u0101m_stunda_stundas".split("_"), hh: "stundas_stund\u0101m_stunda_stundas".split("_"), d: "dienas_dien\u0101m_diena_dienas".split("_"), dd: "dienas_dien\u0101m_diena_dienas".split("_"), M: "m\u0113ne\u0161a_m\u0113ne\u0161iem_m\u0113nesis_m\u0113ne\u0161i".split("_"), MM: "m\u0113ne\u0161a_m\u0113ne\u0161iem_m\u0113nesis_m\u0113ne\u0161i".split("_"), y: "gada_gadiem_gads_gadi".split("_"), yy: "gada_gadiem_gads_gadi".split("_") };function ce(e, a, _) {
    return _ ? a % 10 == 1 && a % 100 != 11 ? e[2] : e[3] : a % 10 == 1 && a % 100 != 11 ? e[0] : e[1];
  }function ke(e, a, _) {
    return e + " " + ce(ye[_], e, a);
  }function pe(e, a, _) {
    return ce(ye[_], e, a);
  }e.defineLocale("lv", { months: "janv\u0101ris_febru\u0101ris_marts_apr\u012Blis_maijs_j\u016Bnijs_j\u016Blijs_augusts_septembris_oktobris_novembris_decembris".split("_"), monthsShort: "jan_feb_mar_apr_mai_j\u016Bn_j\u016Bl_aug_sep_okt_nov_dec".split("_"), weekdays: "sv\u0113tdiena_pirmdiena_otrdiena_tre\u0161diena_ceturtdiena_piektdiena_sestdiena".split("_"), weekdaysShort: "Sv_P_O_T_C_Pk_S".split("_"), weekdaysMin: "Sv_P_O_T_C_Pk_S".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY.", LL: "YYYY. [gada] D. MMMM", LLL: "YYYY. [gada] D. MMMM, HH:mm", LLLL: "YYYY. [gada] D. MMMM, dddd, HH:mm" }, calendar: { sameDay: "[\u0160odien pulksten] LT", nextDay: "[R\u012Bt pulksten] LT", nextWeek: "dddd [pulksten] LT", lastDay: "[Vakar pulksten] LT", lastWeek: "[Pag\u0101ju\u0161\u0101] dddd [pulksten] LT", sameElse: "L" }, relativeTime: { future: "p\u0113c %s", past: "pirms %s", s: function s(e, a) {
        return a ? "da\u017Eas sekundes" : "da\u017E\u0101m sekund\u0113m";
      }, ss: ke, m: pe, mm: ke, h: pe, hh: ke, d: pe, dd: ke, M: pe, MM: ke, y: pe, yy: ke }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } });var De = { words: { ss: ["sekund", "sekunda", "sekundi"], m: ["jedan minut", "jednog minuta"], mm: ["minut", "minuta", "minuta"], h: ["jedan sat", "jednog sata"], hh: ["sat", "sata", "sati"], dd: ["dan", "dana", "dana"], MM: ["mjesec", "mjeseca", "mjeseci"], yy: ["godina", "godine", "godina"] }, correctGrammaticalCase: function correctGrammaticalCase(e, a) {
      return 1 === e ? a[0] : e >= 2 && e <= 4 ? a[1] : a[2];
    }, translate: function translate(e, a, _) {
      var s = De.words[_];return 1 === _.length ? a ? s[0] : s[1] : e + " " + De.correctGrammaticalCase(e, s);
    } };e.defineLocale("me", { months: "januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"), monthsShort: "jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"), monthsParseExact: !0, weekdays: "nedjelja_ponedjeljak_utorak_srijeda_\u010Detvrtak_petak_subota".split("_"), weekdaysShort: "ned._pon._uto._sri._\u010Det._pet._sub.".split("_"), weekdaysMin: "ne_po_ut_sr_\u010De_pe_su".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[danas u] LT", nextDay: "[sjutra u] LT", nextWeek: function nextWeek() {
        switch (this.day()) {case 0:
            return "[u] [nedjelju] [u] LT";case 3:
            return "[u] [srijedu] [u] LT";case 6:
            return "[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:
            return "[u] dddd [u] LT";}
      }, lastDay: "[ju\u010De u] LT", lastWeek: function lastWeek() {
        return ["[pro\u0161le] [nedjelje] [u] LT", "[pro\u0161log] [ponedjeljka] [u] LT", "[pro\u0161log] [utorka] [u] LT", "[pro\u0161le] [srijede] [u] LT", "[pro\u0161log] [\u010Detvrtka] [u] LT", "[pro\u0161log] [petka] [u] LT", "[pro\u0161le] [subote] [u] LT"][this.day()];
      }, sameElse: "L" }, relativeTime: { future: "za %s", past: "prije %s", s: "nekoliko sekundi", ss: De.translate, m: De.translate, mm: De.translate, h: De.translate, hh: De.translate, d: "dan", dd: De.translate, M: "mjesec", MM: De.translate, y: "godinu", yy: De.translate }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }), e.defineLocale("mi", { months: "Kohi-t\u0101te_Hui-tanguru_Pout\u016B-te-rangi_Paenga-wh\u0101wh\u0101_Haratua_Pipiri_H\u014Dngoingoi_Here-turi-k\u014Dk\u0101_Mahuru_Whiringa-\u0101-nuku_Whiringa-\u0101-rangi_Hakihea".split("_"), monthsShort: "Kohi_Hui_Pou_Pae_Hara_Pipi_H\u014Dngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"), monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i, monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i, monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i, monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i, weekdays: "R\u0101tapu_Mane_T\u016Brei_Wenerei_T\u0101ite_Paraire_H\u0101tarei".split("_"), weekdaysShort: "Ta_Ma_T\u016B_We_T\u0101i_Pa_H\u0101".split("_"), weekdaysMin: "Ta_Ma_T\u016B_We_T\u0101i_Pa_H\u0101".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [i] HH:mm", LLLL: "dddd, D MMMM YYYY [i] HH:mm" }, calendar: { sameDay: "[i teie mahana, i] LT", nextDay: "[apopo i] LT", nextWeek: "dddd [i] LT", lastDay: "[inanahi i] LT", lastWeek: "dddd [whakamutunga i] LT", sameElse: "L" }, relativeTime: { future: "i roto i %s", past: "%s i mua", s: "te h\u0113kona ruarua", ss: "%d h\u0113kona", m: "he meneti", mm: "%d meneti", h: "te haora", hh: "%d haora", d: "he ra", dd: "%d ra", M: "he marama", MM: "%d marama", y: "he tau", yy: "%d tau" }, dayOfMonthOrdinalParse: /\d{1,2}\xba/, ordinal: "%d\xba", week: { dow: 1, doy: 4 } }), e.defineLocale("mk", { months: "\u0458\u0430\u043D\u0443\u0430\u0440\u0438_\u0444\u0435\u0432\u0440\u0443\u0430\u0440\u0438_\u043C\u0430\u0440\u0442_\u0430\u043F\u0440\u0438\u043B_\u043C\u0430\u0458_\u0458\u0443\u043D\u0438_\u0458\u0443\u043B\u0438_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043F\u0442\u0435\u043C\u0432\u0440\u0438_\u043E\u043A\u0442\u043E\u043C\u0432\u0440\u0438_\u043D\u043E\u0435\u043C\u0432\u0440\u0438_\u0434\u0435\u043A\u0435\u043C\u0432\u0440\u0438".split("_"), monthsShort: "\u0458\u0430\u043D_\u0444\u0435\u0432_\u043C\u0430\u0440_\u0430\u043F\u0440_\u043C\u0430\u0458_\u0458\u0443\u043D_\u0458\u0443\u043B_\u0430\u0432\u0433_\u0441\u0435\u043F_\u043E\u043A\u0442_\u043D\u043E\u0435_\u0434\u0435\u043A".split("_"), weekdays: "\u043D\u0435\u0434\u0435\u043B\u0430_\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u043D\u0438\u043A_\u0432\u0442\u043E\u0440\u043D\u0438\u043A_\u0441\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0440\u0442\u043E\u043A_\u043F\u0435\u0442\u043E\u043A_\u0441\u0430\u0431\u043E\u0442\u0430".split("_"), weekdaysShort: "\u043D\u0435\u0434_\u043F\u043E\u043D_\u0432\u0442\u043E_\u0441\u0440\u0435_\u0447\u0435\u0442_\u043F\u0435\u0442_\u0441\u0430\u0431".split("_"), weekdaysMin: "\u043De_\u043Fo_\u0432\u0442_\u0441\u0440_\u0447\u0435_\u043F\u0435_\u0441a".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "D.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY H:mm", LLLL: "dddd, D MMMM YYYY H:mm" }, calendar: { sameDay: "[\u0414\u0435\u043D\u0435\u0441 \u0432\u043E] LT", nextDay: "[\u0423\u0442\u0440\u0435 \u0432\u043E] LT", nextWeek: "[\u0412\u043E] dddd [\u0432\u043E] LT", lastDay: "[\u0412\u0447\u0435\u0440\u0430 \u0432\u043E] LT", lastWeek: function lastWeek() {
        switch (this.day()) {case 0:case 3:case 6:
            return "[\u0418\u0437\u043C\u0438\u043D\u0430\u0442\u0430\u0442\u0430] dddd [\u0432\u043E] LT";case 1:case 2:case 4:case 5:
            return "[\u0418\u0437\u043C\u0438\u043D\u0430\u0442\u0438\u043E\u0442] dddd [\u0432\u043E] LT";}
      }, sameElse: "L" }, relativeTime: { future: "\u043F\u043E\u0441\u043B\u0435 %s", past: "\u043F\u0440\u0435\u0434 %s", s: "\u043D\u0435\u043A\u043E\u043B\u043A\u0443 \u0441\u0435\u043A\u0443\u043D\u0434\u0438", ss: "%d \u0441\u0435\u043A\u0443\u043D\u0434\u0438", m: "\u043C\u0438\u043D\u0443\u0442\u0430", mm: "%d \u043C\u0438\u043D\u0443\u0442\u0438", h: "\u0447\u0430\u0441", hh: "%d \u0447\u0430\u0441\u0430", d: "\u0434\u0435\u043D", dd: "%d \u0434\u0435\u043D\u0430", M: "\u043C\u0435\u0441\u0435\u0446", MM: "%d \u043C\u0435\u0441\u0435\u0446\u0438", y: "\u0433\u043E\u0434\u0438\u043D\u0430", yy: "%d \u0433\u043E\u0434\u0438\u043D\u0438" }, dayOfMonthOrdinalParse: /\d{1,2}-(\u0435\u0432|\u0435\u043d|\u0442\u0438|\u0432\u0438|\u0440\u0438|\u043c\u0438)/, ordinal: function ordinal(e) {
      var a = e % 10,
          _ = e % 100;return 0 === e ? e + "-\u0435\u0432" : 0 === _ ? e + "-\u0435\u043D" : _ > 10 && _ < 20 ? e + "-\u0442\u0438" : 1 === a ? e + "-\u0432\u0438" : 2 === a ? e + "-\u0440\u0438" : 7 === a || 8 === a ? e + "-\u043C\u0438" : e + "-\u0442\u0438";
    }, week: { dow: 1, doy: 7 } }), e.defineLocale("ml", { months: "\u0D1C\u0D28\u0D41\u0D35\u0D30\u0D3F_\u0D2B\u0D46\u0D2C\u0D4D\u0D30\u0D41\u0D35\u0D30\u0D3F_\u0D2E\u0D3E\u0D7C\u0D1A\u0D4D\u0D1A\u0D4D_\u0D0F\u0D2A\u0D4D\u0D30\u0D3F\u0D7D_\u0D2E\u0D47\u0D2F\u0D4D_\u0D1C\u0D42\u0D7A_\u0D1C\u0D42\u0D32\u0D48_\u0D13\u0D17\u0D38\u0D4D\u0D31\u0D4D\u0D31\u0D4D_\u0D38\u0D46\u0D2A\u0D4D\u0D31\u0D4D\u0D31\u0D02\u0D2C\u0D7C_\u0D12\u0D15\u0D4D\u0D1F\u0D4B\u0D2C\u0D7C_\u0D28\u0D35\u0D02\u0D2C\u0D7C_\u0D21\u0D3F\u0D38\u0D02\u0D2C\u0D7C".split("_"), monthsShort: "\u0D1C\u0D28\u0D41._\u0D2B\u0D46\u0D2C\u0D4D\u0D30\u0D41._\u0D2E\u0D3E\u0D7C._\u0D0F\u0D2A\u0D4D\u0D30\u0D3F._\u0D2E\u0D47\u0D2F\u0D4D_\u0D1C\u0D42\u0D7A_\u0D1C\u0D42\u0D32\u0D48._\u0D13\u0D17._\u0D38\u0D46\u0D2A\u0D4D\u0D31\u0D4D\u0D31._\u0D12\u0D15\u0D4D\u0D1F\u0D4B._\u0D28\u0D35\u0D02._\u0D21\u0D3F\u0D38\u0D02.".split("_"), monthsParseExact: !0, weekdays: "\u0D1E\u0D3E\u0D2F\u0D31\u0D3E\u0D34\u0D4D\u0D1A_\u0D24\u0D3F\u0D19\u0D4D\u0D15\u0D33\u0D3E\u0D34\u0D4D\u0D1A_\u0D1A\u0D4A\u0D35\u0D4D\u0D35\u0D3E\u0D34\u0D4D\u0D1A_\u0D2C\u0D41\u0D27\u0D28\u0D3E\u0D34\u0D4D\u0D1A_\u0D35\u0D4D\u0D2F\u0D3E\u0D34\u0D3E\u0D34\u0D4D\u0D1A_\u0D35\u0D46\u0D33\u0D4D\u0D33\u0D3F\u0D2F\u0D3E\u0D34\u0D4D\u0D1A_\u0D36\u0D28\u0D3F\u0D2F\u0D3E\u0D34\u0D4D\u0D1A".split("_"), weekdaysShort: "\u0D1E\u0D3E\u0D2F\u0D7C_\u0D24\u0D3F\u0D19\u0D4D\u0D15\u0D7E_\u0D1A\u0D4A\u0D35\u0D4D\u0D35_\u0D2C\u0D41\u0D27\u0D7B_\u0D35\u0D4D\u0D2F\u0D3E\u0D34\u0D02_\u0D35\u0D46\u0D33\u0D4D\u0D33\u0D3F_\u0D36\u0D28\u0D3F".split("_"), weekdaysMin: "\u0D1E\u0D3E_\u0D24\u0D3F_\u0D1A\u0D4A_\u0D2C\u0D41_\u0D35\u0D4D\u0D2F\u0D3E_\u0D35\u0D46_\u0D36".split("_"), longDateFormat: { LT: "A h:mm -\u0D28\u0D41", LTS: "A h:mm:ss -\u0D28\u0D41", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm -\u0D28\u0D41", LLLL: "dddd, D MMMM YYYY, A h:mm -\u0D28\u0D41" }, calendar: { sameDay: "[\u0D07\u0D28\u0D4D\u0D28\u0D4D] LT", nextDay: "[\u0D28\u0D3E\u0D33\u0D46] LT", nextWeek: "dddd, LT", lastDay: "[\u0D07\u0D28\u0D4D\u0D28\u0D32\u0D46] LT", lastWeek: "[\u0D15\u0D34\u0D3F\u0D1E\u0D4D\u0D1E] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s \u0D15\u0D34\u0D3F\u0D1E\u0D4D\u0D1E\u0D4D", past: "%s \u0D2E\u0D41\u0D7B\u0D2A\u0D4D", s: "\u0D05\u0D7D\u0D2A \u0D28\u0D3F\u0D2E\u0D3F\u0D37\u0D19\u0D4D\u0D19\u0D7E", ss: "%d \u0D38\u0D46\u0D15\u0D4D\u0D15\u0D7B\u0D21\u0D4D", m: "\u0D12\u0D30\u0D41 \u0D2E\u0D3F\u0D28\u0D3F\u0D31\u0D4D\u0D31\u0D4D", mm: "%d \u0D2E\u0D3F\u0D28\u0D3F\u0D31\u0D4D\u0D31\u0D4D", h: "\u0D12\u0D30\u0D41 \u0D2E\u0D23\u0D3F\u0D15\u0D4D\u0D15\u0D42\u0D7C", hh: "%d \u0D2E\u0D23\u0D3F\u0D15\u0D4D\u0D15\u0D42\u0D7C", d: "\u0D12\u0D30\u0D41 \u0D26\u0D3F\u0D35\u0D38\u0D02", dd: "%d \u0D26\u0D3F\u0D35\u0D38\u0D02", M: "\u0D12\u0D30\u0D41 \u0D2E\u0D3E\u0D38\u0D02", MM: "%d \u0D2E\u0D3E\u0D38\u0D02", y: "\u0D12\u0D30\u0D41 \u0D35\u0D7C\u0D37\u0D02", yy: "%d \u0D35\u0D7C\u0D37\u0D02" }, meridiemParse: /\u0d30\u0d3e\u0d24\u0d4d\u0d30\u0d3f|\u0d30\u0d3e\u0d35\u0d3f\u0d32\u0d46|\u0d09\u0d1a\u0d4d\u0d1a \u0d15\u0d34\u0d3f\u0d1e\u0d4d\u0d1e\u0d4d|\u0d35\u0d48\u0d15\u0d41\u0d28\u0d4d\u0d28\u0d47\u0d30\u0d02|\u0d30\u0d3e\u0d24\u0d4d\u0d30\u0d3f/i, meridiemHour: function meridiemHour(e, a) {
      return 12 === e && (e = 0), "\u0D30\u0D3E\u0D24\u0D4D\u0D30\u0D3F" === a && e >= 4 || "\u0D09\u0D1A\u0D4D\u0D1A \u0D15\u0D34\u0D3F\u0D1E\u0D4D\u0D1E\u0D4D" === a || "\u0D35\u0D48\u0D15\u0D41\u0D28\u0D4D\u0D28\u0D47\u0D30\u0D02" === a ? e + 12 : e;
    }, meridiem: function meridiem(e, a, _) {
      return e < 4 ? "\u0D30\u0D3E\u0D24\u0D4D\u0D30\u0D3F" : e < 12 ? "\u0D30\u0D3E\u0D35\u0D3F\u0D32\u0D46" : e < 17 ? "\u0D09\u0D1A\u0D4D\u0D1A \u0D15\u0D34\u0D3F\u0D1E\u0D4D\u0D1E\u0D4D" : e < 20 ? "\u0D35\u0D48\u0D15\u0D41\u0D28\u0D4D\u0D28\u0D47\u0D30\u0D02" : "\u0D30\u0D3E\u0D24\u0D4D\u0D30\u0D3F";
    } });var Te = { 1: "\u0967", 2: "\u0968", 3: "\u0969", 4: "\u096A", 5: "\u096B", 6: "\u096C", 7: "\u096D", 8: "\u096E", 9: "\u096F", 0: "\u0966" },
      fe = { "\u0967": "1", "\u0968": "2", "\u0969": "3", "\u096A": "4", "\u096B": "5", "\u096C": "6", "\u096D": "7", "\u096E": "8", "\u096F": "9", "\u0966": "0" };function we(e, a, _, s) {
    var d = "";if (a) switch (_) {case "s":
        d = "\u0915\u093E\u0939\u0940 \u0938\u0947\u0915\u0902\u0926";break;case "ss":
        d = "%d \u0938\u0947\u0915\u0902\u0926";break;case "m":
        d = "\u090F\u0915 \u092E\u093F\u0928\u093F\u091F";break;case "mm":
        d = "%d \u092E\u093F\u0928\u093F\u091F\u0947";break;case "h":
        d = "\u090F\u0915 \u0924\u093E\u0938";break;case "hh":
        d = "%d \u0924\u093E\u0938";break;case "d":
        d = "\u090F\u0915 \u0926\u093F\u0935\u0938";break;case "dd":
        d = "%d \u0926\u093F\u0935\u0938";break;case "M":
        d = "\u090F\u0915 \u092E\u0939\u093F\u0928\u093E";break;case "MM":
        d = "%d \u092E\u0939\u093F\u0928\u0947";break;case "y":
        d = "\u090F\u0915 \u0935\u0930\u094D\u0937";break;case "yy":
        d = "%d \u0935\u0930\u094D\u0937\u0947";break;} else switch (_) {case "s":
        d = "\u0915\u093E\u0939\u0940 \u0938\u0947\u0915\u0902\u0926\u093E\u0902";break;case "ss":
        d = "%d \u0938\u0947\u0915\u0902\u0926\u093E\u0902";break;case "m":
        d = "\u090F\u0915\u093E \u092E\u093F\u0928\u093F\u091F\u093E";break;case "mm":
        d = "%d \u092E\u093F\u0928\u093F\u091F\u093E\u0902";break;case "h":
        d = "\u090F\u0915\u093E \u0924\u093E\u0938\u093E";break;case "hh":
        d = "%d \u0924\u093E\u0938\u093E\u0902";break;case "d":
        d = "\u090F\u0915\u093E \u0926\u093F\u0935\u0938\u093E";break;case "dd":
        d = "%d \u0926\u093F\u0935\u0938\u093E\u0902";break;case "M":
        d = "\u090F\u0915\u093E \u092E\u0939\u093F\u0928\u094D\u092F\u093E";break;case "MM":
        d = "%d \u092E\u0939\u093F\u0928\u094D\u092F\u093E\u0902";break;case "y":
        d = "\u090F\u0915\u093E \u0935\u0930\u094D\u0937\u093E";break;case "yy":
        d = "%d \u0935\u0930\u094D\u0937\u093E\u0902";break;}return d.replace(/%d/i, e);
  }e.defineLocale("mr", { months: "\u091C\u093E\u0928\u0947\u0935\u093E\u0930\u0940_\u092B\u0947\u092C\u094D\u0930\u0941\u0935\u093E\u0930\u0940_\u092E\u093E\u0930\u094D\u091A_\u090F\u092A\u094D\u0930\u093F\u0932_\u092E\u0947_\u091C\u0942\u0928_\u091C\u0941\u0932\u0948_\u0911\u0917\u0938\u094D\u091F_\u0938\u092A\u094D\u091F\u0947\u0902\u092C\u0930_\u0911\u0915\u094D\u091F\u094B\u092C\u0930_\u0928\u094B\u0935\u094D\u0939\u0947\u0902\u092C\u0930_\u0921\u093F\u0938\u0947\u0902\u092C\u0930".split("_"), monthsShort: "\u091C\u093E\u0928\u0947._\u092B\u0947\u092C\u094D\u0930\u0941._\u092E\u093E\u0930\u094D\u091A._\u090F\u092A\u094D\u0930\u093F._\u092E\u0947._\u091C\u0942\u0928._\u091C\u0941\u0932\u0948._\u0911\u0917._\u0938\u092A\u094D\u091F\u0947\u0902._\u0911\u0915\u094D\u091F\u094B._\u0928\u094B\u0935\u094D\u0939\u0947\u0902._\u0921\u093F\u0938\u0947\u0902.".split("_"), monthsParseExact: !0, weekdays: "\u0930\u0935\u093F\u0935\u093E\u0930_\u0938\u094B\u092E\u0935\u093E\u0930_\u092E\u0902\u0917\u0933\u0935\u093E\u0930_\u092C\u0941\u0927\u0935\u093E\u0930_\u0917\u0941\u0930\u0942\u0935\u093E\u0930_\u0936\u0941\u0915\u094D\u0930\u0935\u093E\u0930_\u0936\u0928\u093F\u0935\u093E\u0930".split("_"), weekdaysShort: "\u0930\u0935\u093F_\u0938\u094B\u092E_\u092E\u0902\u0917\u0933_\u092C\u0941\u0927_\u0917\u0941\u0930\u0942_\u0936\u0941\u0915\u094D\u0930_\u0936\u0928\u093F".split("_"), weekdaysMin: "\u0930_\u0938\u094B_\u092E\u0902_\u092C\u0941_\u0917\u0941_\u0936\u0941_\u0936".split("_"), longDateFormat: { LT: "A h:mm \u0935\u093E\u091C\u0924\u093E", LTS: "A h:mm:ss \u0935\u093E\u091C\u0924\u093E", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm \u0935\u093E\u091C\u0924\u093E", LLLL: "dddd, D MMMM YYYY, A h:mm \u0935\u093E\u091C\u0924\u093E" }, calendar: { sameDay: "[\u0906\u091C] LT", nextDay: "[\u0909\u0926\u094D\u092F\u093E] LT", nextWeek: "dddd, LT", lastDay: "[\u0915\u093E\u0932] LT", lastWeek: "[\u092E\u093E\u0917\u0940\u0932] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s\u092E\u0927\u094D\u092F\u0947", past: "%s\u092A\u0942\u0930\u094D\u0935\u0940", s: we, ss: we, m: we, mm: we, h: we, hh: we, d: we, dd: we, M: we, MM: we, y: we, yy: we }, preparse: function preparse(e) {
      return e.replace(/[\u0967\u0968\u0969\u096a\u096b\u096c\u096d\u096e\u096f\u0966]/g, function (e) {
        return fe[e];
      });
    }, postformat: function postformat(e) {
      return e.replace(/\d/g, function (e) {
        return Te[e];
      });
    }, meridiemParse: /\u0930\u093e\u0924\u094d\u0930\u0940|\u0938\u0915\u093e\u0933\u0940|\u0926\u0941\u092a\u093e\u0930\u0940|\u0938\u093e\u092f\u0902\u0915\u093e\u0933\u0940/, meridiemHour: function meridiemHour(e, a) {
      return 12 === e && (e = 0), "\u0930\u093E\u0924\u094D\u0930\u0940" === a ? e < 4 ? e : e + 12 : "\u0938\u0915\u093E\u0933\u0940" === a ? e : "\u0926\u0941\u092A\u093E\u0930\u0940" === a ? e >= 10 ? e : e + 12 : "\u0938\u093E\u092F\u0902\u0915\u093E\u0933\u0940" === a ? e + 12 : void 0;
    }, meridiem: function meridiem(e, a, _) {
      return e < 4 ? "\u0930\u093E\u0924\u094D\u0930\u0940" : e < 10 ? "\u0938\u0915\u093E\u0933\u0940" : e < 17 ? "\u0926\u0941\u092A\u093E\u0930\u0940" : e < 20 ? "\u0938\u093E\u092F\u0902\u0915\u093E\u0933\u0940" : "\u0930\u093E\u0924\u094D\u0930\u0940";
    }, week: { dow: 0, doy: 6 } }), e.defineLocale("ms-my", { months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"), monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"), weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"), weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"), weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [pukul] HH.mm", LLLL: "dddd, D MMMM YYYY [pukul] HH.mm" }, meridiemParse: /pagi|tengahari|petang|malam/, meridiemHour: function meridiemHour(e, a) {
      return 12 === e && (e = 0), "pagi" === a ? e : "tengahari" === a ? e >= 11 ? e : e + 12 : "petang" === a || "malam" === a ? e + 12 : void 0;
    }, meridiem: function meridiem(e, a, _) {
      return e < 11 ? "pagi" : e < 15 ? "tengahari" : e < 19 ? "petang" : "malam";
    }, calendar: { sameDay: "[Hari ini pukul] LT", nextDay: "[Esok pukul] LT", nextWeek: "dddd [pukul] LT", lastDay: "[Kelmarin pukul] LT", lastWeek: "dddd [lepas pukul] LT", sameElse: "L" }, relativeTime: { future: "dalam %s", past: "%s yang lepas", s: "beberapa saat", ss: "%d saat", m: "seminit", mm: "%d minit", h: "sejam", hh: "%d jam", d: "sehari", dd: "%d hari", M: "sebulan", MM: "%d bulan", y: "setahun", yy: "%d tahun" }, week: { dow: 1, doy: 7 } }), e.defineLocale("ms", { months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"), monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"), weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"), weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"), weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [pukul] HH.mm", LLLL: "dddd, D MMMM YYYY [pukul] HH.mm" }, meridiemParse: /pagi|tengahari|petang|malam/, meridiemHour: function meridiemHour(e, a) {
      return 12 === e && (e = 0), "pagi" === a ? e : "tengahari" === a ? e >= 11 ? e : e + 12 : "petang" === a || "malam" === a ? e + 12 : void 0;
    }, meridiem: function meridiem(e, a, _) {
      return e < 11 ? "pagi" : e < 15 ? "tengahari" : e < 19 ? "petang" : "malam";
    }, calendar: { sameDay: "[Hari ini pukul] LT", nextDay: "[Esok pukul] LT", nextWeek: "dddd [pukul] LT", lastDay: "[Kelmarin pukul] LT", lastWeek: "dddd [lepas pukul] LT", sameElse: "L" }, relativeTime: { future: "dalam %s", past: "%s yang lepas", s: "beberapa saat", ss: "%d saat", m: "seminit", mm: "%d minit", h: "sejam", hh: "%d jam", d: "sehari", dd: "%d hari", M: "sebulan", MM: "%d bulan", y: "setahun", yy: "%d tahun" }, week: { dow: 1, doy: 7 } }), e.defineLocale("mt", { months: "Jannar_Frar_Marzu_April_Mejju_\u0120unju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Di\u010Bembru".split("_"), monthsShort: "Jan_Fra_Mar_Apr_Mej_\u0120un_Lul_Aww_Set_Ott_Nov_Di\u010B".split("_"), weekdays: "Il-\u0126add_It-Tnejn_It-Tlieta_L-Erbg\u0127a_Il-\u0126amis_Il-\u0120img\u0127a_Is-Sibt".split("_"), weekdaysShort: "\u0126ad_Tne_Tli_Erb_\u0126am_\u0120im_Sib".split("_"), weekdaysMin: "\u0126a_Tn_Tl_Er_\u0126a_\u0120i_Si".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Illum fil-]LT", nextDay: "[G\u0127ada fil-]LT", nextWeek: "dddd [fil-]LT", lastDay: "[Il-biera\u0127 fil-]LT", lastWeek: "dddd [li g\u0127adda] [fil-]LT", sameElse: "L" }, relativeTime: { future: "f\u2019 %s", past: "%s ilu", s: "ftit sekondi", ss: "%d sekondi", m: "minuta", mm: "%d minuti", h: "sieg\u0127a", hh: "%d sieg\u0127at", d: "\u0121urnata", dd: "%d \u0121ranet", M: "xahar", MM: "%d xhur", y: "sena", yy: "%d sni" }, dayOfMonthOrdinalParse: /\d{1,2}\xba/, ordinal: "%d\xba", week: { dow: 1, doy: 4 } });var ge = { 1: "\u1041", 2: "\u1042", 3: "\u1043", 4: "\u1044", 5: "\u1045", 6: "\u1046", 7: "\u1047", 8: "\u1048", 9: "\u1049", 0: "\u1040" },
      He = { "\u1041": "1", "\u1042": "2", "\u1043": "3", "\u1044": "4", "\u1045": "5", "\u1046": "6", "\u1047": "7", "\u1048": "8", "\u1049": "9", "\u1040": "0" };e.defineLocale("my", { months: "\u1007\u1014\u103A\u1014\u101D\u102B\u101B\u102E_\u1016\u1031\u1016\u1031\u102C\u103A\u101D\u102B\u101B\u102E_\u1019\u1010\u103A_\u1027\u1015\u103C\u102E_\u1019\u1031_\u1007\u103D\u1014\u103A_\u1007\u1030\u101C\u102D\u102F\u1004\u103A_\u101E\u103C\u1002\u102F\u1010\u103A_\u1005\u1000\u103A\u1010\u1004\u103A\u1018\u102C_\u1021\u1031\u102C\u1000\u103A\u1010\u102D\u102F\u1018\u102C_\u1014\u102D\u102F\u101D\u1004\u103A\u1018\u102C_\u1012\u102E\u1007\u1004\u103A\u1018\u102C".split("_"), monthsShort: "\u1007\u1014\u103A_\u1016\u1031_\u1019\u1010\u103A_\u1015\u103C\u102E_\u1019\u1031_\u1007\u103D\u1014\u103A_\u101C\u102D\u102F\u1004\u103A_\u101E\u103C_\u1005\u1000\u103A_\u1021\u1031\u102C\u1000\u103A_\u1014\u102D\u102F_\u1012\u102E".split("_"), weekdays: "\u1010\u1014\u1004\u103A\u1039\u1002\u1014\u103D\u1031_\u1010\u1014\u1004\u103A\u1039\u101C\u102C_\u1021\u1004\u103A\u1039\u1002\u102B_\u1017\u102F\u1012\u1039\u1013\u101F\u1030\u1038_\u1000\u103C\u102C\u101E\u1015\u1010\u1031\u1038_\u101E\u1031\u102C\u1000\u103C\u102C_\u1005\u1014\u1031".split("_"), weekdaysShort: "\u1014\u103D\u1031_\u101C\u102C_\u1002\u102B_\u101F\u1030\u1038_\u1000\u103C\u102C_\u101E\u1031\u102C_\u1014\u1031".split("_"), weekdaysMin: "\u1014\u103D\u1031_\u101C\u102C_\u1002\u102B_\u101F\u1030\u1038_\u1000\u103C\u102C_\u101E\u1031\u102C_\u1014\u1031".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[\u101A\u1014\u1031.] LT [\u1019\u103E\u102C]", nextDay: "[\u1019\u1014\u1000\u103A\u1016\u103C\u1014\u103A] LT [\u1019\u103E\u102C]", nextWeek: "dddd LT [\u1019\u103E\u102C]", lastDay: "[\u1019\u1014\u1031.\u1000] LT [\u1019\u103E\u102C]", lastWeek: "[\u1015\u103C\u102E\u1038\u1001\u1032\u1037\u101E\u1031\u102C] dddd LT [\u1019\u103E\u102C]", sameElse: "L" }, relativeTime: { future: "\u101C\u102C\u1019\u100A\u103A\u1037 %s \u1019\u103E\u102C", past: "\u101C\u103D\u1014\u103A\u1001\u1032\u1037\u101E\u1031\u102C %s \u1000", s: "\u1005\u1000\u1039\u1000\u1014\u103A.\u1021\u1014\u100A\u103A\u1038\u1004\u101A\u103A", ss: "%d \u1005\u1000\u1039\u1000\u1014\u1037\u103A", m: "\u1010\u1005\u103A\u1019\u102D\u1014\u1005\u103A", mm: "%d \u1019\u102D\u1014\u1005\u103A", h: "\u1010\u1005\u103A\u1014\u102C\u101B\u102E", hh: "%d \u1014\u102C\u101B\u102E", d: "\u1010\u1005\u103A\u101B\u1000\u103A", dd: "%d \u101B\u1000\u103A", M: "\u1010\u1005\u103A\u101C", MM: "%d \u101C", y: "\u1010\u1005\u103A\u1014\u103E\u1005\u103A", yy: "%d \u1014\u103E\u1005\u103A" }, preparse: function preparse(e) {
      return e.replace(/[\u1041\u1042\u1043\u1044\u1045\u1046\u1047\u1048\u1049\u1040]/g, function (e) {
        return He[e];
      });
    }, postformat: function postformat(e) {
      return e.replace(/\d/g, function (e) {
        return ge[e];
      });
    }, week: { dow: 1, doy: 4 } }), e.defineLocale("nb", { months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"), monthsShort: "jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"), monthsParseExact: !0, weekdays: "s\xf8ndag_mandag_tirsdag_onsdag_torsdag_fredag_l\xf8rdag".split("_"), weekdaysShort: "s\xf8._ma._ti._on._to._fr._l\xf8.".split("_"), weekdaysMin: "s\xf8_ma_ti_on_to_fr_l\xf8".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY [kl.] HH:mm", LLLL: "dddd D. MMMM YYYY [kl.] HH:mm" }, calendar: { sameDay: "[i dag kl.] LT", nextDay: "[i morgen kl.] LT", nextWeek: "dddd [kl.] LT", lastDay: "[i g\xe5r kl.] LT", lastWeek: "[forrige] dddd [kl.] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "%s siden", s: "noen sekunder", ss: "%d sekunder", m: "ett minutt", mm: "%d minutter", h: "en time", hh: "%d timer", d: "en dag", dd: "%d dager", M: "en m\xe5ned", MM: "%d m\xe5neder", y: "ett \xe5r", yy: "%d \xe5r" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } });var be = { 1: "\u0967", 2: "\u0968", 3: "\u0969", 4: "\u096A", 5: "\u096B", 6: "\u096C", 7: "\u096D", 8: "\u096E", 9: "\u096F", 0: "\u0966" },
      Se = { "\u0967": "1", "\u0968": "2", "\u0969": "3", "\u096A": "4", "\u096B": "5", "\u096C": "6", "\u096D": "7", "\u096E": "8", "\u096F": "9", "\u0966": "0" };e.defineLocale("ne", { months: "\u091C\u0928\u0935\u0930\u0940_\u092B\u0947\u092C\u094D\u0930\u0941\u0935\u0930\u0940_\u092E\u093E\u0930\u094D\u091A_\u0905\u092A\u094D\u0930\u093F\u0932_\u092E\u0908_\u091C\u0941\u0928_\u091C\u0941\u0932\u093E\u0908_\u0905\u0917\u0937\u094D\u091F_\u0938\u0947\u092A\u094D\u091F\u0947\u092E\u094D\u092C\u0930_\u0905\u0915\u094D\u091F\u094B\u092C\u0930_\u0928\u094B\u092D\u0947\u092E\u094D\u092C\u0930_\u0921\u093F\u0938\u0947\u092E\u094D\u092C\u0930".split("_"), monthsShort: "\u091C\u0928._\u092B\u0947\u092C\u094D\u0930\u0941._\u092E\u093E\u0930\u094D\u091A_\u0905\u092A\u094D\u0930\u093F._\u092E\u0908_\u091C\u0941\u0928_\u091C\u0941\u0932\u093E\u0908._\u0905\u0917._\u0938\u0947\u092A\u094D\u091F._\u0905\u0915\u094D\u091F\u094B._\u0928\u094B\u092D\u0947._\u0921\u093F\u0938\u0947.".split("_"), monthsParseExact: !0, weekdays: "\u0906\u0907\u0924\u092C\u093E\u0930_\u0938\u094B\u092E\u092C\u093E\u0930_\u092E\u0919\u094D\u0917\u0932\u092C\u093E\u0930_\u092C\u0941\u0927\u092C\u093E\u0930_\u092C\u093F\u0939\u093F\u092C\u093E\u0930_\u0936\u0941\u0915\u094D\u0930\u092C\u093E\u0930_\u0936\u0928\u093F\u092C\u093E\u0930".split("_"), weekdaysShort: "\u0906\u0907\u0924._\u0938\u094B\u092E._\u092E\u0919\u094D\u0917\u0932._\u092C\u0941\u0927._\u092C\u093F\u0939\u093F._\u0936\u0941\u0915\u094D\u0930._\u0936\u0928\u093F.".split("_"), weekdaysMin: "\u0906._\u0938\u094B._\u092E\u0902._\u092C\u0941._\u092C\u093F._\u0936\u0941._\u0936.".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "A\u0915\u094B h:mm \u092C\u091C\u0947", LTS: "A\u0915\u094B h:mm:ss \u092C\u091C\u0947", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A\u0915\u094B h:mm \u092C\u091C\u0947", LLLL: "dddd, D MMMM YYYY, A\u0915\u094B h:mm \u092C\u091C\u0947" }, preparse: function preparse(e) {
      return e.replace(/[\u0967\u0968\u0969\u096a\u096b\u096c\u096d\u096e\u096f\u0966]/g, function (e) {
        return Se[e];
      });
    }, postformat: function postformat(e) {
      return e.replace(/\d/g, function (e) {
        return be[e];
      });
    }, meridiemParse: /\u0930\u093e\u0924\u093f|\u092c\u093f\u0939\u093e\u0928|\u0926\u093f\u0909\u0901\u0938\u094b|\u0938\u093e\u0901\u091d/, meridiemHour: function meridiemHour(e, a) {
      return 12 === e && (e = 0), "\u0930\u093E\u0924\u093F" === a ? e < 4 ? e : e + 12 : "\u092C\u093F\u0939\u093E\u0928" === a ? e : "\u0926\u093F\u0909\u0901\u0938\u094B" === a ? e >= 10 ? e : e + 12 : "\u0938\u093E\u0901\u091D" === a ? e + 12 : void 0;
    }, meridiem: function meridiem(e, a, _) {
      return e < 3 ? "\u0930\u093E\u0924\u093F" : e < 12 ? "\u092C\u093F\u0939\u093E\u0928" : e < 16 ? "\u0926\u093F\u0909\u0901\u0938\u094B" : e < 20 ? "\u0938\u093E\u0901\u091D" : "\u0930\u093E\u0924\u093F";
    }, calendar: { sameDay: "[\u0906\u091C] LT", nextDay: "[\u092D\u094B\u0932\u093F] LT", nextWeek: "[\u0906\u0909\u0901\u0926\u094B] dddd[,] LT", lastDay: "[\u0939\u093F\u091C\u094B] LT", lastWeek: "[\u0917\u090F\u0915\u094B] dddd[,] LT", sameElse: "L" }, relativeTime: { future: "%s\u092E\u093E", past: "%s \u0905\u0917\u093E\u0921\u093F", s: "\u0915\u0947\u0939\u0940 \u0915\u094D\u0937\u0923", ss: "%d \u0938\u0947\u0915\u0947\u0923\u094D\u0921", m: "\u090F\u0915 \u092E\u093F\u0928\u0947\u091F", mm: "%d \u092E\u093F\u0928\u0947\u091F", h: "\u090F\u0915 \u0918\u0923\u094D\u091F\u093E", hh: "%d \u0918\u0923\u094D\u091F\u093E", d: "\u090F\u0915 \u0926\u093F\u0928", dd: "%d \u0926\u093F\u0928", M: "\u090F\u0915 \u092E\u0939\u093F\u0928\u093E", MM: "%d \u092E\u0939\u093F\u0928\u093E", y: "\u090F\u0915 \u092C\u0930\u094D\u0937", yy: "%d \u092C\u0930\u094D\u0937" }, week: { dow: 0, doy: 6 } });var ve = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),
      je = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),
      xe = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i],
      Pe = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be", { months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"), monthsShort: function monthsShort(e, a) {
      return e ? /-MMM-/.test(a) ? je[e.month()] : ve[e.month()] : ve;
    }, monthsRegex: Pe, monthsShortRegex: Pe, monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i, monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i, monthsParse: xe, longMonthsParse: xe, shortMonthsParse: xe, weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"), weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"), weekdaysMin: "zo_ma_di_wo_do_vr_za".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[vandaag om] LT", nextDay: "[morgen om] LT", nextWeek: "dddd [om] LT", lastDay: "[gisteren om] LT", lastWeek: "[afgelopen] dddd [om] LT", sameElse: "L" }, relativeTime: { future: "over %s", past: "%s geleden", s: "een paar seconden", ss: "%d seconden", m: "\xe9\xe9n minuut", mm: "%d minuten", h: "\xe9\xe9n uur", hh: "%d uur", d: "\xe9\xe9n dag", dd: "%d dagen", M: "\xe9\xe9n maand", MM: "%d maanden", y: "\xe9\xe9n jaar", yy: "%d jaar" }, dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/, ordinal: function ordinal(e) {
      return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de");
    }, week: { dow: 1, doy: 4 } });var We = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),
      Ae = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),
      Ee = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i],
      Oe = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl", { months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"), monthsShort: function monthsShort(e, a) {
      return e ? /-MMM-/.test(a) ? Ae[e.month()] : We[e.month()] : We;
    }, monthsRegex: Oe, monthsShortRegex: Oe, monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i, monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i, monthsParse: Ee, longMonthsParse: Ee, shortMonthsParse: Ee, weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"), weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"), weekdaysMin: "zo_ma_di_wo_do_vr_za".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD-MM-YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[vandaag om] LT", nextDay: "[morgen om] LT", nextWeek: "dddd [om] LT", lastDay: "[gisteren om] LT", lastWeek: "[afgelopen] dddd [om] LT", sameElse: "L" }, relativeTime: { future: "over %s", past: "%s geleden", s: "een paar seconden", ss: "%d seconden", m: "\xe9\xe9n minuut", mm: "%d minuten", h: "\xe9\xe9n uur", hh: "%d uur", d: "\xe9\xe9n dag", dd: "%d dagen", M: "\xe9\xe9n maand", MM: "%d maanden", y: "\xe9\xe9n jaar", yy: "%d jaar" }, dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/, ordinal: function ordinal(e) {
      return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de");
    }, week: { dow: 1, doy: 4 } }), e.defineLocale("nn", { months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"), monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"), weekdays: "sundag_m\xe5ndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"), weekdaysShort: "sun_m\xe5n_tys_ons_tor_fre_lau".split("_"), weekdaysMin: "su_m\xe5_ty_on_to_fr_l\xf8".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY [kl.] H:mm", LLLL: "dddd D. MMMM YYYY [kl.] HH:mm" }, calendar: { sameDay: "[I dag klokka] LT", nextDay: "[I morgon klokka] LT", nextWeek: "dddd [klokka] LT", lastDay: "[I g\xe5r klokka] LT", lastWeek: "[F\xf8reg\xe5ande] dddd [klokka] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "%s sidan", s: "nokre sekund", ss: "%d sekund", m: "eit minutt", mm: "%d minutt", h: "ein time", hh: "%d timar", d: "ein dag", dd: "%d dagar", M: "ein m\xe5nad", MM: "%d m\xe5nader", y: "eit \xe5r", yy: "%d \xe5r" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } });var Fe = { 1: "\u0A67", 2: "\u0A68", 3: "\u0A69", 4: "\u0A6A", 5: "\u0A6B", 6: "\u0A6C", 7: "\u0A6D", 8: "\u0A6E", 9: "\u0A6F", 0: "\u0A66" },
      ze = { "\u0A67": "1", "\u0A68": "2", "\u0A69": "3", "\u0A6A": "4", "\u0A6B": "5", "\u0A6C": "6", "\u0A6D": "7", "\u0A6E": "8", "\u0A6F": "9", "\u0A66": "0" };e.defineLocale("pa-in", { months: "\u0A1C\u0A28\u0A35\u0A30\u0A40_\u0A2B\u0A3C\u0A30\u0A35\u0A30\u0A40_\u0A2E\u0A3E\u0A30\u0A1A_\u0A05\u0A2A\u0A4D\u0A30\u0A48\u0A32_\u0A2E\u0A08_\u0A1C\u0A42\u0A28_\u0A1C\u0A41\u0A32\u0A3E\u0A08_\u0A05\u0A17\u0A38\u0A24_\u0A38\u0A24\u0A70\u0A2C\u0A30_\u0A05\u0A15\u0A24\u0A42\u0A2C\u0A30_\u0A28\u0A35\u0A70\u0A2C\u0A30_\u0A26\u0A38\u0A70\u0A2C\u0A30".split("_"), monthsShort: "\u0A1C\u0A28\u0A35\u0A30\u0A40_\u0A2B\u0A3C\u0A30\u0A35\u0A30\u0A40_\u0A2E\u0A3E\u0A30\u0A1A_\u0A05\u0A2A\u0A4D\u0A30\u0A48\u0A32_\u0A2E\u0A08_\u0A1C\u0A42\u0A28_\u0A1C\u0A41\u0A32\u0A3E\u0A08_\u0A05\u0A17\u0A38\u0A24_\u0A38\u0A24\u0A70\u0A2C\u0A30_\u0A05\u0A15\u0A24\u0A42\u0A2C\u0A30_\u0A28\u0A35\u0A70\u0A2C\u0A30_\u0A26\u0A38\u0A70\u0A2C\u0A30".split("_"), weekdays: "\u0A10\u0A24\u0A35\u0A3E\u0A30_\u0A38\u0A4B\u0A2E\u0A35\u0A3E\u0A30_\u0A2E\u0A70\u0A17\u0A32\u0A35\u0A3E\u0A30_\u0A2C\u0A41\u0A27\u0A35\u0A3E\u0A30_\u0A35\u0A40\u0A30\u0A35\u0A3E\u0A30_\u0A38\u0A3C\u0A41\u0A71\u0A15\u0A30\u0A35\u0A3E\u0A30_\u0A38\u0A3C\u0A28\u0A40\u0A1A\u0A30\u0A35\u0A3E\u0A30".split("_"), weekdaysShort: "\u0A10\u0A24_\u0A38\u0A4B\u0A2E_\u0A2E\u0A70\u0A17\u0A32_\u0A2C\u0A41\u0A27_\u0A35\u0A40\u0A30_\u0A38\u0A3C\u0A41\u0A15\u0A30_\u0A38\u0A3C\u0A28\u0A40".split("_"), weekdaysMin: "\u0A10\u0A24_\u0A38\u0A4B\u0A2E_\u0A2E\u0A70\u0A17\u0A32_\u0A2C\u0A41\u0A27_\u0A35\u0A40\u0A30_\u0A38\u0A3C\u0A41\u0A15\u0A30_\u0A38\u0A3C\u0A28\u0A40".split("_"), longDateFormat: { LT: "A h:mm \u0A35\u0A1C\u0A47", LTS: "A h:mm:ss \u0A35\u0A1C\u0A47", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm \u0A35\u0A1C\u0A47", LLLL: "dddd, D MMMM YYYY, A h:mm \u0A35\u0A1C\u0A47" }, calendar: { sameDay: "[\u0A05\u0A1C] LT", nextDay: "[\u0A15\u0A32] LT", nextWeek: "dddd, LT", lastDay: "[\u0A15\u0A32] LT", lastWeek: "[\u0A2A\u0A3F\u0A1B\u0A32\u0A47] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s \u0A35\u0A3F\u0A71\u0A1A", past: "%s \u0A2A\u0A3F\u0A1B\u0A32\u0A47", s: "\u0A15\u0A41\u0A1D \u0A38\u0A15\u0A3F\u0A70\u0A1F", ss: "%d \u0A38\u0A15\u0A3F\u0A70\u0A1F", m: "\u0A07\u0A15 \u0A2E\u0A3F\u0A70\u0A1F", mm: "%d \u0A2E\u0A3F\u0A70\u0A1F", h: "\u0A07\u0A71\u0A15 \u0A18\u0A70\u0A1F\u0A3E", hh: "%d \u0A18\u0A70\u0A1F\u0A47", d: "\u0A07\u0A71\u0A15 \u0A26\u0A3F\u0A28", dd: "%d \u0A26\u0A3F\u0A28", M: "\u0A07\u0A71\u0A15 \u0A2E\u0A39\u0A40\u0A28\u0A3E", MM: "%d \u0A2E\u0A39\u0A40\u0A28\u0A47", y: "\u0A07\u0A71\u0A15 \u0A38\u0A3E\u0A32", yy: "%d \u0A38\u0A3E\u0A32" }, preparse: function preparse(e) {
      return e.replace(/[\u0a67\u0a68\u0a69\u0a6a\u0a6b\u0a6c\u0a6d\u0a6e\u0a6f\u0a66]/g, function (e) {
        return ze[e];
      });
    }, postformat: function postformat(e) {
      return e.replace(/\d/g, function (e) {
        return Fe[e];
      });
    }, meridiemParse: /\u0a30\u0a3e\u0a24|\u0a38\u0a35\u0a47\u0a30|\u0a26\u0a41\u0a2a\u0a39\u0a3f\u0a30|\u0a38\u0a3c\u0a3e\u0a2e/, meridiemHour: function meridiemHour(e, a) {
      return 12 === e && (e = 0), "\u0A30\u0A3E\u0A24" === a ? e < 4 ? e : e + 12 : "\u0A38\u0A35\u0A47\u0A30" === a ? e : "\u0A26\u0A41\u0A2A\u0A39\u0A3F\u0A30" === a ? e >= 10 ? e : e + 12 : "\u0A38\u0A3C\u0A3E\u0A2E" === a ? e + 12 : void 0;
    }, meridiem: function meridiem(e, a, _) {
      return e < 4 ? "\u0A30\u0A3E\u0A24" : e < 10 ? "\u0A38\u0A35\u0A47\u0A30" : e < 17 ? "\u0A26\u0A41\u0A2A\u0A39\u0A3F\u0A30" : e < 20 ? "\u0A38\u0A3C\u0A3E\u0A2E" : "\u0A30\u0A3E\u0A24";
    }, week: { dow: 0, doy: 6 } });var Je = "stycze\u0144_luty_marzec_kwiecie\u0144_maj_czerwiec_lipiec_sierpie\u0144_wrzesie\u0144_pa\u017Adziernik_listopad_grudzie\u0144".split("_"),
      Ie = "stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_wrze\u015Bnia_pa\u017Adziernika_listopada_grudnia".split("_");function Ne(e) {
    return e % 10 < 5 && e % 10 > 1 && ~~(e / 10) % 10 != 1;
  }function Re(e, a, _) {
    var s = e + " ";switch (_) {case "ss":
        return s + (Ne(e) ? "sekundy" : "sekund");case "m":
        return a ? "minuta" : "minut\u0119";case "mm":
        return s + (Ne(e) ? "minuty" : "minut");case "h":
        return a ? "godzina" : "godzin\u0119";case "hh":
        return s + (Ne(e) ? "godziny" : "godzin");case "MM":
        return s + (Ne(e) ? "miesi\u0105ce" : "miesi\u0119cy");case "yy":
        return s + (Ne(e) ? "lata" : "lat");}
  }function Ke(e, a, _) {
    var s = " ";return (e % 100 >= 20 || e >= 100 && e % 100 == 0) && (s = " de "), e + s + { ss: "secunde", mm: "minute", hh: "ore", dd: "zile", MM: "luni", yy: "ani" }[_];
  }function Ce(e, a, _) {
    var s, d;return "m" === _ ? a ? "\u043C\u0438\u043D\u0443\u0442\u0430" : "\u043C\u0438\u043D\u0443\u0442\u0443" : e + " " + (s = +e, d = { ss: a ? "\u0441\u0435\u043A\u0443\u043D\u0434\u0430_\u0441\u0435\u043A\u0443\u043D\u0434\u044B_\u0441\u0435\u043A\u0443\u043D\u0434" : "\u0441\u0435\u043A\u0443\u043D\u0434\u0443_\u0441\u0435\u043A\u0443\u043D\u0434\u044B_\u0441\u0435\u043A\u0443\u043D\u0434", mm: a ? "\u043C\u0438\u043D\u0443\u0442\u0430_\u043C\u0438\u043D\u0443\u0442\u044B_\u043C\u0438\u043D\u0443\u0442" : "\u043C\u0438\u043D\u0443\u0442\u0443_\u043C\u0438\u043D\u0443\u0442\u044B_\u043C\u0438\u043D\u0443\u0442", hh: "\u0447\u0430\u0441_\u0447\u0430\u0441\u0430_\u0447\u0430\u0441\u043E\u0432", dd: "\u0434\u0435\u043D\u044C_\u0434\u043D\u044F_\u0434\u043D\u0435\u0439", MM: "\u043C\u0435\u0441\u044F\u0446_\u043C\u0435\u0441\u044F\u0446\u0430_\u043C\u0435\u0441\u044F\u0446\u0435\u0432", yy: "\u0433\u043E\u0434_\u0433\u043E\u0434\u0430_\u043B\u0435\u0442" }[_].split("_"), s % 10 == 1 && s % 100 != 11 ? d[0] : s % 10 >= 2 && s % 10 <= 4 && (s % 100 < 10 || s % 100 >= 20) ? d[1] : d[2]);
  }e.defineLocale("pl", { months: function months(e, a) {
      return e ? "" === a ? "(" + Ie[e.month()] + "|" + Je[e.month()] + ")" : /D MMMM/.test(a) ? Ie[e.month()] : Je[e.month()] : Je;
    }, monthsShort: "sty_lut_mar_kwi_maj_cze_lip_sie_wrz_pa\u017A_lis_gru".split("_"), weekdays: "niedziela_poniedzia\u0142ek_wtorek_\u015Broda_czwartek_pi\u0105tek_sobota".split("_"), weekdaysShort: "ndz_pon_wt_\u015Br_czw_pt_sob".split("_"), weekdaysMin: "Nd_Pn_Wt_\u015Ar_Cz_Pt_So".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Dzi\u015B o] LT", nextDay: "[Jutro o] LT", nextWeek: function nextWeek() {
        switch (this.day()) {case 0:
            return "[W niedziel\u0119 o] LT";case 2:
            return "[We wtorek o] LT";case 3:
            return "[W \u015Brod\u0119 o] LT";case 6:
            return "[W sobot\u0119 o] LT";default:
            return "[W] dddd [o] LT";}
      }, lastDay: "[Wczoraj o] LT", lastWeek: function lastWeek() {
        switch (this.day()) {case 0:
            return "[W zesz\u0142\u0105 niedziel\u0119 o] LT";case 3:
            return "[W zesz\u0142\u0105 \u015Brod\u0119 o] LT";case 6:
            return "[W zesz\u0142\u0105 sobot\u0119 o] LT";default:
            return "[W zesz\u0142y] dddd [o] LT";}
      }, sameElse: "L" }, relativeTime: { future: "za %s", past: "%s temu", s: "kilka sekund", ss: Re, m: Re, mm: Re, h: Re, hh: Re, d: "1 dzie\u0144", dd: "%d dni", M: "miesi\u0105c", MM: Re, y: "rok", yy: Re }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), e.defineLocale("pt-br", { months: "janeiro_fevereiro_mar\xe7o_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"), monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"), weekdays: "Domingo_Segunda-feira_Ter\xe7a-feira_Quarta-feira_Quinta-feira_Sexta-feira_S\xe1bado".split("_"), weekdaysShort: "Dom_Seg_Ter_Qua_Qui_Sex_S\xe1b".split("_"), weekdaysMin: "Do_2\xaa_3\xaa_4\xaa_5\xaa_6\xaa_S\xe1".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY [\xe0s] HH:mm", LLLL: "dddd, D [de] MMMM [de] YYYY [\xe0s] HH:mm" }, calendar: { sameDay: "[Hoje \xe0s] LT", nextDay: "[Amanh\xe3 \xe0s] LT", nextWeek: "dddd [\xe0s] LT", lastDay: "[Ontem \xe0s] LT", lastWeek: function lastWeek() {
        return 0 === this.day() || 6 === this.day() ? "[\xdaltimo] dddd [\xe0s] LT" : "[\xdaltima] dddd [\xe0s] LT";
      }, sameElse: "L" }, relativeTime: { future: "em %s", past: "h\xe1 %s", s: "poucos segundos", ss: "%d segundos", m: "um minuto", mm: "%d minutos", h: "uma hora", hh: "%d horas", d: "um dia", dd: "%d dias", M: "um m\xeas", MM: "%d meses", y: "um ano", yy: "%d anos" }, dayOfMonthOrdinalParse: /\d{1,2}\xba/, ordinal: "%d\xba" }), e.defineLocale("pt", { months: "janeiro_fevereiro_mar\xe7o_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"), monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"), weekdays: "Domingo_Segunda-feira_Ter\xe7a-feira_Quarta-feira_Quinta-feira_Sexta-feira_S\xe1bado".split("_"), weekdaysShort: "Dom_Seg_Ter_Qua_Qui_Sex_S\xe1b".split("_"), weekdaysMin: "Do_2\xaa_3\xaa_4\xaa_5\xaa_6\xaa_S\xe1".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY HH:mm", LLLL: "dddd, D [de] MMMM [de] YYYY HH:mm" }, calendar: { sameDay: "[Hoje \xe0s] LT", nextDay: "[Amanh\xe3 \xe0s] LT", nextWeek: "dddd [\xe0s] LT", lastDay: "[Ontem \xe0s] LT", lastWeek: function lastWeek() {
        return 0 === this.day() || 6 === this.day() ? "[\xdaltimo] dddd [\xe0s] LT" : "[\xdaltima] dddd [\xe0s] LT";
      }, sameElse: "L" }, relativeTime: { future: "em %s", past: "h\xe1 %s", s: "segundos", ss: "%d segundos", m: "um minuto", mm: "%d minutos", h: "uma hora", hh: "%d horas", d: "um dia", dd: "%d dias", M: "um m\xeas", MM: "%d meses", y: "um ano", yy: "%d anos" }, dayOfMonthOrdinalParse: /\d{1,2}\xba/, ordinal: "%d\xba", week: { dow: 1, doy: 4 } }), e.defineLocale("ro", { months: "ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"), monthsShort: "ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"), monthsParseExact: !0, weekdays: "duminic\u0103_luni_mar\u021Bi_miercuri_joi_vineri_s\xE2mb\u0103t\u0103".split("_"), weekdaysShort: "Dum_Lun_Mar_Mie_Joi_Vin_S\xe2m".split("_"), weekdaysMin: "Du_Lu_Ma_Mi_Jo_Vi_S\xe2".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY H:mm", LLLL: "dddd, D MMMM YYYY H:mm" }, calendar: { sameDay: "[azi la] LT", nextDay: "[m\xe2ine la] LT", nextWeek: "dddd [la] LT", lastDay: "[ieri la] LT", lastWeek: "[fosta] dddd [la] LT", sameElse: "L" }, relativeTime: { future: "peste %s", past: "%s \xEEn urm\u0103", s: "c\xe2teva secunde", ss: Ke, m: "un minut", mm: Ke, h: "o or\u0103", hh: Ke, d: "o zi", dd: Ke, M: "o lun\u0103", MM: Ke, y: "un an", yy: Ke }, week: { dow: 1, doy: 7 } });var Ge = [/^\u044f\u043d\u0432/i, /^\u0444\u0435\u0432/i, /^\u043c\u0430\u0440/i, /^\u0430\u043f\u0440/i, /^\u043c\u0430[\u0439\u044f]/i, /^\u0438\u044e\u043d/i, /^\u0438\u044e\u043b/i, /^\u0430\u0432\u0433/i, /^\u0441\u0435\u043d/i, /^\u043e\u043a\u0442/i, /^\u043d\u043e\u044f/i, /^\u0434\u0435\u043a/i];e.defineLocale("ru", { months: { format: "\u044F\u043D\u0432\u0430\u0440\u044F_\u0444\u0435\u0432\u0440\u0430\u043B\u044F_\u043C\u0430\u0440\u0442\u0430_\u0430\u043F\u0440\u0435\u043B\u044F_\u043C\u0430\u044F_\u0438\u044E\u043D\u044F_\u0438\u044E\u043B\u044F_\u0430\u0432\u0433\u0443\u0441\u0442\u0430_\u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044F_\u043E\u043A\u0442\u044F\u0431\u0440\u044F_\u043D\u043E\u044F\u0431\u0440\u044F_\u0434\u0435\u043A\u0430\u0431\u0440\u044F".split("_"), standalone: "\u044F\u043D\u0432\u0430\u0440\u044C_\u0444\u0435\u0432\u0440\u0430\u043B\u044C_\u043C\u0430\u0440\u0442_\u0430\u043F\u0440\u0435\u043B\u044C_\u043C\u0430\u0439_\u0438\u044E\u043D\u044C_\u0438\u044E\u043B\u044C_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044C_\u043E\u043A\u0442\u044F\u0431\u0440\u044C_\u043D\u043E\u044F\u0431\u0440\u044C_\u0434\u0435\u043A\u0430\u0431\u0440\u044C".split("_") }, monthsShort: { format: "\u044F\u043D\u0432._\u0444\u0435\u0432\u0440._\u043C\u0430\u0440._\u0430\u043F\u0440._\u043C\u0430\u044F_\u0438\u044E\u043D\u044F_\u0438\u044E\u043B\u044F_\u0430\u0432\u0433._\u0441\u0435\u043D\u0442._\u043E\u043A\u0442._\u043D\u043E\u044F\u0431._\u0434\u0435\u043A.".split("_"), standalone: "\u044F\u043D\u0432._\u0444\u0435\u0432\u0440._\u043C\u0430\u0440\u0442_\u0430\u043F\u0440._\u043C\u0430\u0439_\u0438\u044E\u043D\u044C_\u0438\u044E\u043B\u044C_\u0430\u0432\u0433._\u0441\u0435\u043D\u0442._\u043E\u043A\u0442._\u043D\u043E\u044F\u0431._\u0434\u0435\u043A.".split("_") }, weekdays: { standalone: "\u0432\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435_\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A_\u0432\u0442\u043E\u0440\u043D\u0438\u043A_\u0441\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0435\u0440\u0433_\u043F\u044F\u0442\u043D\u0438\u0446\u0430_\u0441\u0443\u0431\u0431\u043E\u0442\u0430".split("_"), format: "\u0432\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435_\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A_\u0432\u0442\u043E\u0440\u043D\u0438\u043A_\u0441\u0440\u0435\u0434\u0443_\u0447\u0435\u0442\u0432\u0435\u0440\u0433_\u043F\u044F\u0442\u043D\u0438\u0446\u0443_\u0441\u0443\u0431\u0431\u043E\u0442\u0443".split("_"), isFormat: /\[ ?[\u0412\u0432] ?(?:\u043f\u0440\u043e\u0448\u043b\u0443\u044e|\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e|\u044d\u0442\u0443)? ?\] ?dddd/ }, weekdaysShort: "\u0432\u0441_\u043F\u043D_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043F\u0442_\u0441\u0431".split("_"), weekdaysMin: "\u0432\u0441_\u043F\u043D_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043F\u0442_\u0441\u0431".split("_"), monthsParse: Ge, longMonthsParse: Ge, shortMonthsParse: Ge, monthsRegex: /^(\u044f\u043d\u0432\u0430\u0440[\u044c\u044f]|\u044f\u043d\u0432\.?|\u0444\u0435\u0432\u0440\u0430\u043b[\u044c\u044f]|\u0444\u0435\u0432\u0440?\.?|\u043c\u0430\u0440\u0442\u0430?|\u043c\u0430\u0440\.?|\u0430\u043f\u0440\u0435\u043b[\u044c\u044f]|\u0430\u043f\u0440\.?|\u043c\u0430[\u0439\u044f]|\u0438\u044e\u043d[\u044c\u044f]|\u0438\u044e\u043d\.?|\u0438\u044e\u043b[\u044c\u044f]|\u0438\u044e\u043b\.?|\u0430\u0432\u0433\u0443\u0441\u0442\u0430?|\u0430\u0432\u0433\.?|\u0441\u0435\u043d\u0442\u044f\u0431\u0440[\u044c\u044f]|\u0441\u0435\u043d\u0442?\.?|\u043e\u043a\u0442\u044f\u0431\u0440[\u044c\u044f]|\u043e\u043a\u0442\.?|\u043d\u043e\u044f\u0431\u0440[\u044c\u044f]|\u043d\u043e\u044f\u0431?\.?|\u0434\u0435\u043a\u0430\u0431\u0440[\u044c\u044f]|\u0434\u0435\u043a\.?)/i, monthsShortRegex: /^(\u044f\u043d\u0432\u0430\u0440[\u044c\u044f]|\u044f\u043d\u0432\.?|\u0444\u0435\u0432\u0440\u0430\u043b[\u044c\u044f]|\u0444\u0435\u0432\u0440?\.?|\u043c\u0430\u0440\u0442\u0430?|\u043c\u0430\u0440\.?|\u0430\u043f\u0440\u0435\u043b[\u044c\u044f]|\u0430\u043f\u0440\.?|\u043c\u0430[\u0439\u044f]|\u0438\u044e\u043d[\u044c\u044f]|\u0438\u044e\u043d\.?|\u0438\u044e\u043b[\u044c\u044f]|\u0438\u044e\u043b\.?|\u0430\u0432\u0433\u0443\u0441\u0442\u0430?|\u0430\u0432\u0433\.?|\u0441\u0435\u043d\u0442\u044f\u0431\u0440[\u044c\u044f]|\u0441\u0435\u043d\u0442?\.?|\u043e\u043a\u0442\u044f\u0431\u0440[\u044c\u044f]|\u043e\u043a\u0442\.?|\u043d\u043e\u044f\u0431\u0440[\u044c\u044f]|\u043d\u043e\u044f\u0431?\.?|\u0434\u0435\u043a\u0430\u0431\u0440[\u044c\u044f]|\u0434\u0435\u043a\.?)/i, monthsStrictRegex: /^(\u044f\u043d\u0432\u0430\u0440[\u044f\u044c]|\u0444\u0435\u0432\u0440\u0430\u043b[\u044f\u044c]|\u043c\u0430\u0440\u0442\u0430?|\u0430\u043f\u0440\u0435\u043b[\u044f\u044c]|\u043c\u0430[\u044f\u0439]|\u0438\u044e\u043d[\u044f\u044c]|\u0438\u044e\u043b[\u044f\u044c]|\u0430\u0432\u0433\u0443\u0441\u0442\u0430?|\u0441\u0435\u043d\u0442\u044f\u0431\u0440[\u044f\u044c]|\u043e\u043a\u0442\u044f\u0431\u0440[\u044f\u044c]|\u043d\u043e\u044f\u0431\u0440[\u044f\u044c]|\u0434\u0435\u043a\u0430\u0431\u0440[\u044f\u044c])/i, monthsShortStrictRegex: /^(\u044f\u043d\u0432\.|\u0444\u0435\u0432\u0440?\.|\u043c\u0430\u0440[\u0442.]|\u0430\u043f\u0440\.|\u043c\u0430[\u044f\u0439]|\u0438\u044e\u043d[\u044c\u044f.]|\u0438\u044e\u043b[\u044c\u044f.]|\u0430\u0432\u0433\.|\u0441\u0435\u043d\u0442?\.|\u043e\u043a\u0442\.|\u043d\u043e\u044f\u0431?\.|\u0434\u0435\u043a\.)/i, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY \u0433.", LLL: "D MMMM YYYY \u0433., H:mm", LLLL: "dddd, D MMMM YYYY \u0433., H:mm" }, calendar: { sameDay: "[\u0421\u0435\u0433\u043E\u0434\u043D\u044F \u0432] LT", nextDay: "[\u0417\u0430\u0432\u0442\u0440\u0430 \u0432] LT", lastDay: "[\u0412\u0447\u0435\u0440\u0430 \u0432] LT", nextWeek: function nextWeek(e) {
        if (e.week() === this.week()) return 2 === this.day() ? "[\u0412\u043E] dddd [\u0432] LT" : "[\u0412] dddd [\u0432] LT";switch (this.day()) {case 0:
            return "[\u0412 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0435] dddd [\u0432] LT";case 1:case 2:case 4:
            return "[\u0412 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439] dddd [\u0432] LT";case 3:case 5:case 6:
            return "[\u0412 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0443\u044E] dddd [\u0432] LT";}
      }, lastWeek: function lastWeek(e) {
        if (e.week() === this.week()) return 2 === this.day() ? "[\u0412\u043E] dddd [\u0432] LT" : "[\u0412] dddd [\u0432] LT";switch (this.day()) {case 0:
            return "[\u0412 \u043F\u0440\u043E\u0448\u043B\u043E\u0435] dddd [\u0432] LT";case 1:case 2:case 4:
            return "[\u0412 \u043F\u0440\u043E\u0448\u043B\u044B\u0439] dddd [\u0432] LT";case 3:case 5:case 6:
            return "[\u0412 \u043F\u0440\u043E\u0448\u043B\u0443\u044E] dddd [\u0432] LT";}
      }, sameElse: "L" }, relativeTime: { future: "\u0447\u0435\u0440\u0435\u0437 %s", past: "%s \u043D\u0430\u0437\u0430\u0434", s: "\u043D\u0435\u0441\u043A\u043E\u043B\u044C\u043A\u043E \u0441\u0435\u043A\u0443\u043D\u0434", ss: Ce, m: Ce, mm: Ce, h: "\u0447\u0430\u0441", hh: Ce, d: "\u0434\u0435\u043D\u044C", dd: Ce, M: "\u043C\u0435\u0441\u044F\u0446", MM: Ce, y: "\u0433\u043E\u0434", yy: Ce }, meridiemParse: /\u043d\u043e\u0447\u0438|\u0443\u0442\u0440\u0430|\u0434\u043d\u044f|\u0432\u0435\u0447\u0435\u0440\u0430/i, isPM: function isPM(e) {
      return (/^(\u0434\u043d\u044f|\u0432\u0435\u0447\u0435\u0440\u0430)$/.test(e)
      );
    }, meridiem: function meridiem(e, a, _) {
      return e < 4 ? "\u043D\u043E\u0447\u0438" : e < 12 ? "\u0443\u0442\u0440\u0430" : e < 17 ? "\u0434\u043D\u044F" : "\u0432\u0435\u0447\u0435\u0440\u0430";
    }, dayOfMonthOrdinalParse: /\d{1,2}-(\u0439|\u0433\u043e|\u044f)/, ordinal: function ordinal(e, a) {
      switch (a) {case "M":case "d":case "DDD":
          return e + "-\u0439";case "D":
          return e + "-\u0433\u043E";case "w":case "W":
          return e + "-\u044F";default:
          return e;}
    }, week: { dow: 1, doy: 4 } });var Be = ["\u062C\u0646\u0648\u0631\u064A", "\u0641\u064A\u0628\u0631\u0648\u0631\u064A", "\u0645\u0627\u0631\u0686", "\u0627\u067E\u0631\u064A\u0644", "\u0645\u0626\u064A", "\u062C\u0648\u0646", "\u062C\u0648\u0644\u0627\u0621\u0650", "\u0622\u06AF\u0633\u067D", "\u0633\u064A\u067E\u067D\u0645\u0628\u0631", "\u0622\u06AA\u067D\u0648\u0628\u0631", "\u0646\u0648\u0645\u0628\u0631", "\u068A\u0633\u0645\u0628\u0631"],
      qe = ["\u0622\u0686\u0631", "\u0633\u0648\u0645\u0631", "\u0627\u06B1\u0627\u0631\u0648", "\u0627\u0631\u0628\u0639", "\u062E\u0645\u064A\u0633", "\u062C\u0645\u0639", "\u0687\u0646\u0687\u0631"];e.defineLocale("sd", { months: Be, monthsShort: Be, weekdays: qe, weekdaysShort: qe, weekdaysMin: qe, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd\u060C D MMMM YYYY HH:mm" }, meridiemParse: /\u0635\u0628\u062d|\u0634\u0627\u0645/, isPM: function isPM(e) {
      return "\u0634\u0627\u0645" === e;
    }, meridiem: function meridiem(e, a, _) {
      return e < 12 ? "\u0635\u0628\u062D" : "\u0634\u0627\u0645";
    }, calendar: { sameDay: "[\u0627\u0684] LT", nextDay: "[\u0633\u0680\u0627\u06BB\u064A] LT", nextWeek: "dddd [\u0627\u06B3\u064A\u0646 \u0647\u0641\u062A\u064A \u062A\u064A] LT", lastDay: "[\u06AA\u0627\u0644\u0647\u0647] LT", lastWeek: "[\u06AF\u0632\u0631\u064A\u0644 \u0647\u0641\u062A\u064A] dddd [\u062A\u064A] LT", sameElse: "L" }, relativeTime: { future: "%s \u067E\u0648\u0621", past: "%s \u0627\u06B3", s: "\u0686\u0646\u062F \u0633\u064A\u06AA\u0646\u068A", ss: "%d \u0633\u064A\u06AA\u0646\u068A", m: "\u0647\u06AA \u0645\u0646\u067D", mm: "%d \u0645\u0646\u067D", h: "\u0647\u06AA \u06AA\u0644\u0627\u06AA", hh: "%d \u06AA\u0644\u0627\u06AA", d: "\u0647\u06AA \u068F\u064A\u0646\u0647\u0646", dd: "%d \u068F\u064A\u0646\u0647\u0646", M: "\u0647\u06AA \u0645\u0647\u064A\u0646\u0648", MM: "%d \u0645\u0647\u064A\u0646\u0627", y: "\u0647\u06AA \u0633\u0627\u0644", yy: "%d \u0633\u0627\u0644" }, preparse: function preparse(e) {
      return e.replace(/\u060c/g, ",");
    }, postformat: function postformat(e) {
      return e.replace(/,/g, "\u060C");
    }, week: { dow: 1, doy: 4 } }), e.defineLocale("se", { months: "o\u0111\u0111ajagem\xE1nnu_guovvam\xE1nnu_njuk\u010Dam\xE1nnu_cuo\u014Bom\xE1nnu_miessem\xE1nnu_geassem\xE1nnu_suoidnem\xE1nnu_borgem\xE1nnu_\u010Dak\u010Dam\xE1nnu_golggotm\xE1nnu_sk\xE1bmam\xE1nnu_juovlam\xE1nnu".split("_"), monthsShort: "o\u0111\u0111j_guov_njuk_cuo_mies_geas_suoi_borg_\u010Dak\u010D_golg_sk\xE1b_juov".split("_"), weekdays: "sotnabeaivi_vuoss\xE1rga_ma\u014B\u014Beb\xE1rga_gaskavahkku_duorastat_bearjadat_l\xE1vvardat".split("_"), weekdaysShort: "sotn_vuos_ma\u014B_gask_duor_bear_l\xE1v".split("_"), weekdaysMin: "s_v_m_g_d_b_L".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "MMMM D. [b.] YYYY", LLL: "MMMM D. [b.] YYYY [ti.] HH:mm", LLLL: "dddd, MMMM D. [b.] YYYY [ti.] HH:mm" }, calendar: { sameDay: "[otne ti] LT", nextDay: "[ihttin ti] LT", nextWeek: "dddd [ti] LT", lastDay: "[ikte ti] LT", lastWeek: "[ovddit] dddd [ti] LT", sameElse: "L" }, relativeTime: { future: "%s gea\u017Ees", past: "ma\u014Bit %s", s: "moadde sekunddat", ss: "%d sekunddat", m: "okta minuhta", mm: "%d minuhtat", h: "okta diimmu", hh: "%d diimmut", d: "okta beaivi", dd: "%d beaivvit", M: "okta m\xe1nnu", MM: "%d m\xe1nut", y: "okta jahki", yy: "%d jagit" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), e.defineLocale("si", { months: "\u0DA2\u0DB1\u0DC0\u0DCF\u0DBB\u0DD2_\u0DB4\u0DD9\u0DB6\u0DBB\u0DC0\u0DCF\u0DBB\u0DD2_\u0DB8\u0DCF\u0DBB\u0DCA\u0DAD\u0DD4_\u0D85\u0DB4\u0DCA\u200D\u0DBB\u0DDA\u0DBD\u0DCA_\u0DB8\u0DD0\u0DBA\u0DD2_\u0DA2\u0DD6\u0DB1\u0DD2_\u0DA2\u0DD6\u0DBD\u0DD2_\u0D85\u0D9C\u0DDD\u0DC3\u0DCA\u0DAD\u0DD4_\u0DC3\u0DD0\u0DB4\u0DCA\u0DAD\u0DD0\u0DB8\u0DCA\u0DB6\u0DBB\u0DCA_\u0D94\u0D9A\u0DCA\u0DAD\u0DDD\u0DB6\u0DBB\u0DCA_\u0DB1\u0DDC\u0DC0\u0DD0\u0DB8\u0DCA\u0DB6\u0DBB\u0DCA_\u0DAF\u0DD9\u0DC3\u0DD0\u0DB8\u0DCA\u0DB6\u0DBB\u0DCA".split("_"), monthsShort: "\u0DA2\u0DB1_\u0DB4\u0DD9\u0DB6_\u0DB8\u0DCF\u0DBB\u0DCA_\u0D85\u0DB4\u0DCA_\u0DB8\u0DD0\u0DBA\u0DD2_\u0DA2\u0DD6\u0DB1\u0DD2_\u0DA2\u0DD6\u0DBD\u0DD2_\u0D85\u0D9C\u0DDD_\u0DC3\u0DD0\u0DB4\u0DCA_\u0D94\u0D9A\u0DCA_\u0DB1\u0DDC\u0DC0\u0DD0_\u0DAF\u0DD9\u0DC3\u0DD0".split("_"), weekdays: "\u0D89\u0DBB\u0DD2\u0DAF\u0DCF_\u0DC3\u0DB3\u0DD4\u0DAF\u0DCF_\u0D85\u0D9F\u0DC4\u0DBB\u0DD4\u0DC0\u0DCF\u0DAF\u0DCF_\u0DB6\u0DAF\u0DCF\u0DAF\u0DCF_\u0DB6\u0DCA\u200D\u0DBB\u0DC4\u0DC3\u0DCA\u0DB4\u0DAD\u0DD2\u0DB1\u0DCA\u0DAF\u0DCF_\u0DC3\u0DD2\u0D9A\u0DD4\u0DBB\u0DCF\u0DAF\u0DCF_\u0DC3\u0DD9\u0DB1\u0DC3\u0DD4\u0DBB\u0DCF\u0DAF\u0DCF".split("_"), weekdaysShort: "\u0D89\u0DBB\u0DD2_\u0DC3\u0DB3\u0DD4_\u0D85\u0D9F_\u0DB6\u0DAF\u0DCF_\u0DB6\u0DCA\u200D\u0DBB\u0DC4_\u0DC3\u0DD2\u0D9A\u0DD4_\u0DC3\u0DD9\u0DB1".split("_"), weekdaysMin: "\u0D89_\u0DC3_\u0D85_\u0DB6_\u0DB6\u0DCA\u200D\u0DBB_\u0DC3\u0DD2_\u0DC3\u0DD9".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "a h:mm", LTS: "a h:mm:ss", L: "YYYY/MM/DD", LL: "YYYY MMMM D", LLL: "YYYY MMMM D, a h:mm", LLLL: "YYYY MMMM D [\u0DC0\u0DD0\u0DB1\u0DD2] dddd, a h:mm:ss" }, calendar: { sameDay: "[\u0D85\u0DAF] LT[\u0DA7]", nextDay: "[\u0DC4\u0DD9\u0DA7] LT[\u0DA7]", nextWeek: "dddd LT[\u0DA7]", lastDay: "[\u0D8A\u0DBA\u0DDA] LT[\u0DA7]", lastWeek: "[\u0DB4\u0DC3\u0DD4\u0D9C\u0DD2\u0DBA] dddd LT[\u0DA7]", sameElse: "L" }, relativeTime: { future: "%s\u0D9A\u0DD2\u0DB1\u0DCA", past: "%s\u0D9A\u0DA7 \u0DB4\u0DD9\u0DBB", s: "\u0DAD\u0DAD\u0DCA\u0DB4\u0DBB \u0D9A\u0DD2\u0DC4\u0DD2\u0DB4\u0DBA", ss: "\u0DAD\u0DAD\u0DCA\u0DB4\u0DBB %d", m: "\u0DB8\u0DD2\u0DB1\u0DD2\u0DAD\u0DCA\u0DAD\u0DD4\u0DC0", mm: "\u0DB8\u0DD2\u0DB1\u0DD2\u0DAD\u0DCA\u0DAD\u0DD4 %d", h: "\u0DB4\u0DD0\u0DBA", hh: "\u0DB4\u0DD0\u0DBA %d", d: "\u0DAF\u0DD2\u0DB1\u0DBA", dd: "\u0DAF\u0DD2\u0DB1 %d", M: "\u0DB8\u0DCF\u0DC3\u0DBA", MM: "\u0DB8\u0DCF\u0DC3 %d", y: "\u0DC0\u0DC3\u0DBB", yy: "\u0DC0\u0DC3\u0DBB %d" }, dayOfMonthOrdinalParse: /\d{1,2} \u0dc0\u0dd0\u0db1\u0dd2/, ordinal: function ordinal(e) {
      return e + " \u0DC0\u0DD0\u0DB1\u0DD2";
    }, meridiemParse: /\u0db4\u0dd9\u0dbb \u0dc0\u0dbb\u0dd4|\u0db4\u0dc3\u0dca \u0dc0\u0dbb\u0dd4|\u0db4\u0dd9.\u0dc0|\u0db4.\u0dc0./, isPM: function isPM(e) {
      return "\u0DB4.\u0DC0." === e || "\u0DB4\u0DC3\u0DCA \u0DC0\u0DBB\u0DD4" === e;
    }, meridiem: function meridiem(e, a, _) {
      return e > 11 ? _ ? "\u0DB4.\u0DC0." : "\u0DB4\u0DC3\u0DCA \u0DC0\u0DBB\u0DD4" : _ ? "\u0DB4\u0DD9.\u0DC0." : "\u0DB4\u0DD9\u0DBB \u0DC0\u0DBB\u0DD4";
    } });var $e = "janu\xe1r_febru\xe1r_marec_apr\xedl_m\xe1j_j\xfan_j\xfal_august_september_okt\xf3ber_november_december".split("_"),
      Ue = "jan_feb_mar_apr_m\xe1j_j\xfan_j\xfal_aug_sep_okt_nov_dec".split("_");function Qe(e) {
    return e > 1 && e < 5;
  }function Ve(e, a, _, s) {
    var d = e + " ";switch (_) {case "s":
        return a || s ? "p\xe1r sek\xfand" : "p\xe1r sekundami";case "ss":
        return a || s ? d + (Qe(e) ? "sekundy" : "sek\xfand") : d + "sekundami";break;case "m":
        return a ? "min\xfata" : s ? "min\xfatu" : "min\xfatou";case "mm":
        return a || s ? d + (Qe(e) ? "min\xfaty" : "min\xfat") : d + "min\xfatami";break;case "h":
        return a ? "hodina" : s ? "hodinu" : "hodinou";case "hh":
        return a || s ? d + (Qe(e) ? "hodiny" : "hod\xedn") : d + "hodinami";break;case "d":
        return a || s ? "de\u0148" : "d\u0148om";case "dd":
        return a || s ? d + (Qe(e) ? "dni" : "dn\xed") : d + "d\u0148ami";break;case "M":
        return a || s ? "mesiac" : "mesiacom";case "MM":
        return a || s ? d + (Qe(e) ? "mesiace" : "mesiacov") : d + "mesiacmi";break;case "y":
        return a || s ? "rok" : "rokom";case "yy":
        return a || s ? d + (Qe(e) ? "roky" : "rokov") : d + "rokmi";break;}
  }function Ze(e, a, _, s) {
    var d = e + " ";switch (_) {case "s":
        return a || s ? "nekaj sekund" : "nekaj sekundami";case "ss":
        return d += 1 === e ? a ? "sekundo" : "sekundi" : 2 === e ? a || s ? "sekundi" : "sekundah" : e < 5 ? a || s ? "sekunde" : "sekundah" : "sekund";case "m":
        return a ? "ena minuta" : "eno minuto";case "mm":
        return d += 1 === e ? a ? "minuta" : "minuto" : 2 === e ? a || s ? "minuti" : "minutama" : e < 5 ? a || s ? "minute" : "minutami" : a || s ? "minut" : "minutami";case "h":
        return a ? "ena ura" : "eno uro";case "hh":
        return d += 1 === e ? a ? "ura" : "uro" : 2 === e ? a || s ? "uri" : "urama" : e < 5 ? a || s ? "ure" : "urami" : a || s ? "ur" : "urami";case "d":
        return a || s ? "en dan" : "enim dnem";case "dd":
        return d += 1 === e ? a || s ? "dan" : "dnem" : 2 === e ? a || s ? "dni" : "dnevoma" : a || s ? "dni" : "dnevi";case "M":
        return a || s ? "en mesec" : "enim mesecem";case "MM":
        return d += 1 === e ? a || s ? "mesec" : "mesecem" : 2 === e ? a || s ? "meseca" : "mesecema" : e < 5 ? a || s ? "mesece" : "meseci" : a || s ? "mesecev" : "meseci";case "y":
        return a || s ? "eno leto" : "enim letom";case "yy":
        return d += 1 === e ? a || s ? "leto" : "letom" : 2 === e ? a || s ? "leti" : "letoma" : e < 5 ? a || s ? "leta" : "leti" : a || s ? "let" : "leti";}
  }e.defineLocale("sk", { months: $e, monthsShort: Ue, weekdays: "nede\u013Ea_pondelok_utorok_streda_\u0161tvrtok_piatok_sobota".split("_"), weekdaysShort: "ne_po_ut_st_\u0161t_pi_so".split("_"), weekdaysMin: "ne_po_ut_st_\u0161t_pi_so".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd D. MMMM YYYY H:mm" }, calendar: { sameDay: "[dnes o] LT", nextDay: "[zajtra o] LT", nextWeek: function nextWeek() {
        switch (this.day()) {case 0:
            return "[v nede\u013Eu o] LT";case 1:case 2:
            return "[v] dddd [o] LT";case 3:
            return "[v stredu o] LT";case 4:
            return "[vo \u0161tvrtok o] LT";case 5:
            return "[v piatok o] LT";case 6:
            return "[v sobotu o] LT";}
      }, lastDay: "[v\u010Dera o] LT", lastWeek: function lastWeek() {
        switch (this.day()) {case 0:
            return "[minul\xFA nede\u013Eu o] LT";case 1:case 2:
            return "[minul\xfd] dddd [o] LT";case 3:
            return "[minul\xfa stredu o] LT";case 4:case 5:
            return "[minul\xfd] dddd [o] LT";case 6:
            return "[minul\xfa sobotu o] LT";}
      }, sameElse: "L" }, relativeTime: { future: "za %s", past: "pred %s", s: Ve, ss: Ve, m: Ve, mm: Ve, h: Ve, hh: Ve, d: Ve, dd: Ve, M: Ve, MM: Ve, y: Ve, yy: Ve }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), e.defineLocale("sl", { months: "januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"), monthsShort: "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"), monthsParseExact: !0, weekdays: "nedelja_ponedeljek_torek_sreda_\u010Detrtek_petek_sobota".split("_"), weekdaysShort: "ned._pon._tor._sre._\u010Det._pet._sob.".split("_"), weekdaysMin: "ne_po_to_sr_\u010De_pe_so".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[danes ob] LT", nextDay: "[jutri ob] LT", nextWeek: function nextWeek() {
        switch (this.day()) {case 0:
            return "[v] [nedeljo] [ob] LT";case 3:
            return "[v] [sredo] [ob] LT";case 6:
            return "[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:
            return "[v] dddd [ob] LT";}
      }, lastDay: "[v\u010Deraj ob] LT", lastWeek: function lastWeek() {
        switch (this.day()) {case 0:
            return "[prej\u0161njo] [nedeljo] [ob] LT";case 3:
            return "[prej\u0161njo] [sredo] [ob] LT";case 6:
            return "[prej\u0161njo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:
            return "[prej\u0161nji] dddd [ob] LT";}
      }, sameElse: "L" }, relativeTime: { future: "\u010Dez %s", past: "pred %s", s: Ze, ss: Ze, m: Ze, mm: Ze, h: Ze, hh: Ze, d: Ze, dd: Ze, M: Ze, MM: Ze, y: Ze, yy: Ze }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }), e.defineLocale("sq", { months: "Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_N\xebntor_Dhjetor".split("_"), monthsShort: "Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_N\xebn_Dhj".split("_"), weekdays: "E Diel_E H\xebn\xeb_E Mart\xeb_E M\xebrkur\xeb_E Enjte_E Premte_E Shtun\xeb".split("_"), weekdaysShort: "Die_H\xebn_Mar_M\xebr_Enj_Pre_Sht".split("_"), weekdaysMin: "D_H_Ma_M\xeb_E_P_Sh".split("_"), weekdaysParseExact: !0, meridiemParse: /PD|MD/, isPM: function isPM(e) {
      return "M" === e.charAt(0);
    }, meridiem: function meridiem(e, a, _) {
      return e < 12 ? "PD" : "MD";
    }, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Sot n\xeb] LT", nextDay: "[Nes\xebr n\xeb] LT", nextWeek: "dddd [n\xeb] LT", lastDay: "[Dje n\xeb] LT", lastWeek: "dddd [e kaluar n\xeb] LT", sameElse: "L" }, relativeTime: { future: "n\xeb %s", past: "%s m\xeb par\xeb", s: "disa sekonda", ss: "%d sekonda", m: "nj\xeb minut\xeb", mm: "%d minuta", h: "nj\xeb or\xeb", hh: "%d or\xeb", d: "nj\xeb dit\xeb", dd: "%d dit\xeb", M: "nj\xeb muaj", MM: "%d muaj", y: "nj\xeb vit", yy: "%d vite" }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } });var Xe = { words: { ss: ["\u0441\u0435\u043A\u0443\u043D\u0434\u0430", "\u0441\u0435\u043A\u0443\u043D\u0434\u0435", "\u0441\u0435\u043A\u0443\u043D\u0434\u0438"], m: ["\u0458\u0435\u0434\u0430\u043D \u043C\u0438\u043D\u0443\u0442", "\u0458\u0435\u0434\u043D\u0435 \u043C\u0438\u043D\u0443\u0442\u0435"], mm: ["\u043C\u0438\u043D\u0443\u0442", "\u043C\u0438\u043D\u0443\u0442\u0435", "\u043C\u0438\u043D\u0443\u0442\u0430"], h: ["\u0458\u0435\u0434\u0430\u043D \u0441\u0430\u0442", "\u0458\u0435\u0434\u043D\u043E\u0433 \u0441\u0430\u0442\u0430"], hh: ["\u0441\u0430\u0442", "\u0441\u0430\u0442\u0430", "\u0441\u0430\u0442\u0438"], dd: ["\u0434\u0430\u043D", "\u0434\u0430\u043D\u0430", "\u0434\u0430\u043D\u0430"], MM: ["\u043C\u0435\u0441\u0435\u0446", "\u043C\u0435\u0441\u0435\u0446\u0430", "\u043C\u0435\u0441\u0435\u0446\u0438"], yy: ["\u0433\u043E\u0434\u0438\u043D\u0430", "\u0433\u043E\u0434\u0438\u043D\u0435", "\u0433\u043E\u0434\u0438\u043D\u0430"] }, correctGrammaticalCase: function correctGrammaticalCase(e, a) {
      return 1 === e ? a[0] : e >= 2 && e <= 4 ? a[1] : a[2];
    }, translate: function translate(e, a, _) {
      var s = Xe.words[_];return 1 === _.length ? a ? s[0] : s[1] : e + " " + Xe.correctGrammaticalCase(e, s);
    } };e.defineLocale("sr-cyrl", { months: "\u0458\u0430\u043D\u0443\u0430\u0440_\u0444\u0435\u0431\u0440\u0443\u0430\u0440_\u043C\u0430\u0440\u0442_\u0430\u043F\u0440\u0438\u043B_\u043C\u0430\u0458_\u0458\u0443\u043D_\u0458\u0443\u043B_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043F\u0442\u0435\u043C\u0431\u0430\u0440_\u043E\u043A\u0442\u043E\u0431\u0430\u0440_\u043D\u043E\u0432\u0435\u043C\u0431\u0430\u0440_\u0434\u0435\u0446\u0435\u043C\u0431\u0430\u0440".split("_"), monthsShort: "\u0458\u0430\u043D._\u0444\u0435\u0431._\u043C\u0430\u0440._\u0430\u043F\u0440._\u043C\u0430\u0458_\u0458\u0443\u043D_\u0458\u0443\u043B_\u0430\u0432\u0433._\u0441\u0435\u043F._\u043E\u043A\u0442._\u043D\u043E\u0432._\u0434\u0435\u0446.".split("_"), monthsParseExact: !0, weekdays: "\u043D\u0435\u0434\u0435\u0459\u0430_\u043F\u043E\u043D\u0435\u0434\u0435\u0459\u0430\u043A_\u0443\u0442\u043E\u0440\u0430\u043A_\u0441\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0440\u0442\u0430\u043A_\u043F\u0435\u0442\u0430\u043A_\u0441\u0443\u0431\u043E\u0442\u0430".split("_"), weekdaysShort: "\u043D\u0435\u0434._\u043F\u043E\u043D._\u0443\u0442\u043E._\u0441\u0440\u0435._\u0447\u0435\u0442._\u043F\u0435\u0442._\u0441\u0443\u0431.".split("_"), weekdaysMin: "\u043D\u0435_\u043F\u043E_\u0443\u0442_\u0441\u0440_\u0447\u0435_\u043F\u0435_\u0441\u0443".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[\u0434\u0430\u043D\u0430\u0441 \u0443] LT", nextDay: "[\u0441\u0443\u0442\u0440\u0430 \u0443] LT", nextWeek: function nextWeek() {
        switch (this.day()) {case 0:
            return "[\u0443] [\u043D\u0435\u0434\u0435\u0459\u0443] [\u0443] LT";case 3:
            return "[\u0443] [\u0441\u0440\u0435\u0434\u0443] [\u0443] LT";case 6:
            return "[\u0443] [\u0441\u0443\u0431\u043E\u0442\u0443] [\u0443] LT";case 1:case 2:case 4:case 5:
            return "[\u0443] dddd [\u0443] LT";}
      }, lastDay: "[\u0458\u0443\u0447\u0435 \u0443] LT", lastWeek: function lastWeek() {
        return ["[\u043F\u0440\u043E\u0448\u043B\u0435] [\u043D\u0435\u0434\u0435\u0459\u0435] [\u0443] LT", "[\u043F\u0440\u043E\u0448\u043B\u043E\u0433] [\u043F\u043E\u043D\u0435\u0434\u0435\u0459\u043A\u0430] [\u0443] LT", "[\u043F\u0440\u043E\u0448\u043B\u043E\u0433] [\u0443\u0442\u043E\u0440\u043A\u0430] [\u0443] LT", "[\u043F\u0440\u043E\u0448\u043B\u0435] [\u0441\u0440\u0435\u0434\u0435] [\u0443] LT", "[\u043F\u0440\u043E\u0448\u043B\u043E\u0433] [\u0447\u0435\u0442\u0432\u0440\u0442\u043A\u0430] [\u0443] LT", "[\u043F\u0440\u043E\u0448\u043B\u043E\u0433] [\u043F\u0435\u0442\u043A\u0430] [\u0443] LT", "[\u043F\u0440\u043E\u0448\u043B\u0435] [\u0441\u0443\u0431\u043E\u0442\u0435] [\u0443] LT"][this.day()];
      }, sameElse: "L" }, relativeTime: { future: "\u0437\u0430 %s", past: "\u043F\u0440\u0435 %s", s: "\u043D\u0435\u043A\u043E\u043B\u0438\u043A\u043E \u0441\u0435\u043A\u0443\u043D\u0434\u0438", ss: Xe.translate, m: Xe.translate, mm: Xe.translate, h: Xe.translate, hh: Xe.translate, d: "\u0434\u0430\u043D", dd: Xe.translate, M: "\u043C\u0435\u0441\u0435\u0446", MM: Xe.translate, y: "\u0433\u043E\u0434\u0438\u043D\u0443", yy: Xe.translate }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } });var ea = { words: { ss: ["sekunda", "sekunde", "sekundi"], m: ["jedan minut", "jedne minute"], mm: ["minut", "minute", "minuta"], h: ["jedan sat", "jednog sata"], hh: ["sat", "sata", "sati"], dd: ["dan", "dana", "dana"], MM: ["mesec", "meseca", "meseci"], yy: ["godina", "godine", "godina"] }, correctGrammaticalCase: function correctGrammaticalCase(e, a) {
      return 1 === e ? a[0] : e >= 2 && e <= 4 ? a[1] : a[2];
    }, translate: function translate(e, a, _) {
      var s = ea.words[_];return 1 === _.length ? a ? s[0] : s[1] : e + " " + ea.correctGrammaticalCase(e, s);
    } };e.defineLocale("sr", { months: "januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"), monthsShort: "jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"), monthsParseExact: !0, weekdays: "nedelja_ponedeljak_utorak_sreda_\u010Detvrtak_petak_subota".split("_"), weekdaysShort: "ned._pon._uto._sre._\u010Det._pet._sub.".split("_"), weekdaysMin: "ne_po_ut_sr_\u010De_pe_su".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[danas u] LT", nextDay: "[sutra u] LT", nextWeek: function nextWeek() {
        switch (this.day()) {case 0:
            return "[u] [nedelju] [u] LT";case 3:
            return "[u] [sredu] [u] LT";case 6:
            return "[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:
            return "[u] dddd [u] LT";}
      }, lastDay: "[ju\u010De u] LT", lastWeek: function lastWeek() {
        return ["[pro\u0161le] [nedelje] [u] LT", "[pro\u0161log] [ponedeljka] [u] LT", "[pro\u0161log] [utorka] [u] LT", "[pro\u0161le] [srede] [u] LT", "[pro\u0161log] [\u010Detvrtka] [u] LT", "[pro\u0161log] [petka] [u] LT", "[pro\u0161le] [subote] [u] LT"][this.day()];
      }, sameElse: "L" }, relativeTime: { future: "za %s", past: "pre %s", s: "nekoliko sekundi", ss: ea.translate, m: ea.translate, mm: ea.translate, h: ea.translate, hh: ea.translate, d: "dan", dd: ea.translate, M: "mesec", MM: ea.translate, y: "godinu", yy: ea.translate }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 7 } }), e.defineLocale("ss", { months: "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"), monthsShort: "Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"), weekdays: "Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"), weekdaysShort: "Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"), weekdaysMin: "Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendar: { sameDay: "[Namuhla nga] LT", nextDay: "[Kusasa nga] LT", nextWeek: "dddd [nga] LT", lastDay: "[Itolo nga] LT", lastWeek: "dddd [leliphelile] [nga] LT", sameElse: "L" }, relativeTime: { future: "nga %s", past: "wenteka nga %s", s: "emizuzwana lomcane", ss: "%d mzuzwana", m: "umzuzu", mm: "%d emizuzu", h: "lihora", hh: "%d emahora", d: "lilanga", dd: "%d emalanga", M: "inyanga", MM: "%d tinyanga", y: "umnyaka", yy: "%d iminyaka" }, meridiemParse: /ekuseni|emini|entsambama|ebusuku/, meridiem: function meridiem(e, a, _) {
      return e < 11 ? "ekuseni" : e < 15 ? "emini" : e < 19 ? "entsambama" : "ebusuku";
    }, meridiemHour: function meridiemHour(e, a) {
      return 12 === e && (e = 0), "ekuseni" === a ? e : "emini" === a ? e >= 11 ? e : e + 12 : "entsambama" === a || "ebusuku" === a ? 0 === e ? 0 : e + 12 : void 0;
    }, dayOfMonthOrdinalParse: /\d{1,2}/, ordinal: "%d", week: { dow: 1, doy: 4 } }), e.defineLocale("sv", { months: "januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"), monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"), weekdays: "s\xf6ndag_m\xe5ndag_tisdag_onsdag_torsdag_fredag_l\xf6rdag".split("_"), weekdaysShort: "s\xf6n_m\xe5n_tis_ons_tor_fre_l\xf6r".split("_"), weekdaysMin: "s\xf6_m\xe5_ti_on_to_fr_l\xf6".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [kl.] HH:mm", LLLL: "dddd D MMMM YYYY [kl.] HH:mm", lll: "D MMM YYYY HH:mm", llll: "ddd D MMM YYYY HH:mm" }, calendar: { sameDay: "[Idag] LT", nextDay: "[Imorgon] LT", lastDay: "[Ig\xe5r] LT", nextWeek: "[P\xe5] dddd LT", lastWeek: "[I] dddd[s] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "f\xf6r %s sedan", s: "n\xe5gra sekunder", ss: "%d sekunder", m: "en minut", mm: "%d minuter", h: "en timme", hh: "%d timmar", d: "en dag", dd: "%d dagar", M: "en m\xe5nad", MM: "%d m\xe5nader", y: "ett \xe5r", yy: "%d \xe5r" }, dayOfMonthOrdinalParse: /\d{1,2}(e|a)/, ordinal: function ordinal(e) {
      var a = e % 10;return e + (1 == ~~(e % 100 / 10) ? "e" : 1 === a ? "a" : 2 === a ? "a" : "e");
    }, week: { dow: 1, doy: 4 } }), e.defineLocale("sw", { months: "Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"), monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"), weekdays: "Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"), weekdaysShort: "Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"), weekdaysMin: "J2_J3_J4_J5_Al_Ij_J1".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[leo saa] LT", nextDay: "[kesho saa] LT", nextWeek: "[wiki ijayo] dddd [saat] LT", lastDay: "[jana] LT", lastWeek: "[wiki iliyopita] dddd [saat] LT", sameElse: "L" }, relativeTime: { future: "%s baadaye", past: "tokea %s", s: "hivi punde", ss: "sekunde %d", m: "dakika moja", mm: "dakika %d", h: "saa limoja", hh: "masaa %d", d: "siku moja", dd: "masiku %d", M: "mwezi mmoja", MM: "miezi %d", y: "mwaka mmoja", yy: "miaka %d" }, week: { dow: 1, doy: 7 } });var aa = { 1: "\u0BE7", 2: "\u0BE8", 3: "\u0BE9", 4: "\u0BEA", 5: "\u0BEB", 6: "\u0BEC", 7: "\u0BED", 8: "\u0BEE", 9: "\u0BEF", 0: "\u0BE6" },
      _a = { "\u0BE7": "1", "\u0BE8": "2", "\u0BE9": "3", "\u0BEA": "4", "\u0BEB": "5", "\u0BEC": "6", "\u0BED": "7", "\u0BEE": "8", "\u0BEF": "9", "\u0BE6": "0" };e.defineLocale("ta", { months: "\u0B9C\u0BA9\u0BB5\u0BB0\u0BBF_\u0BAA\u0BBF\u0BAA\u0BCD\u0BB0\u0BB5\u0BB0\u0BBF_\u0BAE\u0BBE\u0BB0\u0BCD\u0B9A\u0BCD_\u0B8F\u0BAA\u0BCD\u0BB0\u0BB2\u0BCD_\u0BAE\u0BC7_\u0B9C\u0BC2\u0BA9\u0BCD_\u0B9C\u0BC2\u0BB2\u0BC8_\u0B86\u0B95\u0BB8\u0BCD\u0B9F\u0BCD_\u0B9A\u0BC6\u0BAA\u0BCD\u0B9F\u0BC6\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD_\u0B85\u0B95\u0BCD\u0B9F\u0BC7\u0BBE\u0BAA\u0BB0\u0BCD_\u0BA8\u0BB5\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD_\u0B9F\u0BBF\u0B9A\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD".split("_"), monthsShort: "\u0B9C\u0BA9\u0BB5\u0BB0\u0BBF_\u0BAA\u0BBF\u0BAA\u0BCD\u0BB0\u0BB5\u0BB0\u0BBF_\u0BAE\u0BBE\u0BB0\u0BCD\u0B9A\u0BCD_\u0B8F\u0BAA\u0BCD\u0BB0\u0BB2\u0BCD_\u0BAE\u0BC7_\u0B9C\u0BC2\u0BA9\u0BCD_\u0B9C\u0BC2\u0BB2\u0BC8_\u0B86\u0B95\u0BB8\u0BCD\u0B9F\u0BCD_\u0B9A\u0BC6\u0BAA\u0BCD\u0B9F\u0BC6\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD_\u0B85\u0B95\u0BCD\u0B9F\u0BC7\u0BBE\u0BAA\u0BB0\u0BCD_\u0BA8\u0BB5\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD_\u0B9F\u0BBF\u0B9A\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD".split("_"), weekdays: "\u0B9E\u0BBE\u0BAF\u0BBF\u0BB1\u0BCD\u0BB1\u0BC1\u0B95\u0BCD\u0B95\u0BBF\u0BB4\u0BAE\u0BC8_\u0BA4\u0BBF\u0B99\u0BCD\u0B95\u0B9F\u0BCD\u0B95\u0BBF\u0BB4\u0BAE\u0BC8_\u0B9A\u0BC6\u0BB5\u0BCD\u0BB5\u0BBE\u0BAF\u0BCD\u0B95\u0BBF\u0BB4\u0BAE\u0BC8_\u0BAA\u0BC1\u0BA4\u0BA9\u0BCD\u0B95\u0BBF\u0BB4\u0BAE\u0BC8_\u0BB5\u0BBF\u0BAF\u0BBE\u0BB4\u0B95\u0BCD\u0B95\u0BBF\u0BB4\u0BAE\u0BC8_\u0BB5\u0BC6\u0BB3\u0BCD\u0BB3\u0BBF\u0B95\u0BCD\u0B95\u0BBF\u0BB4\u0BAE\u0BC8_\u0B9A\u0BA9\u0BBF\u0B95\u0BCD\u0B95\u0BBF\u0BB4\u0BAE\u0BC8".split("_"), weekdaysShort: "\u0B9E\u0BBE\u0BAF\u0BBF\u0BB1\u0BC1_\u0BA4\u0BBF\u0B99\u0BCD\u0B95\u0BB3\u0BCD_\u0B9A\u0BC6\u0BB5\u0BCD\u0BB5\u0BBE\u0BAF\u0BCD_\u0BAA\u0BC1\u0BA4\u0BA9\u0BCD_\u0BB5\u0BBF\u0BAF\u0BBE\u0BB4\u0BA9\u0BCD_\u0BB5\u0BC6\u0BB3\u0BCD\u0BB3\u0BBF_\u0B9A\u0BA9\u0BBF".split("_"), weekdaysMin: "\u0B9E\u0BBE_\u0BA4\u0BBF_\u0B9A\u0BC6_\u0BAA\u0BC1_\u0BB5\u0BBF_\u0BB5\u0BC6_\u0B9A".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, HH:mm", LLLL: "dddd, D MMMM YYYY, HH:mm" }, calendar: { sameDay: "[\u0B87\u0BA9\u0BCD\u0BB1\u0BC1] LT", nextDay: "[\u0BA8\u0BBE\u0BB3\u0BC8] LT", nextWeek: "dddd, LT", lastDay: "[\u0BA8\u0BC7\u0BB1\u0BCD\u0BB1\u0BC1] LT", lastWeek: "[\u0B95\u0B9F\u0BA8\u0BCD\u0BA4 \u0BB5\u0BBE\u0BB0\u0BAE\u0BCD] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s \u0B87\u0BB2\u0BCD", past: "%s \u0BAE\u0BC1\u0BA9\u0BCD", s: "\u0B92\u0BB0\u0BC1 \u0B9A\u0BBF\u0BB2 \u0BB5\u0BBF\u0BA8\u0BBE\u0B9F\u0BBF\u0B95\u0BB3\u0BCD", ss: "%d \u0BB5\u0BBF\u0BA8\u0BBE\u0B9F\u0BBF\u0B95\u0BB3\u0BCD", m: "\u0B92\u0BB0\u0BC1 \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0BAE\u0BCD", mm: "%d \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0B99\u0BCD\u0B95\u0BB3\u0BCD", h: "\u0B92\u0BB0\u0BC1 \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BAE\u0BCD", hh: "%d \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BAE\u0BCD", d: "\u0B92\u0BB0\u0BC1 \u0BA8\u0BBE\u0BB3\u0BCD", dd: "%d \u0BA8\u0BBE\u0B9F\u0BCD\u0B95\u0BB3\u0BCD", M: "\u0B92\u0BB0\u0BC1 \u0BAE\u0BBE\u0BA4\u0BAE\u0BCD", MM: "%d \u0BAE\u0BBE\u0BA4\u0B99\u0BCD\u0B95\u0BB3\u0BCD", y: "\u0B92\u0BB0\u0BC1 \u0BB5\u0BB0\u0BC1\u0B9F\u0BAE\u0BCD", yy: "%d \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BCD" }, dayOfMonthOrdinalParse: /\d{1,2}\u0bb5\u0ba4\u0bc1/, ordinal: function ordinal(e) {
      return e + "\u0BB5\u0BA4\u0BC1";
    }, preparse: function preparse(e) {
      return e.replace(/[\u0be7\u0be8\u0be9\u0bea\u0beb\u0bec\u0bed\u0bee\u0bef\u0be6]/g, function (e) {
        return _a[e];
      });
    }, postformat: function postformat(e) {
      return e.replace(/\d/g, function (e) {
        return aa[e];
      });
    }, meridiemParse: /\u0baf\u0bbe\u0bae\u0bae\u0bcd|\u0bb5\u0bc8\u0b95\u0bb1\u0bc8|\u0b95\u0bbe\u0bb2\u0bc8|\u0ba8\u0ba3\u0bcd\u0baa\u0b95\u0bb2\u0bcd|\u0b8e\u0bb1\u0bcd\u0baa\u0bbe\u0b9f\u0bc1|\u0bae\u0bbe\u0bb2\u0bc8/, meridiem: function meridiem(e, a, _) {
      return e < 2 ? " \u0BAF\u0BBE\u0BAE\u0BAE\u0BCD" : e < 6 ? " \u0BB5\u0BC8\u0B95\u0BB1\u0BC8" : e < 10 ? " \u0B95\u0BBE\u0BB2\u0BC8" : e < 14 ? " \u0BA8\u0BA3\u0BCD\u0BAA\u0B95\u0BB2\u0BCD" : e < 18 ? " \u0B8E\u0BB1\u0BCD\u0BAA\u0BBE\u0B9F\u0BC1" : e < 22 ? " \u0BAE\u0BBE\u0BB2\u0BC8" : " \u0BAF\u0BBE\u0BAE\u0BAE\u0BCD";
    }, meridiemHour: function meridiemHour(e, a) {
      return 12 === e && (e = 0), "\u0BAF\u0BBE\u0BAE\u0BAE\u0BCD" === a ? e < 2 ? e : e + 12 : "\u0BB5\u0BC8\u0B95\u0BB1\u0BC8" === a || "\u0B95\u0BBE\u0BB2\u0BC8" === a ? e : "\u0BA8\u0BA3\u0BCD\u0BAA\u0B95\u0BB2\u0BCD" === a && e >= 10 ? e : e + 12;
    }, week: { dow: 0, doy: 6 } }), e.defineLocale("te", { months: "\u0C1C\u0C28\u0C35\u0C30\u0C3F_\u0C2B\u0C3F\u0C2C\u0C4D\u0C30\u0C35\u0C30\u0C3F_\u0C2E\u0C3E\u0C30\u0C4D\u0C1A\u0C3F_\u0C0F\u0C2A\u0C4D\u0C30\u0C3F\u0C32\u0C4D_\u0C2E\u0C47_\u0C1C\u0C42\u0C28\u0C4D_\u0C1C\u0C42\u0C32\u0C46\u0C56_\u0C06\u0C17\u0C38\u0C4D\u0C1F\u0C41_\u0C38\u0C46\u0C2A\u0C4D\u0C1F\u0C46\u0C02\u0C2C\u0C30\u0C4D_\u0C05\u0C15\u0C4D\u0C1F\u0C4B\u0C2C\u0C30\u0C4D_\u0C28\u0C35\u0C02\u0C2C\u0C30\u0C4D_\u0C21\u0C3F\u0C38\u0C46\u0C02\u0C2C\u0C30\u0C4D".split("_"), monthsShort: "\u0C1C\u0C28._\u0C2B\u0C3F\u0C2C\u0C4D\u0C30._\u0C2E\u0C3E\u0C30\u0C4D\u0C1A\u0C3F_\u0C0F\u0C2A\u0C4D\u0C30\u0C3F._\u0C2E\u0C47_\u0C1C\u0C42\u0C28\u0C4D_\u0C1C\u0C42\u0C32\u0C46\u0C56_\u0C06\u0C17._\u0C38\u0C46\u0C2A\u0C4D._\u0C05\u0C15\u0C4D\u0C1F\u0C4B._\u0C28\u0C35._\u0C21\u0C3F\u0C38\u0C46.".split("_"), monthsParseExact: !0, weekdays: "\u0C06\u0C26\u0C3F\u0C35\u0C3E\u0C30\u0C02_\u0C38\u0C4B\u0C2E\u0C35\u0C3E\u0C30\u0C02_\u0C2E\u0C02\u0C17\u0C33\u0C35\u0C3E\u0C30\u0C02_\u0C2C\u0C41\u0C27\u0C35\u0C3E\u0C30\u0C02_\u0C17\u0C41\u0C30\u0C41\u0C35\u0C3E\u0C30\u0C02_\u0C36\u0C41\u0C15\u0C4D\u0C30\u0C35\u0C3E\u0C30\u0C02_\u0C36\u0C28\u0C3F\u0C35\u0C3E\u0C30\u0C02".split("_"), weekdaysShort: "\u0C06\u0C26\u0C3F_\u0C38\u0C4B\u0C2E_\u0C2E\u0C02\u0C17\u0C33_\u0C2C\u0C41\u0C27_\u0C17\u0C41\u0C30\u0C41_\u0C36\u0C41\u0C15\u0C4D\u0C30_\u0C36\u0C28\u0C3F".split("_"), weekdaysMin: "\u0C06_\u0C38\u0C4B_\u0C2E\u0C02_\u0C2C\u0C41_\u0C17\u0C41_\u0C36\u0C41_\u0C36".split("_"), longDateFormat: { LT: "A h:mm", LTS: "A h:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm", LLLL: "dddd, D MMMM YYYY, A h:mm" }, calendar: { sameDay: "[\u0C28\u0C47\u0C21\u0C41] LT", nextDay: "[\u0C30\u0C47\u0C2A\u0C41] LT", nextWeek: "dddd, LT", lastDay: "[\u0C28\u0C3F\u0C28\u0C4D\u0C28] LT", lastWeek: "[\u0C17\u0C24] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s \u0C32\u0C4B", past: "%s \u0C15\u0C4D\u0C30\u0C3F\u0C24\u0C02", s: "\u0C15\u0C4A\u0C28\u0C4D\u0C28\u0C3F \u0C15\u0C4D\u0C37\u0C23\u0C3E\u0C32\u0C41", ss: "%d \u0C38\u0C46\u0C15\u0C28\u0C4D\u0C32\u0C41", m: "\u0C12\u0C15 \u0C28\u0C3F\u0C2E\u0C3F\u0C37\u0C02", mm: "%d \u0C28\u0C3F\u0C2E\u0C3F\u0C37\u0C3E\u0C32\u0C41", h: "\u0C12\u0C15 \u0C17\u0C02\u0C1F", hh: "%d \u0C17\u0C02\u0C1F\u0C32\u0C41", d: "\u0C12\u0C15 \u0C30\u0C4B\u0C1C\u0C41", dd: "%d \u0C30\u0C4B\u0C1C\u0C41\u0C32\u0C41", M: "\u0C12\u0C15 \u0C28\u0C46\u0C32", MM: "%d \u0C28\u0C46\u0C32\u0C32\u0C41", y: "\u0C12\u0C15 \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C02", yy: "%d \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C3E\u0C32\u0C41" }, dayOfMonthOrdinalParse: /\d{1,2}\u0c35/, ordinal: "%d\u0C35", meridiemParse: /\u0c30\u0c3e\u0c24\u0c4d\u0c30\u0c3f|\u0c09\u0c26\u0c2f\u0c02|\u0c2e\u0c27\u0c4d\u0c2f\u0c3e\u0c39\u0c4d\u0c28\u0c02|\u0c38\u0c3e\u0c2f\u0c02\u0c24\u0c4d\u0c30\u0c02/, meridiemHour: function meridiemHour(e, a) {
      return 12 === e && (e = 0), "\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F" === a ? e < 4 ? e : e + 12 : "\u0C09\u0C26\u0C2F\u0C02" === a ? e : "\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02" === a ? e >= 10 ? e : e + 12 : "\u0C38\u0C3E\u0C2F\u0C02\u0C24\u0C4D\u0C30\u0C02" === a ? e + 12 : void 0;
    }, meridiem: function meridiem(e, a, _) {
      return e < 4 ? "\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F" : e < 10 ? "\u0C09\u0C26\u0C2F\u0C02" : e < 17 ? "\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02" : e < 20 ? "\u0C38\u0C3E\u0C2F\u0C02\u0C24\u0C4D\u0C30\u0C02" : "\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F";
    }, week: { dow: 0, doy: 6 } }), e.defineLocale("tet", { months: "Janeiru_Fevereiru_Marsu_Abril_Maiu_Ju\xf1u_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"), monthsShort: "Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"), weekdays: "Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"), weekdaysShort: "Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"), weekdaysMin: "Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Ohin iha] LT", nextDay: "[Aban iha] LT", nextWeek: "dddd [iha] LT", lastDay: "[Horiseik iha] LT", lastWeek: "dddd [semana kotuk] [iha] LT", sameElse: "L" }, relativeTime: { future: "iha %s", past: "%s liuba", s: "minutu balun", ss: "minutu %d", m: "minutu ida", mm: "minutu %d", h: "oras ida", hh: "oras %d", d: "loron ida", dd: "loron %d", M: "fulan ida", MM: "fulan %d", y: "tinan ida", yy: "tinan %d" }, dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function ordinal(e) {
      var a = e % 10;return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === a ? "st" : 2 === a ? "nd" : 3 === a ? "rd" : "th");
    }, week: { dow: 1, doy: 4 } });var sa = { 0: "-\u0443\u043C", 1: "-\u0443\u043C", 2: "-\u044E\u043C", 3: "-\u044E\u043C", 4: "-\u0443\u043C", 5: "-\u0443\u043C", 6: "-\u0443\u043C", 7: "-\u0443\u043C", 8: "-\u0443\u043C", 9: "-\u0443\u043C", 10: "-\u0443\u043C", 12: "-\u0443\u043C", 13: "-\u0443\u043C", 20: "-\u0443\u043C", 30: "-\u044E\u043C", 40: "-\u0443\u043C", 50: "-\u0443\u043C", 60: "-\u0443\u043C", 70: "-\u0443\u043C", 80: "-\u0443\u043C", 90: "-\u0443\u043C", 100: "-\u0443\u043C" };e.defineLocale("tg", { months: "\u044F\u043D\u0432\u0430\u0440_\u0444\u0435\u0432\u0440\u0430\u043B_\u043C\u0430\u0440\u0442_\u0430\u043F\u0440\u0435\u043B_\u043C\u0430\u0439_\u0438\u044E\u043D_\u0438\u044E\u043B_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043D\u0442\u044F\u0431\u0440_\u043E\u043A\u0442\u044F\u0431\u0440_\u043D\u043E\u044F\u0431\u0440_\u0434\u0435\u043A\u0430\u0431\u0440".split("_"), monthsShort: "\u044F\u043D\u0432_\u0444\u0435\u0432_\u043C\u0430\u0440_\u0430\u043F\u0440_\u043C\u0430\u0439_\u0438\u044E\u043D_\u0438\u044E\u043B_\u0430\u0432\u0433_\u0441\u0435\u043D_\u043E\u043A\u0442_\u043D\u043E\u044F_\u0434\u0435\u043A".split("_"), weekdays: "\u044F\u043A\u0448\u0430\u043D\u0431\u0435_\u0434\u0443\u0448\u0430\u043D\u0431\u0435_\u0441\u0435\u0448\u0430\u043D\u0431\u0435_\u0447\u043E\u0440\u0448\u0430\u043D\u0431\u0435_\u043F\u0430\u043D\u04B7\u0448\u0430\u043D\u0431\u0435_\u04B7\u0443\u043C\u044A\u0430_\u0448\u0430\u043D\u0431\u0435".split("_"), weekdaysShort: "\u044F\u0448\u0431_\u0434\u0448\u0431_\u0441\u0448\u0431_\u0447\u0448\u0431_\u043F\u0448\u0431_\u04B7\u0443\u043C_\u0448\u043D\u0431".split("_"), weekdaysMin: "\u044F\u0448_\u0434\u0448_\u0441\u0448_\u0447\u0448_\u043F\u0448_\u04B7\u043C_\u0448\u0431".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[\u0418\u043C\u0440\u04EF\u0437 \u0441\u043E\u0430\u0442\u0438] LT", nextDay: "[\u041F\u0430\u0433\u043E\u04B3 \u0441\u043E\u0430\u0442\u0438] LT", lastDay: "[\u0414\u0438\u0440\u04EF\u0437 \u0441\u043E\u0430\u0442\u0438] LT", nextWeek: "dddd[\u0438] [\u04B3\u0430\u0444\u0442\u0430\u0438 \u043E\u044F\u043D\u0434\u0430 \u0441\u043E\u0430\u0442\u0438] LT", lastWeek: "dddd[\u0438] [\u04B3\u0430\u0444\u0442\u0430\u0438 \u0433\u0443\u0437\u0430\u0448\u0442\u0430 \u0441\u043E\u0430\u0442\u0438] LT", sameElse: "L" }, relativeTime: { future: "\u0431\u0430\u044A\u0434\u0438 %s", past: "%s \u043F\u0435\u0448", s: "\u044F\u043A\u0447\u0430\u043D\u0434 \u0441\u043E\u043D\u0438\u044F", m: "\u044F\u043A \u0434\u0430\u049B\u0438\u049B\u0430", mm: "%d \u0434\u0430\u049B\u0438\u049B\u0430", h: "\u044F\u043A \u0441\u043E\u0430\u0442", hh: "%d \u0441\u043E\u0430\u0442", d: "\u044F\u043A \u0440\u04EF\u0437", dd: "%d \u0440\u04EF\u0437", M: "\u044F\u043A \u043C\u043E\u04B3", MM: "%d \u043C\u043E\u04B3", y: "\u044F\u043A \u0441\u043E\u043B", yy: "%d \u0441\u043E\u043B" }, meridiemParse: /\u0448\u0430\u0431|\u0441\u0443\u0431\u04b3|\u0440\u04ef\u0437|\u0431\u0435\u0433\u043e\u04b3/, meridiemHour: function meridiemHour(e, a) {
      return 12 === e && (e = 0), "\u0448\u0430\u0431" === a ? e < 4 ? e : e + 12 : "\u0441\u0443\u0431\u04B3" === a ? e : "\u0440\u04EF\u0437" === a ? e >= 11 ? e : e + 12 : "\u0431\u0435\u0433\u043E\u04B3" === a ? e + 12 : void 0;
    }, meridiem: function meridiem(e, a, _) {
      return e < 4 ? "\u0448\u0430\u0431" : e < 11 ? "\u0441\u0443\u0431\u04B3" : e < 16 ? "\u0440\u04EF\u0437" : e < 19 ? "\u0431\u0435\u0433\u043E\u04B3" : "\u0448\u0430\u0431";
    }, dayOfMonthOrdinalParse: /\d{1,2}-(\u0443\u043c|\u044e\u043c)/, ordinal: function ordinal(e) {
      return e + (sa[e] || sa[e % 10] || sa[e >= 100 ? 100 : null]);
    }, week: { dow: 1, doy: 7 } }), e.defineLocale("th", { months: "\u0E21\u0E01\u0E23\u0E32\u0E04\u0E21_\u0E01\u0E38\u0E21\u0E20\u0E32\u0E1E\u0E31\u0E19\u0E18\u0E4C_\u0E21\u0E35\u0E19\u0E32\u0E04\u0E21_\u0E40\u0E21\u0E29\u0E32\u0E22\u0E19_\u0E1E\u0E24\u0E29\u0E20\u0E32\u0E04\u0E21_\u0E21\u0E34\u0E16\u0E38\u0E19\u0E32\u0E22\u0E19_\u0E01\u0E23\u0E01\u0E0E\u0E32\u0E04\u0E21_\u0E2A\u0E34\u0E07\u0E2B\u0E32\u0E04\u0E21_\u0E01\u0E31\u0E19\u0E22\u0E32\u0E22\u0E19_\u0E15\u0E38\u0E25\u0E32\u0E04\u0E21_\u0E1E\u0E24\u0E28\u0E08\u0E34\u0E01\u0E32\u0E22\u0E19_\u0E18\u0E31\u0E19\u0E27\u0E32\u0E04\u0E21".split("_"), monthsShort: "\u0E21.\u0E04._\u0E01.\u0E1E._\u0E21\u0E35.\u0E04._\u0E40\u0E21.\u0E22._\u0E1E.\u0E04._\u0E21\u0E34.\u0E22._\u0E01.\u0E04._\u0E2A.\u0E04._\u0E01.\u0E22._\u0E15.\u0E04._\u0E1E.\u0E22._\u0E18.\u0E04.".split("_"), monthsParseExact: !0, weekdays: "\u0E2D\u0E32\u0E17\u0E34\u0E15\u0E22\u0E4C_\u0E08\u0E31\u0E19\u0E17\u0E23\u0E4C_\u0E2D\u0E31\u0E07\u0E04\u0E32\u0E23_\u0E1E\u0E38\u0E18_\u0E1E\u0E24\u0E2B\u0E31\u0E2A\u0E1A\u0E14\u0E35_\u0E28\u0E38\u0E01\u0E23\u0E4C_\u0E40\u0E2A\u0E32\u0E23\u0E4C".split("_"), weekdaysShort: "\u0E2D\u0E32\u0E17\u0E34\u0E15\u0E22\u0E4C_\u0E08\u0E31\u0E19\u0E17\u0E23\u0E4C_\u0E2D\u0E31\u0E07\u0E04\u0E32\u0E23_\u0E1E\u0E38\u0E18_\u0E1E\u0E24\u0E2B\u0E31\u0E2A_\u0E28\u0E38\u0E01\u0E23\u0E4C_\u0E40\u0E2A\u0E32\u0E23\u0E4C".split("_"), weekdaysMin: "\u0E2D\u0E32._\u0E08._\u0E2D._\u0E1E._\u0E1E\u0E24._\u0E28._\u0E2A.".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY \u0E40\u0E27\u0E25\u0E32 H:mm", LLLL: "\u0E27\u0E31\u0E19dddd\u0E17\u0E35\u0E48 D MMMM YYYY \u0E40\u0E27\u0E25\u0E32 H:mm" }, meridiemParse: /\u0e01\u0e48\u0e2d\u0e19\u0e40\u0e17\u0e35\u0e48\u0e22\u0e07|\u0e2b\u0e25\u0e31\u0e07\u0e40\u0e17\u0e35\u0e48\u0e22\u0e07/, isPM: function isPM(e) {
      return "\u0E2B\u0E25\u0E31\u0E07\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07" === e;
    }, meridiem: function meridiem(e, a, _) {
      return e < 12 ? "\u0E01\u0E48\u0E2D\u0E19\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07" : "\u0E2B\u0E25\u0E31\u0E07\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07";
    }, calendar: { sameDay: "[\u0E27\u0E31\u0E19\u0E19\u0E35\u0E49 \u0E40\u0E27\u0E25\u0E32] LT", nextDay: "[\u0E1E\u0E23\u0E38\u0E48\u0E07\u0E19\u0E35\u0E49 \u0E40\u0E27\u0E25\u0E32] LT", nextWeek: "dddd[\u0E2B\u0E19\u0E49\u0E32 \u0E40\u0E27\u0E25\u0E32] LT", lastDay: "[\u0E40\u0E21\u0E37\u0E48\u0E2D\u0E27\u0E32\u0E19\u0E19\u0E35\u0E49 \u0E40\u0E27\u0E25\u0E32] LT", lastWeek: "[\u0E27\u0E31\u0E19]dddd[\u0E17\u0E35\u0E48\u0E41\u0E25\u0E49\u0E27 \u0E40\u0E27\u0E25\u0E32] LT", sameElse: "L" }, relativeTime: { future: "\u0E2D\u0E35\u0E01 %s", past: "%s\u0E17\u0E35\u0E48\u0E41\u0E25\u0E49\u0E27", s: "\u0E44\u0E21\u0E48\u0E01\u0E35\u0E48\u0E27\u0E34\u0E19\u0E32\u0E17\u0E35", ss: "%d \u0E27\u0E34\u0E19\u0E32\u0E17\u0E35", m: "1 \u0E19\u0E32\u0E17\u0E35", mm: "%d \u0E19\u0E32\u0E17\u0E35", h: "1 \u0E0A\u0E31\u0E48\u0E27\u0E42\u0E21\u0E07", hh: "%d \u0E0A\u0E31\u0E48\u0E27\u0E42\u0E21\u0E07", d: "1 \u0E27\u0E31\u0E19", dd: "%d \u0E27\u0E31\u0E19", M: "1 \u0E40\u0E14\u0E37\u0E2D\u0E19", MM: "%d \u0E40\u0E14\u0E37\u0E2D\u0E19", y: "1 \u0E1B\u0E35", yy: "%d \u0E1B\u0E35" } }), e.defineLocale("tl-ph", { months: "Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"), monthsShort: "Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"), weekdays: "Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"), weekdaysShort: "Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"), weekdaysMin: "Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "MM/D/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY HH:mm", LLLL: "dddd, MMMM DD, YYYY HH:mm" }, calendar: { sameDay: "LT [ngayong araw]", nextDay: "[Bukas ng] LT", nextWeek: "LT [sa susunod na] dddd", lastDay: "LT [kahapon]", lastWeek: "LT [noong nakaraang] dddd", sameElse: "L" }, relativeTime: { future: "sa loob ng %s", past: "%s ang nakalipas", s: "ilang segundo", ss: "%d segundo", m: "isang minuto", mm: "%d minuto", h: "isang oras", hh: "%d oras", d: "isang araw", dd: "%d araw", M: "isang buwan", MM: "%d buwan", y: "isang taon", yy: "%d taon" }, dayOfMonthOrdinalParse: /\d{1,2}/, ordinal: function ordinal(e) {
      return e;
    }, week: { dow: 1, doy: 4 } });var da = "pagh_wa\u2019_cha\u2019_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function ta(e, a, _, s) {
    var d = function (e) {
      var a = Math.floor(e % 1e3 / 100),
          _ = Math.floor(e % 100 / 10),
          s = e % 10,
          d = "";a > 0 && (d += da[a] + "vatlh");_ > 0 && (d += ("" !== d ? " " : "") + da[_] + "maH");s > 0 && (d += ("" !== d ? " " : "") + da[s]);return "" === d ? "pagh" : d;
    }(e);switch (_) {case "ss":
        return d + " lup";case "mm":
        return d + " tup";case "hh":
        return d + " rep";case "dd":
        return d + " jaj";case "MM":
        return d + " jar";case "yy":
        return d + " DIS";}
  }e.defineLocale("tlh", { months: "tera\u2019 jar wa\u2019_tera\u2019 jar cha\u2019_tera\u2019 jar wej_tera\u2019 jar loS_tera\u2019 jar vagh_tera\u2019 jar jav_tera\u2019 jar Soch_tera\u2019 jar chorgh_tera\u2019 jar Hut_tera\u2019 jar wa\u2019maH_tera\u2019 jar wa\u2019maH wa\u2019_tera\u2019 jar wa\u2019maH cha\u2019".split("_"), monthsShort: "jar wa\u2019_jar cha\u2019_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa\u2019maH_jar wa\u2019maH wa\u2019_jar wa\u2019maH cha\u2019".split("_"), monthsParseExact: !0, weekdays: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"), weekdaysShort: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"), weekdaysMin: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[DaHjaj] LT", nextDay: "[wa\u2019leS] LT", nextWeek: "LLL", lastDay: "[wa\u2019Hu\u2019] LT", lastWeek: "LLL", sameElse: "L" }, relativeTime: { future: function future(e) {
        var a = e;return a = -1 !== e.indexOf("jaj") ? a.slice(0, -3) + "leS" : -1 !== e.indexOf("jar") ? a.slice(0, -3) + "waQ" : -1 !== e.indexOf("DIS") ? a.slice(0, -3) + "nem" : a + " pIq";
      }, past: function past(e) {
        var a = e;return a = -1 !== e.indexOf("jaj") ? a.slice(0, -3) + "Hu\u2019" : -1 !== e.indexOf("jar") ? a.slice(0, -3) + "wen" : -1 !== e.indexOf("DIS") ? a.slice(0, -3) + "ben" : a + " ret";
      }, s: "puS lup", ss: ta, m: "wa\u2019 tup", mm: ta, h: "wa\u2019 rep", hh: ta, d: "wa\u2019 jaj", dd: ta, M: "wa\u2019 jar", MM: ta, y: "wa\u2019 DIS", yy: ta }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } });var na = { 1: "'inci", 5: "'inci", 8: "'inci", 70: "'inci", 80: "'inci", 2: "'nci", 7: "'nci", 20: "'nci", 50: "'nci", 3: "'\xfcnc\xfc", 4: "'\xfcnc\xfc", 100: "'\xfcnc\xfc", 6: "'nc\u0131", 9: "'uncu", 10: "'uncu", 30: "'uncu", 60: "'\u0131nc\u0131", 90: "'\u0131nc\u0131" };function ra(e, a, _, s) {
    var d = { s: ["viensas secunds", "'iensas secunds"], ss: [e + " secunds", e + " secunds"], m: ["'n m\xedut", "'iens m\xedut"], mm: [e + " m\xeduts", e + " m\xeduts"], h: ["'n \xfeora", "'iensa \xfeora"], hh: [e + " \xfeoras", e + " \xfeoras"], d: ["'n ziua", "'iensa ziua"], dd: [e + " ziuas", e + " ziuas"], M: ["'n mes", "'iens mes"], MM: [e + " mesen", e + " mesen"], y: ["'n ar", "'iens ar"], yy: [e + " ars", e + " ars"] };return s ? d[_][0] : a ? d[_][0] : d[_][1];
  }function ia(e, a, _) {
    var s, d;return "m" === _ ? a ? "\u0445\u0432\u0438\u043B\u0438\u043D\u0430" : "\u0445\u0432\u0438\u043B\u0438\u043D\u0443" : "h" === _ ? a ? "\u0433\u043E\u0434\u0438\u043D\u0430" : "\u0433\u043E\u0434\u0438\u043D\u0443" : e + " " + (s = +e, d = { ss: a ? "\u0441\u0435\u043A\u0443\u043D\u0434\u0430_\u0441\u0435\u043A\u0443\u043D\u0434\u0438_\u0441\u0435\u043A\u0443\u043D\u0434" : "\u0441\u0435\u043A\u0443\u043D\u0434\u0443_\u0441\u0435\u043A\u0443\u043D\u0434\u0438_\u0441\u0435\u043A\u0443\u043D\u0434", mm: a ? "\u0445\u0432\u0438\u043B\u0438\u043D\u0430_\u0445\u0432\u0438\u043B\u0438\u043D\u0438_\u0445\u0432\u0438\u043B\u0438\u043D" : "\u0445\u0432\u0438\u043B\u0438\u043D\u0443_\u0445\u0432\u0438\u043B\u0438\u043D\u0438_\u0445\u0432\u0438\u043B\u0438\u043D", hh: a ? "\u0433\u043E\u0434\u0438\u043D\u0430_\u0433\u043E\u0434\u0438\u043D\u0438_\u0433\u043E\u0434\u0438\u043D" : "\u0433\u043E\u0434\u0438\u043D\u0443_\u0433\u043E\u0434\u0438\u043D\u0438_\u0433\u043E\u0434\u0438\u043D", dd: "\u0434\u0435\u043D\u044C_\u0434\u043D\u0456_\u0434\u043D\u0456\u0432", MM: "\u043C\u0456\u0441\u044F\u0446\u044C_\u043C\u0456\u0441\u044F\u0446\u0456_\u043C\u0456\u0441\u044F\u0446\u0456\u0432", yy: "\u0440\u0456\u043A_\u0440\u043E\u043A\u0438_\u0440\u043E\u043A\u0456\u0432" }[_].split("_"), s % 10 == 1 && s % 100 != 11 ? d[0] : s % 10 >= 2 && s % 10 <= 4 && (s % 100 < 10 || s % 100 >= 20) ? d[1] : d[2]);
  }function ma(e) {
    return function () {
      return e + "\u043E" + (11 === this.hours() ? "\u0431" : "") + "] LT";
    };
  }e.defineLocale("tr", { months: "Ocak_\u015Eubat_Mart_Nisan_May\u0131s_Haziran_Temmuz_A\u011Fustos_Eyl\xFCl_Ekim_Kas\u0131m_Aral\u0131k".split("_"), monthsShort: "Oca_\u015Eub_Mar_Nis_May_Haz_Tem_A\u011Fu_Eyl_Eki_Kas_Ara".split("_"), weekdays: "Pazar_Pazartesi_Sal\u0131_\xC7ar\u015Famba_Per\u015Fembe_Cuma_Cumartesi".split("_"), weekdaysShort: "Paz_Pts_Sal_\xc7ar_Per_Cum_Cts".split("_"), weekdaysMin: "Pz_Pt_Sa_\xc7a_Pe_Cu_Ct".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[bug\xfcn saat] LT", nextDay: "[yar\u0131n saat] LT", nextWeek: "[gelecek] dddd [saat] LT", lastDay: "[d\xfcn] LT", lastWeek: "[ge\xe7en] dddd [saat] LT", sameElse: "L" }, relativeTime: { future: "%s sonra", past: "%s \xf6nce", s: "birka\xe7 saniye", ss: "%d saniye", m: "bir dakika", mm: "%d dakika", h: "bir saat", hh: "%d saat", d: "bir g\xfcn", dd: "%d g\xfcn", M: "bir ay", MM: "%d ay", y: "bir y\u0131l", yy: "%d y\u0131l" }, ordinal: function ordinal(e, a) {
      switch (a) {case "d":case "D":case "Do":case "DD":
          return e;default:
          if (0 === e) return e + "'\u0131nc\u0131";var _ = e % 10;return e + (na[_] || na[e % 100 - _] || na[e >= 100 ? 100 : null]);}
    }, week: { dow: 1, doy: 7 } }), e.defineLocale("tzl", { months: "Januar_Fevraglh_Mar\xe7_Avr\xefu_Mai_G\xfcn_Julia_Guscht_Setemvar_Listop\xe4ts_Noemvar_Zecemvar".split("_"), monthsShort: "Jan_Fev_Mar_Avr_Mai_G\xfcn_Jul_Gus_Set_Lis_Noe_Zec".split("_"), weekdays: "S\xfaladi_L\xfane\xe7i_Maitzi_M\xe1rcuri_Xh\xfaadi_Vi\xe9ner\xe7i_S\xe1turi".split("_"), weekdaysShort: "S\xfal_L\xfan_Mai_M\xe1r_Xh\xfa_Vi\xe9_S\xe1t".split("_"), weekdaysMin: "S\xfa_L\xfa_Ma_M\xe1_Xh_Vi_S\xe1".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD.MM.YYYY", LL: "D. MMMM [dallas] YYYY", LLL: "D. MMMM [dallas] YYYY HH.mm", LLLL: "dddd, [li] D. MMMM [dallas] YYYY HH.mm" }, meridiemParse: /d\'o|d\'a/i, isPM: function isPM(e) {
      return "d'o" === e.toLowerCase();
    }, meridiem: function meridiem(e, a, _) {
      return e > 11 ? _ ? "d'o" : "D'O" : _ ? "d'a" : "D'A";
    }, calendar: { sameDay: "[oxhi \xe0] LT", nextDay: "[dem\xe0 \xe0] LT", nextWeek: "dddd [\xe0] LT", lastDay: "[ieiri \xe0] LT", lastWeek: "[s\xfcr el] dddd [lasteu \xe0] LT", sameElse: "L" }, relativeTime: { future: "osprei %s", past: "ja%s", s: ra, ss: ra, m: ra, mm: ra, h: ra, hh: ra, d: ra, dd: ra, M: ra, MM: ra, y: ra, yy: ra }, dayOfMonthOrdinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1, doy: 4 } }), e.defineLocale("tzm-latn", { months: "innayr_br\u02E4ayr\u02E4_mar\u02E4s\u02E4_ibrir_mayyw_ywnyw_ywlywz_\u0263w\u0161t_\u0161wtanbir_kt\u02E4wbr\u02E4_nwwanbir_dwjnbir".split("_"), monthsShort: "innayr_br\u02E4ayr\u02E4_mar\u02E4s\u02E4_ibrir_mayyw_ywnyw_ywlywz_\u0263w\u0161t_\u0161wtanbir_kt\u02E4wbr\u02E4_nwwanbir_dwjnbir".split("_"), weekdays: "asamas_aynas_asinas_akras_akwas_asimwas_asi\u1E0Dyas".split("_"), weekdaysShort: "asamas_aynas_asinas_akras_akwas_asimwas_asi\u1E0Dyas".split("_"), weekdaysMin: "asamas_aynas_asinas_akras_akwas_asimwas_asi\u1E0Dyas".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[asdkh g] LT", nextDay: "[aska g] LT", nextWeek: "dddd [g] LT", lastDay: "[assant g] LT", lastWeek: "dddd [g] LT", sameElse: "L" }, relativeTime: { future: "dadkh s yan %s", past: "yan %s", s: "imik", ss: "%d imik", m: "minu\u1E0D", mm: "%d minu\u1E0D", h: "sa\u025Ba", hh: "%d tassa\u025Bin", d: "ass", dd: "%d ossan", M: "ayowr", MM: "%d iyyirn", y: "asgas", yy: "%d isgasn" }, week: { dow: 6, doy: 12 } }), e.defineLocale("tzm", { months: "\u2D49\u2D4F\u2D4F\u2D30\u2D62\u2D54_\u2D31\u2D55\u2D30\u2D62\u2D55_\u2D4E\u2D30\u2D55\u2D5A_\u2D49\u2D31\u2D54\u2D49\u2D54_\u2D4E\u2D30\u2D62\u2D62\u2D53_\u2D62\u2D53\u2D4F\u2D62\u2D53_\u2D62\u2D53\u2D4D\u2D62\u2D53\u2D63_\u2D56\u2D53\u2D5B\u2D5C_\u2D5B\u2D53\u2D5C\u2D30\u2D4F\u2D31\u2D49\u2D54_\u2D3D\u2D5F\u2D53\u2D31\u2D55_\u2D4F\u2D53\u2D61\u2D30\u2D4F\u2D31\u2D49\u2D54_\u2D37\u2D53\u2D4A\u2D4F\u2D31\u2D49\u2D54".split("_"), monthsShort: "\u2D49\u2D4F\u2D4F\u2D30\u2D62\u2D54_\u2D31\u2D55\u2D30\u2D62\u2D55_\u2D4E\u2D30\u2D55\u2D5A_\u2D49\u2D31\u2D54\u2D49\u2D54_\u2D4E\u2D30\u2D62\u2D62\u2D53_\u2D62\u2D53\u2D4F\u2D62\u2D53_\u2D62\u2D53\u2D4D\u2D62\u2D53\u2D63_\u2D56\u2D53\u2D5B\u2D5C_\u2D5B\u2D53\u2D5C\u2D30\u2D4F\u2D31\u2D49\u2D54_\u2D3D\u2D5F\u2D53\u2D31\u2D55_\u2D4F\u2D53\u2D61\u2D30\u2D4F\u2D31\u2D49\u2D54_\u2D37\u2D53\u2D4A\u2D4F\u2D31\u2D49\u2D54".split("_"), weekdays: "\u2D30\u2D59\u2D30\u2D4E\u2D30\u2D59_\u2D30\u2D62\u2D4F\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D4F\u2D30\u2D59_\u2D30\u2D3D\u2D54\u2D30\u2D59_\u2D30\u2D3D\u2D61\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D4E\u2D61\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D39\u2D62\u2D30\u2D59".split("_"), weekdaysShort: "\u2D30\u2D59\u2D30\u2D4E\u2D30\u2D59_\u2D30\u2D62\u2D4F\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D4F\u2D30\u2D59_\u2D30\u2D3D\u2D54\u2D30\u2D59_\u2D30\u2D3D\u2D61\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D4E\u2D61\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D39\u2D62\u2D30\u2D59".split("_"), weekdaysMin: "\u2D30\u2D59\u2D30\u2D4E\u2D30\u2D59_\u2D30\u2D62\u2D4F\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D4F\u2D30\u2D59_\u2D30\u2D3D\u2D54\u2D30\u2D59_\u2D30\u2D3D\u2D61\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D4E\u2D61\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D39\u2D62\u2D30\u2D59".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[\u2D30\u2D59\u2D37\u2D45 \u2D34] LT", nextDay: "[\u2D30\u2D59\u2D3D\u2D30 \u2D34] LT", nextWeek: "dddd [\u2D34] LT", lastDay: "[\u2D30\u2D5A\u2D30\u2D4F\u2D5C \u2D34] LT", lastWeek: "dddd [\u2D34] LT", sameElse: "L" }, relativeTime: { future: "\u2D37\u2D30\u2D37\u2D45 \u2D59 \u2D62\u2D30\u2D4F %s", past: "\u2D62\u2D30\u2D4F %s", s: "\u2D49\u2D4E\u2D49\u2D3D", ss: "%d \u2D49\u2D4E\u2D49\u2D3D", m: "\u2D4E\u2D49\u2D4F\u2D53\u2D3A", mm: "%d \u2D4E\u2D49\u2D4F\u2D53\u2D3A", h: "\u2D59\u2D30\u2D44\u2D30", hh: "%d \u2D5C\u2D30\u2D59\u2D59\u2D30\u2D44\u2D49\u2D4F", d: "\u2D30\u2D59\u2D59", dd: "%d o\u2D59\u2D59\u2D30\u2D4F", M: "\u2D30\u2D62o\u2D53\u2D54", MM: "%d \u2D49\u2D62\u2D62\u2D49\u2D54\u2D4F", y: "\u2D30\u2D59\u2D33\u2D30\u2D59", yy: "%d \u2D49\u2D59\u2D33\u2D30\u2D59\u2D4F" }, week: { dow: 6, doy: 12 } }), e.defineLocale("ug-cn", { months: "\u064A\u0627\u0646\u06CB\u0627\u0631_\u0641\u06D0\u06CB\u0631\u0627\u0644_\u0645\u0627\u0631\u062A_\u0626\u0627\u067E\u0631\u06D0\u0644_\u0645\u0627\u064A_\u0626\u0649\u064A\u06C7\u0646_\u0626\u0649\u064A\u06C7\u0644_\u0626\u0627\u06CB\u063A\u06C7\u0633\u062A_\u0633\u06D0\u0646\u062A\u06D5\u0628\u0649\u0631_\u0626\u06C6\u0643\u062A\u06D5\u0628\u0649\u0631_\u0646\u0648\u064A\u0627\u0628\u0649\u0631_\u062F\u06D0\u0643\u0627\u0628\u0649\u0631".split("_"), monthsShort: "\u064A\u0627\u0646\u06CB\u0627\u0631_\u0641\u06D0\u06CB\u0631\u0627\u0644_\u0645\u0627\u0631\u062A_\u0626\u0627\u067E\u0631\u06D0\u0644_\u0645\u0627\u064A_\u0626\u0649\u064A\u06C7\u0646_\u0626\u0649\u064A\u06C7\u0644_\u0626\u0627\u06CB\u063A\u06C7\u0633\u062A_\u0633\u06D0\u0646\u062A\u06D5\u0628\u0649\u0631_\u0626\u06C6\u0643\u062A\u06D5\u0628\u0649\u0631_\u0646\u0648\u064A\u0627\u0628\u0649\u0631_\u062F\u06D0\u0643\u0627\u0628\u0649\u0631".split("_"), weekdays: "\u064A\u06D5\u0643\u0634\u06D5\u0646\u0628\u06D5_\u062F\u06C8\u0634\u06D5\u0646\u0628\u06D5_\u0633\u06D5\u064A\u0634\u06D5\u0646\u0628\u06D5_\u0686\u0627\u0631\u0634\u06D5\u0646\u0628\u06D5_\u067E\u06D5\u064A\u0634\u06D5\u0646\u0628\u06D5_\u062C\u06C8\u0645\u06D5_\u0634\u06D5\u0646\u0628\u06D5".split("_"), weekdaysShort: "\u064A\u06D5_\u062F\u06C8_\u0633\u06D5_\u0686\u0627_\u067E\u06D5_\u062C\u06C8_\u0634\u06D5".split("_"), weekdaysMin: "\u064A\u06D5_\u062F\u06C8_\u0633\u06D5_\u0686\u0627_\u067E\u06D5_\u062C\u06C8_\u0634\u06D5".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "YYYY-\u064A\u0649\u0644\u0649M-\u0626\u0627\u064A\u0646\u0649\u06ADD-\u0643\u06C8\u0646\u0649", LLL: "YYYY-\u064A\u0649\u0644\u0649M-\u0626\u0627\u064A\u0646\u0649\u06ADD-\u0643\u06C8\u0646\u0649\u060C HH:mm", LLLL: "dddd\u060C YYYY-\u064A\u0649\u0644\u0649M-\u0626\u0627\u064A\u0646\u0649\u06ADD-\u0643\u06C8\u0646\u0649\u060C HH:mm" }, meridiemParse: /\u064a\u06d0\u0631\u0649\u0645 \u0643\u06d0\u0686\u06d5|\u0633\u06d5\u06be\u06d5\u0631|\u0686\u06c8\u0634\u062a\u0649\u0646 \u0628\u06c7\u0631\u06c7\u0646|\u0686\u06c8\u0634|\u0686\u06c8\u0634\u062a\u0649\u0646 \u0643\u06d0\u064a\u0649\u0646|\u0643\u06d5\u0686/, meridiemHour: function meridiemHour(e, a) {
      return 12 === e && (e = 0), "\u064A\u06D0\u0631\u0649\u0645 \u0643\u06D0\u0686\u06D5" === a || "\u0633\u06D5\u06BE\u06D5\u0631" === a || "\u0686\u06C8\u0634\u062A\u0649\u0646 \u0628\u06C7\u0631\u06C7\u0646" === a ? e : "\u0686\u06C8\u0634\u062A\u0649\u0646 \u0643\u06D0\u064A\u0649\u0646" === a || "\u0643\u06D5\u0686" === a ? e + 12 : e >= 11 ? e : e + 12;
    }, meridiem: function meridiem(e, a, _) {
      var s = 100 * e + a;return s < 600 ? "\u064A\u06D0\u0631\u0649\u0645 \u0643\u06D0\u0686\u06D5" : s < 900 ? "\u0633\u06D5\u06BE\u06D5\u0631" : s < 1130 ? "\u0686\u06C8\u0634\u062A\u0649\u0646 \u0628\u06C7\u0631\u06C7\u0646" : s < 1230 ? "\u0686\u06C8\u0634" : s < 1800 ? "\u0686\u06C8\u0634\u062A\u0649\u0646 \u0643\u06D0\u064A\u0649\u0646" : "\u0643\u06D5\u0686";
    }, calendar: { sameDay: "[\u0628\u06C8\u06AF\u06C8\u0646 \u0633\u0627\u0626\u06D5\u062A] LT", nextDay: "[\u0626\u06D5\u062A\u06D5 \u0633\u0627\u0626\u06D5\u062A] LT", nextWeek: "[\u0643\u06D0\u0644\u06D5\u0631\u0643\u0649] dddd [\u0633\u0627\u0626\u06D5\u062A] LT", lastDay: "[\u062A\u06C6\u0646\u06C8\u06AF\u06C8\u0646] LT", lastWeek: "[\u0626\u0627\u0644\u062F\u0649\u0646\u0642\u0649] dddd [\u0633\u0627\u0626\u06D5\u062A] LT", sameElse: "L" }, relativeTime: { future: "%s \u0643\u06D0\u064A\u0649\u0646", past: "%s \u0628\u06C7\u0631\u06C7\u0646", s: "\u0646\u06D5\u0686\u0686\u06D5 \u0633\u06D0\u0643\u0648\u0646\u062A", ss: "%d \u0633\u06D0\u0643\u0648\u0646\u062A", m: "\u0628\u0649\u0631 \u0645\u0649\u0646\u06C7\u062A", mm: "%d \u0645\u0649\u0646\u06C7\u062A", h: "\u0628\u0649\u0631 \u0633\u0627\u0626\u06D5\u062A", hh: "%d \u0633\u0627\u0626\u06D5\u062A", d: "\u0628\u0649\u0631 \u0643\u06C8\u0646", dd: "%d \u0643\u06C8\u0646", M: "\u0628\u0649\u0631 \u0626\u0627\u064A", MM: "%d \u0626\u0627\u064A", y: "\u0628\u0649\u0631 \u064A\u0649\u0644", yy: "%d \u064A\u0649\u0644" }, dayOfMonthOrdinalParse: /\d{1,2}(-\u0643\u06c8\u0646\u0649|-\u0626\u0627\u064a|-\u06be\u06d5\u067e\u062a\u06d5)/, ordinal: function ordinal(e, a) {
      switch (a) {case "d":case "D":case "DDD":
          return e + "-\u0643\u06C8\u0646\u0649";case "w":case "W":
          return e + "-\u06BE\u06D5\u067E\u062A\u06D5";default:
          return e;}
    }, preparse: function preparse(e) {
      return e.replace(/\u060c/g, ",");
    }, postformat: function postformat(e) {
      return e.replace(/,/g, "\u060C");
    }, week: { dow: 1, doy: 7 } }), e.defineLocale("uk", { months: { format: "\u0441\u0456\u0447\u043D\u044F_\u043B\u044E\u0442\u043E\u0433\u043E_\u0431\u0435\u0440\u0435\u0437\u043D\u044F_\u043A\u0432\u0456\u0442\u043D\u044F_\u0442\u0440\u0430\u0432\u043D\u044F_\u0447\u0435\u0440\u0432\u043D\u044F_\u043B\u0438\u043F\u043D\u044F_\u0441\u0435\u0440\u043F\u043D\u044F_\u0432\u0435\u0440\u0435\u0441\u043D\u044F_\u0436\u043E\u0432\u0442\u043D\u044F_\u043B\u0438\u0441\u0442\u043E\u043F\u0430\u0434\u0430_\u0433\u0440\u0443\u0434\u043D\u044F".split("_"), standalone: "\u0441\u0456\u0447\u0435\u043D\u044C_\u043B\u044E\u0442\u0438\u0439_\u0431\u0435\u0440\u0435\u0437\u0435\u043D\u044C_\u043A\u0432\u0456\u0442\u0435\u043D\u044C_\u0442\u0440\u0430\u0432\u0435\u043D\u044C_\u0447\u0435\u0440\u0432\u0435\u043D\u044C_\u043B\u0438\u043F\u0435\u043D\u044C_\u0441\u0435\u0440\u043F\u0435\u043D\u044C_\u0432\u0435\u0440\u0435\u0441\u0435\u043D\u044C_\u0436\u043E\u0432\u0442\u0435\u043D\u044C_\u043B\u0438\u0441\u0442\u043E\u043F\u0430\u0434_\u0433\u0440\u0443\u0434\u0435\u043D\u044C".split("_") }, monthsShort: "\u0441\u0456\u0447_\u043B\u044E\u0442_\u0431\u0435\u0440_\u043A\u0432\u0456\u0442_\u0442\u0440\u0430\u0432_\u0447\u0435\u0440\u0432_\u043B\u0438\u043F_\u0441\u0435\u0440\u043F_\u0432\u0435\u0440_\u0436\u043E\u0432\u0442_\u043B\u0438\u0441\u0442_\u0433\u0440\u0443\u0434".split("_"), weekdays: function weekdays(e, a) {
      var _ = { nominative: "\u043D\u0435\u0434\u0456\u043B\u044F_\u043F\u043E\u043D\u0435\u0434\u0456\u043B\u043E\u043A_\u0432\u0456\u0432\u0442\u043E\u0440\u043E\u043A_\u0441\u0435\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0435\u0440_\u043F\u2019\u044F\u0442\u043D\u0438\u0446\u044F_\u0441\u0443\u0431\u043E\u0442\u0430".split("_"), accusative: "\u043D\u0435\u0434\u0456\u043B\u044E_\u043F\u043E\u043D\u0435\u0434\u0456\u043B\u043E\u043A_\u0432\u0456\u0432\u0442\u043E\u0440\u043E\u043A_\u0441\u0435\u0440\u0435\u0434\u0443_\u0447\u0435\u0442\u0432\u0435\u0440_\u043F\u2019\u044F\u0442\u043D\u0438\u0446\u044E_\u0441\u0443\u0431\u043E\u0442\u0443".split("_"), genitive: "\u043D\u0435\u0434\u0456\u043B\u0456_\u043F\u043E\u043D\u0435\u0434\u0456\u043B\u043A\u0430_\u0432\u0456\u0432\u0442\u043E\u0440\u043A\u0430_\u0441\u0435\u0440\u0435\u0434\u0438_\u0447\u0435\u0442\u0432\u0435\u0440\u0433\u0430_\u043F\u2019\u044F\u0442\u043D\u0438\u0446\u0456_\u0441\u0443\u0431\u043E\u0442\u0438".split("_") };return e ? _[/(\[[\u0412\u0432\u0423\u0443]\]) ?dddd/.test(a) ? "accusative" : /\[?(?:\u043c\u0438\u043d\u0443\u043b\u043e\u0457|\u043d\u0430\u0441\u0442\u0443\u043f\u043d\u043e\u0457)? ?\] ?dddd/.test(a) ? "genitive" : "nominative"][e.day()] : _.nominative;
    }, weekdaysShort: "\u043D\u0434_\u043F\u043D_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043F\u0442_\u0441\u0431".split("_"), weekdaysMin: "\u043D\u0434_\u043F\u043D_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043F\u0442_\u0441\u0431".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY \u0440.", LLL: "D MMMM YYYY \u0440., HH:mm", LLLL: "dddd, D MMMM YYYY \u0440., HH:mm" }, calendar: { sameDay: ma("[\u0421\u044C\u043E\u0433\u043E\u0434\u043D\u0456 "), nextDay: ma("[\u0417\u0430\u0432\u0442\u0440\u0430 "), lastDay: ma("[\u0412\u0447\u043E\u0440\u0430 "), nextWeek: ma("[\u0423] dddd ["), lastWeek: function lastWeek() {
        switch (this.day()) {case 0:case 3:case 5:case 6:
            return ma("[\u041C\u0438\u043D\u0443\u043B\u043E\u0457] dddd [").call(this);case 1:case 2:case 4:
            return ma("[\u041C\u0438\u043D\u0443\u043B\u043E\u0433\u043E] dddd [").call(this);}
      }, sameElse: "L" }, relativeTime: { future: "\u0437\u0430 %s", past: "%s \u0442\u043E\u043C\u0443", s: "\u0434\u0435\u043A\u0456\u043B\u044C\u043A\u0430 \u0441\u0435\u043A\u0443\u043D\u0434", ss: ia, m: ia, mm: ia, h: "\u0433\u043E\u0434\u0438\u043D\u0443", hh: ia, d: "\u0434\u0435\u043D\u044C", dd: ia, M: "\u043C\u0456\u0441\u044F\u0446\u044C", MM: ia, y: "\u0440\u0456\u043A", yy: ia }, meridiemParse: /\u043d\u043e\u0447\u0456|\u0440\u0430\u043d\u043a\u0443|\u0434\u043d\u044f|\u0432\u0435\u0447\u043e\u0440\u0430/, isPM: function isPM(e) {
      return (/^(\u0434\u043d\u044f|\u0432\u0435\u0447\u043e\u0440\u0430)$/.test(e)
      );
    }, meridiem: function meridiem(e, a, _) {
      return e < 4 ? "\u043D\u043E\u0447\u0456" : e < 12 ? "\u0440\u0430\u043D\u043A\u0443" : e < 17 ? "\u0434\u043D\u044F" : "\u0432\u0435\u0447\u043E\u0440\u0430";
    }, dayOfMonthOrdinalParse: /\d{1,2}-(\u0439|\u0433\u043e)/, ordinal: function ordinal(e, a) {
      switch (a) {case "M":case "d":case "DDD":case "w":case "W":
          return e + "-\u0439";case "D":
          return e + "-\u0433\u043E";default:
          return e;}
    }, week: { dow: 1, doy: 7 } });var oa = ["\u062C\u0646\u0648\u0631\u06CC", "\u0641\u0631\u0648\u0631\u06CC", "\u0645\u0627\u0631\u0686", "\u0627\u067E\u0631\u06CC\u0644", "\u0645\u0626\u06CC", "\u062C\u0648\u0646", "\u062C\u0648\u0644\u0627\u0626\u06CC", "\u0627\u06AF\u0633\u062A", "\u0633\u062A\u0645\u0628\u0631", "\u0627\u06A9\u062A\u0648\u0628\u0631", "\u0646\u0648\u0645\u0628\u0631", "\u062F\u0633\u0645\u0628\u0631"],
      ua = ["\u0627\u062A\u0648\u0627\u0631", "\u067E\u06CC\u0631", "\u0645\u0646\u06AF\u0644", "\u0628\u062F\u06BE", "\u062C\u0645\u0639\u0631\u0627\u062A", "\u062C\u0645\u0639\u06C1", "\u06C1\u0641\u062A\u06C1"];return e.defineLocale("ur", { months: oa, monthsShort: oa, weekdays: ua, weekdaysShort: ua, weekdaysMin: ua, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd\u060C D MMMM YYYY HH:mm" }, meridiemParse: /\u0635\u0628\u062d|\u0634\u0627\u0645/, isPM: function isPM(e) {
      return "\u0634\u0627\u0645" === e;
    }, meridiem: function meridiem(e, a, _) {
      return e < 12 ? "\u0635\u0628\u062D" : "\u0634\u0627\u0645";
    }, calendar: { sameDay: "[\u0622\u062C \u0628\u0648\u0642\u062A] LT", nextDay: "[\u06A9\u0644 \u0628\u0648\u0642\u062A] LT", nextWeek: "dddd [\u0628\u0648\u0642\u062A] LT", lastDay: "[\u06AF\u0630\u0634\u062A\u06C1 \u0631\u0648\u0632 \u0628\u0648\u0642\u062A] LT", lastWeek: "[\u06AF\u0630\u0634\u062A\u06C1] dddd [\u0628\u0648\u0642\u062A] LT", sameElse: "L" }, relativeTime: { future: "%s \u0628\u0639\u062F", past: "%s \u0642\u0628\u0644", s: "\u0686\u0646\u062F \u0633\u06CC\u06A9\u0646\u0688", ss: "%d \u0633\u06CC\u06A9\u0646\u0688", m: "\u0627\u06CC\u06A9 \u0645\u0646\u0679", mm: "%d \u0645\u0646\u0679", h: "\u0627\u06CC\u06A9 \u06AF\u06BE\u0646\u0679\u06C1", hh: "%d \u06AF\u06BE\u0646\u0679\u06D2", d: "\u0627\u06CC\u06A9 \u062F\u0646", dd: "%d \u062F\u0646", M: "\u0627\u06CC\u06A9 \u0645\u0627\u06C1", MM: "%d \u0645\u0627\u06C1", y: "\u0627\u06CC\u06A9 \u0633\u0627\u0644", yy: "%d \u0633\u0627\u0644" }, preparse: function preparse(e) {
      return e.replace(/\u060c/g, ",");
    }, postformat: function postformat(e) {
      return e.replace(/,/g, "\u060C");
    }, week: { dow: 1, doy: 4 } }), e.defineLocale("uz-latn", { months: "Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"), monthsShort: "Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"), weekdays: "Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"), weekdaysShort: "Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"), weekdaysMin: "Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "D MMMM YYYY, dddd HH:mm" }, calendar: { sameDay: "[Bugun soat] LT [da]", nextDay: "[Ertaga] LT [da]", nextWeek: "dddd [kuni soat] LT [da]", lastDay: "[Kecha soat] LT [da]", lastWeek: "[O'tgan] dddd [kuni soat] LT [da]", sameElse: "L" }, relativeTime: { future: "Yaqin %s ichida", past: "Bir necha %s oldin", s: "soniya", ss: "%d soniya", m: "bir daqiqa", mm: "%d daqiqa", h: "bir soat", hh: "%d soat", d: "bir kun", dd: "%d kun", M: "bir oy", MM: "%d oy", y: "bir yil", yy: "%d yil" }, week: { dow: 1, doy: 7 } }), e.defineLocale("uz", { months: "\u044F\u043D\u0432\u0430\u0440_\u0444\u0435\u0432\u0440\u0430\u043B_\u043C\u0430\u0440\u0442_\u0430\u043F\u0440\u0435\u043B_\u043C\u0430\u0439_\u0438\u044E\u043D_\u0438\u044E\u043B_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043D\u0442\u044F\u0431\u0440_\u043E\u043A\u0442\u044F\u0431\u0440_\u043D\u043E\u044F\u0431\u0440_\u0434\u0435\u043A\u0430\u0431\u0440".split("_"), monthsShort: "\u044F\u043D\u0432_\u0444\u0435\u0432_\u043C\u0430\u0440_\u0430\u043F\u0440_\u043C\u0430\u0439_\u0438\u044E\u043D_\u0438\u044E\u043B_\u0430\u0432\u0433_\u0441\u0435\u043D_\u043E\u043A\u0442_\u043D\u043E\u044F_\u0434\u0435\u043A".split("_"), weekdays: "\u042F\u043A\u0448\u0430\u043D\u0431\u0430_\u0414\u0443\u0448\u0430\u043D\u0431\u0430_\u0421\u0435\u0448\u0430\u043D\u0431\u0430_\u0427\u043E\u0440\u0448\u0430\u043D\u0431\u0430_\u041F\u0430\u0439\u0448\u0430\u043D\u0431\u0430_\u0416\u0443\u043C\u0430_\u0428\u0430\u043D\u0431\u0430".split("_"), weekdaysShort: "\u042F\u043A\u0448_\u0414\u0443\u0448_\u0421\u0435\u0448_\u0427\u043E\u0440_\u041F\u0430\u0439_\u0416\u0443\u043C_\u0428\u0430\u043D".split("_"), weekdaysMin: "\u042F\u043A_\u0414\u0443_\u0421\u0435_\u0427\u043E_\u041F\u0430_\u0416\u0443_\u0428\u0430".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "D MMMM YYYY, dddd HH:mm" }, calendar: { sameDay: "[\u0411\u0443\u0433\u0443\u043D \u0441\u043E\u0430\u0442] LT [\u0434\u0430]", nextDay: "[\u042D\u0440\u0442\u0430\u0433\u0430] LT [\u0434\u0430]", nextWeek: "dddd [\u043A\u0443\u043D\u0438 \u0441\u043E\u0430\u0442] LT [\u0434\u0430]", lastDay: "[\u041A\u0435\u0447\u0430 \u0441\u043E\u0430\u0442] LT [\u0434\u0430]", lastWeek: "[\u0423\u0442\u0433\u0430\u043D] dddd [\u043A\u0443\u043D\u0438 \u0441\u043E\u0430\u0442] LT [\u0434\u0430]", sameElse: "L" }, relativeTime: { future: "\u042F\u043A\u0438\u043D %s \u0438\u0447\u0438\u0434\u0430", past: "\u0411\u0438\u0440 \u043D\u0435\u0447\u0430 %s \u043E\u043B\u0434\u0438\u043D", s: "\u0444\u0443\u0440\u0441\u0430\u0442", ss: "%d \u0444\u0443\u0440\u0441\u0430\u0442", m: "\u0431\u0438\u0440 \u0434\u0430\u043A\u0438\u043A\u0430", mm: "%d \u0434\u0430\u043A\u0438\u043A\u0430", h: "\u0431\u0438\u0440 \u0441\u043E\u0430\u0442", hh: "%d \u0441\u043E\u0430\u0442", d: "\u0431\u0438\u0440 \u043A\u0443\u043D", dd: "%d \u043A\u0443\u043D", M: "\u0431\u0438\u0440 \u043E\u0439", MM: "%d \u043E\u0439", y: "\u0431\u0438\u0440 \u0439\u0438\u043B", yy: "%d \u0439\u0438\u043B" }, week: { dow: 1, doy: 7 } }), e.defineLocale("vi", { months: "th\xe1ng 1_th\xe1ng 2_th\xe1ng 3_th\xe1ng 4_th\xe1ng 5_th\xe1ng 6_th\xe1ng 7_th\xe1ng 8_th\xe1ng 9_th\xe1ng 10_th\xe1ng 11_th\xe1ng 12".split("_"), monthsShort: "Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"), monthsParseExact: !0, weekdays: "ch\u1EE7 nh\u1EADt_th\u1EE9 hai_th\u1EE9 ba_th\u1EE9 t\u01B0_th\u1EE9 n\u0103m_th\u1EE9 s\xE1u_th\u1EE9 b\u1EA3y".split("_"), weekdaysShort: "CN_T2_T3_T4_T5_T6_T7".split("_"), weekdaysMin: "CN_T2_T3_T4_T5_T6_T7".split("_"), weekdaysParseExact: !0, meridiemParse: /sa|ch/i, isPM: function isPM(e) {
      return (/^ch$/i.test(e)
      );
    }, meridiem: function meridiem(e, a, _) {
      return e < 12 ? _ ? "sa" : "SA" : _ ? "ch" : "CH";
    }, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM [n\u0103m] YYYY", LLL: "D MMMM [n\u0103m] YYYY HH:mm", LLLL: "dddd, D MMMM [n\u0103m] YYYY HH:mm", l: "DD/M/YYYY", ll: "D MMM YYYY", lll: "D MMM YYYY HH:mm", llll: "ddd, D MMM YYYY HH:mm" }, calendar: { sameDay: "[H\xf4m nay l\xfac] LT", nextDay: "[Ng\xe0y mai l\xfac] LT", nextWeek: "dddd [tu\u1EA7n t\u1EDBi l\xFAc] LT", lastDay: "[H\xf4m qua l\xfac] LT", lastWeek: "dddd [tu\u1EA7n r\u1ED3i l\xFAc] LT", sameElse: "L" }, relativeTime: { future: "%s t\u1EDBi", past: "%s tr\u01B0\u1EDBc", s: "v\xe0i gi\xe2y", ss: "%d gi\xe2y", m: "m\u1ED9t ph\xFAt", mm: "%d ph\xfat", h: "m\u1ED9t gi\u1EDD", hh: "%d gi\u1EDD", d: "m\u1ED9t ng\xE0y", dd: "%d ng\xe0y", M: "m\u1ED9t th\xE1ng", MM: "%d th\xe1ng", y: "m\u1ED9t n\u0103m", yy: "%d n\u0103m" }, dayOfMonthOrdinalParse: /\d{1,2}/, ordinal: function ordinal(e) {
      return e;
    }, week: { dow: 1, doy: 4 } }), e.defineLocale("x-pseudo", { months: "J~\xe1\xf1\xfa\xe1~r\xfd_F~\xe9br\xfa~\xe1r\xfd_~M\xe1rc~h_\xc1p~r\xedl_~M\xe1\xfd_~J\xfa\xf1\xe9~_J\xfal~\xfd_\xc1\xfa~g\xfast~_S\xe9p~t\xe9mb~\xe9r_\xd3~ct\xf3b~\xe9r_\xd1~\xf3v\xe9m~b\xe9r_~D\xe9c\xe9~mb\xe9r".split("_"), monthsShort: "J~\xe1\xf1_~F\xe9b_~M\xe1r_~\xc1pr_~M\xe1\xfd_~J\xfa\xf1_~J\xfal_~\xc1\xfag_~S\xe9p_~\xd3ct_~\xd1\xf3v_~D\xe9c".split("_"), monthsParseExact: !0, weekdays: "S~\xfa\xf1d\xe1~\xfd_M\xf3~\xf1d\xe1\xfd~_T\xfa\xe9~sd\xe1\xfd~_W\xe9d~\xf1\xe9sd~\xe1\xfd_T~h\xfars~d\xe1\xfd_~Fr\xedd~\xe1\xfd_S~\xe1t\xfar~d\xe1\xfd".split("_"), weekdaysShort: "S~\xfa\xf1_~M\xf3\xf1_~T\xfa\xe9_~W\xe9d_~Th\xfa_~Fr\xed_~S\xe1t".split("_"), weekdaysMin: "S~\xfa_M\xf3~_T\xfa_~W\xe9_T~h_Fr~_S\xe1".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[T~\xf3d\xe1~\xfd \xe1t] LT", nextDay: "[T~\xf3m\xf3~rr\xf3~w \xe1t] LT", nextWeek: "dddd [\xe1t] LT", lastDay: "[\xdd~\xe9st~\xe9rd\xe1~\xfd \xe1t] LT", lastWeek: "[L~\xe1st] dddd [\xe1t] LT", sameElse: "L" }, relativeTime: { future: "\xed~\xf1 %s", past: "%s \xe1~g\xf3", s: "\xe1 ~f\xe9w ~s\xe9c\xf3~\xf1ds", ss: "%d s~\xe9c\xf3\xf1~ds", m: "\xe1 ~m\xed\xf1~\xfat\xe9", mm: "%d m~\xed\xf1\xfa~t\xe9s", h: "\xe1~\xf1 h\xf3~\xfar", hh: "%d h~\xf3\xfars", d: "\xe1 ~d\xe1\xfd", dd: "%d d~\xe1\xfds", M: "\xe1 ~m\xf3\xf1~th", MM: "%d m~\xf3\xf1t~hs", y: "\xe1 ~\xfd\xe9\xe1r", yy: "%d \xfd~\xe9\xe1rs" }, dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/, ordinal: function ordinal(e) {
      var a = e % 10;return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === a ? "st" : 2 === a ? "nd" : 3 === a ? "rd" : "th");
    }, week: { dow: 1, doy: 4 } }), e.defineLocale("yo", { months: "S\u1EB9\u0301r\u1EB9\u0301_E\u0300re\u0300le\u0300_\u1EB8r\u1EB9\u0300na\u0300_I\u0300gbe\u0301_E\u0300bibi_O\u0300ku\u0300du_Ag\u1EB9mo_O\u0300gu\u0301n_Owewe_\u1ECC\u0300wa\u0300ra\u0300_Be\u0301lu\u0301_\u1ECC\u0300p\u1EB9\u0300\u0300".split("_"), monthsShort: "S\u1EB9\u0301r_E\u0300rl_\u1EB8rn_I\u0300gb_E\u0300bi_O\u0300ku\u0300_Ag\u1EB9_O\u0300gu\u0301_Owe_\u1ECC\u0300wa\u0300_Be\u0301l_\u1ECC\u0300p\u1EB9\u0300\u0300".split("_"), weekdays: "A\u0300i\u0300ku\u0301_Aje\u0301_I\u0300s\u1EB9\u0301gun_\u1ECCj\u1ECD\u0301ru\u0301_\u1ECCj\u1ECD\u0301b\u1ECD_\u1EB8ti\u0300_A\u0300ba\u0301m\u1EB9\u0301ta".split("_"), weekdaysShort: "A\u0300i\u0300k_Aje\u0301_I\u0300s\u1EB9\u0301_\u1ECCjr_\u1ECCjb_\u1EB8ti\u0300_A\u0300ba\u0301".split("_"), weekdaysMin: "A\u0300i\u0300_Aj_I\u0300s_\u1ECCr_\u1ECCb_\u1EB8t_A\u0300b".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendar: { sameDay: "[O\u0300ni\u0300 ni] LT", nextDay: "[\u1ECC\u0300la ni] LT", nextWeek: "dddd [\u1ECCs\u1EB9\u0300 to\u0301n'b\u1ECD] [ni] LT", lastDay: "[A\u0300na ni] LT", lastWeek: "dddd [\u1ECCs\u1EB9\u0300 to\u0301l\u1ECD\u0301] [ni] LT", sameElse: "L" }, relativeTime: { future: "ni\u0301 %s", past: "%s k\u1ECDja\u0301", s: "i\u0300s\u1EB9ju\u0301 aaya\u0301 die", ss: "aaya\u0301 %d", m: "i\u0300s\u1EB9ju\u0301 kan", mm: "i\u0300s\u1EB9ju\u0301 %d", h: "wa\u0301kati kan", hh: "wa\u0301kati %d", d: "\u1ECDj\u1ECD\u0301 kan", dd: "\u1ECDj\u1ECD\u0301 %d", M: "osu\u0300 kan", MM: "osu\u0300 %d", y: "\u1ECDdu\u0301n kan", yy: "\u1ECDdu\u0301n %d" }, dayOfMonthOrdinalParse: /\u1ecdj\u1ecd\u0301\s\d{1,2}/, ordinal: "\u1ECDj\u1ECD\u0301 %d", week: { dow: 1, doy: 4 } }), e.defineLocale("zh-cn", { months: "\u4E00\u6708_\u4E8C\u6708_\u4E09\u6708_\u56DB\u6708_\u4E94\u6708_\u516D\u6708_\u4E03\u6708_\u516B\u6708_\u4E5D\u6708_\u5341\u6708_\u5341\u4E00\u6708_\u5341\u4E8C\u6708".split("_"), monthsShort: "1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708".split("_"), weekdays: "\u661F\u671F\u65E5_\u661F\u671F\u4E00_\u661F\u671F\u4E8C_\u661F\u671F\u4E09_\u661F\u671F\u56DB_\u661F\u671F\u4E94_\u661F\u671F\u516D".split("_"), weekdaysShort: "\u5468\u65E5_\u5468\u4E00_\u5468\u4E8C_\u5468\u4E09_\u5468\u56DB_\u5468\u4E94_\u5468\u516D".split("_"), weekdaysMin: "\u65E5_\u4E00_\u4E8C_\u4E09_\u56DB_\u4E94_\u516D".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY/MM/DD", LL: "YYYY\u5E74M\u6708D\u65E5", LLL: "YYYY\u5E74M\u6708D\u65E5Ah\u70B9mm\u5206", LLLL: "YYYY\u5E74M\u6708D\u65E5ddddAh\u70B9mm\u5206", l: "YYYY/M/D", ll: "YYYY\u5E74M\u6708D\u65E5", lll: "YYYY\u5E74M\u6708D\u65E5 HH:mm", llll: "YYYY\u5E74M\u6708D\u65E5dddd HH:mm" }, meridiemParse: /\u51cc\u6668|\u65e9\u4e0a|\u4e0a\u5348|\u4e2d\u5348|\u4e0b\u5348|\u665a\u4e0a/, meridiemHour: function meridiemHour(e, a) {
      return 12 === e && (e = 0), "\u51CC\u6668" === a || "\u65E9\u4E0A" === a || "\u4E0A\u5348" === a ? e : "\u4E0B\u5348" === a || "\u665A\u4E0A" === a ? e + 12 : e >= 11 ? e : e + 12;
    }, meridiem: function meridiem(e, a, _) {
      var s = 100 * e + a;return s < 600 ? "\u51CC\u6668" : s < 900 ? "\u65E9\u4E0A" : s < 1130 ? "\u4E0A\u5348" : s < 1230 ? "\u4E2D\u5348" : s < 1800 ? "\u4E0B\u5348" : "\u665A\u4E0A";
    }, calendar: { sameDay: "[\u4ECA\u5929]LT", nextDay: "[\u660E\u5929]LT", nextWeek: "[\u4E0B]ddddLT", lastDay: "[\u6628\u5929]LT", lastWeek: "[\u4E0A]ddddLT", sameElse: "L" }, dayOfMonthOrdinalParse: /\d{1,2}(\u65e5|\u6708|\u5468)/, ordinal: function ordinal(e, a) {
      switch (a) {case "d":case "D":case "DDD":
          return e + "\u65E5";case "M":
          return e + "\u6708";case "w":case "W":
          return e + "\u5468";default:
          return e;}
    }, relativeTime: { future: "%s\u5185", past: "%s\u524D", s: "\u51E0\u79D2", ss: "%d \u79D2", m: "1 \u5206\u949F", mm: "%d \u5206\u949F", h: "1 \u5C0F\u65F6", hh: "%d \u5C0F\u65F6", d: "1 \u5929", dd: "%d \u5929", M: "1 \u4E2A\u6708", MM: "%d \u4E2A\u6708", y: "1 \u5E74", yy: "%d \u5E74" }, week: { dow: 1, doy: 4 } }), e.defineLocale("zh-hk", { months: "\u4E00\u6708_\u4E8C\u6708_\u4E09\u6708_\u56DB\u6708_\u4E94\u6708_\u516D\u6708_\u4E03\u6708_\u516B\u6708_\u4E5D\u6708_\u5341\u6708_\u5341\u4E00\u6708_\u5341\u4E8C\u6708".split("_"), monthsShort: "1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708".split("_"), weekdays: "\u661F\u671F\u65E5_\u661F\u671F\u4E00_\u661F\u671F\u4E8C_\u661F\u671F\u4E09_\u661F\u671F\u56DB_\u661F\u671F\u4E94_\u661F\u671F\u516D".split("_"), weekdaysShort: "\u9031\u65E5_\u9031\u4E00_\u9031\u4E8C_\u9031\u4E09_\u9031\u56DB_\u9031\u4E94_\u9031\u516D".split("_"), weekdaysMin: "\u65E5_\u4E00_\u4E8C_\u4E09_\u56DB_\u4E94_\u516D".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY/MM/DD", LL: "YYYY\u5E74M\u6708D\u65E5", LLL: "YYYY\u5E74M\u6708D\u65E5 HH:mm", LLLL: "YYYY\u5E74M\u6708D\u65E5dddd HH:mm", l: "YYYY/M/D", ll: "YYYY\u5E74M\u6708D\u65E5", lll: "YYYY\u5E74M\u6708D\u65E5 HH:mm", llll: "YYYY\u5E74M\u6708D\u65E5dddd HH:mm" }, meridiemParse: /\u51cc\u6668|\u65e9\u4e0a|\u4e0a\u5348|\u4e2d\u5348|\u4e0b\u5348|\u665a\u4e0a/, meridiemHour: function meridiemHour(e, a) {
      return 12 === e && (e = 0), "\u51CC\u6668" === a || "\u65E9\u4E0A" === a || "\u4E0A\u5348" === a ? e : "\u4E2D\u5348" === a ? e >= 11 ? e : e + 12 : "\u4E0B\u5348" === a || "\u665A\u4E0A" === a ? e + 12 : void 0;
    }, meridiem: function meridiem(e, a, _) {
      var s = 100 * e + a;return s < 600 ? "\u51CC\u6668" : s < 900 ? "\u65E9\u4E0A" : s < 1130 ? "\u4E0A\u5348" : s < 1230 ? "\u4E2D\u5348" : s < 1800 ? "\u4E0B\u5348" : "\u665A\u4E0A";
    }, calendar: { sameDay: "[\u4ECA\u5929]LT", nextDay: "[\u660E\u5929]LT", nextWeek: "[\u4E0B]ddddLT", lastDay: "[\u6628\u5929]LT", lastWeek: "[\u4E0A]ddddLT", sameElse: "L" }, dayOfMonthOrdinalParse: /\d{1,2}(\u65e5|\u6708|\u9031)/, ordinal: function ordinal(e, a) {
      switch (a) {case "d":case "D":case "DDD":
          return e + "\u65E5";case "M":
          return e + "\u6708";case "w":case "W":
          return e + "\u9031";default:
          return e;}
    }, relativeTime: { future: "%s\u5167", past: "%s\u524D", s: "\u5E7E\u79D2", ss: "%d \u79D2", m: "1 \u5206\u9418", mm: "%d \u5206\u9418", h: "1 \u5C0F\u6642", hh: "%d \u5C0F\u6642", d: "1 \u5929", dd: "%d \u5929", M: "1 \u500B\u6708", MM: "%d \u500B\u6708", y: "1 \u5E74", yy: "%d \u5E74" } }), e.defineLocale("zh-tw", { months: "\u4E00\u6708_\u4E8C\u6708_\u4E09\u6708_\u56DB\u6708_\u4E94\u6708_\u516D\u6708_\u4E03\u6708_\u516B\u6708_\u4E5D\u6708_\u5341\u6708_\u5341\u4E00\u6708_\u5341\u4E8C\u6708".split("_"), monthsShort: "1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708".split("_"), weekdays: "\u661F\u671F\u65E5_\u661F\u671F\u4E00_\u661F\u671F\u4E8C_\u661F\u671F\u4E09_\u661F\u671F\u56DB_\u661F\u671F\u4E94_\u661F\u671F\u516D".split("_"), weekdaysShort: "\u9031\u65E5_\u9031\u4E00_\u9031\u4E8C_\u9031\u4E09_\u9031\u56DB_\u9031\u4E94_\u9031\u516D".split("_"), weekdaysMin: "\u65E5_\u4E00_\u4E8C_\u4E09_\u56DB_\u4E94_\u516D".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY/MM/DD", LL: "YYYY\u5E74M\u6708D\u65E5", LLL: "YYYY\u5E74M\u6708D\u65E5 HH:mm", LLLL: "YYYY\u5E74M\u6708D\u65E5dddd HH:mm", l: "YYYY/M/D", ll: "YYYY\u5E74M\u6708D\u65E5", lll: "YYYY\u5E74M\u6708D\u65E5 HH:mm", llll: "YYYY\u5E74M\u6708D\u65E5dddd HH:mm" }, meridiemParse: /\u51cc\u6668|\u65e9\u4e0a|\u4e0a\u5348|\u4e2d\u5348|\u4e0b\u5348|\u665a\u4e0a/, meridiemHour: function meridiemHour(e, a) {
      return 12 === e && (e = 0), "\u51CC\u6668" === a || "\u65E9\u4E0A" === a || "\u4E0A\u5348" === a ? e : "\u4E2D\u5348" === a ? e >= 11 ? e : e + 12 : "\u4E0B\u5348" === a || "\u665A\u4E0A" === a ? e + 12 : void 0;
    }, meridiem: function meridiem(e, a, _) {
      var s = 100 * e + a;return s < 600 ? "\u51CC\u6668" : s < 900 ? "\u65E9\u4E0A" : s < 1130 ? "\u4E0A\u5348" : s < 1230 ? "\u4E2D\u5348" : s < 1800 ? "\u4E0B\u5348" : "\u665A\u4E0A";
    }, calendar: { sameDay: "[\u4ECA\u5929]LT", nextDay: "[\u660E\u5929]LT", nextWeek: "[\u4E0B]ddddLT", lastDay: "[\u6628\u5929]LT", lastWeek: "[\u4E0A]ddddLT", sameElse: "L" }, dayOfMonthOrdinalParse: /\d{1,2}(\u65e5|\u6708|\u9031)/, ordinal: function ordinal(e, a) {
      switch (a) {case "d":case "D":case "DDD":
          return e + "\u65E5";case "M":
          return e + "\u6708";case "w":case "W":
          return e + "\u9031";default:
          return e;}
    }, relativeTime: { future: "%s\u5167", past: "%s\u524D", s: "\u5E7E\u79D2", ss: "%d \u79D2", m: "1 \u5206\u9418", mm: "%d \u5206\u9418", h: "1 \u5C0F\u6642", hh: "%d \u5C0F\u6642", d: "1 \u5929", dd: "%d \u5929", M: "1 \u500B\u6708", MM: "%d \u500B\u6708", y: "1 \u5E74", yy: "%d \u5E74" } }), e.locale("en"), e;
});

},{"../moment":"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/moment/moment.js"}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/moment/moment.js":[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

//! moment.js

;(function (global, factory) {
    (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.moment = factory();
})(undefined, function () {
    'use strict';

    var hookCallback;

    function hooks() {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return Object.getOwnPropertyNames(obj).length === 0;
        } else {
            var k;
            for (k in obj) {
                if (obj.hasOwnProperty(k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [],
            i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function some(fun) {
            var t = Object(this);
            var len = t.length >>> 0;

            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
            });
            var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);

            if (m._strict) {
                isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            } else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }

    function absFloor(number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (_typeof(arguments[i]) === 'object') {
                        arg += '\n[' + i + '] ';
                        for (var key in arguments[0]) {
                            arg += key + ': ' + arguments[0][key] + ', ';
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }

    function set(config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
            prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function keys(obj) {
            var i,
                res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L'
    };

    function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat(key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate() {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years'
    };

    function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }

    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({ unit: u, priority: priorities[u] });
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function func() {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i,
            length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '',
                i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1 = /\d/; //       0 - 9
    var match2 = /\d\d/; //      00 - 99
    var match3 = /\d{3}/; //     000 - 999
    var match4 = /\d{4}/; //    0000 - 9999
    var match6 = /[+-]?\d{6}/; // -999999 - 999999
    var match1to2 = /\d\d?/; //       0 - 99
    var match3to4 = /\d\d\d\d?/; //     999 - 9999
    var match5to6 = /\d\d\d\d\d\d?/; //   99999 - 999999
    var match1to3 = /\d{1,3}/; //       0 - 999
    var match1to4 = /\d{1,4}/; //       0 - 9999
    var match1to6 = /[+-]?\d{1,6}/; // -999999 - 999999

    var matchUnsigned = /\d+/; //       0 - inf
    var matchSigned = /[+-]?\d+/; //    -inf - inf

    var matchOffset = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

    var regexes = {};

    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
            return isStrict && strictRegex ? strictRegex : regex;
        };
    }

    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken(token, callback) {
        var i,
            func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function func(input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear() {
        return isLeapYear(this.year());
    }

    function makeGetSet(unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get(mom, unit) {
        return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }

    function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
            } else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }

    function stringSet(units, value) {
        if ((typeof units === 'undefined' ? 'undefined' : _typeof(units)) === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    function mod(n, x) {
        return (n % x + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function indexOf(o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths(m, format) {
        if (!m) {
            return isArray(this._months) ? this._months : this._months['standalone'];
        }
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort(m, format) {
        if (!m) {
            return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i,
            ii,
            mom,
            llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth(mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }

    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }

    var defaultMonthsRegex = matchWord;
    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
    }

    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }

    function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date = new Date(y, m, d, h, M, s, ms);

        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
            date.setFullYear(y);
        }
        return date;
    }

    function createUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));

        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,

        // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear,
            resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek,
            resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow: 0, // Sunday is the first day of the week.
        doy: 6 // The week that contains Jan 1st is the first week of the year.
    };

    function localeFirstDayOfWeek() {
        return this._week.dow;
    }

    function localeFirstDayOfYear() {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays(m, format) {
        if (!m) {
            return isArray(this._weekdays) ? this._weekdays : this._weekdays['standalone'];
        }
        return isArray(this._weekdays) ? this._weekdays[m.day()] : this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort(m) {
        return m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin(m) {
        return m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i,
            ii,
            mom,
            llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }

    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }

    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }

    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [],
            shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom,
            minp,
            shortp,
            longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = this.weekdaysMin(mom, '');
            shortp = this.weekdaysShort(mom, '');
            longp = this.weekdays(mom, '');
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });

    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('k', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }

    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse
    };

    // internal storage for locale config files
    var locales = {};
    var localeFamilies = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0,
            j,
            next,
            locale,
            split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                var aliasedRequire = require;
                aliasedRequire('./locale/' + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {}
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            } else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            } else {
                if (typeof console !== 'undefined' && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn('Locale ' + key + ' not found. Did you forget to load it?');
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale(name, config) {
        if (config !== null) {
            var locale,
                parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale,
                tmpLocale,
                parentConfig = baseConfig;
            // MERGE
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
                parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow(m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
        var i,
            date,
            input = [],
            currentDate,
            expectedWeekday,
            yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            var curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

    var isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/],
    // YYYYMM is NOT allowed by the standard
    ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/]];

    // iso time formats and regexes
    var isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i,
            l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime,
            dateFormat,
            timeFormat,
            tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').trim();
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    var obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
    };

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10);
            var m = hm % 100,
                h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i));
        if (match) {
            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        // Final attempt, use Input Fallback
        hooks.createFromInputFallback(config);
    }

    hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    });

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i,
            parsedInput,
            tokens,
            token,
            skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            // console.log('token', token, 'parsedInput', parsedInput,
            //         'regex', getParseRegexForToken(token, config));
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }

    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
            return obj && parseInt(obj, 10);
        });

        configFromArray(config);
    }

    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig(config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || format === undefined && input === '') {
            return createInvalid({ nullInput: true });
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
        } else {
            return createInvalid();
        }
    });

    var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
        } else {
            return createInvalid();
        }
    });

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function now() {
        return Date.now ? Date.now() : +new Date();
    };

    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

    function isDurationValid(m) {
        for (var key in m) {
            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
            }
        }

        var unitHasDecimal = false;
        for (var i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds = +milliseconds + seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration(obj) {
        return obj instanceof Duration;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // FORMATTING

    function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);

        if (matches === null) {
            return null;
        }

        var chunk = matches[matches.length - 1] || [];
        var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset() {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            } else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }

    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration(input, key) {
        var duration = input,

        // matching against regexp is expensive, do it on demand
        match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
            };
        } else if (isNumber(input)) {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : match[1] === '+' ? 1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign)
            };
        } else if (duration == null) {
            // checks for null or undefined
            duration = {};
        } else if ((typeof duration === 'undefined' ? 'undefined' : _typeof(duration)) === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = { milliseconds: 0, months: 0 };

        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +base.clone().add(res.months, 'M');

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return { milliseconds: 0, months: 0 };
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val;val = period;period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add = createAdder(1, 'add');
    var subtract = createAdder(-1, 'subtract');

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
    }

    function calendar$1(time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse';

        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }

    function clone() {
        return new Moment(this);
    }

    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween(from, to, units, inclusivity) {
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) && (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
    }

    function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }

    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff(input, units, asFloat) {
        var that, zoneDelta, output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year':
                output = monthDiff(this, that) / 12;break;
            case 'month':
                output = monthDiff(this, that);break;
            case 'quarter':
                output = monthDiff(this, that) / 3;break;
            case 'second':
                output = (this - that) / 1e3;break; // 1000
            case 'minute':
                output = (this - that) / 6e4;break; // 1000 * 60
            case 'hour':
                output = (this - that) / 36e5;break; // 1000 * 60 * 60
            case 'day':
                output = (this - that - zoneDelta) / 864e5;break; // 1000 * 60 * 60 * 24, negate dst
            case 'week':
                output = (this - that - zoneDelta) / 6048e5;break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default:
                output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff(a, b) {
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),

        // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2,
            adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true;
        var m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect() {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment';
        var zone = '';
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        var prefix = '[' + func + '("]';
        var year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format(inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
            return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
            return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
        if (key === undefined) {
            return this.localeData();
        } else {
            return this.locale(key);
        }
    });

    function localeData() {
        return this._locale;
    }

    function startOf(units) {
        units = normalizeUnits(units);
        // the following switch intentionally omits break keywords
        // to utilize falling through the cases.
        switch (units) {
            case 'year':
                this.month(0);
            /* falls through */
            case 'quarter':
            case 'month':
                this.date(1);
            /* falls through */
            case 'week':
            case 'isoWeek':
            case 'day':
            case 'date':
                this.hours(0);
            /* falls through */
            case 'hour':
                this.minutes(0);
            /* falls through */
            case 'minute':
                this.seconds(0);
            /* falls through */
            case 'second':
                this.milliseconds(0);
        }

        // weeks are a special case
        if (units === 'week') {
            this.weekday(0);
        }
        if (units === 'isoWeek') {
            this.isoWeekday(1);
        }

        // quarters are also special
        if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
        }

        return this;
    }

    function endOf(units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
            return this;
        }

        // 'date' is an alias for 'day', so it should be considered as such.
        if (units === 'date') {
            units = 'day';
        }

        return this.startOf(units).add(1, units === 'isoWeek' ? 'week' : units).subtract(1, 'ms');
    }

    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }

    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate() {
        return new Date(this.valueOf());
    }

    function toArray() {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2() {
        return isValid(this);
    }

    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt() {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);

    // PARSING

    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
    }

    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }

    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIOROITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });

    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

    function createUnix(input) {
        return createLocal(input * 1000);
    }

    function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat(string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;

    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;

    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1(format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0;

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function ordinal(number) {
            var b = number % 10,
                output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports

    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

    var mathAbs = Math.abs;

    function abs() {
        var data = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);

        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);

        return this;
    }

    function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble() {
        var milliseconds = this._milliseconds;
        var days = this._days;
        var months = this._months;
        var data = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;

        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;

        hours = absFloor(minutes / 60);
        data.hours = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days = days;
        data.months = months;
        data.years = years;

        return this;
    }

    function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays(months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as(units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            return units === 'month' ? months : months / 12;
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week':
                    return days / 7 + milliseconds / 6048e5;
                case 'day':
                    return days + milliseconds / 864e5;
                case 'hour':
                    return days * 24 + milliseconds / 36e5;
                case 'minute':
                    return days * 1440 + milliseconds / 6e4;
                case 'second':
                    return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond':
                    return Math.floor(days * 864e5) + milliseconds;
                default:
                    throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1() {
        if (!this.isValid()) {
            return NaN;
        }
        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
    }

    function makeAs(alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds = makeAs('s');
    var asMinutes = makeAs('m');
    var asHours = makeAs('h');
    var asDays = makeAs('d');
    var asWeeks = makeAs('w');
    var asMonths = makeAs('M');
    var asYears = makeAs('y');

    function clone$1() {
        return createDuration(this);
    }

    function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds = makeGetter('seconds');
    var minutes = makeGetter('minutes');
    var hours = makeGetter('hours');
    var days = makeGetter('days');
    var months = makeGetter('months');
    var years = makeGetter('years');

    function weeks() {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        ss: 44, // a few seconds to seconds
        s: 45, // seconds to minute
        m: 45, // minutes to hour
        h: 22, // hours to day
        d: 26, // days to month
        M: 11 // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1(posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds = round(duration.as('s'));
        var minutes = round(duration.as('m'));
        var hours = round(duration.as('h'));
        var days = round(duration.as('d'));
        var months = round(duration.as('M'));
        var years = round(duration.as('y'));

        var a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days] || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof roundingFunction === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize(withSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return (x > 0) - (x < 0) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000;
        var days = abs$1(this._days);
        var months = abs$1(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        var totalSign = total < 0 ? '-' : '';
        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return totalSign + 'P' + (Y ? ymSign + Y + 'Y' : '') + (M ? ymSign + M + 'M' : '') + (D ? daysSign + D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? hmsSign + h + 'H' : '') + (m ? hmsSign + m + 'M' : '') + (s ? hmsSign + s + 'S' : '');
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;

    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;

    // Side effect imports

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    hooks.version = '2.21.0';

    setHookCallback(createLocal);

    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD', // <input type="date" />
        TIME: 'HH:mm', // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
        WEEK: 'YYYY-[W]WW', // <input type="week" />
        MONTH: 'YYYY-MM' // <input type="month" />
    };

    return hooks;
});

},{}],"/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/nunjucks/browser/nunjucks-slim.js":[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! Browser bundle of nunjucks 3.0.1 (slim, only works with precompiled templates) */
(function webpackUniversalModuleDefinition(root, factory) {
	if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && (typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') exports["nunjucks"] = factory();else root["nunjucks"] = factory();
})(undefined, function () {
	return (/******/function (modules) {
			// webpackBootstrap
			/******/ // The module cache
			/******/var installedModules = {};

			/******/ // The require function
			/******/function __webpack_require__(moduleId) {

				/******/ // Check if module is in cache
				/******/if (installedModules[moduleId])
					/******/return installedModules[moduleId].exports;

				/******/ // Create a new module (and put it into the cache)
				/******/var module = installedModules[moduleId] = {
					/******/exports: {},
					/******/id: moduleId,
					/******/loaded: false
					/******/ };

				/******/ // Execute the module function
				/******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

				/******/ // Flag the module as loaded
				/******/module.loaded = true;

				/******/ // Return the exports of the module
				/******/return module.exports;
				/******/
			}

			/******/ // expose the modules object (__webpack_modules__)
			/******/__webpack_require__.m = modules;

			/******/ // expose the module cache
			/******/__webpack_require__.c = installedModules;

			/******/ // __webpack_public_path__
			/******/__webpack_require__.p = "";

			/******/ // Load entry module and return exports
			/******/return __webpack_require__(0);
			/******/
		}(
		/************************************************************************/
		/******/[
		/* 0 */
		/***/function (module, exports, __webpack_require__) {

			'use strict';

			var lib = __webpack_require__(1);
			var env = __webpack_require__(2);
			var Loader = __webpack_require__(15);
			var loaders = __webpack_require__(3);
			var precompile = __webpack_require__(3);

			module.exports = {};
			module.exports.Environment = env.Environment;
			module.exports.Template = env.Template;

			module.exports.Loader = Loader;
			module.exports.FileSystemLoader = loaders.FileSystemLoader;
			module.exports.PrecompiledLoader = loaders.PrecompiledLoader;
			module.exports.WebLoader = loaders.WebLoader;

			module.exports.compiler = __webpack_require__(3);
			module.exports.parser = __webpack_require__(3);
			module.exports.lexer = __webpack_require__(3);
			module.exports.runtime = __webpack_require__(8);
			module.exports.lib = lib;
			module.exports.nodes = __webpack_require__(3);

			module.exports.installJinjaCompat = __webpack_require__(16);

			// A single instance of an environment, since this is so commonly used

			var e;
			module.exports.configure = function (templatesPath, opts) {
				opts = opts || {};
				if (lib.isObject(templatesPath)) {
					opts = templatesPath;
					templatesPath = null;
				}

				var TemplateLoader;
				if (loaders.FileSystemLoader) {
					TemplateLoader = new loaders.FileSystemLoader(templatesPath, {
						watch: opts.watch,
						noCache: opts.noCache
					});
				} else if (loaders.WebLoader) {
					TemplateLoader = new loaders.WebLoader(templatesPath, {
						useCache: opts.web && opts.web.useCache,
						async: opts.web && opts.web.async
					});
				}

				e = new env.Environment(TemplateLoader, opts);

				if (opts && opts.express) {
					e.express(opts.express);
				}

				return e;
			};

			module.exports.compile = function (src, env, path, eagerCompile) {
				if (!e) {
					module.exports.configure();
				}
				return new module.exports.Template(src, env, path, eagerCompile);
			};

			module.exports.render = function (name, ctx, cb) {
				if (!e) {
					module.exports.configure();
				}

				return e.render(name, ctx, cb);
			};

			module.exports.renderString = function (src, ctx, cb) {
				if (!e) {
					module.exports.configure();
				}

				return e.renderString(src, ctx, cb);
			};

			if (precompile) {
				module.exports.precompile = precompile.precompile;
				module.exports.precompileString = precompile.precompileString;
			}

			/***/
		},
		/* 1 */
		/***/function (module, exports) {

			'use strict';

			var ArrayProto = Array.prototype;
			var ObjProto = Object.prototype;

			var escapeMap = {
				'&': '&amp;',
				'"': '&quot;',
				'\'': '&#39;',
				'<': '&lt;',
				'>': '&gt;'
			};

			var escapeRegex = /[&"'<>]/g;

			var lookupEscape = function lookupEscape(ch) {
				return escapeMap[ch];
			};

			var exports = module.exports = {};

			exports.prettifyError = function (path, withInternals, err) {
				// jshint -W022
				// http://jslinterrors.com/do-not-assign-to-the-exception-parameter
				if (!err.Update) {
					// not one of ours, cast it
					err = new exports.TemplateError(err);
				}
				err.Update(path);

				// Unless they marked the dev flag, show them a trace from here
				if (!withInternals) {
					var old = err;
					err = new Error(old.message);
					err.name = old.name;
				}

				return err;
			};

			exports.TemplateError = function (message, lineno, colno) {
				var err = this;

				if (message instanceof Error) {
					// for casting regular js errors
					err = message;
					message = message.name + ': ' + message.message;

					try {
						if (err.name = '') {}
					} catch (e) {
						// If we can't set the name of the error object in this
						// environment, don't use it
						err = this;
					}
				} else {
					if (Error.captureStackTrace) {
						Error.captureStackTrace(err);
					}
				}

				err.name = 'Template render error';
				err.message = message;
				err.lineno = lineno;
				err.colno = colno;
				err.firstUpdate = true;

				err.Update = function (path) {
					var message = '(' + (path || 'unknown path') + ')';

					// only show lineno + colno next to path of template
					// where error occurred
					if (this.firstUpdate) {
						if (this.lineno && this.colno) {
							message += ' [Line ' + this.lineno + ', Column ' + this.colno + ']';
						} else if (this.lineno) {
							message += ' [Line ' + this.lineno + ']';
						}
					}

					message += '\n ';
					if (this.firstUpdate) {
						message += ' ';
					}

					this.message = message + (this.message || '');
					this.firstUpdate = false;
					return this;
				};

				return err;
			};

			exports.TemplateError.prototype = Error.prototype;

			exports.escape = function (val) {
				return val.replace(escapeRegex, lookupEscape);
			};

			exports.isFunction = function (obj) {
				return ObjProto.toString.call(obj) === '[object Function]';
			};

			exports.isArray = Array.isArray || function (obj) {
				return ObjProto.toString.call(obj) === '[object Array]';
			};

			exports.isString = function (obj) {
				return ObjProto.toString.call(obj) === '[object String]';
			};

			exports.isObject = function (obj) {
				return ObjProto.toString.call(obj) === '[object Object]';
			};

			exports.groupBy = function (obj, val) {
				var result = {};
				var iterator = exports.isFunction(val) ? val : function (obj) {
					return obj[val];
				};
				for (var i = 0; i < obj.length; i++) {
					var value = obj[i];
					var key = iterator(value, i);
					(result[key] || (result[key] = [])).push(value);
				}
				return result;
			};

			exports.toArray = function (obj) {
				return Array.prototype.slice.call(obj);
			};

			exports.without = function (array) {
				var result = [];
				if (!array) {
					return result;
				}
				var index = -1,
				    length = array.length,
				    contains = exports.toArray(arguments).slice(1);

				while (++index < length) {
					if (exports.indexOf(contains, array[index]) === -1) {
						result.push(array[index]);
					}
				}
				return result;
			};

			exports.extend = function (obj, obj2) {
				for (var k in obj2) {
					obj[k] = obj2[k];
				}
				return obj;
			};

			exports.repeat = function (char_, n) {
				var str = '';
				for (var i = 0; i < n; i++) {
					str += char_;
				}
				return str;
			};

			exports.each = function (obj, func, context) {
				if (obj == null) {
					return;
				}

				if (ArrayProto.each && obj.each === ArrayProto.each) {
					obj.forEach(func, context);
				} else if (obj.length === +obj.length) {
					for (var i = 0, l = obj.length; i < l; i++) {
						func.call(context, obj[i], i, obj);
					}
				}
			};

			exports.map = function (obj, func) {
				var results = [];
				if (obj == null) {
					return results;
				}

				if (ArrayProto.map && obj.map === ArrayProto.map) {
					return obj.map(func);
				}

				for (var i = 0; i < obj.length; i++) {
					results[results.length] = func(obj[i], i);
				}

				if (obj.length === +obj.length) {
					results.length = obj.length;
				}

				return results;
			};

			exports.asyncIter = function (arr, iter, cb) {
				var i = -1;

				function next() {
					i++;

					if (i < arr.length) {
						iter(arr[i], i, next, cb);
					} else {
						cb();
					}
				}

				next();
			};

			exports.asyncFor = function (obj, iter, cb) {
				var keys = exports.keys(obj);
				var len = keys.length;
				var i = -1;

				function next() {
					i++;
					var k = keys[i];

					if (i < len) {
						iter(k, obj[k], i, len, next);
					} else {
						cb();
					}
				}

				next();
			};

			// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Polyfill
			exports.indexOf = Array.prototype.indexOf ? function (arr, searchElement, fromIndex) {
				return Array.prototype.indexOf.call(arr, searchElement, fromIndex);
			} : function (arr, searchElement, fromIndex) {
				var length = this.length >>> 0; // Hack to convert object.length to a UInt32

				fromIndex = +fromIndex || 0;

				if (Math.abs(fromIndex) === Infinity) {
					fromIndex = 0;
				}

				if (fromIndex < 0) {
					fromIndex += length;
					if (fromIndex < 0) {
						fromIndex = 0;
					}
				}

				for (; fromIndex < length; fromIndex++) {
					if (arr[fromIndex] === searchElement) {
						return fromIndex;
					}
				}

				return -1;
			};

			if (!Array.prototype.map) {
				Array.prototype.map = function () {
					throw new Error('map is unimplemented for this js engine');
				};
			}

			exports.keys = function (obj) {
				if (Object.prototype.keys) {
					return obj.keys();
				} else {
					var keys = [];
					for (var k in obj) {
						if (obj.hasOwnProperty(k)) {
							keys.push(k);
						}
					}
					return keys;
				}
			};

			exports.inOperator = function (key, val) {
				if (exports.isArray(val)) {
					return exports.indexOf(val, key) !== -1;
				} else if (exports.isObject(val)) {
					return key in val;
				} else if (exports.isString(val)) {
					return val.indexOf(key) !== -1;
				} else {
					throw new Error('Cannot use "in" operator to search for "' + key + '" in unexpected types.');
				}
			};

			/***/
		},
		/* 2 */
		/***/function (module, exports, __webpack_require__) {

			'use strict';

			var path = __webpack_require__(3);
			var asap = __webpack_require__(4);
			var lib = __webpack_require__(1);
			var Obj = __webpack_require__(6);
			var compiler = __webpack_require__(3);
			var builtin_filters = __webpack_require__(7);
			var builtin_loaders = __webpack_require__(3);
			var runtime = __webpack_require__(8);
			var globals = __webpack_require__(9);
			var waterfall = __webpack_require__(10);
			var Frame = runtime.Frame;
			var Template;

			// Unconditionally load in this loader, even if no other ones are
			// included (possible in the slim browser build)
			builtin_loaders.PrecompiledLoader = __webpack_require__(14);

			// If the user is using the async API, *always* call it
			// asynchronously even if the template was synchronous.
			function callbackAsap(cb, err, res) {
				asap(function () {
					cb(err, res);
				});
			}

			var Environment = Obj.extend({
				init: function init(loaders, opts) {
					// The dev flag determines the trace that'll be shown on errors.
					// If set to true, returns the full trace from the error point,
					// otherwise will return trace starting from Template.render
					// (the full trace from within nunjucks may confuse developers using
					//  the library)
					// defaults to false
					opts = this.opts = opts || {};
					this.opts.dev = !!opts.dev;

					// The autoescape flag sets global autoescaping. If true,
					// every string variable will be escaped by default.
					// If false, strings can be manually escaped using the `escape` filter.
					// defaults to true
					this.opts.autoescape = opts.autoescape != null ? opts.autoescape : true;

					// If true, this will make the system throw errors if trying
					// to output a null or undefined value
					this.opts.throwOnUndefined = !!opts.throwOnUndefined;
					this.opts.trimBlocks = !!opts.trimBlocks;
					this.opts.lstripBlocks = !!opts.lstripBlocks;

					this.loaders = [];

					if (!loaders) {
						// The filesystem loader is only available server-side
						if (builtin_loaders.FileSystemLoader) {
							this.loaders = [new builtin_loaders.FileSystemLoader('views')];
						} else if (builtin_loaders.WebLoader) {
							this.loaders = [new builtin_loaders.WebLoader('/views')];
						}
					} else {
						this.loaders = lib.isArray(loaders) ? loaders : [loaders];
					}

					// It's easy to use precompiled templates: just include them
					// before you configure nunjucks and this will automatically
					// pick it up and use it
					if (true && window.nunjucksPrecompiled) {
						this.loaders.unshift(new builtin_loaders.PrecompiledLoader(window.nunjucksPrecompiled));
					}

					this.initCache();

					this.globals = globals();
					this.filters = {};
					this.asyncFilters = [];
					this.extensions = {};
					this.extensionsList = [];

					for (var name in builtin_filters) {
						this.addFilter(name, builtin_filters[name]);
					}
				},

				initCache: function initCache() {
					// Caching and cache busting
					lib.each(this.loaders, function (loader) {
						loader.cache = {};

						if (typeof loader.on === 'function') {
							loader.on('update', function (template) {
								loader.cache[template] = null;
							});
						}
					});
				},

				addExtension: function addExtension(name, extension) {
					extension._name = name;
					this.extensions[name] = extension;
					this.extensionsList.push(extension);
					return this;
				},

				removeExtension: function removeExtension(name) {
					var extension = this.getExtension(name);
					if (!extension) return;

					this.extensionsList = lib.without(this.extensionsList, extension);
					delete this.extensions[name];
				},

				getExtension: function getExtension(name) {
					return this.extensions[name];
				},

				hasExtension: function hasExtension(name) {
					return !!this.extensions[name];
				},

				addGlobal: function addGlobal(name, value) {
					this.globals[name] = value;
					return this;
				},

				getGlobal: function getGlobal(name) {
					if (typeof this.globals[name] === 'undefined') {
						throw new Error('global not found: ' + name);
					}
					return this.globals[name];
				},

				addFilter: function addFilter(name, func, async) {
					var wrapped = func;

					if (async) {
						this.asyncFilters.push(name);
					}
					this.filters[name] = wrapped;
					return this;
				},

				getFilter: function getFilter(name) {
					if (!this.filters[name]) {
						throw new Error('filter not found: ' + name);
					}
					return this.filters[name];
				},

				resolveTemplate: function resolveTemplate(loader, parentName, filename) {
					var isRelative = loader.isRelative && parentName ? loader.isRelative(filename) : false;
					return isRelative && loader.resolve ? loader.resolve(parentName, filename) : filename;
				},

				getTemplate: function getTemplate(name, eagerCompile, parentName, ignoreMissing, cb) {
					var that = this;
					var tmpl = null;
					if (name && name.raw) {
						// this fixes autoescape for templates referenced in symbols
						name = name.raw;
					}

					if (lib.isFunction(parentName)) {
						cb = parentName;
						parentName = null;
						eagerCompile = eagerCompile || false;
					}

					if (lib.isFunction(eagerCompile)) {
						cb = eagerCompile;
						eagerCompile = false;
					}

					if (name instanceof Template) {
						tmpl = name;
					} else if (typeof name !== 'string') {
						throw new Error('template names must be a string: ' + name);
					} else {
						for (var i = 0; i < this.loaders.length; i++) {
							var _name = this.resolveTemplate(this.loaders[i], parentName, name);
							tmpl = this.loaders[i].cache[_name];
							if (tmpl) break;
						}
					}

					if (tmpl) {
						if (eagerCompile) {
							tmpl.compile();
						}

						if (cb) {
							cb(null, tmpl);
						} else {
							return tmpl;
						}
					} else {
						var syncResult;
						var _this = this;

						var createTemplate = function createTemplate(err, info) {
							if (!info && !err) {
								if (!ignoreMissing) {
									err = new Error('template not found: ' + name);
								}
							}

							if (err) {
								if (cb) {
									cb(err);
								} else {
									throw err;
								}
							} else {
								var tmpl;
								if (info) {
									tmpl = new Template(info.src, _this, info.path, eagerCompile);

									if (!info.noCache) {
										info.loader.cache[name] = tmpl;
									}
								} else {
									tmpl = new Template('', _this, '', eagerCompile);
								}

								if (cb) {
									cb(null, tmpl);
								} else {
									syncResult = tmpl;
								}
							}
						};

						lib.asyncIter(this.loaders, function (loader, i, next, done) {
							function handle(err, src) {
								if (err) {
									done(err);
								} else if (src) {
									src.loader = loader;
									done(null, src);
								} else {
									next();
								}
							}

							// Resolve name relative to parentName
							name = that.resolveTemplate(loader, parentName, name);

							if (loader.async) {
								loader.getSource(name, handle);
							} else {
								handle(null, loader.getSource(name));
							}
						}, createTemplate);

						return syncResult;
					}
				},

				express: function express(app) {
					var env = this;

					function NunjucksView(name, opts) {
						this.name = name;
						this.path = name;
						this.defaultEngine = opts.defaultEngine;
						this.ext = path.extname(name);
						if (!this.ext && !this.defaultEngine) throw new Error('No default engine was specified and no extension was provided.');
						if (!this.ext) this.name += this.ext = ('.' !== this.defaultEngine[0] ? '.' : '') + this.defaultEngine;
					}

					NunjucksView.prototype.render = function (opts, cb) {
						env.render(this.name, opts, cb);
					};

					app.set('view', NunjucksView);
					app.set('nunjucksEnv', this);
					return this;
				},

				render: function render(name, ctx, cb) {
					if (lib.isFunction(ctx)) {
						cb = ctx;
						ctx = null;
					}

					// We support a synchronous API to make it easier to migrate
					// existing code to async. This works because if you don't do
					// anything async work, the whole thing is actually run
					// synchronously.
					var syncResult = null;

					this.getTemplate(name, function (err, tmpl) {
						if (err && cb) {
							callbackAsap(cb, err);
						} else if (err) {
							throw err;
						} else {
							syncResult = tmpl.render(ctx, cb);
						}
					});

					return syncResult;
				},

				renderString: function renderString(src, ctx, opts, cb) {
					if (lib.isFunction(opts)) {
						cb = opts;
						opts = {};
					}
					opts = opts || {};

					var tmpl = new Template(src, this, opts.path);
					return tmpl.render(ctx, cb);
				},

				waterfall: waterfall
			});

			var Context = Obj.extend({
				init: function init(ctx, blocks, env) {
					// Has to be tied to an environment so we can tap into its globals.
					this.env = env || new Environment();

					// Make a duplicate of ctx
					this.ctx = {};
					for (var k in ctx) {
						if (ctx.hasOwnProperty(k)) {
							this.ctx[k] = ctx[k];
						}
					}

					this.blocks = {};
					this.exported = [];

					for (var name in blocks) {
						this.addBlock(name, blocks[name]);
					}
				},

				lookup: function lookup(name) {
					// This is one of the most called functions, so optimize for
					// the typical case where the name isn't in the globals
					if (name in this.env.globals && !(name in this.ctx)) {
						return this.env.globals[name];
					} else {
						return this.ctx[name];
					}
				},

				setVariable: function setVariable(name, val) {
					this.ctx[name] = val;
				},

				getVariables: function getVariables() {
					return this.ctx;
				},

				addBlock: function addBlock(name, block) {
					this.blocks[name] = this.blocks[name] || [];
					this.blocks[name].push(block);
					return this;
				},

				getBlock: function getBlock(name) {
					if (!this.blocks[name]) {
						throw new Error('unknown block "' + name + '"');
					}

					return this.blocks[name][0];
				},

				getSuper: function getSuper(env, name, block, frame, runtime, cb) {
					var idx = lib.indexOf(this.blocks[name] || [], block);
					var blk = this.blocks[name][idx + 1];
					var context = this;

					if (idx === -1 || !blk) {
						throw new Error('no super block available for "' + name + '"');
					}

					blk(env, context, frame, runtime, cb);
				},

				addExport: function addExport(name) {
					this.exported.push(name);
				},

				getExported: function getExported() {
					var exported = {};
					for (var i = 0; i < this.exported.length; i++) {
						var name = this.exported[i];
						exported[name] = this.ctx[name];
					}
					return exported;
				}
			});

			Template = Obj.extend({
				init: function init(src, env, path, eagerCompile) {
					this.env = env || new Environment();

					if (lib.isObject(src)) {
						switch (src.type) {
							case 'code':
								this.tmplProps = src.obj;break;
							case 'string':
								this.tmplStr = src.obj;break;
						}
					} else if (lib.isString(src)) {
						this.tmplStr = src;
					} else {
						throw new Error('src must be a string or an object describing ' + 'the source');
					}

					this.path = path;

					if (eagerCompile) {
						var _this = this;
						try {
							_this._compile();
						} catch (err) {
							throw lib.prettifyError(this.path, this.env.opts.dev, err);
						}
					} else {
						this.compiled = false;
					}
				},

				render: function render(ctx, parentFrame, cb) {
					if (typeof ctx === 'function') {
						cb = ctx;
						ctx = {};
					} else if (typeof parentFrame === 'function') {
						cb = parentFrame;
						parentFrame = null;
					}

					var forceAsync = true;
					if (parentFrame) {
						// If there is a frame, we are being called from internal
						// code of another template, and the internal system
						// depends on the sync/async nature of the parent template
						// to be inherited, so force an async callback
						forceAsync = false;
					}

					var _this = this;
					// Catch compile errors for async rendering
					try {
						_this.compile();
					} catch (_err) {
						var err = lib.prettifyError(this.path, this.env.opts.dev, _err);
						if (cb) return callbackAsap(cb, err);else throw err;
					}

					var context = new Context(ctx || {}, _this.blocks, _this.env);
					var frame = parentFrame ? parentFrame.push(true) : new Frame();
					frame.topLevel = true;
					var syncResult = null;

					_this.rootRenderFunc(_this.env, context, frame || new Frame(), runtime, function (err, res) {
						if (err) {
							err = lib.prettifyError(_this.path, _this.env.opts.dev, err);
						}

						if (cb) {
							if (forceAsync) {
								callbackAsap(cb, err, res);
							} else {
								cb(err, res);
							}
						} else {
							if (err) {
								throw err;
							}
							syncResult = res;
						}
					});

					return syncResult;
				},

				getExported: function getExported(ctx, parentFrame, cb) {
					if (typeof ctx === 'function') {
						cb = ctx;
						ctx = {};
					}

					if (typeof parentFrame === 'function') {
						cb = parentFrame;
						parentFrame = null;
					}

					// Catch compile errors for async rendering
					try {
						this.compile();
					} catch (e) {
						if (cb) return cb(e);else throw e;
					}

					var frame = parentFrame ? parentFrame.push() : new Frame();
					frame.topLevel = true;

					// Run the rootRenderFunc to populate the context with exported vars
					var context = new Context(ctx || {}, this.blocks, this.env);
					this.rootRenderFunc(this.env, context, frame, runtime, function (err) {
						if (err) {
							cb(err, null);
						} else {
							cb(null, context.getExported());
						}
					});
				},

				compile: function compile() {
					if (!this.compiled) {
						this._compile();
					}
				},

				_compile: function _compile() {
					var props;

					if (this.tmplProps) {
						props = this.tmplProps;
					} else {
						var source = compiler.compile(this.tmplStr, this.env.asyncFilters, this.env.extensionsList, this.path, this.env.opts);

						/* jslint evil: true */
						var func = new Function(source);
						props = func();
					}

					this.blocks = this._getBlocks(props);
					this.rootRenderFunc = props.root;
					this.compiled = true;
				},

				_getBlocks: function _getBlocks(props) {
					var blocks = {};

					for (var k in props) {
						if (k.slice(0, 2) === 'b_') {
							blocks[k.slice(2)] = props[k];
						}
					}

					return blocks;
				}
			});

			module.exports = {
				Environment: Environment,
				Template: Template
			};

			/***/
		},
		/* 3 */
		/***/function (module, exports) {

			/***/},
		/* 4 */
		/***/function (module, exports, __webpack_require__) {

			"use strict";

			// rawAsap provides everything we need except exception management.

			var rawAsap = __webpack_require__(5);
			// RawTasks are recycled to reduce GC churn.
			var freeTasks = [];
			// We queue errors to ensure they are thrown in right order (FIFO).
			// Array-as-queue is good enough here, since we are just dealing with exceptions.
			var pendingErrors = [];
			var requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);

			function throwFirstError() {
				if (pendingErrors.length) {
					throw pendingErrors.shift();
				}
			}

			/**
    * Calls a task as soon as possible after returning, in its own event, with priority
    * over other events like animation, reflow, and repaint. An error thrown from an
    * event will not interrupt, nor even substantially slow down the processing of
    * other events, but will be rather postponed to a lower priority event.
    * @param {{call}} task A callable object, typically a function that takes no
    * arguments.
    */
			module.exports = asap;
			function asap(task) {
				var rawTask;
				if (freeTasks.length) {
					rawTask = freeTasks.pop();
				} else {
					rawTask = new RawTask();
				}
				rawTask.task = task;
				rawAsap(rawTask);
			}

			// We wrap tasks with recyclable task objects.  A task object implements
			// `call`, just like a function.
			function RawTask() {
				this.task = null;
			}

			// The sole purpose of wrapping the task is to catch the exception and recycle
			// the task object after its single use.
			RawTask.prototype.call = function () {
				try {
					this.task.call();
				} catch (error) {
					if (asap.onerror) {
						// This hook exists purely for testing purposes.
						// Its name will be periodically randomized to break any code that
						// depends on its existence.
						asap.onerror(error);
					} else {
						// In a web browser, exceptions are not fatal. However, to avoid
						// slowing down the queue of pending tasks, we rethrow the error in a
						// lower priority turn.
						pendingErrors.push(error);
						requestErrorThrow();
					}
				} finally {
					this.task = null;
					freeTasks[freeTasks.length] = this;
				}
			};

			/***/
		},
		/* 5 */
		/***/function (module, exports) {

			/* WEBPACK VAR INJECTION */(function (global) {
				"use strict";

				// Use the fastest means possible to execute a task in its own turn, with
				// priority over other events including IO, animation, reflow, and redraw
				// events in browsers.
				//
				// An exception thrown by a task will permanently interrupt the processing of
				// subsequent tasks. The higher level `asap` function ensures that if an
				// exception is thrown by a task, that the task queue will continue flushing as
				// soon as possible, but if you use `rawAsap` directly, you are responsible to
				// either ensure that no exceptions are thrown from your task, or to manually
				// call `rawAsap.requestFlush` if an exception is thrown.

				module.exports = rawAsap;
				function rawAsap(task) {
					if (!queue.length) {
						requestFlush();
						flushing = true;
					}
					// Equivalent to push, but avoids a function call.
					queue[queue.length] = task;
				}

				var queue = [];
				// Once a flush has been requested, no further calls to `requestFlush` are
				// necessary until the next `flush` completes.
				var flushing = false;
				// `requestFlush` is an implementation-specific method that attempts to kick
				// off a `flush` event as quickly as possible. `flush` will attempt to exhaust
				// the event queue before yielding to the browser's own event loop.
				var requestFlush;
				// The position of the next task to execute in the task queue. This is
				// preserved between calls to `flush` so that it can be resumed if
				// a task throws an exception.
				var index = 0;
				// If a task schedules additional tasks recursively, the task queue can grow
				// unbounded. To prevent memory exhaustion, the task queue will periodically
				// truncate already-completed tasks.
				var capacity = 1024;

				// The flush function processes all tasks that have been scheduled with
				// `rawAsap` unless and until one of those tasks throws an exception.
				// If a task throws an exception, `flush` ensures that its state will remain
				// consistent and will resume where it left off when called again.
				// However, `flush` does not make any arrangements to be called again if an
				// exception is thrown.
				function flush() {
					while (index < queue.length) {
						var currentIndex = index;
						// Advance the index before calling the task. This ensures that we will
						// begin flushing on the next task the task throws an error.
						index = index + 1;
						queue[currentIndex].call();
						// Prevent leaking memory for long chains of recursive calls to `asap`.
						// If we call `asap` within tasks scheduled by `asap`, the queue will
						// grow, but to avoid an O(n) walk for every task we execute, we don't
						// shift tasks off the queue after they have been executed.
						// Instead, we periodically shift 1024 tasks off the queue.
						if (index > capacity) {
							// Manually shift all values starting at the index back to the
							// beginning of the queue.
							for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
								queue[scan] = queue[scan + index];
							}
							queue.length -= index;
							index = 0;
						}
					}
					queue.length = 0;
					index = 0;
					flushing = false;
				}

				// `requestFlush` is implemented using a strategy based on data collected from
				// every available SauceLabs Selenium web driver worker at time of writing.
				// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593

				// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
				// have WebKitMutationObserver but not un-prefixed MutationObserver.
				// Must use `global` or `self` instead of `window` to work in both frames and web
				// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.

				/* globals self */
				var scope = typeof global !== "undefined" ? global : self;
				var BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;

				// MutationObservers are desirable because they have high priority and work
				// reliably everywhere they are implemented.
				// They are implemented in all modern browsers.
				//
				// - Android 4-4.3
				// - Chrome 26-34
				// - Firefox 14-29
				// - Internet Explorer 11
				// - iPad Safari 6-7.1
				// - iPhone Safari 7-7.1
				// - Safari 6-7
				if (typeof BrowserMutationObserver === "function") {
					requestFlush = makeRequestCallFromMutationObserver(flush);

					// MessageChannels are desirable because they give direct access to the HTML
					// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
					// 11-12, and in web workers in many engines.
					// Although message channels yield to any queued rendering and IO tasks, they
					// would be better than imposing the 4ms delay of timers.
					// However, they do not work reliably in Internet Explorer or Safari.

					// Internet Explorer 10 is the only browser that has setImmediate but does
					// not have MutationObservers.
					// Although setImmediate yields to the browser's renderer, it would be
					// preferrable to falling back to setTimeout since it does not have
					// the minimum 4ms penalty.
					// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
					// Desktop to a lesser extent) that renders both setImmediate and
					// MessageChannel useless for the purposes of ASAP.
					// https://github.com/kriskowal/q/issues/396

					// Timers are implemented universally.
					// We fall back to timers in workers in most engines, and in foreground
					// contexts in the following browsers.
					// However, note that even this simple case requires nuances to operate in a
					// broad spectrum of browsers.
					//
					// - Firefox 3-13
					// - Internet Explorer 6-9
					// - iPad Safari 4.3
					// - Lynx 2.8.7
				} else {
					requestFlush = makeRequestCallFromTimer(flush);
				}

				// `requestFlush` requests that the high priority event queue be flushed as
				// soon as possible.
				// This is useful to prevent an error thrown in a task from stalling the event
				// queue if the exception handled by Node.js’s
				// `process.on("uncaughtException")` or by a domain.
				rawAsap.requestFlush = requestFlush;

				// To request a high priority event, we induce a mutation observer by toggling
				// the text of a text node between "1" and "-1".
				function makeRequestCallFromMutationObserver(callback) {
					var toggle = 1;
					var observer = new BrowserMutationObserver(callback);
					var node = document.createTextNode("");
					observer.observe(node, { characterData: true });
					return function requestCall() {
						toggle = -toggle;
						node.data = toggle;
					};
				}

				// The message channel technique was discovered by Malte Ubl and was the
				// original foundation for this library.
				// http://www.nonblocking.io/2011/06/windownexttick.html

				// Safari 6.0.5 (at least) intermittently fails to create message ports on a
				// page's first load. Thankfully, this version of Safari supports
				// MutationObservers, so we don't need to fall back in that case.

				// function makeRequestCallFromMessageChannel(callback) {
				//     var channel = new MessageChannel();
				//     channel.port1.onmessage = callback;
				//     return function requestCall() {
				//         channel.port2.postMessage(0);
				//     };
				// }

				// For reasons explained above, we are also unable to use `setImmediate`
				// under any circumstances.
				// Even if we were, there is another bug in Internet Explorer 10.
				// It is not sufficient to assign `setImmediate` to `requestFlush` because
				// `setImmediate` must be called *by name* and therefore must be wrapped in a
				// closure.
				// Never forget.

				// function makeRequestCallFromSetImmediate(callback) {
				//     return function requestCall() {
				//         setImmediate(callback);
				//     };
				// }

				// Safari 6.0 has a problem where timers will get lost while the user is
				// scrolling. This problem does not impact ASAP because Safari 6.0 supports
				// mutation observers, so that implementation is used instead.
				// However, if we ever elect to use timers in Safari, the prevalent work-around
				// is to add a scroll event listener that calls for a flush.

				// `setTimeout` does not call the passed callback if the delay is less than
				// approximately 7 in web workers in Firefox 8 through 18, and sometimes not
				// even then.

				function makeRequestCallFromTimer(callback) {
					return function requestCall() {
						// We dispatch a timeout with a specified delay of 0 for engines that
						// can reliably accommodate that request. This will usually be snapped
						// to a 4 milisecond delay, but once we're flushing, there's no delay
						// between events.
						var timeoutHandle = setTimeout(handleTimer, 0);
						// However, since this timer gets frequently dropped in Firefox
						// workers, we enlist an interval handle that will try to fire
						// an event 20 times per second until it succeeds.
						var intervalHandle = setInterval(handleTimer, 50);

						function handleTimer() {
							// Whichever timer succeeds will cancel both timers and
							// execute the callback.
							clearTimeout(timeoutHandle);
							clearInterval(intervalHandle);
							callback();
						}
					};
				}

				// This is for `asap.js` only.
				// Its name will be periodically randomized to break any code that depends on
				// its existence.
				rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;

				// ASAP was originally a nextTick shim included in Q. This was factored out
				// into this ASAP package. It was later adapted to RSVP which made further
				// amendments. These decisions, particularly to marginalize MessageChannel and
				// to capture the MutationObserver implementation in a closure, were integrated
				// back into ASAP proper.
				// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js

				/* WEBPACK VAR INJECTION */
			}).call(exports, function () {
				return this;
			}());

			/***/
		},
		/* 6 */
		/***/function (module, exports) {

			'use strict';

			// A simple class system, more documentation to come

			function extend(cls, name, props) {
				// This does that same thing as Object.create, but with support for IE8
				var F = function F() {};
				F.prototype = cls.prototype;
				var prototype = new F();

				// jshint undef: false
				var fnTest = /xyz/.test(function () {
					xyz;
				}) ? /\bparent\b/ : /.*/;
				props = props || {};

				for (var k in props) {
					var src = props[k];
					var parent = prototype[k];

					if (typeof parent === 'function' && typeof src === 'function' && fnTest.test(src)) {
						/*jshint -W083 */
						prototype[k] = function (src, parent) {
							return function () {
								// Save the current parent method
								var tmp = this.parent;

								// Set parent to the previous method, call, and restore
								this.parent = parent;
								var res = src.apply(this, arguments);
								this.parent = tmp;

								return res;
							};
						}(src, parent);
					} else {
						prototype[k] = src;
					}
				}

				prototype.typename = name;

				var new_cls = function new_cls() {
					if (prototype.init) {
						prototype.init.apply(this, arguments);
					}
				};

				new_cls.prototype = prototype;
				new_cls.prototype.constructor = new_cls;

				new_cls.extend = function (name, props) {
					if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
						props = name;
						name = 'anonymous';
					}
					return extend(new_cls, name, props);
				};

				return new_cls;
			}

			module.exports = extend(Object, 'Object', {});

			/***/
		},
		/* 7 */
		/***/function (module, exports, __webpack_require__) {

			'use strict';

			var lib = __webpack_require__(1);
			var r = __webpack_require__(8);

			function normalize(value, defaultValue) {
				if (value === null || value === undefined || value === false) {
					return defaultValue;
				}
				return value;
			}

			var filters = {
				abs: Math.abs,

				batch: function batch(arr, linecount, fill_with) {
					var i;
					var res = [];
					var tmp = [];

					for (i = 0; i < arr.length; i++) {
						if (i % linecount === 0 && tmp.length) {
							res.push(tmp);
							tmp = [];
						}

						tmp.push(arr[i]);
					}

					if (tmp.length) {
						if (fill_with) {
							for (i = tmp.length; i < linecount; i++) {
								tmp.push(fill_with);
							}
						}

						res.push(tmp);
					}

					return res;
				},

				capitalize: function capitalize(str) {
					str = normalize(str, '');
					var ret = str.toLowerCase();
					return r.copySafeness(str, ret.charAt(0).toUpperCase() + ret.slice(1));
				},

				center: function center(str, width) {
					str = normalize(str, '');
					width = width || 80;

					if (str.length >= width) {
						return str;
					}

					var spaces = width - str.length;
					var pre = lib.repeat(' ', spaces / 2 - spaces % 2);
					var post = lib.repeat(' ', spaces / 2);
					return r.copySafeness(str, pre + str + post);
				},

				'default': function _default(val, def, bool) {
					if (bool) {
						return val ? val : def;
					} else {
						return val !== undefined ? val : def;
					}
				},

				dictsort: function dictsort(val, case_sensitive, by) {
					if (!lib.isObject(val)) {
						throw new lib.TemplateError('dictsort filter: val must be an object');
					}

					var array = [];
					for (var k in val) {
						// deliberately include properties from the object's prototype
						array.push([k, val[k]]);
					}

					var si;
					if (by === undefined || by === 'key') {
						si = 0;
					} else if (by === 'value') {
						si = 1;
					} else {
						throw new lib.TemplateError('dictsort filter: You can only sort by either key or value');
					}

					array.sort(function (t1, t2) {
						var a = t1[si];
						var b = t2[si];

						if (!case_sensitive) {
							if (lib.isString(a)) {
								a = a.toUpperCase();
							}
							if (lib.isString(b)) {
								b = b.toUpperCase();
							}
						}

						return a > b ? 1 : a === b ? 0 : -1;
					});

					return array;
				},

				dump: function dump(obj, spaces) {
					return JSON.stringify(obj, null, spaces);
				},

				escape: function escape(str) {
					if (str instanceof r.SafeString) {
						return str;
					}
					str = str === null || str === undefined ? '' : str;
					return r.markSafe(lib.escape(str.toString()));
				},

				safe: function safe(str) {
					if (str instanceof r.SafeString) {
						return str;
					}
					str = str === null || str === undefined ? '' : str;
					return r.markSafe(str.toString());
				},

				first: function first(arr) {
					return arr[0];
				},

				groupby: function groupby(arr, attr) {
					return lib.groupBy(arr, attr);
				},

				indent: function indent(str, width, indentfirst) {
					str = normalize(str, '');

					if (str === '') return '';

					width = width || 4;
					var res = '';
					var lines = str.split('\n');
					var sp = lib.repeat(' ', width);

					for (var i = 0; i < lines.length; i++) {
						if (i === 0 && !indentfirst) {
							res += lines[i] + '\n';
						} else {
							res += sp + lines[i] + '\n';
						}
					}

					return r.copySafeness(str, res);
				},

				join: function join(arr, del, attr) {
					del = del || '';

					if (attr) {
						arr = lib.map(arr, function (v) {
							return v[attr];
						});
					}

					return arr.join(del);
				},

				last: function last(arr) {
					return arr[arr.length - 1];
				},

				length: function length(val) {
					var value = normalize(val, '');

					if (value !== undefined) {
						if (typeof Map === 'function' && value instanceof Map || typeof Set === 'function' && value instanceof Set) {
							// ECMAScript 2015 Maps and Sets
							return value.size;
						}
						if (lib.isObject(value) && !(value instanceof r.SafeString)) {
							// Objects (besides SafeStrings), non-primative Arrays
							return Object.keys(value).length;
						}
						return value.length;
					}
					return 0;
				},

				list: function list(val) {
					if (lib.isString(val)) {
						return val.split('');
					} else if (lib.isObject(val)) {
						var keys = [];

						if (Object.keys) {
							keys = Object.keys(val);
						} else {
							for (var k in val) {
								keys.push(k);
							}
						}

						return lib.map(keys, function (k) {
							return { key: k,
								value: val[k] };
						});
					} else if (lib.isArray(val)) {
						return val;
					} else {
						throw new lib.TemplateError('list filter: type not iterable');
					}
				},

				lower: function lower(str) {
					str = normalize(str, '');
					return str.toLowerCase();
				},

				nl2br: function nl2br(str) {
					if (str === null || str === undefined) {
						return '';
					}
					return r.copySafeness(str, str.replace(/\r\n|\n/g, '<br />\n'));
				},

				random: function random(arr) {
					return arr[Math.floor(Math.random() * arr.length)];
				},

				rejectattr: function rejectattr(arr, attr) {
					return arr.filter(function (item) {
						return !item[attr];
					});
				},

				selectattr: function selectattr(arr, attr) {
					return arr.filter(function (item) {
						return !!item[attr];
					});
				},

				replace: function replace(str, old, new_, maxCount) {
					var originalStr = str;

					if (old instanceof RegExp) {
						return str.replace(old, new_);
					}

					if (typeof maxCount === 'undefined') {
						maxCount = -1;
					}

					var res = ''; // Output

					// Cast Numbers in the search term to string
					if (typeof old === 'number') {
						old = old + '';
					} else if (typeof old !== 'string') {
						// If it is something other than number or string,
						// return the original string
						return str;
					}

					// Cast numbers in the replacement to string
					if (typeof str === 'number') {
						str = str + '';
					}

					// If by now, we don't have a string, throw it back
					if (typeof str !== 'string' && !(str instanceof r.SafeString)) {
						return str;
					}

					// ShortCircuits
					if (old === '') {
						// Mimic the python behaviour: empty string is replaced
						// by replacement e.g. "abc"|replace("", ".") -> .a.b.c.
						res = new_ + str.split('').join(new_) + new_;
						return r.copySafeness(str, res);
					}

					var nextIndex = str.indexOf(old);
					// if # of replacements to perform is 0, or the string to does
					// not contain the old value, return the string
					if (maxCount === 0 || nextIndex === -1) {
						return str;
					}

					var pos = 0;
					var count = 0; // # of replacements made

					while (nextIndex > -1 && (maxCount === -1 || count < maxCount)) {
						// Grab the next chunk of src string and add it with the
						// replacement, to the result
						res += str.substring(pos, nextIndex) + new_;
						// Increment our pointer in the src string
						pos = nextIndex + old.length;
						count++;
						// See if there are any more replacements to be made
						nextIndex = str.indexOf(old, pos);
					}

					// We've either reached the end, or done the max # of
					// replacements, tack on any remaining string
					if (pos < str.length) {
						res += str.substring(pos);
					}

					return r.copySafeness(originalStr, res);
				},

				reverse: function reverse(val) {
					var arr;
					if (lib.isString(val)) {
						arr = filters.list(val);
					} else {
						// Copy it
						arr = lib.map(val, function (v) {
							return v;
						});
					}

					arr.reverse();

					if (lib.isString(val)) {
						return r.copySafeness(val, arr.join(''));
					}
					return arr;
				},

				round: function round(val, precision, method) {
					precision = precision || 0;
					var factor = Math.pow(10, precision);
					var rounder;

					if (method === 'ceil') {
						rounder = Math.ceil;
					} else if (method === 'floor') {
						rounder = Math.floor;
					} else {
						rounder = Math.round;
					}

					return rounder(val * factor) / factor;
				},

				slice: function slice(arr, slices, fillWith) {
					var sliceLength = Math.floor(arr.length / slices);
					var extra = arr.length % slices;
					var offset = 0;
					var res = [];

					for (var i = 0; i < slices; i++) {
						var start = offset + i * sliceLength;
						if (i < extra) {
							offset++;
						}
						var end = offset + (i + 1) * sliceLength;

						var slice = arr.slice(start, end);
						if (fillWith && i >= extra) {
							slice.push(fillWith);
						}
						res.push(slice);
					}

					return res;
				},

				sum: function sum(arr, attr, start) {
					var sum = 0;

					if (typeof start === 'number') {
						sum += start;
					}

					if (attr) {
						arr = lib.map(arr, function (v) {
							return v[attr];
						});
					}

					for (var i = 0; i < arr.length; i++) {
						sum += arr[i];
					}

					return sum;
				},

				sort: r.makeMacro(['value', 'reverse', 'case_sensitive', 'attribute'], [], function (arr, reverse, caseSens, attr) {
					// Copy it
					arr = lib.map(arr, function (v) {
						return v;
					});

					arr.sort(function (a, b) {
						var x, y;

						if (attr) {
							x = a[attr];
							y = b[attr];
						} else {
							x = a;
							y = b;
						}

						if (!caseSens && lib.isString(x) && lib.isString(y)) {
							x = x.toLowerCase();
							y = y.toLowerCase();
						}

						if (x < y) {
							return reverse ? 1 : -1;
						} else if (x > y) {
							return reverse ? -1 : 1;
						} else {
							return 0;
						}
					});

					return arr;
				}),

				string: function string(obj) {
					return r.copySafeness(obj, obj);
				},

				striptags: function striptags(input, preserve_linebreaks) {
					input = normalize(input, '');
					preserve_linebreaks = preserve_linebreaks || false;
					var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>|<!--[\s\S]*?-->/gi;
					var trimmedInput = filters.trim(input.replace(tags, ''));
					var res = '';
					if (preserve_linebreaks) {
						res = trimmedInput.replace(/^ +| +$/gm, '') // remove leading and trailing spaces
						.replace(/ +/g, ' ') // squash adjacent spaces
						.replace(/(\r\n)/g, '\n') // normalize linebreaks (CRLF -> LF)
						.replace(/\n\n\n+/g, '\n\n'); // squash abnormal adjacent linebreaks
					} else {
						res = trimmedInput.replace(/\s+/gi, ' ');
					}
					return r.copySafeness(input, res);
				},

				title: function title(str) {
					str = normalize(str, '');
					var words = str.split(' ');
					for (var i = 0; i < words.length; i++) {
						words[i] = filters.capitalize(words[i]);
					}
					return r.copySafeness(str, words.join(' '));
				},

				trim: function trim(str) {
					return r.copySafeness(str, str.replace(/^\s*|\s*$/g, ''));
				},

				truncate: function truncate(input, length, killwords, end) {
					var orig = input;
					input = normalize(input, '');
					length = length || 255;

					if (input.length <= length) return input;

					if (killwords) {
						input = input.substring(0, length);
					} else {
						var idx = input.lastIndexOf(' ', length);
						if (idx === -1) {
							idx = length;
						}

						input = input.substring(0, idx);
					}

					input += end !== undefined && end !== null ? end : '...';
					return r.copySafeness(orig, input);
				},

				upper: function upper(str) {
					str = normalize(str, '');
					return str.toUpperCase();
				},

				urlencode: function urlencode(obj) {
					var enc = encodeURIComponent;
					if (lib.isString(obj)) {
						return enc(obj);
					} else {
						var parts;
						if (lib.isArray(obj)) {
							parts = obj.map(function (item) {
								return enc(item[0]) + '=' + enc(item[1]);
							});
						} else {
							parts = [];
							for (var k in obj) {
								if (obj.hasOwnProperty(k)) {
									parts.push(enc(k) + '=' + enc(obj[k]));
								}
							}
						}
						return parts.join('&');
					}
				},

				urlize: function urlize(str, length, nofollow) {
					if (isNaN(length)) length = Infinity;

					var noFollowAttr = nofollow === true ? ' rel="nofollow"' : '';

					// For the jinja regexp, see
					// https://github.com/mitsuhiko/jinja2/blob/f15b814dcba6aa12bc74d1f7d0c881d55f7126be/jinja2/utils.py#L20-L23
					var puncRE = /^(?:\(|<|&lt;)?(.*?)(?:\.|,|\)|\n|&gt;)?$/;
					// from http://blog.gerv.net/2011/05/html5_email_address_regexp/
					var emailRE = /^[\w.!#$%&'*+\-\/=?\^`{|}~]+@[a-z\d\-]+(\.[a-z\d\-]+)+$/i;
					var httpHttpsRE = /^https?:\/\/.*$/;
					var wwwRE = /^www\./;
					var tldRE = /\.(?:org|net|com)(?:\:|\/|$)/;

					var words = str.split(/(\s+)/).filter(function (word) {
						// If the word has no length, bail. This can happen for str with
						// trailing whitespace.
						return word && word.length;
					}).map(function (word) {
						var matches = word.match(puncRE);
						var possibleUrl = matches && matches[1] || word;

						// url that starts with http or https
						if (httpHttpsRE.test(possibleUrl)) return '<a href="' + possibleUrl + '"' + noFollowAttr + '>' + possibleUrl.substr(0, length) + '</a>';

						// url that starts with www.
						if (wwwRE.test(possibleUrl)) return '<a href="http://' + possibleUrl + '"' + noFollowAttr + '>' + possibleUrl.substr(0, length) + '</a>';

						// an email address of the form username@domain.tld
						if (emailRE.test(possibleUrl)) return '<a href="mailto:' + possibleUrl + '">' + possibleUrl + '</a>';

						// url that ends in .com, .org or .net that is not an email address
						if (tldRE.test(possibleUrl)) return '<a href="http://' + possibleUrl + '"' + noFollowAttr + '>' + possibleUrl.substr(0, length) + '</a>';

						return word;
					});

					return words.join('');
				},

				wordcount: function wordcount(str) {
					str = normalize(str, '');
					var words = str ? str.match(/\w+/g) : null;
					return words ? words.length : null;
				},

				'float': function float(val, def) {
					var res = parseFloat(val);
					return isNaN(res) ? def : res;
				},

				'int': function int(val, def) {
					var res = parseInt(val, 10);
					return isNaN(res) ? def : res;
				}
			};

			// Aliases
			filters.d = filters['default'];
			filters.e = filters.escape;

			module.exports = filters;

			/***/
		},
		/* 8 */
		/***/function (module, exports, __webpack_require__) {

			'use strict';

			var lib = __webpack_require__(1);
			var Obj = __webpack_require__(6);

			// Frames keep track of scoping both at compile-time and run-time so
			// we know how to access variables. Block tags can introduce special
			// variables, for example.
			var Frame = Obj.extend({
				init: function init(parent, isolateWrites) {
					this.variables = {};
					this.parent = parent;
					this.topLevel = false;
					// if this is true, writes (set) should never propagate upwards past
					// this frame to its parent (though reads may).
					this.isolateWrites = isolateWrites;
				},

				set: function set(name, val, resolveUp) {
					// Allow variables with dots by automatically creating the
					// nested structure
					var parts = name.split('.');
					var obj = this.variables;
					var frame = this;

					if (resolveUp) {
						if (frame = this.resolve(parts[0], true)) {
							frame.set(name, val);
							return;
						}
					}

					for (var i = 0; i < parts.length - 1; i++) {
						var id = parts[i];

						if (!obj[id]) {
							obj[id] = {};
						}
						obj = obj[id];
					}

					obj[parts[parts.length - 1]] = val;
				},

				get: function get(name) {
					var val = this.variables[name];
					if (val !== undefined) {
						return val;
					}
					return null;
				},

				lookup: function lookup(name) {
					var p = this.parent;
					var val = this.variables[name];
					if (val !== undefined) {
						return val;
					}
					return p && p.lookup(name);
				},

				resolve: function resolve(name, forWrite) {
					var p = forWrite && this.isolateWrites ? undefined : this.parent;
					var val = this.variables[name];
					if (val !== undefined) {
						return this;
					}
					return p && p.resolve(name);
				},

				push: function push(isolateWrites) {
					return new Frame(this, isolateWrites);
				},

				pop: function pop() {
					return this.parent;
				}
			});

			function makeMacro(argNames, kwargNames, func) {
				return function () {
					var argCount = numArgs(arguments);
					var args;
					var kwargs = getKeywordArgs(arguments);
					var i;

					if (argCount > argNames.length) {
						args = Array.prototype.slice.call(arguments, 0, argNames.length);

						// Positional arguments that should be passed in as
						// keyword arguments (essentially default values)
						var vals = Array.prototype.slice.call(arguments, args.length, argCount);
						for (i = 0; i < vals.length; i++) {
							if (i < kwargNames.length) {
								kwargs[kwargNames[i]] = vals[i];
							}
						}

						args.push(kwargs);
					} else if (argCount < argNames.length) {
						args = Array.prototype.slice.call(arguments, 0, argCount);

						for (i = argCount; i < argNames.length; i++) {
							var arg = argNames[i];

							// Keyword arguments that should be passed as
							// positional arguments, i.e. the caller explicitly
							// used the name of a positional arg
							args.push(kwargs[arg]);
							delete kwargs[arg];
						}

						args.push(kwargs);
					} else {
						args = arguments;
					}

					return func.apply(this, args);
				};
			}

			function makeKeywordArgs(obj) {
				obj.__keywords = true;
				return obj;
			}

			function getKeywordArgs(args) {
				var len = args.length;
				if (len) {
					var lastArg = args[len - 1];
					if (lastArg && lastArg.hasOwnProperty('__keywords')) {
						return lastArg;
					}
				}
				return {};
			}

			function numArgs(args) {
				var len = args.length;
				if (len === 0) {
					return 0;
				}

				var lastArg = args[len - 1];
				if (lastArg && lastArg.hasOwnProperty('__keywords')) {
					return len - 1;
				} else {
					return len;
				}
			}

			// A SafeString object indicates that the string should not be
			// autoescaped. This happens magically because autoescaping only
			// occurs on primitive string objects.
			function SafeString(val) {
				if (typeof val !== 'string') {
					return val;
				}

				this.val = val;
				this.length = val.length;
			}

			SafeString.prototype = Object.create(String.prototype, {
				length: { writable: true, configurable: true, value: 0 }
			});
			SafeString.prototype.valueOf = function () {
				return this.val;
			};
			SafeString.prototype.toString = function () {
				return this.val;
			};

			function copySafeness(dest, target) {
				if (dest instanceof SafeString) {
					return new SafeString(target);
				}
				return target.toString();
			}

			function markSafe(val) {
				var type = typeof val === 'undefined' ? 'undefined' : _typeof(val);

				if (type === 'string') {
					return new SafeString(val);
				} else if (type !== 'function') {
					return val;
				} else {
					return function () {
						var ret = val.apply(this, arguments);

						if (typeof ret === 'string') {
							return new SafeString(ret);
						}

						return ret;
					};
				}
			}

			function suppressValue(val, autoescape) {
				val = val !== undefined && val !== null ? val : '';

				if (autoescape && !(val instanceof SafeString)) {
					val = lib.escape(val.toString());
				}

				return val;
			}

			function ensureDefined(val, lineno, colno) {
				if (val === null || val === undefined) {
					throw new lib.TemplateError('attempted to output null or undefined value', lineno + 1, colno + 1);
				}
				return val;
			}

			function memberLookup(obj, val) {
				obj = obj || {};

				if (typeof obj[val] === 'function') {
					return function () {
						return obj[val].apply(obj, arguments);
					};
				}

				return obj[val];
			}

			function callWrap(obj, name, context, args) {
				if (!obj) {
					throw new Error('Unable to call `' + name + '`, which is undefined or falsey');
				} else if (typeof obj !== 'function') {
					throw new Error('Unable to call `' + name + '`, which is not a function');
				}

				// jshint validthis: true
				return obj.apply(context, args);
			}

			function contextOrFrameLookup(context, frame, name) {
				var val = frame.lookup(name);
				return val !== undefined ? val : context.lookup(name);
			}

			function handleError(error, lineno, colno) {
				if (error.lineno) {
					return error;
				} else {
					return new lib.TemplateError(error, lineno, colno);
				}
			}

			function asyncEach(arr, dimen, iter, cb) {
				if (lib.isArray(arr)) {
					var len = arr.length;

					lib.asyncIter(arr, function (item, i, next) {
						switch (dimen) {
							case 1:
								iter(item, i, len, next);break;
							case 2:
								iter(item[0], item[1], i, len, next);break;
							case 3:
								iter(item[0], item[1], item[2], i, len, next);break;
							default:
								item.push(i, next);
								iter.apply(this, item);
						}
					}, cb);
				} else {
					lib.asyncFor(arr, function (key, val, i, len, next) {
						iter(key, val, i, len, next);
					}, cb);
				}
			}

			function asyncAll(arr, dimen, func, cb) {
				var finished = 0;
				var len, i;
				var outputArr;

				function done(i, output) {
					finished++;
					outputArr[i] = output;

					if (finished === len) {
						cb(null, outputArr.join(''));
					}
				}

				if (lib.isArray(arr)) {
					len = arr.length;
					outputArr = new Array(len);

					if (len === 0) {
						cb(null, '');
					} else {
						for (i = 0; i < arr.length; i++) {
							var item = arr[i];

							switch (dimen) {
								case 1:
									func(item, i, len, done);break;
								case 2:
									func(item[0], item[1], i, len, done);break;
								case 3:
									func(item[0], item[1], item[2], i, len, done);break;
								default:
									item.push(i, done);
									// jshint validthis: true
									func.apply(this, item);
							}
						}
					}
				} else {
					var keys = lib.keys(arr);
					len = keys.length;
					outputArr = new Array(len);

					if (len === 0) {
						cb(null, '');
					} else {
						for (i = 0; i < keys.length; i++) {
							var k = keys[i];
							func(k, arr[k], i, len, done);
						}
					}
				}
			}

			module.exports = {
				Frame: Frame,
				makeMacro: makeMacro,
				makeKeywordArgs: makeKeywordArgs,
				numArgs: numArgs,
				suppressValue: suppressValue,
				ensureDefined: ensureDefined,
				memberLookup: memberLookup,
				contextOrFrameLookup: contextOrFrameLookup,
				callWrap: callWrap,
				handleError: handleError,
				isArray: lib.isArray,
				keys: lib.keys,
				SafeString: SafeString,
				copySafeness: copySafeness,
				markSafe: markSafe,
				asyncEach: asyncEach,
				asyncAll: asyncAll,
				inOperator: lib.inOperator
			};

			/***/
		},
		/* 9 */
		/***/function (module, exports) {

			'use strict';

			function _cycler(items) {
				var index = -1;

				return {
					current: null,
					reset: function reset() {
						index = -1;
						this.current = null;
					},

					next: function next() {
						index++;
						if (index >= items.length) {
							index = 0;
						}

						this.current = items[index];
						return this.current;
					}
				};
			}

			function _joiner(sep) {
				sep = sep || ',';
				var first = true;

				return function () {
					var val = first ? '' : sep;
					first = false;
					return val;
				};
			}

			// Making this a function instead so it returns a new object
			// each time it's called. That way, if something like an environment
			// uses it, they will each have their own copy.
			function globals() {
				return {
					range: function range(start, stop, step) {
						if (typeof stop === 'undefined') {
							stop = start;
							start = 0;
							step = 1;
						} else if (!step) {
							step = 1;
						}

						var arr = [];
						var i;
						if (step > 0) {
							for (i = start; i < stop; i += step) {
								arr.push(i);
							}
						} else {
							for (i = start; i > stop; i += step) {
								arr.push(i);
							}
						}
						return arr;
					},

					// lipsum: function(n, html, min, max) {
					// },

					cycler: function cycler() {
						return _cycler(Array.prototype.slice.call(arguments));
					},

					joiner: function joiner(sep) {
						return _joiner(sep);
					}
				};
			}

			module.exports = globals;

			/***/
		},
		/* 10 */
		/***/function (module, exports, __webpack_require__) {

			var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; /* WEBPACK VAR INJECTION */(function (setImmediate, process) {
				// MIT license (by Elan Shanker).
				(function (globals) {
					'use strict';

					var executeSync = function executeSync() {
						var args = Array.prototype.slice.call(arguments);
						if (typeof args[0] === 'function') {
							args[0].apply(null, args.splice(1));
						}
					};

					var executeAsync = function executeAsync(fn) {
						if (typeof setImmediate === 'function') {
							setImmediate(fn);
						} else if (typeof process !== 'undefined' && process.nextTick) {
							process.nextTick(fn);
						} else {
							setTimeout(fn, 0);
						}
					};

					var makeIterator = function makeIterator(tasks) {
						var makeCallback = function makeCallback(index) {
							var fn = function fn() {
								if (tasks.length) {
									tasks[index].apply(null, arguments);
								}
								return fn.next();
							};
							fn.next = function () {
								return index < tasks.length - 1 ? makeCallback(index + 1) : null;
							};
							return fn;
						};
						return makeCallback(0);
					};

					var _isArray = Array.isArray || function (maybeArray) {
						return Object.prototype.toString.call(maybeArray) === '[object Array]';
					};

					var waterfall = function waterfall(tasks, callback, forceAsync) {
						var nextTick = forceAsync ? executeAsync : executeSync;
						callback = callback || function () {};
						if (!_isArray(tasks)) {
							var err = new Error('First argument to waterfall must be an array of functions');
							return callback(err);
						}
						if (!tasks.length) {
							return callback();
						}
						var wrapIterator = function wrapIterator(iterator) {
							return function (err) {
								if (err) {
									callback.apply(null, arguments);
									callback = function callback() {};
								} else {
									var args = Array.prototype.slice.call(arguments, 1);
									var next = iterator.next();
									if (next) {
										args.push(wrapIterator(next));
									} else {
										args.push(callback);
									}
									nextTick(function () {
										iterator.apply(null, args);
									});
								}
							};
						};
						wrapIterator(makeIterator(tasks))();
					};

					if (true) {
						!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
							return waterfall;
						}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // RequireJS
					} else if (typeof module !== 'undefined' && module.exports) {
						module.exports = waterfall; // CommonJS
					} else {
						globals.waterfall = waterfall; // <script>
					}
				})(this);

				/* WEBPACK VAR INJECTION */
			}).call(exports, __webpack_require__(11).setImmediate, __webpack_require__(13));

			/***/
		},
		/* 11 */
		/***/function (module, exports, __webpack_require__) {

			var apply = Function.prototype.apply;

			// DOM APIs, for completeness

			exports.setTimeout = function () {
				return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
			};
			exports.setInterval = function () {
				return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
			};
			exports.clearTimeout = exports.clearInterval = function (timeout) {
				if (timeout) {
					timeout.close();
				}
			};

			function Timeout(id, clearFn) {
				this._id = id;
				this._clearFn = clearFn;
			}
			Timeout.prototype.unref = Timeout.prototype.ref = function () {};
			Timeout.prototype.close = function () {
				this._clearFn.call(window, this._id);
			};

			// Does not start the time, just sets up the members needed.
			exports.enroll = function (item, msecs) {
				clearTimeout(item._idleTimeoutId);
				item._idleTimeout = msecs;
			};

			exports.unenroll = function (item) {
				clearTimeout(item._idleTimeoutId);
				item._idleTimeout = -1;
			};

			exports._unrefActive = exports.active = function (item) {
				clearTimeout(item._idleTimeoutId);

				var msecs = item._idleTimeout;
				if (msecs >= 0) {
					item._idleTimeoutId = setTimeout(function onTimeout() {
						if (item._onTimeout) item._onTimeout();
					}, msecs);
				}
			};

			// setimmediate attaches itself to the global object
			__webpack_require__(12);
			exports.setImmediate = setImmediate;
			exports.clearImmediate = clearImmediate;

			/***/
		},
		/* 12 */
		/***/function (module, exports, __webpack_require__) {

			/* WEBPACK VAR INJECTION */(function (global, process) {
				(function (global, undefined) {
					"use strict";

					if (global.setImmediate) {
						return;
					}

					var nextHandle = 1; // Spec says greater than zero
					var tasksByHandle = {};
					var currentlyRunningATask = false;
					var doc = global.document;
					var registerImmediate;

					function setImmediate(callback) {
						// Callback can either be a function or a string
						if (typeof callback !== "function") {
							callback = new Function("" + callback);
						}
						// Copy function arguments
						var args = new Array(arguments.length - 1);
						for (var i = 0; i < args.length; i++) {
							args[i] = arguments[i + 1];
						}
						// Store and register the task
						var task = { callback: callback, args: args };
						tasksByHandle[nextHandle] = task;
						registerImmediate(nextHandle);
						return nextHandle++;
					}

					function clearImmediate(handle) {
						delete tasksByHandle[handle];
					}

					function run(task) {
						var callback = task.callback;
						var args = task.args;
						switch (args.length) {
							case 0:
								callback();
								break;
							case 1:
								callback(args[0]);
								break;
							case 2:
								callback(args[0], args[1]);
								break;
							case 3:
								callback(args[0], args[1], args[2]);
								break;
							default:
								callback.apply(undefined, args);
								break;
						}
					}

					function runIfPresent(handle) {
						// From the spec: "Wait until any invocations of this algorithm started before this one have completed."
						// So if we're currently running a task, we'll need to delay this invocation.
						if (currentlyRunningATask) {
							// Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
							// "too much recursion" error.
							setTimeout(runIfPresent, 0, handle);
						} else {
							var task = tasksByHandle[handle];
							if (task) {
								currentlyRunningATask = true;
								try {
									run(task);
								} finally {
									clearImmediate(handle);
									currentlyRunningATask = false;
								}
							}
						}
					}

					function installNextTickImplementation() {
						registerImmediate = function registerImmediate(handle) {
							process.nextTick(function () {
								runIfPresent(handle);
							});
						};
					}

					function canUsePostMessage() {
						// The test against `importScripts` prevents this implementation from being installed inside a web worker,
						// where `global.postMessage` means something completely different and can't be used for this purpose.
						if (global.postMessage && !global.importScripts) {
							var postMessageIsAsynchronous = true;
							var oldOnMessage = global.onmessage;
							global.onmessage = function () {
								postMessageIsAsynchronous = false;
							};
							global.postMessage("", "*");
							global.onmessage = oldOnMessage;
							return postMessageIsAsynchronous;
						}
					}

					function installPostMessageImplementation() {
						// Installs an event handler on `global` for the `message` event: see
						// * https://developer.mozilla.org/en/DOM/window.postMessage
						// * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

						var messagePrefix = "setImmediate$" + Math.random() + "$";
						var onGlobalMessage = function onGlobalMessage(event) {
							if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
								runIfPresent(+event.data.slice(messagePrefix.length));
							}
						};

						if (global.addEventListener) {
							global.addEventListener("message", onGlobalMessage, false);
						} else {
							global.attachEvent("onmessage", onGlobalMessage);
						}

						registerImmediate = function registerImmediate(handle) {
							global.postMessage(messagePrefix + handle, "*");
						};
					}

					function installMessageChannelImplementation() {
						var channel = new MessageChannel();
						channel.port1.onmessage = function (event) {
							var handle = event.data;
							runIfPresent(handle);
						};

						registerImmediate = function registerImmediate(handle) {
							channel.port2.postMessage(handle);
						};
					}

					function installReadyStateChangeImplementation() {
						var html = doc.documentElement;
						registerImmediate = function registerImmediate(handle) {
							// Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
							// into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
							var script = doc.createElement("script");
							script.onreadystatechange = function () {
								runIfPresent(handle);
								script.onreadystatechange = null;
								html.removeChild(script);
								script = null;
							};
							html.appendChild(script);
						};
					}

					function installSetTimeoutImplementation() {
						registerImmediate = function registerImmediate(handle) {
							setTimeout(runIfPresent, 0, handle);
						};
					}

					// If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
					var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
					attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

					// Don't get fooled by e.g. browserify environments.
					if ({}.toString.call(global.process) === "[object process]") {
						// For Node.js before 0.9
						installNextTickImplementation();
					} else if (canUsePostMessage()) {
						// For non-IE10 modern browsers
						installPostMessageImplementation();
					} else if (global.MessageChannel) {
						// For web workers, where supported
						installMessageChannelImplementation();
					} else if (doc && "onreadystatechange" in doc.createElement("script")) {
						// For IE 6–8
						installReadyStateChangeImplementation();
					} else {
						// For older browsers
						installSetTimeoutImplementation();
					}

					attachTo.setImmediate = setImmediate;
					attachTo.clearImmediate = clearImmediate;
				})(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self);

				/* WEBPACK VAR INJECTION */
			}).call(exports, function () {
				return this;
			}(), __webpack_require__(13));

			/***/
		},
		/* 13 */
		/***/function (module, exports) {

			/***/},
		/* 14 */
		/***/function (module, exports, __webpack_require__) {

			'use strict';

			var Loader = __webpack_require__(15);

			var PrecompiledLoader = Loader.extend({
				init: function init(compiledTemplates) {
					this.precompiled = compiledTemplates || {};
				},

				getSource: function getSource(name) {
					if (this.precompiled[name]) {
						return {
							src: { type: 'code',
								obj: this.precompiled[name] },
							path: name
						};
					}
					return null;
				}
			});

			module.exports = PrecompiledLoader;

			/***/
		},
		/* 15 */
		/***/function (module, exports, __webpack_require__) {

			'use strict';

			var path = __webpack_require__(3);
			var Obj = __webpack_require__(6);
			var lib = __webpack_require__(1);

			var Loader = Obj.extend({
				on: function on(name, func) {
					this.listeners = this.listeners || {};
					this.listeners[name] = this.listeners[name] || [];
					this.listeners[name].push(func);
				},

				emit: function emit(name /*, arg1, arg2, ...*/) {
					var args = Array.prototype.slice.call(arguments, 1);

					if (this.listeners && this.listeners[name]) {
						lib.each(this.listeners[name], function (listener) {
							listener.apply(null, args);
						});
					}
				},

				resolve: function resolve(from, to) {
					return path.resolve(path.dirname(from), to);
				},

				isRelative: function isRelative(filename) {
					return filename.indexOf('./') === 0 || filename.indexOf('../') === 0;
				}
			});

			module.exports = Loader;

			/***/
		},
		/* 16 */
		/***/function (module, exports) {

			function installCompat() {
				'use strict';

				// This must be called like `nunjucks.installCompat` so that `this`
				// references the nunjucks instance

				var runtime = this.runtime; // jshint ignore:line
				var lib = this.lib; // jshint ignore:line
				var Compiler = this.compiler.Compiler; // jshint ignore:line
				var Parser = this.parser.Parser; // jshint ignore:line
				var nodes = this.nodes; // jshint ignore:line
				var lexer = this.lexer; // jshint ignore:line

				var orig_contextOrFrameLookup = runtime.contextOrFrameLookup;
				var orig_Compiler_assertType = Compiler.prototype.assertType;
				var orig_Parser_parseAggregate = Parser.prototype.parseAggregate;
				var orig_memberLookup = runtime.memberLookup;

				function uninstall() {
					runtime.contextOrFrameLookup = orig_contextOrFrameLookup;
					Compiler.prototype.assertType = orig_Compiler_assertType;
					Parser.prototype.parseAggregate = orig_Parser_parseAggregate;
					runtime.memberLookup = orig_memberLookup;
				}

				runtime.contextOrFrameLookup = function (context, frame, key) {
					var val = orig_contextOrFrameLookup.apply(this, arguments);
					if (val === undefined) {
						switch (key) {
							case 'True':
								return true;
							case 'False':
								return false;
							case 'None':
								return null;
						}
					}

					return val;
				};

				var Slice = nodes.Node.extend('Slice', {
					fields: ['start', 'stop', 'step'],
					init: function init(lineno, colno, start, stop, step) {
						start = start || new nodes.Literal(lineno, colno, null);
						stop = stop || new nodes.Literal(lineno, colno, null);
						step = step || new nodes.Literal(lineno, colno, 1);
						this.parent(lineno, colno, start, stop, step);
					}
				});

				Compiler.prototype.assertType = function (node) {
					if (node instanceof Slice) {
						return;
					}
					return orig_Compiler_assertType.apply(this, arguments);
				};
				Compiler.prototype.compileSlice = function (node, frame) {
					this.emit('(');
					this._compileExpression(node.start, frame);
					this.emit('),(');
					this._compileExpression(node.stop, frame);
					this.emit('),(');
					this._compileExpression(node.step, frame);
					this.emit(')');
				};

				function getTokensState(tokens) {
					return {
						index: tokens.index,
						lineno: tokens.lineno,
						colno: tokens.colno
					};
				}

				Parser.prototype.parseAggregate = function () {
					var self = this;
					var origState = getTokensState(this.tokens);
					// Set back one accounting for opening bracket/parens
					origState.colno--;
					origState.index--;
					try {
						return orig_Parser_parseAggregate.apply(this);
					} catch (e) {
						var errState = getTokensState(this.tokens);
						var rethrow = function rethrow() {
							lib.extend(self.tokens, errState);
							return e;
						};

						// Reset to state before original parseAggregate called
						lib.extend(this.tokens, origState);
						this.peeked = false;

						var tok = this.peekToken();
						if (tok.type !== lexer.TOKEN_LEFT_BRACKET) {
							throw rethrow();
						} else {
							this.nextToken();
						}

						var node = new Slice(tok.lineno, tok.colno);

						// If we don't encounter a colon while parsing, this is not a slice,
						// so re-raise the original exception.
						var isSlice = false;

						for (var i = 0; i <= node.fields.length; i++) {
							if (this.skip(lexer.TOKEN_RIGHT_BRACKET)) {
								break;
							}
							if (i === node.fields.length) {
								if (isSlice) {
									this.fail('parseSlice: too many slice components', tok.lineno, tok.colno);
								} else {
									break;
								}
							}
							if (this.skip(lexer.TOKEN_COLON)) {
								isSlice = true;
							} else {
								var field = node.fields[i];
								node[field] = this.parseExpression();
								isSlice = this.skip(lexer.TOKEN_COLON) || isSlice;
							}
						}
						if (!isSlice) {
							throw rethrow();
						}
						return new nodes.Array(tok.lineno, tok.colno, [node]);
					}
				};

				function sliceLookup(obj, start, stop, step) {
					obj = obj || [];
					if (start === null) {
						start = step < 0 ? obj.length - 1 : 0;
					}
					if (stop === null) {
						stop = step < 0 ? -1 : obj.length;
					} else {
						if (stop < 0) {
							stop += obj.length;
						}
					}

					if (start < 0) {
						start += obj.length;
					}

					var results = [];

					for (var i = start;; i += step) {
						if (i < 0 || i > obj.length) {
							break;
						}
						if (step > 0 && i >= stop) {
							break;
						}
						if (step < 0 && i <= stop) {
							break;
						}
						results.push(runtime.memberLookup(obj, i));
					}
					return results;
				}

				var ARRAY_MEMBERS = {
					pop: function pop(index) {
						if (index === undefined) {
							return this.pop();
						}
						if (index >= this.length || index < 0) {
							throw new Error('KeyError');
						}
						return this.splice(index, 1);
					},
					append: function append(element) {
						return this.push(element);
					},
					remove: function remove(element) {
						for (var i = 0; i < this.length; i++) {
							if (this[i] === element) {
								return this.splice(i, 1);
							}
						}
						throw new Error('ValueError');
					},
					count: function count(element) {
						var count = 0;
						for (var i = 0; i < this.length; i++) {
							if (this[i] === element) {
								count++;
							}
						}
						return count;
					},
					index: function index(element) {
						var i;
						if ((i = this.indexOf(element)) === -1) {
							throw new Error('ValueError');
						}
						return i;
					},
					find: function find(element) {
						return this.indexOf(element);
					},
					insert: function insert(index, elem) {
						return this.splice(index, 0, elem);
					}
				};
				var OBJECT_MEMBERS = {
					items: function items() {
						var ret = [];
						for (var k in this) {
							ret.push([k, this[k]]);
						}
						return ret;
					},
					values: function values() {
						var ret = [];
						for (var k in this) {
							ret.push(this[k]);
						}
						return ret;
					},
					keys: function keys() {
						var ret = [];
						for (var k in this) {
							ret.push(k);
						}
						return ret;
					},
					get: function get(key, def) {
						var output = this[key];
						if (output === undefined) {
							output = def;
						}
						return output;
					},
					has_key: function has_key(key) {
						return this.hasOwnProperty(key);
					},
					pop: function pop(key, def) {
						var output = this[key];
						if (output === undefined && def !== undefined) {
							output = def;
						} else if (output === undefined) {
							throw new Error('KeyError');
						} else {
							delete this[key];
						}
						return output;
					},
					popitem: function popitem() {
						for (var k in this) {
							// Return the first object pair.
							var val = this[k];
							delete this[k];
							return [k, val];
						}
						throw new Error('KeyError');
					},
					setdefault: function setdefault(key, def) {
						if (key in this) {
							return this[key];
						}
						if (def === undefined) {
							def = null;
						}
						return this[key] = def;
					},
					update: function update(kwargs) {
						for (var k in kwargs) {
							this[k] = kwargs[k];
						}
						return null; // Always returns None
					}
				};
				OBJECT_MEMBERS.iteritems = OBJECT_MEMBERS.items;
				OBJECT_MEMBERS.itervalues = OBJECT_MEMBERS.values;
				OBJECT_MEMBERS.iterkeys = OBJECT_MEMBERS.keys;
				runtime.memberLookup = function (obj, val, autoescape) {
					// jshint ignore:line
					if (arguments.length === 4) {
						return sliceLookup.apply(this, arguments);
					}
					obj = obj || {};

					// If the object is an object, return any of the methods that Python would
					// otherwise provide.
					if (lib.isArray(obj) && ARRAY_MEMBERS.hasOwnProperty(val)) {
						return function () {
							return ARRAY_MEMBERS[val].apply(obj, arguments);
						};
					}

					if (lib.isObject(obj) && OBJECT_MEMBERS.hasOwnProperty(val)) {
						return function () {
							return OBJECT_MEMBERS[val].apply(obj, arguments);
						};
					}

					return orig_memberLookup.apply(this, arguments);
				};

				return uninstall;
			}

			module.exports = installCompat;

			/***/
		}]
		/******/)
	);
});
;

},{}]},{},["/mnt/c/Users/backo/liveblog/server/liveblog/themes/themes_assets/simple/node_modules/liveblog-default-theme/js/liveblog.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIi4uL2lmcmFtZS1yZXNpemVyL2pzL2lmcmFtZVJlc2l6ZXIuY29udGVudFdpbmRvdy5taW4uanMiLCJqcy9saXZlYmxvZy5qcyIsImpzL3RoZW1lL2Fkcy1tYW5hZ2VyLmpzIiwianMvdGhlbWUvZXZlbnRzLmpzIiwianMvdGhlbWUvaGFuZGxlcnMuanMiLCJqcy90aGVtZS9oZWxwZXJzLmpzIiwianMvdGhlbWUvaW5kZXguanMiLCJqcy90aGVtZS9sb2NhbC1hbmFseXRpY3MuanMiLCJqcy90aGVtZS9wYWdldmlldy5qcyIsImpzL3RoZW1lL3Blcm1hbGluay5qcyIsImpzL3RoZW1lL3NsaWRlc2hvdy5qcyIsImpzL3RoZW1lL3RlbXBsYXRlcy5qcyIsImpzL3RoZW1lL3ZpZXcuanMiLCJqcy90aGVtZS92aWV3bW9kZWwuanMiLCJ0ZW1wbGF0ZXMvdGVtcGxhdGUtYWQtZW50cnkuaHRtbCIsInRlbXBsYXRlcy90ZW1wbGF0ZS1hdXRob3IuaHRtbCIsInRlbXBsYXRlcy90ZW1wbGF0ZS1pdGVtLWNvbW1lbnQuaHRtbCIsInRlbXBsYXRlcy90ZW1wbGF0ZS1pdGVtLWVtYmVkLmh0bWwiLCJ0ZW1wbGF0ZXMvdGVtcGxhdGUtaXRlbS1nYWxsZXJ5SW1hZ2UuaHRtbCIsInRlbXBsYXRlcy90ZW1wbGF0ZS1pdGVtLWltYWdlLmh0bWwiLCJ0ZW1wbGF0ZXMvdGVtcGxhdGUtaXRlbS1xdW90ZS5odG1sIiwidGVtcGxhdGVzL3RlbXBsYXRlLXBvc3QtYWN0aW9ucy5odG1sIiwidGVtcGxhdGVzL3RlbXBsYXRlLXBvc3QtY29tbWVudC5odG1sIiwidGVtcGxhdGVzL3RlbXBsYXRlLXBvc3QuaHRtbCIsInRlbXBsYXRlcy90ZW1wbGF0ZS10aW1lbGluZS5odG1sIiwiLi4vbG9yeS5qcy9kaXN0L2xvcnkuanMiLCIuLi9tb21lbnQvbWluL2xvY2FsZXMubWluLmpzIiwiLi4vbW9tZW50L21vbWVudC5qcyIsIi4uL251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LENBQWdDLE1BQWhDLENBQXVDLEtBQXZDLEVBQThDLENBQTlDO0FBQ0Q7QUFDRixLQUpEO0FBS0Q7O0FBRUQsU0FBTyxVQUFVLEtBQUssU0FBTCxDQUFlLEtBQWYsQ0FBVixDQUFQO0FBQ0QsQ0FqRUQ7O0FBbUVBLE9BQU8sT0FBUCxHQUFpQixFQUFqQjs7O0FDbFRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3T0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL2tCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QThrR1YsVUF4bkdnQjtBQUFoQjtBQXluR0MsQ0Fub0dEO0FBb29HQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIi8qISBpRnJhbWUgUmVzaXplciAoaWZyYW1lU2l6ZXIuY29udGVudFdpbmRvdy5taW4uanMpIC0gdjMuNi4wIC0gMjAxOC0wMy0yNFxuICogIERlc2M6IEluY2x1ZGUgdGhpcyBmaWxlIGluIGFueSBwYWdlIGJlaW5nIGxvYWRlZCBpbnRvIGFuIGlmcmFtZVxuICogICAgICAgIHRvIGZvcmNlIHRoZSBpZnJhbWUgdG8gcmVzaXplIHRvIHRoZSBjb250ZW50IHNpemUuXG4gKiAgUmVxdWlyZXM6IGlmcmFtZVJlc2l6ZXIubWluLmpzIG9uIGhvc3QgcGFnZS5cbiAqICBDb3B5cmlnaHQ6IChjKSAyMDE4IERhdmlkIEouIEJyYWRzaGF3IC0gZGF2ZUBicmFkc2hhdy5uZXRcbiAqICBMaWNlbnNlOiBNSVRcbiAqL1xuXG4hZnVuY3Rpb24oYSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihhLGIsYyl7XCJhZGRFdmVudExpc3RlbmVyXCJpbiB3aW5kb3c/YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMSk6XCJhdHRhY2hFdmVudFwiaW4gd2luZG93JiZhLmF0dGFjaEV2ZW50KFwib25cIitiLGMpfWZ1bmN0aW9uIGMoYSxiLGMpe1wicmVtb3ZlRXZlbnRMaXN0ZW5lclwiaW4gd2luZG93P2EucmVtb3ZlRXZlbnRMaXN0ZW5lcihiLGMsITEpOlwiZGV0YWNoRXZlbnRcImluIHdpbmRvdyYmYS5kZXRhY2hFdmVudChcIm9uXCIrYixjKX1mdW5jdGlvbiBkKGEpe3JldHVybiBhLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc2xpY2UoMSl9ZnVuY3Rpb24gZShhKXt2YXIgYixjLGQsZT1udWxsLGY9MCxnPWZ1bmN0aW9uKCl7Zj1IYSgpLGU9bnVsbCxkPWEuYXBwbHkoYixjKSxlfHwoYj1jPW51bGwpfTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgaD1IYSgpO2Z8fChmPWgpO3ZhciBpPXhhLShoLWYpO3JldHVybiBiPXRoaXMsYz1hcmd1bWVudHMsMD49aXx8aT54YT8oZSYmKGNsZWFyVGltZW91dChlKSxlPW51bGwpLGY9aCxkPWEuYXBwbHkoYixjKSxlfHwoYj1jPW51bGwpKTplfHwoZT1zZXRUaW1lb3V0KGcsaSkpLGR9fWZ1bmN0aW9uIGYoYSl7cmV0dXJuIG1hK1wiW1wiK29hK1wiXSBcIithfWZ1bmN0aW9uIGcoYSl7bGEmJlwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cuY29uc29sZSYmY29uc29sZS5sb2coZihhKSl9ZnVuY3Rpb24gaChhKXtcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93LmNvbnNvbGUmJmNvbnNvbGUud2FybihmKGEpKX1mdW5jdGlvbiBpKCl7aigpLGcoXCJJbml0aWFsaXNpbmcgaUZyYW1lIChcIitsb2NhdGlvbi5ocmVmK1wiKVwiKSxrKCksbigpLG0oXCJiYWNrZ3JvdW5kXCIsVyksbShcInBhZGRpbmdcIiwkKSxBKCkscygpLHQoKSxvKCksQygpLHUoKSxpYT1CKCksTihcImluaXRcIixcIkluaXQgbWVzc2FnZSBmcm9tIGhvc3QgcGFnZVwiKSxEYSgpfWZ1bmN0aW9uIGooKXtmdW5jdGlvbiBiKGEpe3JldHVyblwidHJ1ZVwiPT09YT8hMDohMX12YXIgYz1oYS5zdWJzdHIobmEpLnNwbGl0KFwiOlwiKTtvYT1jWzBdLFg9YSE9PWNbMV0/TnVtYmVyKGNbMV0pOlgsXz1hIT09Y1syXT9iKGNbMl0pOl8sbGE9YSE9PWNbM10/YihjWzNdKTpsYSxqYT1hIT09Y1s0XT9OdW1iZXIoY1s0XSk6amEsVT1hIT09Y1s2XT9iKGNbNl0pOlUsWT1jWzddLGZhPWEhPT1jWzhdP2NbOF06ZmEsVz1jWzldLCQ9Y1sxMF0sdWE9YSE9PWNbMTFdP051bWJlcihjWzExXSk6dWEsaWEuZW5hYmxlPWEhPT1jWzEyXT9iKGNbMTJdKTohMSxxYT1hIT09Y1sxM10/Y1sxM106cWEsQWE9YSE9PWNbMTRdP2NbMTRdOkFhfWZ1bmN0aW9uIGsoKXtmdW5jdGlvbiBhKCl7dmFyIGE9d2luZG93LmlGcmFtZVJlc2l6ZXI7ZyhcIlJlYWRpbmcgZGF0YSBmcm9tIHBhZ2U6IFwiK0pTT04uc3RyaW5naWZ5KGEpKSxDYT1cIm1lc3NhZ2VDYWxsYmFja1wiaW4gYT9hLm1lc3NhZ2VDYWxsYmFjazpDYSxEYT1cInJlYWR5Q2FsbGJhY2tcImluIGE/YS5yZWFkeUNhbGxiYWNrOkRhLHRhPVwidGFyZ2V0T3JpZ2luXCJpbiBhP2EudGFyZ2V0T3JpZ2luOnRhLGZhPVwiaGVpZ2h0Q2FsY3VsYXRpb25NZXRob2RcImluIGE/YS5oZWlnaHRDYWxjdWxhdGlvbk1ldGhvZDpmYSxBYT1cIndpZHRoQ2FsY3VsYXRpb25NZXRob2RcImluIGE/YS53aWR0aENhbGN1bGF0aW9uTWV0aG9kOkFhfWZ1bmN0aW9uIGIoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBhJiYoZyhcIlNldHVwIGN1c3RvbSBcIitiK1wiQ2FsY01ldGhvZFwiKSxGYVtiXT1hLGE9XCJjdXN0b21cIiksYX1cImlGcmFtZVJlc2l6ZXJcImluIHdpbmRvdyYmT2JqZWN0PT09d2luZG93LmlGcmFtZVJlc2l6ZXIuY29uc3RydWN0b3ImJihhKCksZmE9YihmYSxcImhlaWdodFwiKSxBYT1iKEFhLFwid2lkdGhcIikpLGcoXCJUYXJnZXRPcmlnaW4gZm9yIHBhcmVudCBzZXQgdG86IFwiK3RhKX1mdW5jdGlvbiBsKGEsYil7cmV0dXJuLTEhPT1iLmluZGV4T2YoXCItXCIpJiYoaChcIk5lZ2F0aXZlIENTUyB2YWx1ZSBpZ25vcmVkIGZvciBcIithKSxiPVwiXCIpLGJ9ZnVuY3Rpb24gbShiLGMpe2EhPT1jJiZcIlwiIT09YyYmXCJudWxsXCIhPT1jJiYoZG9jdW1lbnQuYm9keS5zdHlsZVtiXT1jLGcoXCJCb2R5IFwiK2IrJyBzZXQgdG8gXCInK2MrJ1wiJykpfWZ1bmN0aW9uIG4oKXthPT09WSYmKFk9WCtcInB4XCIpLG0oXCJtYXJnaW5cIixsKFwibWFyZ2luXCIsWSkpfWZ1bmN0aW9uIG8oKXtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuaGVpZ2h0PVwiXCIsZG9jdW1lbnQuYm9keS5zdHlsZS5oZWlnaHQ9XCJcIixnKCdIVE1MICYgYm9keSBoZWlnaHQgc2V0IHRvIFwiYXV0b1wiJyl9ZnVuY3Rpb24gcChhKXt2YXIgZT17YWRkOmZ1bmN0aW9uKGMpe2Z1bmN0aW9uIGQoKXtOKGEuZXZlbnROYW1lLGEuZXZlbnRUeXBlKX1HYVtjXT1kLGIod2luZG93LGMsZCl9LHJlbW92ZTpmdW5jdGlvbihhKXt2YXIgYj1HYVthXTtkZWxldGUgR2FbYV0sYyh3aW5kb3csYSxiKX19O2EuZXZlbnROYW1lcyYmQXJyYXkucHJvdG90eXBlLm1hcD8oYS5ldmVudE5hbWU9YS5ldmVudE5hbWVzWzBdLGEuZXZlbnROYW1lcy5tYXAoZVthLm1ldGhvZF0pKTplW2EubWV0aG9kXShhLmV2ZW50TmFtZSksZyhkKGEubWV0aG9kKStcIiBldmVudCBsaXN0ZW5lcjogXCIrYS5ldmVudFR5cGUpfWZ1bmN0aW9uIHEoYSl7cCh7bWV0aG9kOmEsZXZlbnRUeXBlOlwiQW5pbWF0aW9uIFN0YXJ0XCIsZXZlbnROYW1lczpbXCJhbmltYXRpb25zdGFydFwiLFwid2Via2l0QW5pbWF0aW9uU3RhcnRcIl19KSxwKHttZXRob2Q6YSxldmVudFR5cGU6XCJBbmltYXRpb24gSXRlcmF0aW9uXCIsZXZlbnROYW1lczpbXCJhbmltYXRpb25pdGVyYXRpb25cIixcIndlYmtpdEFuaW1hdGlvbkl0ZXJhdGlvblwiXX0pLHAoe21ldGhvZDphLGV2ZW50VHlwZTpcIkFuaW1hdGlvbiBFbmRcIixldmVudE5hbWVzOltcImFuaW1hdGlvbmVuZFwiLFwid2Via2l0QW5pbWF0aW9uRW5kXCJdfSkscCh7bWV0aG9kOmEsZXZlbnRUeXBlOlwiSW5wdXRcIixldmVudE5hbWU6XCJpbnB1dFwifSkscCh7bWV0aG9kOmEsZXZlbnRUeXBlOlwiTW91c2UgVXBcIixldmVudE5hbWU6XCJtb3VzZXVwXCJ9KSxwKHttZXRob2Q6YSxldmVudFR5cGU6XCJNb3VzZSBEb3duXCIsZXZlbnROYW1lOlwibW91c2Vkb3duXCJ9KSxwKHttZXRob2Q6YSxldmVudFR5cGU6XCJPcmllbnRhdGlvbiBDaGFuZ2VcIixldmVudE5hbWU6XCJvcmllbnRhdGlvbmNoYW5nZVwifSkscCh7bWV0aG9kOmEsZXZlbnRUeXBlOlwiUHJpbnRcIixldmVudE5hbWU6W1wiYWZ0ZXJwcmludFwiLFwiYmVmb3JlcHJpbnRcIl19KSxwKHttZXRob2Q6YSxldmVudFR5cGU6XCJSZWFkeSBTdGF0ZSBDaGFuZ2VcIixldmVudE5hbWU6XCJyZWFkeXN0YXRlY2hhbmdlXCJ9KSxwKHttZXRob2Q6YSxldmVudFR5cGU6XCJUb3VjaCBTdGFydFwiLGV2ZW50TmFtZTpcInRvdWNoc3RhcnRcIn0pLHAoe21ldGhvZDphLGV2ZW50VHlwZTpcIlRvdWNoIEVuZFwiLGV2ZW50TmFtZTpcInRvdWNoZW5kXCJ9KSxwKHttZXRob2Q6YSxldmVudFR5cGU6XCJUb3VjaCBDYW5jZWxcIixldmVudE5hbWU6XCJ0b3VjaGNhbmNlbFwifSkscCh7bWV0aG9kOmEsZXZlbnRUeXBlOlwiVHJhbnNpdGlvbiBTdGFydFwiLGV2ZW50TmFtZXM6W1widHJhbnNpdGlvbnN0YXJ0XCIsXCJ3ZWJraXRUcmFuc2l0aW9uU3RhcnRcIixcIk1TVHJhbnNpdGlvblN0YXJ0XCIsXCJvVHJhbnNpdGlvblN0YXJ0XCIsXCJvdHJhbnNpdGlvbnN0YXJ0XCJdfSkscCh7bWV0aG9kOmEsZXZlbnRUeXBlOlwiVHJhbnNpdGlvbiBJdGVyYXRpb25cIixldmVudE5hbWVzOltcInRyYW5zaXRpb25pdGVyYXRpb25cIixcIndlYmtpdFRyYW5zaXRpb25JdGVyYXRpb25cIixcIk1TVHJhbnNpdGlvbkl0ZXJhdGlvblwiLFwib1RyYW5zaXRpb25JdGVyYXRpb25cIixcIm90cmFuc2l0aW9uaXRlcmF0aW9uXCJdfSkscCh7bWV0aG9kOmEsZXZlbnRUeXBlOlwiVHJhbnNpdGlvbiBFbmRcIixldmVudE5hbWVzOltcInRyYW5zaXRpb25lbmRcIixcIndlYmtpdFRyYW5zaXRpb25FbmRcIixcIk1TVHJhbnNpdGlvbkVuZFwiLFwib1RyYW5zaXRpb25FbmRcIixcIm90cmFuc2l0aW9uZW5kXCJdfSksXCJjaGlsZFwiPT09cWEmJnAoe21ldGhvZDphLGV2ZW50VHlwZTpcIklGcmFtZSBSZXNpemVkXCIsZXZlbnROYW1lOlwicmVzaXplXCJ9KX1mdW5jdGlvbiByKGEsYixjLGQpe3JldHVybiBiIT09YSYmKGEgaW4gY3x8KGgoYStcIiBpcyBub3QgYSB2YWxpZCBvcHRpb24gZm9yIFwiK2QrXCJDYWxjdWxhdGlvbk1ldGhvZC5cIiksYT1iKSxnKGQrJyBjYWxjdWxhdGlvbiBtZXRob2Qgc2V0IHRvIFwiJythKydcIicpKSxhfWZ1bmN0aW9uIHMoKXtmYT1yKGZhLGVhLElhLFwiaGVpZ2h0XCIpfWZ1bmN0aW9uIHQoKXtBYT1yKEFhLHphLEphLFwid2lkdGhcIil9ZnVuY3Rpb24gdSgpeyEwPT09VT8ocShcImFkZFwiKSxGKCkpOmcoXCJBdXRvIFJlc2l6ZSBkaXNhYmxlZFwiKX1mdW5jdGlvbiB2KCl7ZyhcIkRpc2FibGUgb3V0Z29pbmcgbWVzc2FnZXNcIikscmE9ITF9ZnVuY3Rpb24gdygpe2coXCJSZW1vdmUgZXZlbnQgbGlzdGVuZXI6IE1lc3NhZ2VcIiksYyh3aW5kb3csXCJtZXNzYWdlXCIsUyl9ZnVuY3Rpb24geCgpe251bGwhPT1aJiZaLmRpc2Nvbm5lY3QoKX1mdW5jdGlvbiB5KCl7cShcInJlbW92ZVwiKSx4KCksY2xlYXJJbnRlcnZhbChrYSl9ZnVuY3Rpb24geigpe3YoKSx3KCksITA9PT1VJiZ5KCl9ZnVuY3Rpb24gQSgpe3ZhciBhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7YS5zdHlsZS5jbGVhcj1cImJvdGhcIixhLnN0eWxlLmRpc3BsYXk9XCJibG9ja1wiLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSl9ZnVuY3Rpb24gQigpe2Z1bmN0aW9uIGMoKXtyZXR1cm57eDp3aW5kb3cucGFnZVhPZmZzZXQhPT1hP3dpbmRvdy5wYWdlWE9mZnNldDpkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCx5OndpbmRvdy5wYWdlWU9mZnNldCE9PWE/d2luZG93LnBhZ2VZT2Zmc2V0OmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3B9fWZ1bmN0aW9uIGQoYSl7dmFyIGI9YS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxkPWMoKTtyZXR1cm57eDpwYXJzZUludChiLmxlZnQsMTApK3BhcnNlSW50KGQueCwxMCkseTpwYXJzZUludChiLnRvcCwxMCkrcGFyc2VJbnQoZC55LDEwKX19ZnVuY3Rpb24gZShiKXtmdW5jdGlvbiBjKGEpe3ZhciBiPWQoYSk7ZyhcIk1vdmluZyB0byBpbiBwYWdlIGxpbmsgKCNcIitlK1wiKSBhdCB4OiBcIitiLngrXCIgeTogXCIrYi55KSxSKGIueSxiLngsXCJzY3JvbGxUb09mZnNldFwiKX12YXIgZT1iLnNwbGl0KFwiI1wiKVsxXXx8YixmPWRlY29kZVVSSUNvbXBvbmVudChlKSxoPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGYpfHxkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZShmKVswXTthIT09aD9jKGgpOihnKFwiSW4gcGFnZSBsaW5rICgjXCIrZStcIikgbm90IGZvdW5kIGluIGlGcmFtZSwgc28gc2VuZGluZyB0byBwYXJlbnRcIiksUigwLDAsXCJpblBhZ2VMaW5rXCIsXCIjXCIrZSkpfWZ1bmN0aW9uIGYoKXtcIlwiIT09bG9jYXRpb24uaGFzaCYmXCIjXCIhPT1sb2NhdGlvbi5oYXNoJiZlKGxvY2F0aW9uLmhyZWYpfWZ1bmN0aW9uIGkoKXtmdW5jdGlvbiBhKGEpe2Z1bmN0aW9uIGMoYSl7YS5wcmV2ZW50RGVmYXVsdCgpLGUodGhpcy5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpKX1cIiNcIiE9PWEuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSYmYihhLFwiY2xpY2tcIixjKX1BcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2FbaHJlZl49XCIjXCJdJyksYSl9ZnVuY3Rpb24gaigpe2Iod2luZG93LFwiaGFzaGNoYW5nZVwiLGYpfWZ1bmN0aW9uIGsoKXtzZXRUaW1lb3V0KGYsYmEpfWZ1bmN0aW9uIGwoKXtBcnJheS5wcm90b3R5cGUuZm9yRWFjaCYmZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbD8oZyhcIlNldHRpbmcgdXAgbG9jYXRpb24uaGFzaCBoYW5kbGVyc1wiKSxpKCksaigpLGsoKSk6aChcIkluIHBhZ2UgbGlua2luZyBub3QgZnVsbHkgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlciEgKFNlZSBSRUFETUUubWQgZm9yIElFOCB3b3JrYXJvdW5kKVwiKX1yZXR1cm4gaWEuZW5hYmxlP2woKTpnKFwiSW4gcGFnZSBsaW5raW5nIG5vdCBlbmFibGVkXCIpLHtmaW5kVGFyZ2V0OmV9fWZ1bmN0aW9uIEMoKXtnKFwiRW5hYmxlIHB1YmxpYyBtZXRob2RzXCIpLEJhLnBhcmVudElGcmFtZT17YXV0b1Jlc2l6ZTpmdW5jdGlvbihhKXtyZXR1cm4hMD09PWEmJiExPT09VT8oVT0hMCx1KCkpOiExPT09YSYmITA9PT1VJiYoVT0hMSx5KCkpLFV9LGNsb3NlOmZ1bmN0aW9uKCl7UigwLDAsXCJjbG9zZVwiKSx6KCl9LGdldElkOmZ1bmN0aW9uKCl7cmV0dXJuIG9hfSxnZXRQYWdlSW5mbzpmdW5jdGlvbihhKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBhPyhFYT1hLFIoMCwwLFwicGFnZUluZm9cIikpOihFYT1mdW5jdGlvbigpe30sUigwLDAsXCJwYWdlSW5mb1N0b3BcIikpfSxtb3ZlVG9BbmNob3I6ZnVuY3Rpb24oYSl7aWEuZmluZFRhcmdldChhKX0scmVzZXQ6ZnVuY3Rpb24oKXtRKFwicGFyZW50SUZyYW1lLnJlc2V0XCIpfSxzY3JvbGxUbzpmdW5jdGlvbihhLGIpe1IoYixhLFwic2Nyb2xsVG9cIil9LHNjcm9sbFRvT2Zmc2V0OmZ1bmN0aW9uKGEsYil7UihiLGEsXCJzY3JvbGxUb09mZnNldFwiKX0sc2VuZE1lc3NhZ2U6ZnVuY3Rpb24oYSxiKXtSKDAsMCxcIm1lc3NhZ2VcIixKU09OLnN0cmluZ2lmeShhKSxiKX0sc2V0SGVpZ2h0Q2FsY3VsYXRpb25NZXRob2Q6ZnVuY3Rpb24oYSl7ZmE9YSxzKCl9LHNldFdpZHRoQ2FsY3VsYXRpb25NZXRob2Q6ZnVuY3Rpb24oYSl7QWE9YSx0KCl9LHNldFRhcmdldE9yaWdpbjpmdW5jdGlvbihhKXtnKFwiU2V0IHRhcmdldE9yaWdpbjogXCIrYSksdGE9YX0sc2l6ZTpmdW5jdGlvbihhLGIpe3ZhciBjPVwiXCIrKGE/YTpcIlwiKSsoYj9cIixcIitiOlwiXCIpO04oXCJzaXplXCIsXCJwYXJlbnRJRnJhbWUuc2l6ZShcIitjK1wiKVwiLGEsYil9fX1mdW5jdGlvbiBEKCl7MCE9PWphJiYoZyhcInNldEludGVydmFsOiBcIitqYStcIm1zXCIpLGthPXNldEludGVydmFsKGZ1bmN0aW9uKCl7TihcImludGVydmFsXCIsXCJzZXRJbnRlcnZhbDogXCIramEpfSxNYXRoLmFicyhqYSkpKX1mdW5jdGlvbiBFKCl7ZnVuY3Rpb24gYihhKXtmdW5jdGlvbiBiKGEpeyExPT09YS5jb21wbGV0ZSYmKGcoXCJBdHRhY2ggbGlzdGVuZXJzIHRvIFwiK2Euc3JjKSxhLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsZiwhMSksYS5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIixoLCExKSxrLnB1c2goYSkpfVwiYXR0cmlidXRlc1wiPT09YS50eXBlJiZcInNyY1wiPT09YS5hdHRyaWJ1dGVOYW1lP2IoYS50YXJnZXQpOlwiY2hpbGRMaXN0XCI9PT1hLnR5cGUmJkFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoYS50YXJnZXQucXVlcnlTZWxlY3RvckFsbChcImltZ1wiKSxiKX1mdW5jdGlvbiBjKGEpe2suc3BsaWNlKGsuaW5kZXhPZihhKSwxKX1mdW5jdGlvbiBkKGEpe2coXCJSZW1vdmUgbGlzdGVuZXJzIGZyb20gXCIrYS5zcmMpLGEucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImxvYWRcIixmLCExKSxhLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLGgsITEpLGMoYSl9ZnVuY3Rpb24gZShiLGMsZSl7ZChiLnRhcmdldCksTihjLGUrXCI6IFwiK2IudGFyZ2V0LnNyYyxhLGEpfWZ1bmN0aW9uIGYoYSl7ZShhLFwiaW1hZ2VMb2FkXCIsXCJJbWFnZSBsb2FkZWRcIil9ZnVuY3Rpb24gaChhKXtlKGEsXCJpbWFnZUxvYWRGYWlsZWRcIixcIkltYWdlIGxvYWQgZmFpbGVkXCIpfWZ1bmN0aW9uIGkoYSl7TihcIm11dGF0aW9uT2JzZXJ2ZXJcIixcIm11dGF0aW9uT2JzZXJ2ZXI6IFwiK2FbMF0udGFyZ2V0K1wiIFwiK2FbMF0udHlwZSksYS5mb3JFYWNoKGIpfWZ1bmN0aW9uIGooKXt2YXIgYT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keVwiKSxiPXthdHRyaWJ1dGVzOiEwLGF0dHJpYnV0ZU9sZFZhbHVlOiExLGNoYXJhY3RlckRhdGE6ITAsY2hhcmFjdGVyRGF0YU9sZFZhbHVlOiExLGNoaWxkTGlzdDohMCxzdWJ0cmVlOiEwfTtyZXR1cm4gbT1uZXcgbChpKSxnKFwiQ3JlYXRlIGJvZHkgTXV0YXRpb25PYnNlcnZlclwiKSxtLm9ic2VydmUoYSxiKSxtfXZhciBrPVtdLGw9d2luZG93Lk11dGF0aW9uT2JzZXJ2ZXJ8fHdpbmRvdy5XZWJLaXRNdXRhdGlvbk9ic2VydmVyLG09aigpO3JldHVybntkaXNjb25uZWN0OmZ1bmN0aW9uKCl7XCJkaXNjb25uZWN0XCJpbiBtJiYoZyhcIkRpc2Nvbm5lY3QgYm9keSBNdXRhdGlvbk9ic2VydmVyXCIpLG0uZGlzY29ubmVjdCgpLGsuZm9yRWFjaChkKSl9fX1mdW5jdGlvbiBGKCl7dmFyIGE9MD5qYTt3aW5kb3cuTXV0YXRpb25PYnNlcnZlcnx8d2luZG93LldlYktpdE11dGF0aW9uT2JzZXJ2ZXI/YT9EKCk6Wj1FKCk6KGcoXCJNdXRhdGlvbk9ic2VydmVyIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyIVwiKSxEKCkpfWZ1bmN0aW9uIEcoYSxiKXtmdW5jdGlvbiBjKGEpe3ZhciBjPS9eXFxkKyhweCk/JC9pO2lmKGMudGVzdChhKSlyZXR1cm4gcGFyc2VJbnQoYSxWKTt2YXIgZD1iLnN0eWxlLmxlZnQsZT1iLnJ1bnRpbWVTdHlsZS5sZWZ0O3JldHVybiBiLnJ1bnRpbWVTdHlsZS5sZWZ0PWIuY3VycmVudFN0eWxlLmxlZnQsYi5zdHlsZS5sZWZ0PWF8fDAsYT1iLnN0eWxlLnBpeGVsTGVmdCxiLnN0eWxlLmxlZnQ9ZCxiLnJ1bnRpbWVTdHlsZS5sZWZ0PWUsYX12YXIgZD0wO3JldHVybiBiPWJ8fGRvY3VtZW50LmJvZHksXCJkZWZhdWx0Vmlld1wiaW4gZG9jdW1lbnQmJlwiZ2V0Q29tcHV0ZWRTdHlsZVwiaW4gZG9jdW1lbnQuZGVmYXVsdFZpZXc/KGQ9ZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShiLG51bGwpLGQ9bnVsbCE9PWQ/ZFthXTowKTpkPWMoYi5jdXJyZW50U3R5bGVbYV0pLHBhcnNlSW50KGQsVil9ZnVuY3Rpb24gSChhKXthPnhhLzImJih4YT0yKmEsZyhcIkV2ZW50IHRocm90dGxlIGluY3JlYXNlZCB0byBcIit4YStcIm1zXCIpKX1mdW5jdGlvbiBJKGEsYil7Zm9yKHZhciBjPWIubGVuZ3RoLGU9MCxmPTAsaD1kKGEpLGk9SGEoKSxqPTA7Yz5qO2orKyllPWJbal0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbYV0rRyhcIm1hcmdpblwiK2gsYltqXSksZT5mJiYoZj1lKTtyZXR1cm4gaT1IYSgpLWksZyhcIlBhcnNlZCBcIitjK1wiIEhUTUwgZWxlbWVudHNcIiksZyhcIkVsZW1lbnQgcG9zaXRpb24gY2FsY3VsYXRlZCBpbiBcIitpK1wibXNcIiksSChpKSxmfWZ1bmN0aW9uIEooYSl7cmV0dXJuW2EuYm9keU9mZnNldCgpLGEuYm9keVNjcm9sbCgpLGEuZG9jdW1lbnRFbGVtZW50T2Zmc2V0KCksYS5kb2N1bWVudEVsZW1lbnRTY3JvbGwoKV19ZnVuY3Rpb24gSyhhLGIpe2Z1bmN0aW9uIGMoKXtyZXR1cm4gaChcIk5vIHRhZ2dlZCBlbGVtZW50cyAoXCIrYitcIikgZm91bmQgb24gcGFnZVwiKSxkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiYm9keSAqXCIpfXZhciBkPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbXCIrYitcIl1cIik7cmV0dXJuIDA9PT1kLmxlbmd0aCYmYygpLEkoYSxkKX1mdW5jdGlvbiBMKCl7cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJib2R5ICpcIil9ZnVuY3Rpb24gTShiLGMsZCxlKXtmdW5jdGlvbiBmKCl7ZGE9bSx5YT1uLFIoZGEseWEsYil9ZnVuY3Rpb24gaCgpe2Z1bmN0aW9uIGIoYSxiKXt2YXIgYz1NYXRoLmFicyhhLWIpPD11YTtyZXR1cm4hY31yZXR1cm4gbT1hIT09ZD9kOklhW2ZhXSgpLG49YSE9PWU/ZTpKYVtBYV0oKSxiKGRhLG0pfHxfJiZiKHlhLG4pfWZ1bmN0aW9uIGkoKXtyZXR1cm4hKGIgaW57aW5pdDoxLGludGVydmFsOjEsc2l6ZToxfSl9ZnVuY3Rpb24gaigpe3JldHVybiBmYSBpbiBwYXx8XyYmQWEgaW4gcGF9ZnVuY3Rpb24gaygpe2coXCJObyBjaGFuZ2UgaW4gc2l6ZSBkZXRlY3RlZFwiKX1mdW5jdGlvbiBsKCl7aSgpJiZqKCk/UShjKTpiIGlue2ludGVydmFsOjF9fHxrKCl9dmFyIG0sbjtoKCl8fFwiaW5pdFwiPT09Yj8oTygpLGYoKSk6bCgpfWZ1bmN0aW9uIE4oYSxiLGMsZCl7ZnVuY3Rpb24gZSgpe2EgaW57cmVzZXQ6MSxyZXNldFBhZ2U6MSxpbml0OjF9fHxnKFwiVHJpZ2dlciBldmVudDogXCIrYil9ZnVuY3Rpb24gZigpe3JldHVybiB2YSYmYSBpbiBhYX1mKCk/ZyhcIlRyaWdnZXIgZXZlbnQgY2FuY2VsbGVkOiBcIithKTooZSgpLFwiaW5pdFwiPT09YT9NKGEsYixjLGQpOkthKGEsYixjLGQpKX1mdW5jdGlvbiBPKCl7dmF8fCh2YT0hMCxnKFwiVHJpZ2dlciBldmVudCBsb2NrIG9uXCIpKSxjbGVhclRpbWVvdXQod2EpLHdhPXNldFRpbWVvdXQoZnVuY3Rpb24oKXt2YT0hMSxnKFwiVHJpZ2dlciBldmVudCBsb2NrIG9mZlwiKSxnKFwiLS1cIil9LGJhKX1mdW5jdGlvbiBQKGEpe2RhPUlhW2ZhXSgpLHlhPUphW0FhXSgpLFIoZGEseWEsYSl9ZnVuY3Rpb24gUShhKXt2YXIgYj1mYTtmYT1lYSxnKFwiUmVzZXQgdHJpZ2dlciBldmVudDogXCIrYSksTygpLFAoXCJyZXNldFwiKSxmYT1ifWZ1bmN0aW9uIFIoYixjLGQsZSxmKXtmdW5jdGlvbiBoKCl7YT09PWY/Zj10YTpnKFwiTWVzc2FnZSB0YXJnZXRPcmlnaW46IFwiK2YpfWZ1bmN0aW9uIGkoKXt2YXIgaD1iK1wiOlwiK2MsaT1vYStcIjpcIitoK1wiOlwiK2QrKGEhPT1lP1wiOlwiK2U6XCJcIik7ZyhcIlNlbmRpbmcgbWVzc2FnZSB0byBob3N0IHBhZ2UgKFwiK2krXCIpXCIpLHNhLnBvc3RNZXNzYWdlKG1hK2ksZil9ITA9PT1yYSYmKGgoKSxpKCkpfWZ1bmN0aW9uIFMoYSl7ZnVuY3Rpb24gYygpe3JldHVybiBtYT09PShcIlwiK2EuZGF0YSkuc3Vic3RyKDAsbmEpfWZ1bmN0aW9uIGQoKXtyZXR1cm4gYS5kYXRhLnNwbGl0KFwiXVwiKVsxXS5zcGxpdChcIjpcIilbMF19ZnVuY3Rpb24gZSgpe3JldHVybiBhLmRhdGEuc3Vic3RyKGEuZGF0YS5pbmRleE9mKFwiOlwiKSsxKX1mdW5jdGlvbiBmKCl7cmV0dXJuIShcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cykmJlwiaUZyYW1lUmVzaXplXCJpbiB3aW5kb3d9ZnVuY3Rpb24gaigpe3JldHVybiBhLmRhdGEuc3BsaXQoXCI6XCIpWzJdaW57XCJ0cnVlXCI6MSxcImZhbHNlXCI6MX19ZnVuY3Rpb24gaygpe3ZhciBiPWQoKTtiIGluIG0/bVtiXSgpOmYoKXx8aigpfHxoKFwiVW5leHBlY3RlZCBtZXNzYWdlIChcIithLmRhdGErXCIpXCIpfWZ1bmN0aW9uIGwoKXshMT09PWNhP2soKTpqKCk/bS5pbml0KCk6ZygnSWdub3JlZCBtZXNzYWdlIG9mIHR5cGUgXCInK2QoKSsnXCIuIFJlY2VpdmVkIGJlZm9yZSBpbml0aWFsaXphdGlvbi4nKX12YXIgbT17aW5pdDpmdW5jdGlvbigpe2Z1bmN0aW9uIGMoKXtoYT1hLmRhdGEsc2E9YS5zb3VyY2UsaSgpLGNhPSExLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtnYT0hMX0sYmEpfVwiaW50ZXJhY3RpdmVcIj09PWRvY3VtZW50LnJlYWR5U3RhdGV8fFwiY29tcGxldGVcIj09PWRvY3VtZW50LnJlYWR5U3RhdGU/YygpOihnKFwiV2FpdGluZyBmb3IgcGFnZSByZWFkeVwiKSxiKHdpbmRvdyxcInJlYWR5c3RhdGVjaGFuZ2VcIixtLmluaXRGcm9tUGFyZW50KSl9LHJlc2V0OmZ1bmN0aW9uKCl7Z2E/ZyhcIlBhZ2UgcmVzZXQgaWdub3JlZCBieSBpbml0XCIpOihnKFwiUGFnZSBzaXplIHJlc2V0IGJ5IGhvc3QgcGFnZVwiKSxQKFwicmVzZXRQYWdlXCIpKX0scmVzaXplOmZ1bmN0aW9uKCl7TihcInJlc2l6ZVBhcmVudFwiLFwiUGFyZW50IHdpbmRvdyByZXF1ZXN0ZWQgc2l6ZSBjaGVja1wiKX0sbW92ZVRvQW5jaG9yOmZ1bmN0aW9uKCl7aWEuZmluZFRhcmdldChlKCkpfSxpblBhZ2VMaW5rOmZ1bmN0aW9uKCl7dGhpcy5tb3ZlVG9BbmNob3IoKX0scGFnZUluZm86ZnVuY3Rpb24oKXt2YXIgYT1lKCk7ZyhcIlBhZ2VJbmZvRnJvbVBhcmVudCBjYWxsZWQgZnJvbSBwYXJlbnQ6IFwiK2EpLEVhKEpTT04ucGFyc2UoYSkpLGcoXCIgLS1cIil9LG1lc3NhZ2U6ZnVuY3Rpb24oKXt2YXIgYT1lKCk7ZyhcIk1lc3NhZ2VDYWxsYmFjayBjYWxsZWQgZnJvbSBwYXJlbnQ6IFwiK2EpLENhKEpTT04ucGFyc2UoYSkpLGcoXCIgLS1cIil9fTtjKCkmJmwoKX1mdW5jdGlvbiBUKCl7XCJsb2FkaW5nXCIhPT1kb2N1bWVudC5yZWFkeVN0YXRlJiZ3aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKFwiW2lGcmFtZVJlc2l6ZXJDaGlsZF1SZWFkeVwiLFwiKlwiKX1pZihcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93KXt2YXIgVT0hMCxWPTEwLFc9XCJcIixYPTAsWT1cIlwiLFo9bnVsbCwkPVwiXCIsXz0hMSxhYT17cmVzaXplOjEsY2xpY2s6MX0sYmE9MTI4LGNhPSEwLGRhPTEsZWE9XCJib2R5T2Zmc2V0XCIsZmE9ZWEsZ2E9ITAsaGE9XCJcIixpYT17fSxqYT0zMixrYT1udWxsLGxhPSExLG1hPVwiW2lGcmFtZVNpemVyXVwiLG5hPW1hLmxlbmd0aCxvYT1cIlwiLHBhPXttYXg6MSxtaW46MSxib2R5U2Nyb2xsOjEsZG9jdW1lbnRFbGVtZW50U2Nyb2xsOjF9LHFhPVwiY2hpbGRcIixyYT0hMCxzYT13aW5kb3cucGFyZW50LHRhPVwiKlwiLHVhPTAsdmE9ITEsd2E9bnVsbCx4YT0xNix5YT0xLHphPVwic2Nyb2xsXCIsQWE9emEsQmE9d2luZG93LENhPWZ1bmN0aW9uKCl7aChcIk1lc3NhZ2VDYWxsYmFjayBmdW5jdGlvbiBub3QgZGVmaW5lZFwiKX0sRGE9ZnVuY3Rpb24oKXt9LEVhPWZ1bmN0aW9uKCl7fSxGYT17aGVpZ2h0OmZ1bmN0aW9uKCl7cmV0dXJuIGgoXCJDdXN0b20gaGVpZ2h0IGNhbGN1bGF0aW9uIGZ1bmN0aW9uIG5vdCBkZWZpbmVkXCIpLGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vZmZzZXRIZWlnaHR9LHdpZHRoOmZ1bmN0aW9uKCl7cmV0dXJuIGgoXCJDdXN0b20gd2lkdGggY2FsY3VsYXRpb24gZnVuY3Rpb24gbm90IGRlZmluZWRcIiksZG9jdW1lbnQuYm9keS5zY3JvbGxXaWR0aH19LEdhPXt9LEhhPURhdGUubm93fHxmdW5jdGlvbigpe3JldHVybihuZXcgRGF0ZSkuZ2V0VGltZSgpfSxJYT17Ym9keU9mZnNldDpmdW5jdGlvbigpe3JldHVybiBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodCtHKFwibWFyZ2luVG9wXCIpK0coXCJtYXJnaW5Cb3R0b21cIil9LG9mZnNldDpmdW5jdGlvbigpe3JldHVybiBJYS5ib2R5T2Zmc2V0KCl9LGJvZHlTY3JvbGw6ZnVuY3Rpb24oKXtyZXR1cm4gZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHR9LGN1c3RvbTpmdW5jdGlvbigpe3JldHVybiBGYS5oZWlnaHQoKX0sZG9jdW1lbnRFbGVtZW50T2Zmc2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vZmZzZXRIZWlnaHR9LGRvY3VtZW50RWxlbWVudFNjcm9sbDpmdW5jdGlvbigpe3JldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0fSxtYXg6ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCxKKElhKSl9LG1pbjpmdW5jdGlvbigpe3JldHVybiBNYXRoLm1pbi5hcHBseShudWxsLEooSWEpKX0sZ3JvdzpmdW5jdGlvbigpe3JldHVybiBJYS5tYXgoKX0sbG93ZXN0RWxlbWVudDpmdW5jdGlvbigpe3JldHVybiBNYXRoLm1heChJYS5ib2R5T2Zmc2V0KCl8fElhLmRvY3VtZW50RWxlbWVudE9mZnNldCgpLEkoXCJib3R0b21cIixMKCkpKX0sdGFnZ2VkRWxlbWVudDpmdW5jdGlvbigpe3JldHVybiBLKFwiYm90dG9tXCIsXCJkYXRhLWlmcmFtZS1oZWlnaHRcIil9fSxKYT17Ym9keVNjcm9sbDpmdW5jdGlvbigpe3JldHVybiBkb2N1bWVudC5ib2R5LnNjcm9sbFdpZHRofSxib2R5T2Zmc2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGh9LGN1c3RvbTpmdW5jdGlvbigpe3JldHVybiBGYS53aWR0aCgpfSxkb2N1bWVudEVsZW1lbnRTY3JvbGw6ZnVuY3Rpb24oKXtyZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFdpZHRofSxkb2N1bWVudEVsZW1lbnRPZmZzZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm9mZnNldFdpZHRofSxzY3JvbGw6ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5tYXgoSmEuYm9keVNjcm9sbCgpLEphLmRvY3VtZW50RWxlbWVudFNjcm9sbCgpKX0sbWF4OmZ1bmN0aW9uKCl7cmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsSihKYSkpfSxtaW46ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5taW4uYXBwbHkobnVsbCxKKEphKSl9LHJpZ2h0TW9zdEVsZW1lbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gSShcInJpZ2h0XCIsTCgpKX0sdGFnZ2VkRWxlbWVudDpmdW5jdGlvbigpe3JldHVybiBLKFwicmlnaHRcIixcImRhdGEtaWZyYW1lLXdpZHRoXCIpfX0sS2E9ZShNKTtiKHdpbmRvdyxcIm1lc3NhZ2VcIixTKSxUKCl9fSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWZyYW1lUmVzaXplci5jb250ZW50V2luZG93Lm1hcCIsIid1c2Ugc3RyaWN0JztcblxuLy8gUHJlcmVuZGVyIGZ1bmN0aW9uc1xudmFyIHRoZW1lID0gcmVxdWlyZSgnLi90aGVtZScpO1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgdGhlbWUuaW5pdCgpO1xufSk7XG5pZiAoL2NvbXBsZXRlfGxvYWRlZHxpbnRlcmFjdGl2ZS8udGVzdChkb2N1bWVudC5yZWFkeVN0YXRlKSl7XG4gIHRoZW1lLmluaXQoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInJlcXVpcmUoJy4vdGVtcGxhdGVzJyk7XG5jb25zdCBudW5qdWNrcyA9IHJlcXVpcmUoJ251bmp1Y2tzL2Jyb3dzZXIvbnVuanVja3Mtc2xpbScpO1xuY29uc3QgaGVscGVycyA9IHJlcXVpcmUoJy4vaGVscGVycycpO1xuY29uc3QgZXZlbnRzID0gcmVxdWlyZSgnLi9ldmVudHMnKTtcblxuY29uc3QgY29uZmlnID0gd2luZG93LkxCO1xuY29uc3QgYXBpSG9zdCA9IGNvbmZpZy5hcGlfaG9zdC5yZXBsYWNlKC9cXC8kLywgJycpO1xuY29uc3QgYmxvZ0lkID0gY29uZmlnLmJsb2cuX2lkO1xuY29uc3Qgb3V0cHV0ID0gY29uZmlnLm91dHB1dCB8fCB7c2V0dGluZ3M6IHt9fTtcbmNvbnN0IG91dHB1dElkID0gb3V0cHV0Ll9pZDtcbmNvbnN0IGVuZHBvaW50ID0gIGAke2FwaUhvc3R9L2FwaS9hZHZlcnRpc2VtZW50cy8ke2Jsb2dJZH0vJHtvdXRwdXRJZH0vYDtcblxuLy8gd2F5cyB0byBvcmRlciB0aGUgYWRzXG5jb25zdCBBU0MgPSAxO1xuY29uc3QgREVTQyA9IC0xO1xuXG4vLyBOT1RFOiB0ZW1wb3JhbCBwbGFjZSB0byBzdG9yZSBhZHZlcnRpc2VtZW50cywgcGVyaGFwcyBwdXQgdGhlbSBpbiBsb2NhbHN0b3JhZ2VcbnZhciBhZHZlcnRpc2VtZW50cyA9IFtdO1xuXG5jb25zdCBudW5qdWNrc0VudiA9IG5ldyBudW5qdWNrcy5FbnZpcm9ubWVudCgpO1xubnVuanVja3NFbnYuYWRkRmlsdGVyKCdkYXRlJywgaGVscGVycy5jb252ZXJ0VGltZXN0YW1wKTtcbm51bmp1Y2tzLmVudiA9IG51bmp1Y2tzRW52O1xuXG4vLyBUT0RPOiBDb252ZXJ0IHRoZSBhZHNNYW5hZ2VyIGludG8gYSBjb21wbGV0ZWx5IHRoZW1lIGFnbm9zdGljIG1vZHVsZVxuLy8gdGhlIGlkZWEgaXMgdG8gcmVjZWl2ZSB0aGUgY29uZmlndXJhdGlvbiBmcm9tIG91dHNpZGUgYW5kIGhhbmRsZSBhZHMgYWNjb3JkaW5nXG4vLyB0byB0aGVtZSBjb25maWd1cmF0aW9uLiBDdXJyZW50bHkgdGhlIGNvbmZpZyBiZWxvdyBpcyB0aWdodCBvbmx5IHRvIGBMaXZlYmxvZyAzIFNFTyBUaGVtZWBcbmNvbnN0IGFkc1NldHRpbmdzID0ge1xuICAgIHBvc3RTZWxlY3RvcjogXCJzZWN0aW9uLmxiLXBvc3RzLm5vcm1hbCA+IGFydGljbGUubGItcG9zdFwiLFxuICAgIGFkc1NlbGVjdG9yOiBcImFydGljbGUubGItcG9zdC5hZHZlcnRpc2VtZW50XCIsXG4gICAgZnJlcXVlbmN5OiBvdXRwdXQuc2V0dGluZ3MuZnJlcXVlbmN5LFxufTtcblxuZnVuY3Rpb24gcmVzZXRBZHMoKSB7XG4gICAgbGV0IGFkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYWRzU2V0dGluZ3MuYWRzU2VsZWN0b3IpO1xuICAgIGFkcy5mb3JFYWNoKGUgPT4gZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpKTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyQWRzKCkge1xuICAgIGNvbnN0IGFydGljbGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChhZHNTZXR0aW5ncy5wb3N0U2VsZWN0b3IpO1xuICAgIGNvbnN0IGFkc0NvdW50ID0gYWR2ZXJ0aXNlbWVudHMubGVuZ3RoO1xuXG4gICAgaWYgKGFkc0NvdW50ID09PSAwKSByZXR1cm47XG5cbiAgICBjb25zdCBwb3N0Q291bnQgPSBhcnRpY2xlcy5sZW5ndGg7XG4gICAgY29uc3QgZnJlcXVlbmN5ID0gYWRzU2V0dGluZ3MuZnJlcXVlbmN5O1xuICAgIGNvbnN0IG9yZGVyID0gb3V0cHV0LnNldHRpbmdzLm9yZGVyO1xuXG4gICAgbGV0IGFkc0xpc3QgPSBhZHZlcnRpc2VtZW50cy5zbGljZSgpO1xuICAgIC8vY2hlY2sgaWYgd2UgbmVlZCB0byBzaG93IGFkcyBpbiBkZXNjZW5kaW5nIG9yZGVyXG4gICAgaWYgKG9yZGVyID09PSBERVNDKVxuICAgICAgICBhZHNMaXN0ID0gYWRzTGlzdC5yZXZlcnNlKCk7XG5cbiAgICBsZXQgbG9vcGVyID0gaGVscGVycy5yYW5nZSgwLCBwb3N0Q291bnQsIGZyZXF1ZW5jeSk7XG4gICAgbG9vcGVyLmZvckVhY2goaSA9PiB7XG4gICAgICAgIGxldCBpbmRleCA9IE1hdGguY2VpbChpIC8gZnJlcXVlbmN5KSAlIGFkc0NvdW50O1xuICAgICAgICBsZXQgcmVmTm9kZSA9IGFydGljbGVzW2ldO1xuICAgICAgICBsZXQgcGFyZW50Tm9kZSA9IHJlZk5vZGUucGFyZW50Tm9kZTtcblxuICAgICAgICBjb25zdCByZW5kZXJlZCA9IG51bmp1Y2tzLmVudi5yZW5kZXIoJ3RlbXBsYXRlLWFkLWVudHJ5Lmh0bWwnLCB7XG4gICAgICAgICAgaXRlbTogYWRzTGlzdFtpbmRleF0sXG4gICAgICAgICAgc2V0dGluZ3M6IGNvbmZpZy5zZXR0aW5ncyxcbiAgICAgICAgICBhc3NldHNfcm9vdDogd2luZG93LkxCLmFzc2V0c19yb290XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBmcmFnbWVudCA9IGhlbHBlcnMuZnJhZ21lbnRGcm9tU3RyaW5nKHJlbmRlcmVkLnRyaW0oKSk7XG4gICAgICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGZyYWdtZW50LmNoaWxkTm9kZXNbMF0sIHJlZk5vZGUpO1xuICAgIH0pO1xufVxuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGluaXQ6ICgpID0+IHtcbiAgICAgICAgLy8gaWYgd2UgYXJlIG5vdCBpbiBhbiBvdXRwdXQgY2hhbm5lbFxuICAgICAgICBpZiAoIW91dHB1dElkKSByZXR1cm47XG5cbiAgICAgICAgaGVscGVycy5nZXRKU09OKGVuZHBvaW50KS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICBhZHZlcnRpc2VtZW50cyA9IGRhdGE7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGFkZGluZyBhYmlsaXR5IHRvIHJlZnJlc2ggYWRzIGZyb20gYW55d2hlcmUgdmlhIGV2ZW50IGhhbmRsaW5nXG4gICAgICAgIGNvbnN0IGV2dE5hbWUgPSBldmVudHMudXBkYXRlQWRzLnR5cGU7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZ0TmFtZSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHJlZnJlc2hBZHMoKTtcbiAgICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICAgIC8vIHJlbmRlciBmaXJzdCBsb29wIG9mIGFkc1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHJlbmRlckFkcygpO1xuICAgICAgICB9LCAxMDAwKTtcbiAgICB9LFxuXG4gICAgcmVmcmVzaEFkczogKCkgPT4ge1xuICAgICAgICAvLyBpZiB3ZSBhcmUgbm90IGluIGFuIG91dHB1dCBjaGFubmVsXG4gICAgICAgIGlmICghb3V0cHV0SWQpIHJldHVybjtcblxuICAgICAgICAvLyBAVE9ETzogcGVyaGFwcyBwdWxsIG5ldyBhZHM/XG4gICAgICAgIHJlc2V0QWRzKCk7XG4gICAgICAgIHJlbmRlckFkcygpO1xuICAgIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvLyBzaW1wbGUgZXZlbnQgdGhhdCB3aWxsIGJlIHRyaWdnZXJlZFxuICAgIHVwZGF0ZUFkczogbmV3IEV2ZW50KCd1cGRhdGVBZHMnKSxcbn1cbiIsIi8qKlxuICogQGF1dGhvciBwcyAvIEBfX19wYXVsXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdmlldyA9IHJlcXVpcmUoJy4vdmlldycpXG4gICwgdmlld21vZGVsID0gcmVxdWlyZSgnLi92aWV3bW9kZWwnKVxuICAsIGFkc01hbmFnZXIgPSByZXF1aXJlKCcuL2Fkcy1tYW5hZ2VyJylcbiAgLCBoZWxwZXJzID0gcmVxdWlyZSgnLi9oZWxwZXJzJyk7XG5cbi8qKlxuICogQ29udGFpbnMgYSBtYXBwaW5nIG9mIGVsZW1lbnQgZGF0YS1zZWxlY3RvcnMgYW5kIGNsaWNrIGhhbmRsZXJzXG4gKiBidXR0b25zLmF0dGFjaCB7ZnVuY3Rpb259IC0gcmVnaXN0ZXJzIGhhbmRsZXJzIGZvdW5kIGluIGhhbmRsZXJzIG9iamVjdFxuICovXG5cbmNvbnN0IHNlbmRDb21tZW50ID0gKGUpID0+IHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gIGxldCBuYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvbW1lbnQtbmFtZScpLnZhbHVlO1xuICBsZXQgY29tbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb21tZW50LWNvbnRlbnQnKS52YWx1ZTtcblxuICB2aWV3LmNsZWFyQ29tbWVudEZvcm1FcnJvcnMoKTtcblxuICByZXR1cm4gdmlld21vZGVsLnNlbmRDb21tZW50KG5hbWUsIGNvbW1lbnQpXG4gICAgLnRoZW4odmlldy5jbGVhckNvbW1lbnREaWFsb2cpXG4gICAgLnRoZW4odmlldy50b2dnbGVDb21tZW50RGlhbG9nKVxuICAgIC50aGVuKCgpID0+IGRvY3VtZW50XG4gICAgICAgIC5xdWVyeVNlbGVjdG9yKCdmb3JtLmNvbW1lbnQnKVxuICAgICAgICAucmVtb3ZlRXZlbnRMaXN0ZW5lcignc3VibWl0Jywgc2VuZENvbW1lbnQpXG4gICAgKVxuICAgIC50aGVuKHZpZXcuc2hvd1N1Y2Nlc3NDb21tZW50TXNnKVxuICAgIC5jYXRjaCh2aWV3LmRpc3BsYXlDb21tZW50Rm9ybUVycm9ycyk7XG59O1xuXG52YXIgc2hvd1BlbmRpbmdzID0gKGUpID0+IHtcbiAgbGV0IHBlbmRpbmdzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtcG9zdC1pZF0ubW9kLS1kaXNwbGF5bm9uZScpO1xuICBwZW5kaW5ncy5mb3JFYWNoKChwZW5kaW5nKSA9PiB7XG4gICAgcGVuZGluZy5jbGFzc0xpc3QudG9nZ2xlKCdtb2QtLWRpc3BsYXlub25lJywgZmFsc2UpO1xuICB9KTtcbiAgdmlldy5jaGVja1BlbmRpbmcoKTtcbiAgdmlldy5hdHRhY2hTbGlkZXNob3coKTtcbn07XG5cbnZhciBidXR0b25zID0ge1xuICBoYW5kbGVyczoge1xuICAgIFwiW2RhdGEtbG9hZC1tb3JlXVwiOiAoKSA9PiB7XG4gICAgICB2aWV3bW9kZWwubG9hZFBvc3RzUGFnZSgpXG4gICAgICAgIC50aGVuKHZpZXcucmVuZGVyUG9zdHMpXG4gICAgICAgIC50aGVuKHZpZXcuZGlzcGxheU5ld1Bvc3RzKVxuICAgICAgICAudGhlbih2aWV3LmFkc01hbmFnZXIucmVmcmVzaEFkcylcbiAgICAgICAgLnRoZW4odmlldy51cGRhdGVUaW1lc3RhbXBzKVxuICAgICAgICAuY2F0Y2goY2F0Y2hFcnJvcik7XG4gICAgfSxcblxuICAgIFwiW2RhdGEtanMtc29ydF9kcm9wZG93bl9idXR0b25dXCI6ICgpID0+IHtcbiAgICAgIHZpZXcudG9nZ2xlU29ydERyb3Bkb3duKCk7XG4gICAgfSxcblxuICAgIFwiW2RhdGEtanMtb3JkZXJieV9hc2NlbmRpbmddXCI6ICgpID0+IHtcbiAgICAgIGxvYWRTb3J0KCdhc2NlbmRpbmcnKTtcbiAgICB9LFxuXG4gICAgXCJbZGF0YS1qcy1vcmRlcmJ5X2Rlc2NlbmRpbmddXCI6ICgpID0+IHtcbiAgICAgIGxvYWRTb3J0KCdkZXNjZW5kaW5nJyk7XG4gICAgfSxcblxuICAgIFwiW2RhdGEtanMtb3JkZXJieV9lZGl0b3JpYWxdXCI6ICgpID0+IHtcbiAgICAgIGxvYWRTb3J0KCdlZGl0b3JpYWwnKTtcbiAgICB9LFxuXG4gICAgXCJbZGF0YS1qcy1zaG93LWNvbW1lbnQtZGlhbG9nXVwiOiAoKSA9PiB7XG4gICAgICBsZXQgaXNWaXNpYmxlID0gdmlldy50b2dnbGVDb21tZW50RGlhbG9nKCk7XG4gICAgICBsZXQgY29tbWVudEZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdmb3JtLmNvbW1lbnQnKTtcblxuICAgICAgaWYgKGlzVmlzaWJsZSkge1xuICAgICAgICBjb21tZW50Rm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBzZW5kQ29tbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21tZW50Rm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBzZW5kQ29tbWVudCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgICdbZGF0YS1qcy1jbG9zZS1jb21tZW50LWRpYWxvZ10nOiAoZSkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdmlldy50b2dnbGVDb21tZW50RGlhbG9nKCk7XG4gICAgfSxcblxuICAgICdbZGF0YS1qcy1zaG93LWhpZ2hsaWdodGVkXSc6ICgpID0+IHtcbiAgICAgIGxldCBoaWdobGlnaHRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyLWJhcl9faGlnaGxpZ2h0Jyk7XG5cbiAgICAgIGhpZ2hsaWdodEJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKCdoZWFkZXItYmFyX19oaWdobGlnaHQtLWFjdGl2ZScpO1xuICAgICAgTEIuc2V0dGluZ3Mub25seUhpZ2hsaWdodGVkID0gIUxCLnNldHRpbmdzLm9ubHlIaWdobGlnaHRlZDtcbiAgICAgIHJldHVybiB2aWV3bW9kZWwubG9hZFBvc3RzKClcbiAgICAgICAgLnRoZW4odmlldy5yZW5kZXJUaW1lbGluZSlcbiAgICAgICAgLnRoZW4odmlldy5kaXNwbGF5TmV3UG9zdHMpXG4gICAgICAgIC5jYXRjaChjYXRjaEVycm9yKTtcbiAgICB9LFxuICAgICdbZGF0YS1vbmUtbmV3LXVwZGF0ZV0nOiBzaG93UGVuZGluZ3MsXG4gICAgJ1tkYXRhLW5ldy11cGRhdGVzXSc6IHNob3dQZW5kaW5nc1xuICB9LFxuXG4gIGF0dGFjaDogZnVuY3Rpb24oKSB7XG4gICAgT2JqZWN0LmtleXMoYnV0dG9ucy5oYW5kbGVycykuZm9yRWFjaCgoaGFuZGxlcikgPT4ge1xuICAgICAgbGV0IGVsID0gaGVscGVycy5nZXRFbGVtcyhoYW5kbGVyKVswXTtcblxuICAgICAgaWYgKCFlbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYnV0dG9ucy5oYW5kbGVyc1toYW5kbGVyXSwgZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgdmlldy5hdHRhY2hTbGlkZXNob3coKTtcbiAgICB2aWV3LmF0dGFjaFBlcm1hbGluaygpO1xuICAgIHZpZXcuYXR0YWNoU2hhcmVCb3goKTtcbiAgICBpZiAodmlldy5wZXJtYWxpbmsuX2NoYW5nZWRTb3J0KSB7XG4gICAgICBsb2FkU29ydChMQi5zZXR0aW5ncy5wb3N0T3JkZXIpXG4gICAgICAgIC50aGVuKGNoZWNrRm9yU2Nyb2xsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hlY2tGb3JTY3JvbGwoKTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGxvYWRTb3J0KHNvcnRCeSkge1xuICAvLyBpbml0aWFseSBvbiBzZXJ2ZXIgc29ydCBwYXJhbXMgYXJlIHNldCBhcyBuZXdlc3RfZmlyc3QsIG9sZGVzdF9maXJzdFxuICAvLyBvbiBjbGllbnQgd2UgZG9udCB1c2UgdGhpcywgc28gdGhpcyBpcyB0ZW1wIGZpeFxuICBzd2l0Y2ggKHNvcnRCeSkge1xuICBjYXNlICdvbGRlc3RfZmlyc3QnOlxuICBjYXNlICdhc2NlbmRpbmcnOlxuICAgIHNvcnRCeSA9ICdhc2NlbmRpbmcnO1xuICAgIGJyZWFrO1xuICBjYXNlICduZXdlc3RfZmlyc3QnOlxuICBjYXNlICdkZXNjZW5kaW5nJzpcbiAgICBzb3J0QnkgPSAnZGVzY2VuZGluZyc7XG4gICAgYnJlYWs7XG4gIGRlZmF1bHQ6XG4gICAgc29ydEJ5ID0gJ2VkaXRvcmlhbCc7XG4gIH1cblxuICByZXR1cm4gdmlld21vZGVsLmxvYWRQb3N0cyh7c29ydDogc29ydEJ5LCBub3REZWxldGVkOiB0cnVlfSlcbiAgICAudGhlbih2aWV3LnJlbmRlclRpbWVsaW5lKVxuICAgIC50aGVuKHZpZXcuZGlzcGxheU5ld1Bvc3RzKVxuICAgIC50aGVuKHZpZXcudG9nZ2xlU29ydEJ0bihzb3J0QnkpKVxuICAgIC50aGVuKHZpZXcuYWRzTWFuYWdlci5yZWZyZXNoQWRzKVxuICAgIC5jYXRjaChjYXRjaEVycm9yKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tGb3JTY3JvbGwoKSB7XG4gIHZpZXdtb2RlbC5nZXRBbGxQb3N0cygpXG4gICAgLnRoZW4oKHBvc3RzKSA9PiB7XG4gICAgICBpZiAodmlldy5jaGVja1Blcm1hbGluayhwb3N0cykpIHtcbiAgICAgICAgbG9hZEZvclNjcm9sbCgpO1xuICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBsb2FkRm9yU2Nyb2xsKCkge1xuICBpZiAoIXZpZXcucGVybWFsaW5rU2Nyb2xsKCkpIHtcbiAgICB2aWV3bW9kZWwubG9hZFBvc3RzUGFnZSgpXG4gICAgICAudGhlbih2aWV3LnJlbmRlclBvc3RzKVxuICAgICAgLnRoZW4odmlldy5kaXNwbGF5TmV3UG9zdHMpXG4gICAgICAudGhlbihsb2FkRm9yU2Nyb2xsKVxuICAgICAgLmNhdGNoKGNhdGNoRXJyb3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhdGNoRXJyb3IoZXJyKSB7XG4gIGNvbnNvbGUuZXJyb3IoXCJIYW5kbGVyIGVycm9yOiBcIiwgZXJyKTtcbn1cblxudmFyIGV2ZW50cyA9IHtcbiAgYXR0YWNoOiBmdW5jdGlvbigpIHt9IC8vIHRvZG9cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBidXR0b25zOiBidXR0b25zLFxuICBldmVudHM6IGV2ZW50c1xufTtcbiIsIi8qKlxuICogQGF1dGhvciBwcyAvIEBfX19wYXVsXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbW9tZW50ID0gcmVxdWlyZSgnbW9tZW50JyksXG4gIHNldHRpbmdzID0gd2luZG93LkxCLnNldHRpbmdzO1xuXG5yZXF1aXJlKFwibW9tZW50L21pbi9sb2NhbGVzLm1pblwiKTtcbm1vbWVudC5sb2NhbGUoc2V0dGluZ3MubGFuZ3VhZ2UpO1xuZnVuY3Rpb24gY29udmVydFRpbWVzdGFtcCh0aW1lc3RhbXApIHtcbiAgaWYgKCFzZXR0aW5ncy5kYXRldGltZUZvcm1hdCB8fCBzZXR0aW5ncy5kYXRldGltZUZvcm1hdCA9PT0gJ2FnbycpIHtcbiAgICByZXR1cm4gbW9tZW50KHRpbWVzdGFtcCkuZnJvbU5vdygpO1xuICB9XG4gIHJldHVybiBtb21lbnQodGltZXN0YW1wKS5mb3JtYXQoc2V0dGluZ3MuZGF0ZXRpbWVGb3JtYXQpO1xufVxuXG4vKipcbiAqIFdyYXAgZWxlbWVudCBzZWxlY3RvciBhcGlcbiAqIEBwYXJhbSB7c3RyaW5nfSBxdWVyeSAtIGEgalF1ZXJ5IHN5bnRheCBET00gcXVlcnkgKHdpdGggZG90cylcbiAqL1xuZnVuY3Rpb24gZ2V0RWxlbXMocXVlcnkpIHtcbiAgdmFyIGlzRGF0YUF0dHIgPSBxdWVyeS5pbmRleE9mKFwiZGF0YS1cIikgPiAtMTtcbiAgcmV0dXJuIGlzRGF0YUF0dHJcbiAgICA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocXVlcnkpXG4gICAgOiBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKHF1ZXJ5KTtcbn1cblxuLyoqXG4gKiBqUXVlcnkncyAkLmdldEpTT04gaW4gYSBudXRzaGVsbFxuICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIGEgcmVxdWVzdCBVUkxcbiAqL1xuZnVuY3Rpb24gZ2V0SlNPTih1cmwpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICB4aHIub3BlbignR0VUJywgdXJsKTtcbiAgICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgIHJlc29sdmUoSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWplY3QoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHhoci5zZW5kKCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwb3N0KHVybCwgZGF0YSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIHhoci5vcGVuKCdQT1NUJywgdXJsKTtcbiAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtdHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMSkge1xuICAgICAgICByZXNvbHZlKEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVqZWN0KHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB4aHIuc2VuZChKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gIH0pO1xuXG59XG5cbi8qKlxuICogU2ltcGxlIGZ1bmN0aW9uIHRvIGNvbnZlcnQgcGxhaW4gdGV4dCB0byBodG1sXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RySFRNTCAtIHBsYWluIGh0bWwgdG8gYmUgY29udmVydGVkIHRvIERPTSBOb2Rlc1xuICovXG5mdW5jdGlvbiBmcmFnbWVudEZyb21TdHJpbmcoc3RySFRNTCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoc3RySFRNTC50cmltKCkpO1xufVxuXG4vKipcbiAqIFNpbXBsZSBgcmFuZ2VgIGZ1bmN0aW9uIHRoYXQgYmVoYXZlcyBsaWtlIHB5dGhvbidzIGByYW5nZWBcbiAqIHNlZSBodHRwczovL2RvY3MucHl0aG9uLm9yZy8yL2xpYnJhcnkvZnVuY3Rpb25zLmh0bWwjcmFuZ2VcbiAqXG4gKiBDcmVhdGUgYXJyYXlzIGNvbnRhaW5pbmcgYXJpdGhtZXRpYyBwcm9ncmVzc2lvbnNcbiAqIFRoYW5rcyBTdGFja092ZXJmbG93IC0+IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS84MjczMDkxLzI0MDM2NFxuICovXG5mdW5jdGlvbiByYW5nZShzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIGlmICh0eXBlb2Ygc3RvcCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gb25lIHBhcmFtIGRlZmluZWRcbiAgICAgICAgc3RvcCA9IHN0YXJ0O1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzdGVwID09PSAndW5kZWZpbmVkJylcbiAgICAgICAgc3RlcCA9IDE7XG5cbiAgICBpZiAoKHN0ZXAgPiAwICYmIHN0YXJ0ID49IHN0b3ApIHx8IChzdGVwIDwgMCAmJiBzdGFydCA8PSBzdG9wKSlcbiAgICAgICAgcmV0dXJuIFtdO1xuXG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSBzdGFydDsgc3RlcCA+IDAgPyBpIDwgc3RvcCA6IGkgPiBzdG9wOyBpICs9IHN0ZXApIHtcbiAgICAgICAgcmVzdWx0LnB1c2goaSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRFbGVtczogZ2V0RWxlbXMsXG4gIGdldEpTT046IGdldEpTT04sXG4gIHBvc3Q6IHBvc3QsXG4gIGNvbnZlcnRUaW1lc3RhbXA6IGNvbnZlcnRUaW1lc3RhbXAsXG4gIGZyYWdtZW50RnJvbVN0cmluZzogZnJhZ21lbnRGcm9tU3RyaW5nLFxuICByYW5nZTogcmFuZ2Vcbn07XG4iLCIvKipcbiAqIEBhdXRob3IgcHMgLyBAX19fcGF1bFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgaGFuZGxlcnMgPSByZXF1aXJlKCcuL2hhbmRsZXJzJyksXG4gIHZpZXdtb2RlbCA9IHJlcXVpcmUoJy4vdmlld21vZGVsJyksXG4gIHZpZXcgPSByZXF1aXJlKCcuL3ZpZXcnKSxcbiAgcGFnZXZpZXcgPSByZXF1aXJlKCcuL3BhZ2V2aWV3JyksXG4gIGxvY2FsQW5hbHl0aWNzID0gcmVxdWlyZSgnLi9sb2NhbC1hbmFseXRpY3MnKSxcbiAgYWRzTWFuYWdlciA9IHJlcXVpcmUoJy4vYWRzLW1hbmFnZXInKTtcblxucmVxdWlyZShcImlmcmFtZS1yZXNpemVyL2pzL2lmcmFtZVJlc2l6ZXIuY29udGVudFdpbmRvdy5taW4uanNcIik7XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLyoqXG4gICAqIE9uIGRvY3VtZW50IGxvYWRlZCwgZG8gdGhlIGZvbGxvd2luZzpcbiAgICovXG4gIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgIGhhbmRsZXJzLmJ1dHRvbnMuYXR0YWNoKCk7IC8vIFJlZ2lzdGVyIEJ1dHRvbnMgSGFuZGxlcnNcbiAgICBoYW5kbGVycy5ldmVudHMuYXR0YWNoKCk7IC8vIFJlZ2lzdGVyIEV2ZW50LCBNZXNzYWdlIEhhbmRsZXJzXG4gICAgdmlld21vZGVsLmluaXQoKTtcbiAgICBsb2NhbEFuYWx5dGljcy5oaXQoKTtcbiAgICBwYWdldmlldy5pbml0KCk7XG5cbiAgICBhZHNNYW5hZ2VyLmluaXQoKTtcblxuICAgIHZpZXcudXBkYXRlVGltZXN0YW1wcygpO1xuICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIHZpZXcudXBkYXRlVGltZXN0YW1wcygpOyAvLyBDb252ZXJ0IElTTyBkYXRlcyB0byB0aW1lYWdvXG4gICAgfSwgMTAwMCk7XG4gIH1cbn07XG4iLCJ2YXIgYXBpSG9zdCA9IHdpbmRvdy5oYXNPd25Qcm9wZXJ0eSgnTEInKSA/IHdpbmRvdy5MQi5hcGlfaG9zdC5yZXBsYWNlKC9cXC8kLywgJycpIDogJyc7XG52YXIgY29udGV4dFVybCA9IGRvY3VtZW50LnJlZmVycmVyO1xudmFyIGJsb2dJZCA9IHdpbmRvdy5oYXNPd25Qcm9wZXJ0eSgnTEInKSA/IHdpbmRvdy5MQi5ibG9nLl9pZCA6ICcnO1xuXG5hcGlIb3N0ICs9ICcvYXBpL2FuYWx5dGljcy9oaXQnO1xuXG52YXIgY3JlYXRlQ29va2llID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIGRheXMpIHtcbiAgdmFyIGV4cGlyZXMgPSAnJywgZGF0ZSA9IG5ldyBEYXRlKCk7XG5cbiAgaWYgKGRheXMpIHtcbiAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyBkYXlzICogMjQgKiA2MCAqIDYwICogMTAwMCk7XG4gICAgZXhwaXJlcyA9IGA7IGV4cGlyZXM9JHtkYXRlLnRvVVRDU3RyaW5nKCl9YDtcbiAgfVxuICBkb2N1bWVudC5jb29raWUgPSBgJHtuYW1lfT0ke3ZhbHVlfSR7ZXhwaXJlc307IHBhdGg9L2A7XG59O1xuXG52YXIgcmVhZENvb2tpZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIG5hbWVFUSA9IG5hbWUgKyAnPSc7XG4gIHZhciBjYSA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2EubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYyA9IGNhW2ldO1xuXG4gICAgd2hpbGUgKGMuY2hhckF0KDApID09PSAnICcpIHtcbiAgICAgIGMgPSBjLnN1YnN0cmluZygxLCBjLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgaWYgKGMuaW5kZXhPZihuYW1lRVEpID09PSAwKSB7XG4gICAgICByZXR1cm4gYy5zdWJzdHJpbmcobmFtZUVRLmxlbmd0aCwgYy5sZW5ndGgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciBoaXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHhtbGh0dHAgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgdmFyIGpzb25EYXRhID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgIGNvbnRleHRfdXJsOiBjb250ZXh0VXJsLFxuICAgIGJsb2dfaWQ6IGJsb2dJZFxuICB9KTtcblxuICB4bWxodHRwLm9wZW4oJ1BPU1QnLCBhcGlIb3N0KTtcbiAgeG1saHR0cC5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpO1xuXG4gIHhtbGh0dHAub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHhtbGh0dHAuc3RhdHVzID09PSAyMDApIHtcbiAgICAgIGNyZWF0ZUNvb2tpZSgnaGl0JywganNvbkRhdGEsIDIpO1xuICAgIH1cbiAgfTtcblxuICB4bWxodHRwLnNlbmQoanNvbkRhdGEpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7aGl0OiAoKSA9PiB7XG4gIGlmICghcmVhZENvb2tpZSgnaGl0JykpIHtcbiAgICBoaXQoKTtcbiAgfVxufX07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qXG4gIFNlbmQgcGFnZXZpZXcgc2lnbmFsIHRvIGFuYWx5dGljcyBwcm92aWRlcnNcbiAgSVZXIGFuZCBHb29nbGUgQW5hbHl0aWNzLiBOb3QgdG8gYmUgdGllZCB0byBhbmd1bGFyIGFwcC5cbiovXG5cbnZhciBzZW5kUGFnZXZpZXcgPSB7XG4gIF9mb3VuZFByb3ZpZGVyczogW10sIC8vIENhY2hlIGFmdGVyIGZpcnN0IGxvb2t1cFxuXG4gIF9zZW5kSVZXOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXdpbmRvdy5pb20pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaWFtX2RhdGEgPSB7XG4gICAgICBcInN0XCI6IHdpbmRvdy5faWZyYW1lRGF0YXNldC5zem1TdCwgLy8gSURcbiAgICAgIFwiY3BcIjogd2luZG93Ll9pZnJhbWVEYXRhc2V0LnN6bUNwLCAvLyBDb2RlXG4gICAgICBcImNvXCI6IHdpbmRvdy5faWZyYW1lRGF0YXNldC5zem1DbywgLy8gQ29tbWVudFxuICAgICAgXCJzdlwiOiBcImtlXCIgLy8gRGlzYWJsZSBRJkEgaW52aXRlXG4gICAgfTtcblxuICAgIHdpbmRvdy5pb20uYyhpYW1fZGF0YSwgMSk7IC8vIHdoZXJlJ3MgdGhlIC5oPyBhaGFoYWhhXG4gIH0sXG5cbiAgX3NlbmRHQTogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHdpbmRvdy5nYS5sZW5ndGggPiAwKSB7XG4gICAgICB3aW5kb3cuZ2EoJ2NyZWF0ZScsIHdpbmRvdy5faWZyYW1lRGF0YXNldC5nYVByb3BlcnR5LCAnYXV0bycpO1xuICAgICAgd2luZG93LmdhKCdzZXQnLCAnYW5vbnltaXplSXAnLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAod2luZG93LmdhLmxvYWRlZCkge1xuICAgICAgd2luZG93LmdhKCdzZW5kJywge1xuICAgICAgICBoaXRUeXBlOiAncGFnZXZpZXcnLFxuICAgICAgICBsb2NhdGlvbjogd2luZG93LmRvY3VtZW50LnJlZmVycmVyLCAvLyBzZXQgdG8gcGFyZW50IHVybFxuICAgICAgICBoaXRDYWxsYmFjazogZnVuY3Rpb24oKSB7fVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIF9pbnNlcnRTY3JpcHQ6IGZ1bmN0aW9uKHNyYywgY2IpIHtcbiAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7IHNjcmlwdC5zcmMgPSBzcmM7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJib2R5XCIpWzBdLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgc2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGNiKTtcbiAgfSxcblxuICBfZ2V0UHJvdmlkZXJzOiBmdW5jdGlvbigpIHtcbiAgICBsZXQgZm91bmRQcm92aWRlcnMgPSBbXTtcblxuICAgIGlmICh0aGlzLl9mb3VuZFByb3ZpZGVycy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9mb3VuZFByb3ZpZGVyczsgLy8gcmV0dXJuIGVhcmx5XG4gICAgfVxuXG4gICAgZm9yICh2YXIgcCBpbiB0aGlzLl9wcm92aWRlcnMpIHtcbiAgICAgIHZhciBwcm92aWRlciA9IHRoaXMuX3Byb3ZpZGVyc1twXTtcbiAgICAgIHZhciBrZXlzZm91bmQgPSBwcm92aWRlci5yZXF1aXJlZERhdGEucmVkdWNlKChwcmV2LCBjdXJyKSA9PlxuICAgICAgICB3aW5kb3cuX2lmcmFtZURhdGFzZXQuaGFzT3duUHJvcGVydHkoY3VycilcbiAgICAgICwgdHJ1ZSk7IC8vIG5lZWRzIGluaXRpYWwgdmFsdWUgZm9yIG9uZSBlbGVtZW50XG5cbiAgICAgIGlmIChrZXlzZm91bmQgPT09IHRydWUpIHsgLy8gYWxsIHJlcXVpcmVkIGF0dHJzIGZvdW5kXG4gICAgICAgIGlmICghcHJvdmlkZXIub2JqZWN0KSB7XG4gICAgICAgICAgdGhpcy5faW5zZXJ0U2NyaXB0KHByb3ZpZGVyLnNjcmlwdFVSTCwgcHJvdmlkZXIuc2VuZCk7IC8vIG5vdCB5ZXQgbG9hZGVkXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm91bmRQcm92aWRlcnMucHVzaChwcm92aWRlci5zZW5kKTsgLy8gbGlzdCBvZiBfc2VuZCBmdW5jc1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcGFyZW50Ll9mb3VuZFByb3ZpZGVycyA9IGZvdW5kUHJvdmlkZXJzOyAvLyBjYWNoZSBhZnRlciBpbml0aWFsXG4gICAgcmV0dXJuIGZvdW5kUHJvdmlkZXJzO1xuICB9LFxuXG4gIHNlbmQ6IGZ1bmN0aW9uKCkgeyAvLyBwdWJsaWMsIGludm9rZSB3L28gcGFyYW1zXG4gICAgaWYgKCF3aW5kb3cuaGFzT3duUHJvcGVydHkoJ19pZnJhbWVEYXRhc2V0JykpIHtcbiAgICAgIHJldHVybjsgLy8gcmV0dXJuIGVhcmx5XG4gICAgfVxuXG4gICAgdmFyIHByb3ZpZGVycyA9IHRoaXMuX2dldFByb3ZpZGVycygpOyAvLyBpcyBjYWNoZWQgb24gZmlyc3QgY2FsbFxuXG4gICAgZm9yICh2YXIgaSA9IHByb3ZpZGVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgcHJvdmlkZXJzW2ldKCk7IC8vIF9zZW5kIGZ1bmN0aW9uIGNhbGxzXG4gICAgfVxuICB9LFxuXG4gIHJlY2VpdmVNZXNzYWdlOiBmdW5jdGlvbihlKSB7XG4gICAgaWYgKGUuZGF0YS50eXBlID09PSAnYW5hbHl0aWNzJykge1xuICAgICAgdmFyIHBheWxvYWQgPSBKU09OLnBhcnNlKGUuZGF0YS5wYXlsb2FkKTtcblxuICAgICAgd2luZG93Ll9pZnJhbWVEYXRhc2V0ID0gcGF5bG9hZDsgLy8gc3RvcmUgZGF0YXNldCBmcm9tIHBhcmVudE5vZGVcbiAgICB9XG4gIH0sXG5cbiAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHdpbmRvdy5MQi5zZXR0aW5ncy5nYUNvZGUgPT09ICcnKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMucmVjZWl2ZU1lc3NhZ2UsIGZhbHNlKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzZW5kcGFnZXZpZXcnLCB0aGlzLnNlbmQuYmluZCh0aGlzKSwgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cuX2lmcmFtZURhdGFzZXQgPSB7Z2FQcm9wZXJ0eTogd2luZG93LkxCLnNldHRpbmdzLmdhQ29kZX07XG4gICAgICB0aGlzLnNlbmQgPSB0aGlzLnNlbmQuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuc2VuZCgpO1xuICAgIH1cbiAgfVxufTtcblxuc2VuZFBhZ2V2aWV3Ll9wcm92aWRlcnMgPSB7XG4gIGl2dzoge1xuICAgIHNlbmQ6IHNlbmRQYWdldmlldy5fc2VuZElWVyxcbiAgICByZXF1aXJlZERhdGE6IFsnc3ptU3QnLCAnc3ptQ3AnLCAnc3ptQ28nXSxcbiAgICBzY3JpcHRVUkw6ICdodHRwczovL3NjcmlwdC5pb2FtLmRlL2lhbS5qcycsXG4gICAgb2JqZWN0OiB3aW5kb3cuaGFzT3duUHJvcGVydHkoJ2lvbScpID8gd2luZG93LmlvbSA6IG51bGxcbiAgfSxcblxuICBnYToge1xuICAgIHNlbmQ6IHNlbmRQYWdldmlldy5fc2VuZEdBLFxuICAgIHJlcXVpcmVkRGF0YTogWydnYVByb3BlcnR5J10sXG4gICAgc2NyaXB0VVJMOiAnaHR0cHM6Ly93d3cuZ29vZ2xlLWFuYWx5dGljcy5jb20vYW5hbHl0aWNzLmpzJyxcbiAgICBvYmplY3Q6IHdpbmRvdy5oYXNPd25Qcm9wZXJ0eSgnZ2EnKSA/IHdpbmRvdy5nYSA6IG51bGxcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBzZW5kUGFnZXZpZXc7XG4iLCJjbGFzcyBQZXJtYWxpbmsge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmVzY2FwZVJlZ0V4cCA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvKFsuKis/Xj0hOiR7fSgpfFxcW1xcXVxcL1xcXFxdKS9nLCAnXFxcXCQxJyk7XG4gICAgfTtcblxuICAgIHRoaXMuUEFSQU1fTkFNRSA9ICdsaXZlYmxvZy5faWQnLCAvLyB0aGUgcGFyYW1ldGVyIG5hbWUgZm9yIHBlcm1hbGluay4gIFxuICAgIHRoaXMucmVnZXhIYXNoID0gbmV3IFJlZ0V4cCh0aGlzLmVzY2FwZVJlZ0V4cCh0aGlzLlBBUkFNX05BTUUpICsgJz0oW14mI10qKScpO1xuXG4gICAgaWYgKGRvY3VtZW50LnBhcmVudCkge1xuICAgICAgLy8gdXNlIGRvY3VtZW50IHBhcmVudCBpZiBhdmFsaWJsZSwgc2VlIGlmcmFtZSBjb3JzIGxpbWl0YXRpb24uXG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmOyBcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaWYgbm90IHVzZSB0aGUgcmVmZXJyZXIgb2YgdGhlIGlmcmFtZS5cbiAgICAgICAgdGhpcy5ocmVmID0gZG9jdW1lbnQucmVmZXJyZXI7IFxuICAgICAgfVxuICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgIFxuICAgICAgdGhpcy5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjsgLy8gdXNlIHRoaXMgb3B0aW9uIGlmIGl0IGlzIGFjY2VzcyBkaXJlY3RseSBub3QgdmlhIGlmcmFtZS5cbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlcyA9IHRoaXMuaHJlZi5tYXRjaCh0aGlzLnJlZ2V4SGFzaCk7XG4gICAgICAgIFxuICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICB2YXIgYXJyID0gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoZXNbMV0pLnNwbGl0KCctPicpO1xuICAgICAgdGhpcy5faWQgPSBhcnJbMF07XG4gICAgICBpZiAoTEIuc2V0dGluZ3MucG9zdE9yZGVyICE9PSBhcnJbMV0pIHtcbiAgICAgICAgTEIuc2V0dGluZ3MucG9zdE9yZGVyID0gYXJyWzFdO1xuICAgICAgICB0aGlzLl9jaGFuZ2VkU29ydCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0VXJsKGlkKSB7XG4gICAgdmFyIHBlcm1hbGluayA9IGZhbHNlLFxuICAgICAgREVMSU1JVEVSID0gTEIuc2V0dGluZ3MucGVybWFsaW5rRGVsaW1pdGVyIHx8ICc/JywgLy8gZGVsaW1pdGVyIGNhbiBiZSBgP2Agb3IgYCNgLlxuICAgICAgbmV3SGFzaCA9IHRoaXMuUEFSQU1fTkFNRSArICc9JyArIGlkICsgJy0+JyArIExCLnNldHRpbmdzLnBvc3RPcmRlcjtcblxuICAgIGlmICh0aGlzLmhyZWYuaW5kZXhPZihERUxJTUlURVIpID09PSAtMSkge1xuICAgICAgcGVybWFsaW5rID0gdGhpcy5ocmVmICsgREVMSU1JVEVSICsgbmV3SGFzaDtcbiAgICB9IGVsc2UgaWYgKHRoaXMuaHJlZi5pbmRleE9mKHRoaXMuUEFSQU1fTkFNRSArICc9JykgIT09IC0xKSB7XG4gICAgICBwZXJtYWxpbmsgPSB0aGlzLmhyZWYucmVwbGFjZSh0aGlzLnJlZ2V4SGFzaCwgbmV3SGFzaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlcm1hbGluayA9IHRoaXMuaHJlZiArICcmJyArIG5ld0hhc2g7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBlcm1hbGluazsgXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQZXJtYWxpbms7XG4iLCJjb25zdCBsb3J5ID0gcmVxdWlyZSgnbG9yeS5qcycpLmxvcnk7XG5cbmNsYXNzIFNsaWRlc2hvdyB7XG4gIGluaXQoKSB7XG4gICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmxiLXNsaWRlc2hvdycpKS5mb3JFYWNoKChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgbG9yeShlbGVtZW50LCB7XG4gICAgICAgIGNsYXNzTmFtZUZyYW1lOiAnbGItc2xpZGVzaG93X2ZyYW1lJyxcbiAgICAgICAgY2xhc3NOYW1lU2xpZGVDb250YWluZXI6ICdsYi1zbGlkZXNob3dfc2xpZGVzJyxcbiAgICAgICAgY2xhc3NOYW1lUHJldkN0cmw6ICdsYi1zbGlkZXNob3dfcHJldicsXG4gICAgICAgIGNsYXNzTmFtZU5leHRDdHJsOiAnbGItc2xpZGVzaG93X25leHQnLFxuICAgICAgICByZXdpbmQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH0pOyAgICAgXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTbGlkZXNob3c7XG4iLCIvKipcbiAqIEBhdXRob3IgcHMgLyBAX19fcGF1bFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgbnVuanVja3MgPSByZXF1aXJlKFwibnVuanVja3MvYnJvd3Nlci9udW5qdWNrcy1zbGltXCIpO1xuY29uc3Qgc2V0dGluZ3MgPSB3aW5kb3cuTEIuc2V0dGluZ3M7XG5cbmNvbnN0IGRlZmF1bHRUZW1wbGF0ZXMgPSB7XG4gIHBvc3RBY3Rpb25zOiByZXF1aXJlKFwiLi4vLi4vdGVtcGxhdGVzL3RlbXBsYXRlLXBvc3QtYWN0aW9ucy5odG1sXCIpLFxuICBhdXRob3I6IHJlcXVpcmUoXCIuLi8uLi90ZW1wbGF0ZXMvdGVtcGxhdGUtYXV0aG9yLmh0bWxcIiksXG4gIHBvc3Q6IHJlcXVpcmUoXCIuLi8uLi90ZW1wbGF0ZXMvdGVtcGxhdGUtcG9zdC5odG1sXCIpLFxuICBhZGVudHJ5OiByZXF1aXJlKFwiLi4vLi4vdGVtcGxhdGVzL3RlbXBsYXRlLWFkLWVudHJ5Lmh0bWxcIiksXG4gIHRpbWVsaW5lOiByZXF1aXJlKFwiLi4vLi4vdGVtcGxhdGVzL3RlbXBsYXRlLXRpbWVsaW5lLmh0bWxcIiksXG4gIHBvc3RDb21tZW50OiByZXF1aXJlKFwiLi4vLi4vdGVtcGxhdGVzL3RlbXBsYXRlLXBvc3QtY29tbWVudC5odG1sXCIpLFxuICBpdGVtSW1hZ2U6IHJlcXVpcmUoXCIuLi8uLi90ZW1wbGF0ZXMvdGVtcGxhdGUtaXRlbS1pbWFnZS5odG1sXCIpLFxuICBpdGVtR2FsbGVyeUltYWdlOiByZXF1aXJlKFwiLi4vLi4vdGVtcGxhdGVzL3RlbXBsYXRlLWl0ZW0tZ2FsbGVyeUltYWdlLmh0bWxcIiksXG4gIGl0ZW1FbWJlZDogcmVxdWlyZShcIi4uLy4uL3RlbXBsYXRlcy90ZW1wbGF0ZS1pdGVtLWVtYmVkLmh0bWxcIiksXG4gIGl0ZW1RdW90ZTogcmVxdWlyZShcIi4uLy4uL3RlbXBsYXRlcy90ZW1wbGF0ZS1pdGVtLXF1b3RlLmh0bWxcIiksXG4gIGl0ZW1Db21tZW50OiByZXF1aXJlKFwiLi4vLi4vdGVtcGxhdGVzL3RlbXBsYXRlLWl0ZW0tY29tbWVudC5odG1sXCIpXG59O1xuXG5mdW5jdGlvbiBnZXRDdXN0b21UZW1wbGF0ZXMoKSB7XG4gIGxldCBjdXN0b21UZW1wbGF0ZXMgPSBzZXR0aW5ncy5jdXN0b21UZW1wbGF0ZXNcbiAgICAsIG1lcmdlZFRlbXBsYXRlcyA9IGRlZmF1bHRUZW1wbGF0ZXM7XG5cbiAgZm9yIChsZXQgdGVtcGxhdGUgaW4gY3VzdG9tVGVtcGxhdGVzKSB7XG4gICAgbGV0IGN1c3RvbVRlbXBsYXRlTmFtZSA9IGN1c3RvbVRlbXBsYXRlc1t0ZW1wbGF0ZV07XG4gICAgZGVmYXVsdFRlbXBsYXRlc1t0ZW1wbGF0ZV0gPSAoY3R4LCBjYikgPT4ge1xuICAgICAgbnVuanVja3MucmVuZGVyKGN1c3RvbVRlbXBsYXRlTmFtZSwgY3R4LCBjYik7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBtZXJnZWRUZW1wbGF0ZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0dGluZ3MuY3VzdG9tVGVtcGxhdGVzXG4gID8gZ2V0Q3VzdG9tVGVtcGxhdGVzKClcbiAgOiBkZWZhdWx0VGVtcGxhdGVzO1xuIiwiLyoqXG4gKiBAYXV0aG9yIHBzIC8gQF9fX3BhdWxcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4vdGVtcGxhdGVzJyk7XG5jb25zdCBoZWxwZXJzID0gcmVxdWlyZSgnLi9oZWxwZXJzJyk7XG5jb25zdCBhZHNNYW5hZ2VyID0gcmVxdWlyZSgnLi9hZHMtbWFuYWdlcicpO1xuY29uc3QgU2xpZGVzaG93ID0gcmVxdWlyZSgnLi9zbGlkZXNob3cnKTtcbmNvbnN0IFBlcm1hbGluayA9IHJlcXVpcmUoJy4vcGVybWFsaW5rJyk7XG5jb25zdCBudW5qdWNrcyA9IHJlcXVpcmUoJ251bmp1Y2tzL2Jyb3dzZXIvbnVuanVja3Mtc2xpbScpO1xuXG5jb25zdCBudW5qdWNrc0VudiA9IG5ldyBudW5qdWNrcy5FbnZpcm9ubWVudCgpO1xubnVuanVja3NFbnYuYWRkRmlsdGVyKCdkYXRlJywgaGVscGVycy5jb252ZXJ0VGltZXN0YW1wKTtcbm51bmp1Y2tzLmVudiA9IG51bmp1Y2tzRW52O1xuXG5jb25zdCBwZXJtYWxpbmsgPSBuZXcgUGVybWFsaW5rKCk7XG5jb25zdCBlbHMgPSB7XG4gIHRpbWVsaW5lU3RpY2t5OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtdGltZWxpbmUtc3RpY2t5XVwiKSxcbiAgdGltZWxpbmVOb3JtYWw6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS10aW1lbGluZS1ub3JtYWxdXCIpLFxuICBlbXB0eU1lc3NhZ2U6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1lbXB0eS1tZXNzYWdlXVwiKSxcbiAgbG9hZE1vcmU6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1sb2FkLW1vcmVdXCIpXG59O1xuXG4vKipcbiAqIFJlcGxhY2UgdGhlIGN1cnJlbnQgdGltZWxpbmUgdW5jb25kaXRpb25hbGx5LlxuICogQHR5cGVkZWYge09iamVjdH0gYXBpX3Jlc3BvbnNlIOKAkyBjb250YWlucyByZXF1ZXN0IG9wdHMuXG4gKiBAcHJvcGVydHkge09iamVjdH0gcmVxdWVzdE9wdHMgLSBBUEkgcmVxdWVzdCBwYXJhbXMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclRpbWVsaW5lKGFwaV9yZXNwb25zZSkge1xuICB2YXIgcmVuZGVyZWRQb3N0cyA9IFtdO1xuICAvLyBmb3IgdHJhbnNsYXRpb24gbWFjcm8gcHVycG9zZXNcbiAgdmFyIG9wdGlvbnNPYmogPSB7aTE4bjogd2luZG93LkxCLmkxOG59O1xuXG4gIGFwaV9yZXNwb25zZS5faXRlbXMuZm9yRWFjaCgocG9zdCkgPT4ge1xuICAgIHJlbmRlcmVkUG9zdHMucHVzaChcbiAgICAgIG51bmp1Y2tzLmVudi5yZW5kZXIoJ3RlbXBsYXRlLXBvc3QuaHRtbCcsIHtcbiAgICAgICAgaXRlbTogcG9zdCxcbiAgICAgICAgb3B0aW9uczogb3B0aW9uc09iaixcbiAgICAgICAgc2V0dGluZ3M6IHdpbmRvdy5MQi5zZXR0aW5ncyxcbiAgICAgICAgYXNzZXRzX3Jvb3Q6IHdpbmRvdy5MQi5hc3NldHNfcm9vdFxuICAgICAgfSlcbiAgICApO1xuXG4gIH0pO1xuXG4gIGVscy5lbXB0eU1lc3NhZ2UuY2xhc3NMaXN0LnRvZ2dsZSgnbW9kLS1kaXNwbGF5bm9uZScsIEJvb2xlYW4ocmVuZGVyZWRQb3N0cy5sZW5ndGgpKTtcbiAgZWxzLnRpbWVsaW5lTm9ybWFsLmlubmVySFRNTCA9IHJlbmRlcmVkUG9zdHMubGVuZ3RoID8gcmVuZGVyZWRQb3N0cy5qb2luKCcnKSA6ICcnO1xuXG4gIHVwZGF0ZVRpbWVzdGFtcHMoKTtcbiAgbG9hZEVtYmVkcygpO1xuICBhdHRhY2hTbGlkZXNob3coKTtcbiAgYXR0YWNoUGVybWFsaW5rKCk7XG4gIGF0dGFjaFNoYXJlQm94KCk7XG59XG5cbi8qKlxuICogUmVuZGVyIHBvc3RzIGN1cnJlbnRseSBpbiBwaXBlbGluZSB0byB0ZW1wbGF0ZS5cbiAqIFRvIHJlZHVjZSBET00gY2FsbHMvcGFpbnRzIHdlIGhhbmQgb2ZmIHJlbmRlcmVkIEhUTUwgaW4gYnVsay5cbiAqIEB0eXBlZGVmIHtPYmplY3R9IGFwaV9yZXNwb25zZSDigJMgY29udGFpbnMgcmVxdWVzdCBvcHRzLlxuICogQHByb3BlcnR5IHtPYmplY3R9IHJlcXVlc3RPcHRzIC0gQVBJIHJlcXVlc3QgcGFyYW1zLlxuICovXG5mdW5jdGlvbiByZW5kZXJQb3N0cyhhcGlfcmVzcG9uc2UpIHtcbiAgdmFyIHJlbmRlcmVkUG9zdHMgPSBbXSAvLyB0ZW1wb3Jhcnkgc3RvcmVcbiAgICAsIHBvc3RzID0gYXBpX3Jlc3BvbnNlLl9pdGVtcztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvc3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHBvc3QgPSBwb3N0c1tpXTtcblxuICAgIGlmICghYXBpX3Jlc3BvbnNlLnJlcXVlc3RPcHRzLnBhZ2UgJiYgcG9zdC5kZWxldGVkKSB7XG4gICAgICBkZWxldGVQb3N0KHBvc3QuX2lkKTtcbiAgICAgIGNvbnRpbnVlOyAvLyBlYXJseVxuICAgIH1cbiAgICBjb25zdCBlbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtcG9zdC1pZD1cIiR7cG9zdC5faWR9XCJdYCk7XG4gICAgY29uc3QgZGlzcGxheW5vbmUgPSBhcGlfcmVzcG9uc2UucmVxdWVzdE9wdHMuZnJvbURhdGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICF3aW5kb3cuTEIuc2V0dGluZ3MuYXV0b0FwcGx5VXBkYXRlcyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIWVsZW07XG4gICAgLy8gZm9yIHRyYW5zbGF0aW9uIG1hY3JvIHB1cnBvc2VzXG4gICAgdmFyIG9wdGlvbnNPYmogPSB7aTE4bjogd2luZG93LkxCLmkxOG59O1xuXG4gICAgY29uc3QgcmVuZGVyZWQgPSBudW5qdWNrcy5lbnYucmVuZGVyKCd0ZW1wbGF0ZS1wb3N0Lmh0bWwnLCB7XG4gICAgICBpdGVtOiBwb3N0LFxuICAgICAgc2V0dGluZ3M6IHdpbmRvdy5MQi5zZXR0aW5ncyxcbiAgICAgIG9wdGlvbnM6IG9wdGlvbnNPYmosXG4gICAgICBhc3NldHNfcm9vdDogd2luZG93LkxCLmFzc2V0c19yb290LFxuICAgICAgZGlzcGxheW5vbmU6IGRpc3BsYXlub25lXG4gICAgfSk7XG5cbiAgICBpZiAoIHVwZGF0ZVBvc3QocG9zdCwgcmVuZGVyZWQpICkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHJlbmRlcmVkUG9zdHMucHVzaCh7IGh0bWw6IHJlbmRlcmVkLCBkYXRhOiBwb3N0IH0pOyAvLyBjcmVhdGUgb3BlcmF0aW9uXG4gIH1cblxuICBpZiAoIXJlbmRlcmVkUG9zdHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuOyAvLyBlYXJseVxuICB9XG5cbiAgYWRkUG9zdHMocmVuZGVyZWRQb3N0cywgYXBpX3Jlc3BvbnNlLnJlcXVlc3RPcHRzLmZyb21EYXRlID8gJ2FmdGVyYmVnaW4nIDogJ2JlZm9yZWVuZCcpO1xuXG4gIGxvYWRFbWJlZHMoKTtcblxuICByZXR1cm4gYXBpX3Jlc3BvbnNlO1xufVxuXG4vKipcbiAqIEFkZCBwb3N0IG5vZGVzIHRvIERPTSwgZG8gc28gcmVnYXJkbGVzcyBvZiBzZXR0aW5ncy5hdXRvQXBwbHlVcGRhdGVzLFxuICogYnV0IHJhdGhlciBzZXQgdGhlbSB0byBOT1QgQkUgRElTUExBWUVEIGlmIGF1dG8tYXBwbHkgaXMgZmFsc2UuXG4gKiBUaGlzIHdheSB3ZSBkb24ndCBoYXZlIHRvIG1lc3Mgd2l0aCB0d28gc3RhY2tzIG9mIHBvc3RzLlxuICogQHBhcmFtIHtjb2xsZWN0aW9ufSBwb3N0cyAtIGFuIGFycmF5IG9mIG9iamVjdCBodG1sLCBkYXRhIGZvciBwb3N0cy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwb3NpdGlvbiAtIGFmdGVyYmVnaW4gb3IgYmVmb3JlZW5kXG4gKi9cbmZ1bmN0aW9uIGFkZFBvc3RzKHBvc3RzLCBwb3NpdGlvbikge1xuXG4gIGNvbnN0IHRpbWVsaW5lTm9ybWFsID0gcG9zdHMucmVkdWNlKChodG1sLCBwb3N0KSA9PiBwb3N0LmRhdGEuc3RpY2t5ID8gJycgOiBodG1sLmNvbmNhdChwb3N0Lmh0bWwpLCAnJyk7XG4gIGNvbnN0IHRpbWVsaW5lU3RpY2t5ID0gcG9zdHMucmVkdWNlKChodG1sLCBwb3N0KSA9PiBwb3N0LmRhdGEuc3RpY2t5ID8gaHRtbC5jb25jYXQocG9zdC5odG1sKSA6ICcnLCAnJyk7XG5cbiAgZWxzLnRpbWVsaW5lTm9ybWFsLmluc2VydEFkamFjZW50SFRNTChwb3NpdGlvbiwgdGltZWxpbmVOb3JtYWwpO1xuICBlbHMudGltZWxpbmVTdGlja3kuaW5zZXJ0QWRqYWNlbnRIVE1MKHBvc2l0aW9uLCB0aW1lbGluZVN0aWNreSk7XG4gIGVscy50aW1lbGluZVN0aWNreS5jbGFzc0xpc3QucmVtb3ZlKCdzdGlja3ktLWVtcHR5Jyk7XG5cbiAgY2hlY2tQZW5kaW5nKCk7XG4gIGF0dGFjaFNsaWRlc2hvdygpO1xuICBhdHRhY2hQZXJtYWxpbmsoKTtcbiAgYXR0YWNoU2hhcmVCb3goKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tQZW5kaW5nKCkge1xuICBsZXQgcGVuZGluZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1wb3N0LWlkXS5tb2QtLWRpc3BsYXlub25lXCIpLFxuICAgIG9uZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW9uZS1uZXctdXBkYXRlXScpLmNsYXNzTGlzdCxcbiAgICB1cGRhdGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtbmV3LXVwZGF0ZXNdJykuY2xhc3NMaXN0O1xuICBpZiAocGVuZGluZy5sZW5ndGggPT09IDEpIHtcbiAgICBvbmUudG9nZ2xlKCdtb2QtLWRpc3BsYXlub25lJywgZmFsc2UpO1xuICAgIHVwZGF0ZXMudG9nZ2xlKCdtb2QtLWRpc3BsYXlub25lJywgdHJ1ZSk7XG4gIH0gZWxzZSBpZiAocGVuZGluZy5sZW5ndGggPiAxKSB7XG4gICAgb25lLnRvZ2dsZSgnbW9kLS1kaXNwbGF5bm9uZScsIHRydWUpO1xuICAgIHVwZGF0ZXMudG9nZ2xlKCdtb2QtLWRpc3BsYXlub25lJywgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIG9uZS50b2dnbGUoJ21vZC0tZGlzcGxheW5vbmUnLCB0cnVlKTtcbiAgICB1cGRhdGVzLnRvZ2dsZSgnbW9kLS1kaXNwbGF5bm9uZScsIHRydWUpO1xuICB9XG59XG4vKipcbiAqIERlbGV0ZSBwb3N0IDxhcnRpY2xlPiBET00gbm9kZSBieSBkYXRhIGF0dHJpYnV0ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSAtIGEgcG9zdCBVUk5cbiAqL1xuZnVuY3Rpb24gZGVsZXRlUG9zdChpZCkge1xuICB2YXIgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXBvc3QtaWQ9XCIke2lkfVwiXWApO1xuICBpZiAoZWxlbSkge1xuICAgIGVsZW0ucmVtb3ZlKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBVcGRhdGUgcG9zdCA8YXJ0aWNsZT4gRE9NIG5vZGUgYnkgZGF0YSBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gLSBhIHBvc3QgVVJOXG4gKiBAcGFyYW0ge3N0cmluZ30gLSBhIHBvc3QgcmVuZGVyZWQgSFRNTFxuICovXG5mdW5jdGlvbiB1cGRhdGVQb3N0KHBvc3QsIHJlbmRlcmVkKSB7XG4gIGNvbnN0IGVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1wb3N0LWlkPVwiJHtwb3N0Ll9pZH1cIl1gKTtcbiAgaWYgKCFlbGVtKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gaGFzIGNoYW5nZSB0aGUgc3RpY2t5IHN0YXR1cyBzbyB3ZSBzaG91bGQgZGVsZXRlIGl0IGFuZCBhZGQgaXQgYWdhaW4uXG4gIGlmIChwb3N0LnN0aWNreSAhPT0gKGVsZW0uZ2V0QXR0cmlidXRlKCdkYXRhLXBvc3Qtc3RpY2t5JykudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnKSApIHtcbiAgICBkZWxldGVQb3N0KHBvc3QuX2lkKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBlbGVtLm91dGVySFRNTCA9IHJlbmRlcmVkO1xuICBhdHRhY2hTbGlkZXNob3coKTtcbiAgYXR0YWNoUGVybWFsaW5rKCk7XG4gIGF0dGFjaFNoYXJlQm94KCk7XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIFNob3cgbmV3IHBvc3RzIGxvYWRlZCB2aWEgWEhSXG4gKi9cbmZ1bmN0aW9uIGRpc3BsYXlOZXdQb3N0cygpIHtcbiAgdmFyIG5ld1Bvc3RzID0gaGVscGVycy5nZXRFbGVtcyhcImxiLXBvc3QtbmV3XCIpO1xuICBmb3IgKHZhciBpID0gbmV3UG9zdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBuZXdQb3N0c1tpXS5jbGFzc0xpc3QucmVtb3ZlKFwibGItcG9zdC1uZXdcIik7XG4gIH1cbn1cblxuLyoqXG4gKiBUcmlnZ2VyIGVtYmVkIHByb3ZpZGVyIHVucGFja2luZ1xuICovXG5mdW5jdGlvbiBsb2FkRW1iZWRzKCkge1xuICBpZiAod2luZG93Lmluc3Rncm0pIHtcbiAgICBpbnN0Z3JtLkVtYmVkcy5wcm9jZXNzKCk7XG4gIH1cblxuICBpZiAod2luZG93LnR3dHRyKSB7XG4gICAgdHd0dHIud2lkZ2V0cy5sb2FkKCk7XG4gIH1cblxuICBpZiAod2luZG93LkZCKSB7XG4gICAgd2luZG93LkZCLlhGQk1MLnBhcnNlKCk7XG4gIH1cblxuICBhdHRhY2hTbGlkZXNob3coKTtcbn1cblxuZnVuY3Rpb24gY2xlYXJDb21tZW50RGlhbG9nKCkge1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29tbWVudC1uYW1lJykudmFsdWUgPSAnJztcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvbW1lbnQtY29udGVudCcpLnZhbHVlID0gJyc7XG59XG5cbmZ1bmN0aW9uIHRvZ2dsZUNvbW1lbnREaWFsb2coKSB7XG4gIGxldCBjb21tZW50Rm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Zvcm0uY29tbWVudCcpO1xuICBsZXQgaXNIaWRkZW4gPSBmYWxzZTtcblxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyLWJhcl9fY29tbWVudCcpLmNsYXNzTGlzdC50b2dnbGUoJ2hlYWRlci1iYXJfX2NvbW1lbnQtLWFjdGl2ZScpO1xuXG4gIGlmIChjb21tZW50Rm9ybSkge1xuICAgIGlzSGlkZGVuID0gY29tbWVudEZvcm0uY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZScpO1xuICB9XG5cbiAgcmV0dXJuICFpc0hpZGRlbjtcbn1cblxuLyoqXG4gKiBTZXQgc29ydGluZyBvcmRlciBidXR0b24gb2YgY2xhc3MgQG5hbWUgdG8gYWN0aXZlLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBsaXZlYmxvZyBBUEkgcmVzcG9uc2UgSlNPTi5cbiAqL1xuZnVuY3Rpb24gdG9nZ2xlU29ydEJ0bihuYW1lKSB7XG4gIHZhciBzb3J0aW5nQnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zb3J0aW5nLWJhcl9fb3JkZXInKTtcblxuICBzb3J0aW5nQnRucy5mb3JFYWNoKChlbCkgPT4ge1xuICAgIHZhciBzaG91bGRCZUFjdGl2ZSA9IGVsLmRhdGFzZXQuaGFzT3duUHJvcGVydHkoXCJqc09yZGVyYnlfXCIgKyBuYW1lKTtcblxuICAgIGVsLmNsYXNzTGlzdC50b2dnbGUoJ3NvcnRpbmctYmFyX19vcmRlci0tYWN0aXZlJywgc2hvdWxkQmVBY3RpdmUpO1xuICAgIGlmIChzaG91bGRCZUFjdGl2ZSkge1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNvcnRpbmctYmFyX19kcm9wZG93bkJ0bicpLmlubmVySFRNTCA9IGVsLmlubmVySFRNTDtcbiAgICB9XG4gIH0pO1xuICB0b2dnbGVTb3J0RHJvcGRvd24oZmFsc2UpO1xufVxuXG4vKipcbiAqIFRvZ2dsZXMgc29ydGluZyBkcm9wZG93biB2aXNpYmlsaXR5XG4gKiBAcGFyYW0ge0Jvb2xlYW59IG9wZW5cbiAqL1xuZnVuY3Rpb24gdG9nZ2xlU29ydERyb3Bkb3duKG9wZW4pIHtcbiAgaWYgKG9wZW4gIT09IHVuZGVmaW5lZCkge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zb3J0aW5nLWJhcl9fZHJvcGRvd25Db250ZW50JylcbiAgICAgIC5jbGFzc0xpc3QudG9nZ2xlKCdzb3J0aW5nLWJhcl9fZHJvcGRvd25Db250ZW50LS1hY3RpdmUnLCBvcGVuKTtcbiAgfSBlbHNlIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc29ydGluZy1iYXJfX2Ryb3Bkb3duQ29udGVudCcpXG4gICAgICAuY2xhc3NMaXN0LnRvZ2dsZSgnc29ydGluZy1iYXJfX2Ryb3Bkb3duQ29udGVudC0tYWN0aXZlJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBDb25kaXRpb25hbGx5IGhpZGUgbG9hZC1tb3JlIGJ1dHRvbi5cbiAqIEBwYXJhbSB7Ym9vbH0gaGlkZVxuICovXG5mdW5jdGlvbiBoaWRlTG9hZE1vcmUoaGlkZSkge1xuICBpZiAoZWxzLmxvYWRNb3JlKSB7XG4gICAgZWxzLmxvYWRNb3JlLmNsYXNzTGlzdC50b2dnbGUoJ21vZC0taGlkZScsIGhpZGUpO1xuICB9XG59XG5cbi8qKlxuICogRGVsZXRlIHBvc3QgPGFydGljbGU+IERPTSBub2RlIGJ5IGRhdGEgYXR0cmlidXRlLlxuICogQHBhcmFtIHtzdHJpbmd9IC0gYSBwb3N0IFVSTlxuICovXG5mdW5jdGlvbiB1cGRhdGVUaW1lc3RhbXBzKCkge1xuICB2YXIgZGF0ZUVsZW1zID0gaGVscGVycy5nZXRFbGVtcyhcInJlbGF0aXZlRGF0ZVwiKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRlRWxlbXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZWxlbSA9IGRhdGVFbGVtc1tpXVxuICAgICAgLCB0aW1lc3RhbXAgPSBlbGVtLmRhdGFzZXQuanNUaW1lc3RhbXA7XG4gICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKCdtb2QtLWRpc3BsYXlub25lJyk7XG4gICAgZWxlbS50ZXh0Q29udGVudCA9IGhlbHBlcnMuY29udmVydFRpbWVzdGFtcCh0aW1lc3RhbXApO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBzaG93U3VjY2Vzc0NvbW1lbnRNc2coKSB7XG4gIGxldCBjb21tZW50U2VudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Rpdi5jb21tZW50LXNlbnQnKTtcblxuICBjb21tZW50U2VudC5jbGFzc0xpc3QudG9nZ2xlKCdoaWRlJyk7XG5cbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgY29tbWVudFNlbnQuY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZScpO1xuICB9LCA1MDAwKTtcbn1cblxuZnVuY3Rpb24gY2xlYXJDb21tZW50Rm9ybUVycm9ycygpIHtcbiAgbGV0IGVycm9yc01zZ3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdwLmVyci1tc2cnKTtcblxuICBpZiAoZXJyb3JzTXNncykge1xuICAgIGVycm9yc01zZ3MuZm9yRWFjaCgoZXJyb3JzTXNnKSA9PiBlcnJvcnNNc2cucmVtb3ZlKCkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRpc3BsYXlDb21tZW50Rm9ybUVycm9ycyhlcnJvcnMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXJyb3JzKSkge1xuICAgIGVycm9ycy5mb3JFYWNoKChlcnJvcikgPT4ge1xuICAgICAgbGV0IGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVycm9yLmlkKTtcblxuICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudC5pbnNlcnRBZGphY2VudEhUTUwoXG4gICAgICAgICAgJ2FmdGVyZW5kJyxcbiAgICAgICAgICBgPHAgY2xhc3M9XCJlcnItbXNnXCI+JHtlcnJvci5tc2d9PC9wPmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhdHRhY2hTbGlkZXNob3coKSB7XG4gIGNvbnN0IHNsaWRlc2hvdyA9IG5ldyBTbGlkZXNob3coKTtcbiAgc2xpZGVzaG93LmluaXQoKTtcbn1cblxuZnVuY3Rpb24gYXR0YWNoUGVybWFsaW5rKCkge1xuICBjb25zdCBwZXJtYWxpbmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmxiLXBvc3QtcGVybWFsaW5rIGEnKTtcblxuICBwZXJtYWxpbmtzLmZvckVhY2goKGxpbmspID0+IHtcbiAgICBsaW5rLmhyZWYgPSBwZXJtYWxpbmsuZ2V0VXJsKGxpbmsuaWQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYXR0YWNoU2hhcmVCb3goKSB7XG4gIGNvbnN0IHNoYXJlTGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubGItcG9zdC1zaGFyZUJveF9faXRlbScpO1xuXG4gIHNoYXJlTGlua3MuZm9yRWFjaCgobGluaykgPT4ge1xuICAgIGxpbmsuaHJlZiA9IGxpbmsuZ2V0QXR0cmlidXRlKCdkYXRhLWxpbmstYmFzZScpICsgcGVybWFsaW5rLmdldFVybChsaW5rLmdldEF0dHJpYnV0ZSgnZGF0YS1saW5rLWlkJykpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY2hlY2tQZXJtYWxpbmsocG9zdHMpIHtcbiAgdmFyIGZvdW5kID0gZmFsc2U7XG5cbiAgaWYgKHBlcm1hbGluay5faWQpIHtcbiAgICBwb3N0cy5faXRlbXMuZm9yRWFjaCgocG9zdCkgPT4ge1xuICAgICAgaWYgKHBlcm1hbGluay5faWQgPT09IHBvc3QuX2lkKSB7XG4gICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmb3VuZDtcbn1cblxuZnVuY3Rpb24gcGVybWFsaW5rU2Nyb2xsKCkge1xuICBjb25zdCBzY3JvbGxFbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtcG9zdC1pZD1cIiR7cGVybWFsaW5rLl9pZH1cIl1gKTtcblxuICBpZiAoc2Nyb2xsRWxlbSkge1xuICAgIHNjcm9sbEVsZW0uY2xhc3NMaXN0LmFkZCgnbGItcG9zdC1wZXJtYWxpbmstc2VsZWN0ZWQnKTtcbiAgICBzY3JvbGxFbGVtLnNjcm9sbEludG9WaWV3KCk7XG4gICAgd2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2Nyb2xsRWxlbS5zY3JvbGxJbnRvVmlldygpO1xuICAgIH07XG4gICAgdXBkYXRlVGltZXN0YW1wcygpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGlzcGxheU5ld1Bvc3RzOiBkaXNwbGF5TmV3UG9zdHMsXG4gIHJlbmRlclRpbWVsaW5lOiByZW5kZXJUaW1lbGluZSxcbiAgcmVuZGVyUG9zdHM6IHJlbmRlclBvc3RzLFxuICB1cGRhdGVUaW1lc3RhbXBzOiB1cGRhdGVUaW1lc3RhbXBzLFxuICBoaWRlTG9hZE1vcmU6IGhpZGVMb2FkTW9yZSxcbiAgdG9nZ2xlU29ydEJ0bjogdG9nZ2xlU29ydEJ0bixcbiAgdG9nZ2xlU29ydERyb3Bkb3duOiB0b2dnbGVTb3J0RHJvcGRvd24sXG4gIHRvZ2dsZUNvbW1lbnREaWFsb2c6IHRvZ2dsZUNvbW1lbnREaWFsb2csXG4gIHNob3dTdWNjZXNzQ29tbWVudE1zZzogc2hvd1N1Y2Nlc3NDb21tZW50TXNnLFxuICBkaXNwbGF5Q29tbWVudEZvcm1FcnJvcnM6IGRpc3BsYXlDb21tZW50Rm9ybUVycm9ycyxcbiAgY2xlYXJDb21tZW50Rm9ybUVycm9yczogY2xlYXJDb21tZW50Rm9ybUVycm9ycyxcbiAgYXR0YWNoU2xpZGVzaG93OiBhdHRhY2hTbGlkZXNob3csXG4gIGF0dGFjaFBlcm1hbGluazogYXR0YWNoUGVybWFsaW5rLFxuICBjaGVja1Blcm1hbGluazogY2hlY2tQZXJtYWxpbmssXG4gIHBlcm1hbGlua1Njcm9sbDogcGVybWFsaW5rU2Nyb2xsLFxuICBhdHRhY2hTaGFyZUJveDogYXR0YWNoU2hhcmVCb3gsXG4gIHBlcm1hbGluazogcGVybWFsaW5rLFxuICBjbGVhckNvbW1lbnREaWFsb2c6IGNsZWFyQ29tbWVudERpYWxvZyxcbiAgY2hlY2tQZW5kaW5nOiBjaGVja1BlbmRpbmcsXG4gIGFkc01hbmFnZXI6IGFkc01hbmFnZXJcbn07XG4iLCIvKipcbiAqIEBhdXRob3IgcHMgLyBAX19fcGF1bFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuL2hlbHBlcnMnKVxuICAsIHZpZXcgPSByZXF1aXJlKCcuL3ZpZXcnKTtcblxuY29uc3QgYXBpSG9zdCA9IExCLmFwaV9ob3N0Lm1hdGNoKC9cXC8kL2kpID8gTEIuYXBpX2hvc3QgOiBMQi5hcGlfaG9zdCArICcvJztcbmNvbnN0IGNvbW1lbnRJdGVtRW5kcG9pbnQgPSBgJHthcGlIb3N0fWFwaS9jbGllbnRfaXRlbXNgO1xuY29uc3QgY29tbWVudFBvc3RFbmRwb2ludCA9IGAke2FwaUhvc3R9YXBpL2NsaWVudF9jb21tZW50c2A7XG5cbnZhciBlbmRwb2ludCA9IGFwaUhvc3QgKyBcImFwaS9jbGllbnRfYmxvZ3MvXCIgKyBMQi5ibG9nLl9pZCArIFwiL3Bvc3RzXCJcbiAgLCBzZXR0aW5ncyA9IExCLnNldHRpbmdzXG4gICwgdm0gPSB7fVxuICAsIGxhdGVzdFVwZGF0ZTtcblxuLy8gQ2hlY2sgaWYgbGFzdF9jcmVhdGVkX3Bvc3QgYW5kIGxhc3RfdXBkYXRlZF9wb3N0IGFyZSB0aGVyZS5cbi8vIGFuZCB1c2UgdGhlbSBwcm9wZXJseVxuaWYgKExCLmJsb2cubGFzdF9jcmVhdGVkX3Bvc3QgJiYgTEIuYmxvZy5sYXN0X2NyZWF0ZWRfcG9zdC5fdXBkYXRlZCAmJlxuICAgIExCLmJsb2cubGFzdF91cGRhdGVkX3Bvc3QgJiYgTEIuYmxvZy5sYXN0X3VwZGF0ZWRfcG9zdC5fdXBkYXRlZCkge1xuICBsYXRlc3RVcGRhdGUgPSBuZXcgRGF0ZShNYXRoLm1heChuZXcgRGF0ZShMQi5ibG9nLmxhc3RfY3JlYXRlZF9wb3N0Ll91cGRhdGVkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRGF0ZShMQi5ibG9nLmxhc3RfdXBkYXRlZF9wb3N0Ll91cGRhdGVkKSkpLnRvSVNPU3RyaW5nKCk7XG59IGVsc2UgaWYgKExCLmJsb2cubGFzdF9jcmVhdGVkX3Bvc3QgJiYgTEIuYmxvZy5sYXN0X2NyZWF0ZWRfcG9zdC5fdXBkYXRlZCkge1xuICBsYXRlc3RVcGRhdGUgPSBuZXcgRGF0ZShMQi5ibG9nLmxhc3RfY3JlYXRlZF9wb3N0Ll91cGRhdGVkKS50b0lTT1N0cmluZygpO1xufSBlbHNlIHtcbiAgbGF0ZXN0VXBkYXRlID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xufVxuXG4vKipcbiAqIEdldCBpbml0aWFsIG9yIHJlc2V0IHZpZXdtb2RlbC5cbiAqIEByZXR1cm5zIHtvYmplY3R9IGVtcHR5IHZpZXdtb2RlbCBzdG9yZS5cbiAqL1xuZnVuY3Rpb24gZ2V0RW1wdHlWbShpdGVtcykge1xuICByZXR1cm4ge1xuICAgIF9pdGVtczogbmV3IEFycmF5KGl0ZW1zKSB8fCAwLFxuICAgIGN1cnJlbnRQYWdlOiAxLFxuICAgIHRvdGFsUG9zdHM6IDBcbiAgfTtcbn1cblxudm0uc2VuZENvbW1lbnQgPSAobmFtZSwgY29tbWVudCkgPT4ge1xuICBsZXQgZXJyb3JzID0gW107XG5cbiAgaWYgKCFuYW1lKSB7XG4gICAgZXJyb3JzLnB1c2goe2lkOiAnI2NvbW1lbnQtbmFtZScsIG1zZzogJ01pc3NpbmcgbmFtZSd9KTtcbiAgfVxuXG4gIGlmICghY29tbWVudCkge1xuICAgIGVycm9ycy5wdXNoKHtpZDogJyNjb21tZW50LWNvbnRlbnQnLCBtc2c6ICdNaXNzaW5nIGNvbnRlbnQnfSk7XG4gIH1cblxuICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gcmVqZWN0KGVycm9ycykpO1xuICB9XG5cbiAgcmV0dXJuIGhlbHBlcnNcbiAgICAucG9zdChjb21tZW50SXRlbUVuZHBvaW50LCB7XG4gICAgICBpdGVtX3R5cGU6IFwiY29tbWVudFwiLFxuICAgICAgY2xpZW50X2Jsb2c6IExCLmJsb2cuX2lkLFxuICAgICAgY29tbWVudGVyOiBuYW1lLFxuICAgICAgdGV4dDogY29tbWVudFxuICAgIH0pXG4gICAgLnRoZW4oKGl0ZW0pID0+IGhlbHBlcnMucG9zdChjb21tZW50UG9zdEVuZHBvaW50LCB7XG4gICAgICBwb3N0X3N0YXR1czogXCJjb21tZW50XCIsXG4gICAgICBjbGllbnRfYmxvZzogTEIuYmxvZy5faWQsXG4gICAgICBncm91cHM6IFt7XG4gICAgICAgIGlkOiBcInJvb3RcIixcbiAgICAgICAgcmVmczogW3tpZFJlZjogXCJtYWluXCJ9XSxcbiAgICAgICAgcm9sZTogXCJncnBSb2xlOk5FUFwiXG4gICAgICB9LHtcbiAgICAgICAgaWQ6IFwibWFpblwiLFxuICAgICAgICByZWZzOiBbe3Jlc2lkUmVmOiBpdGVtLl9pZH1dLFxuICAgICAgICByb2xlOiBcImdycFJvbGU6TWFpblwifVxuICAgICAgXVxuICAgIH0pKTtcbiAgICAvLy5jYXRjaCgoZXJyKSA9PiB7XG4gICAgLy8gIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAvL30pO1xufTtcblxuLyoqXG4gKiBQcml2YXRlIEFQSSByZXF1ZXN0IG1ldGhvZFxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgLSBxdWVyeSBidWlsZGVyIG9wdGlvbnMuXG4gKiBAcGFyYW0ge251bWJlcn0gb3B0cy5wYWdlIC0gZGVzaXJlZCBwYWdlL3N1YnNldCBvZiBwb3N0cywgbGVhdmUgZW1wdHkgZm9yIHBvbGxpbmcuXG4gKiBAcGFyYW0ge251bWJlcn0gb3B0cy5mcm9tRGF0ZSAtIG5lZWRlZCBmb3IgcG9sbGluZy5cbiAqIEByZXR1cm5zIHtvYmplY3R9IExpdmVibG9nIDMgQVBJIHJlc3BvbnNlXG4gKi9cbnZtLmdldFBvc3RzID0gZnVuY3Rpb24ob3B0cykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdmFyIGRiUXVlcnkgPSBzZWxmLmdldFF1ZXJ5KHtcbiAgICBzb3J0OiBvcHRzLnNvcnQgfHwgc2VsZi5zZXR0aW5ncy5wb3N0T3JkZXIsXG4gICAgaGlnaGxpZ2h0c09ubHk6IHNlbGYuc2V0dGluZ3Mub25seUhpZ2hsaWdodGVkIHx8IGZhbHNlLFxuICAgIG5vdERlbGV0ZWQ6IG9wdHMubm90RGVsZXRlZCxcbiAgICBmcm9tRGF0ZTogb3B0cy5mcm9tRGF0ZSA/IG9wdHMuZnJvbURhdGUgOiBmYWxzZSxcbiAgICBzdGlja3k6IG9wdHMuc3RpY2t5XG4gIH0pO1xuXG4gIHZhciBwYWdlID0gb3B0cy5mcm9tRGF0ZT8gJycgOiBgJnBhZ2U9JHtvcHRzLnBhZ2U/b3B0cy5wYWdlOicxJ31gO1xuICB2YXIgcXMgPSAnP21heF9yZXN1bHRzPScgKyBzZXR0aW5ncy5wb3N0c1BlclBhZ2UgKyBwYWdlICsgJyZzb3VyY2U9J1xuICAgICwgZnVsbFBhdGggPSBlbmRwb2ludCArIHFzICsgZGJRdWVyeTtcblxuICByZXR1cm4gaGVscGVycy5nZXRKU09OKGZ1bGxQYXRoKVxuICAgIC50aGVuKChwb3N0cykgPT4ge1xuICAgICAgcG9zdHMucmVxdWVzdE9wdHMgPSBvcHRzO1xuICAgICAgc2VsZi51cGRhdGVWaWV3TW9kZWwocG9zdHMpO1xuICAgICAgcmV0dXJuIHBvc3RzO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICB9KTtcbn07XG5cbi8qKlxuICogUHJpdmF0ZSBBUEkgcmVxdWVzdCBtZXRob2RcbiAqIEByZXR1cm5zIHtvYmplY3R9IExpdmVibG9nIDMgQVBJIHJlc3BvbnNlXG4gKi9cbnZtLmdldEFsbFBvc3RzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB2YXIgZGJRdWVyeSA9IHNlbGYuZ2V0UXVlcnkoe30pO1xuXG4gIHZhciBxcyA9IFwiP3NvdXJjZT1cIlxuICAgICwgZnVsbFBhdGggPSBlbmRwb2ludCArIHFzICsgZGJRdWVyeTtcblxuICByZXR1cm4gaGVscGVycy5nZXRKU09OKGZ1bGxQYXRoKTtcbn07XG5cbi8qKlxuICogR2V0IG5leHQgcGFnZSBvZiBwb3N0cyBmcm9tIEFQSS5cbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gcXVlcnkgYnVpbGRlciBvcHRpb25zLlxuICogQHJldHVybnMge3Byb21pc2V9IHJlc29sdmVzIHRvIHBvc3RzIGFycmF5LlxuICovXG52bS5sb2FkUG9zdHNQYWdlID0gZnVuY3Rpb24ob3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgb3B0cy5ub3REZWxldGVkID0gdHJ1ZTtcbiAgb3B0cy5wYWdlID0gKyt0aGlzLnZtLmN1cnJlbnRQYWdlO1xuICBvcHRzLnNvcnQgPSB0aGlzLnNldHRpbmdzLnBvc3RPcmRlcjtcbiAgcmV0dXJuIHRoaXMuZ2V0UG9zdHMob3B0cyk7XG59O1xuXG4vKipcbiAqIFBvbGwgQVBJIGZvciBuZXcgcG9zdHMuXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0cyAtIHF1ZXJ5IGJ1aWxkZXIgb3B0aW9ucy5cbiAqIEByZXR1cm5zIHtwcm9taXNlfSByZXNvbHZlcyB0byBwb3N0cyBhcnJheS5cbiAqL1xudm0ubG9hZFBvc3RzID0gZnVuY3Rpb24ob3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgLy9vcHRzLmZyb21EYXRlID0gdGhpcy52bS5sYXRlc3RVcGRhdGUgfHwgbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICByZXR1cm4gdGhpcy5nZXRQb3N0cyhvcHRzKTtcbn07XG5cbi8qKlxuICogQWRkIGl0ZW1zIGluIGFwaSByZXNwb25zZSAmIGxhdGVzdCB1cGRhdGUgdGltZXN0YW1wIHRvIHZpZXdtb2RlbC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBhcGlfcmVzcG9uc2UgLSBsaXZlYmxvZyBBUEkgcmVzcG9uc2UgSlNPTi5cbiAqL1xudm0udXBkYXRlVmlld01vZGVsID0gZnVuY3Rpb24oYXBpX3Jlc3BvbnNlKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAoIWFwaV9yZXNwb25zZS5yZXF1ZXN0T3B0cy5mcm9tRGF0ZSkgeyAvLyBNZWFucyB3ZSdyZSBub3QgcG9sbGluZ1xuICAgIHZpZXcuaGlkZUxvYWRNb3JlKHNlbGYuaXNUaW1lbGluZUVuZChhcGlfcmVzcG9uc2UpKTsgLy8gdGhlIGVuZD9cbiAgfSBlbHNlIHsgLy8gTWVhbnMgd2UncmUgcG9sbGluZyBmb3IgbmV3IHBvc3RzXG4gICAgaWYgKCFhcGlfcmVzcG9uc2UuX2l0ZW1zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxhdGVzdFVwZGF0ZSA9IHNlbGYuZ2V0TGF0ZXN0VXBkYXRlKGFwaV9yZXNwb25zZSk7XG4gIH1cblxuICBpZiAoYXBpX3Jlc3BvbnNlLnJlcXVlc3RPcHRzLnNvcnQgJiYgYXBpX3Jlc3BvbnNlLnJlcXVlc3RPcHRzLnNvcnQgIT09IHNlbGYuc2V0dGluZ3MucG9zdE9yZGVyKSB7XG4gICAgc2VsZi52bSA9IGdldEVtcHR5Vm0oKTtcbiAgICB2aWV3LmhpZGVMb2FkTW9yZShzZWxmLmlzVGltZWxpbmVFbmQoYXBpX3Jlc3BvbnNlKSk7XG4gICAgT2JqZWN0LmFzc2lnbihzZWxmLnZtLCBhcGlfcmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHNlbGYudm0uX2l0ZW1zLnB1c2guYXBwbHkoc2VsZi52bS5faXRlbXMsIGFwaV9yZXNwb25zZS5faXRlbXMpO1xuICB9XG5cbiAgaWYgKGFwaV9yZXNwb25zZS5yZXF1ZXN0T3B0cy5zb3J0KSB7XG4gICAgc2VsZi5zZXR0aW5ncy5wb3N0T3JkZXIgPSBhcGlfcmVzcG9uc2UucmVxdWVzdE9wdHMuc29ydDtcbiAgfVxuXG4gIHJldHVybiBhcGlfcmVzcG9uc2U7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgbGF0ZXN0IHVwZGF0ZSB0aW1lc3RhbXAgZnJvbSBhIG51bWJlciBvZiBwb3N0cy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBhcGlfcmVzcG9uc2UgLSBsaXZlYmxvZyBBUEkgcmVzcG9uc2UgSlNPTi5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gSVNPIDg2MDEgZW5jb2RlZCBkYXRlXG4gKi9cbnZtLmdldExhdGVzdFVwZGF0ZSA9IGZ1bmN0aW9uKGFwaV9yZXNwb25zZSkge1xuICB2YXIgdGltZXN0YW1wcyA9IGFwaV9yZXNwb25zZS5faXRlbXMubWFwKChwb3N0KSA9PiBuZXcgRGF0ZShwb3N0Ll91cGRhdGVkKSk7XG5cbiAgdmFyIGxhdGVzdCA9IG5ldyBEYXRlKE1hdGgubWF4LmFwcGx5KG51bGwsIHRpbWVzdGFtcHMpKTtcbiAgcmV0dXJuIGxhdGVzdC50b0lTT1N0cmluZygpOyAvLyBjb252ZXJ0IHRpbWVzdGFtcCB0byBJU09cbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgd2UgcmVhY2hlZCB0aGUgZW5kIG9mIHRoZSB0aW1lbGluZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSBhcGlfcmVzcG9uc2UgLSBsaXZlYmxvZyBBUEkgcmVzcG9uc2UgSlNPTi5cbiAqIEByZXR1cm5zIHtib29sfVxuICovXG52bS5pc1RpbWVsaW5lRW5kID0gZnVuY3Rpb24oYXBpX3Jlc3BvbnNlKSB7XG4gIHZhciBpdGVtc0luVmlldyA9IHRoaXMudm0uX2l0ZW1zLmxlbmd0aCArIHNldHRpbmdzLnBvc3RzUGVyUGFnZTtcbiAgLy8gbnVtYmVyIG9mIHBvc3QgbG9hZGVkIG9uIHRvcCBhcyB1cGRhdGVzXG4gIHZhciBleHRyYVBvc3RzID0gaXRlbXNJblZpZXcgJSBzZXR0aW5ncy5wb3N0c1BlclBhZ2U7XG5cbiAgcmV0dXJuIGFwaV9yZXNwb25zZS5fbWV0YS50b3RhbCA8PSBpdGVtc0luVmlldyAtIGV4dHJhUG9zdHM7XG59O1xuXG4vKipcbiAqIFNldCB1cCB2aWV3bW9kZWwuXG4gKi9cbnZtLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xuICB0aGlzLnZtID0gZ2V0RW1wdHlWbShzZXR0aW5ncy5wb3N0c1BlclBhZ2UpO1xuICB0aGlzLnZtLnRpbWVJbml0aWFsaXplZCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcblxuICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgdm0ubG9hZFBvc3RzKHtmcm9tRGF0ZTogbGF0ZXN0VXBkYXRlfSlcbiAgICAgIC50aGVuKHZpZXcucmVuZGVyUG9zdHMpXG4gICAgICAudGhlbigocmVzcCkgPT4ge1xuICAgICAgICBpZiAocmVzcCAmJiByZXNwLl9pdGVtcy5sZW5ndGggPiAwKSB2aWV3LmFkc01hbmFnZXIucmVmcmVzaEFkcygpO1xuICAgICAgfSk7XG4gIH0sIDEwKjEwMDApO1xuXG4gIC8vcmV0dXJuIHRoaXMudm0ubGF0ZXN0VXBkYXRlO1xufTtcblxuLyoqXG4gKiBCdWlsZCB1cmxlbmNvZGVkIEVsYXN0aWNTZWFyY2ggUXVlcnlzdHJpbmdcbiAqIFRPRE86IGFic3RyYWN0IGF3YXksIHdlIG9ubHkgbmVlZCBzdGlja3kgZmxhZyBhbmQgb3JkZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gYXJndW1lbnRzIG9iamVjdFxuICogQHBhcmFtIHtzdHJpbmd9IG9wdHMuc29ydCAtIGlmIFwiYXNjZW5kaW5nXCIsIGdldCBpdGVtcyBpbiBhc2NlbmRpbmcgb3JkZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZyb21EYXRlIC0gcmVzdWx0cyB3aXRoIGEgSVNPIDg2MDEgdGltZXN0YW1wIGd0IHRoaXMgb25seVxuICogQHBhcmFtIHtib29sfSBvcHRzLmhpZ2hsaWdodHNPbmx5IC0gZ2V0IGVkaXRvcmlhbC9oaWdobGlnaHRlZCBpdGVtcyBvbmx5XG4gKiBAcmV0dXJucyB7c3RyaW5nfSBRdWVyeXN0cmluZ1xuICovXG52bS5nZXRRdWVyeSA9IGZ1bmN0aW9uKG9wdHMpIHtcbiAgdmFyIHF1ZXJ5ID0ge1xuICAgIFwicXVlcnlcIjoge1xuICAgICAgXCJmaWx0ZXJlZFwiOiB7XG4gICAgICAgIFwiZmlsdGVyXCI6IHtcbiAgICAgICAgICBcImFuZFwiOiBbXG4gICAgICAgICAgICB7XCJ0ZXJtXCI6IHtcInN0aWNreVwiOiBmYWxzZX19LFxuICAgICAgICAgICAge1widGVybVwiOiB7XCJwb3N0X3N0YXR1c1wiOiBcIm9wZW5cIn19LFxuICAgICAgICAgICAge1wicmFuZ2VcIjoge1wiX3VwZGF0ZWRcIjoge1wibHRcIjogdGhpcy52bSA/IHRoaXMudm0udGltZUluaXRpYWxpemVkIDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpfX19XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcInNvcnRcIjogW1xuICAgICAge1xuICAgICAgICBcInB1Ymxpc2hlZF9kYXRlXCI6IHtvcmRlcjogJ2Rlc2MnLCBtaXNzaW5nOiAnX2xhc3QnLCB1bm1hcHBlZF90eXBlOiAnbG9uZyd9XG4gICAgICB9XG4gICAgXVxuICB9O1xuXG4gIGlmIChvcHRzLmZyb21EYXRlKSB7XG4gICAgcXVlcnkucXVlcnkuZmlsdGVyZWQuZmlsdGVyLmFuZFsyXS5yYW5nZS5fdXBkYXRlZCA9IHtcbiAgICAgIFwiZ3RcIjogb3B0cy5mcm9tRGF0ZVxuICAgIH07XG4gICAgLy8gQFRPRE86IHJlbW92ZSBgcG9zdF9zdGF0dXNgIGFzd2VsbCBzbyB3ZSBjYW4gaGF2ZSB1bnB1Ymxpc2ggcG9zdHNcbiAgICAvLyByZW1vdmUgc3RpY2t5IHBvc3RzIGZyb20gdXBkYXRlIHBvbGxpbmcgcmVxdWVzdC5cbiAgICBxdWVyeS5xdWVyeS5maWx0ZXJlZC5maWx0ZXIuYW5kLnNwbGljZSgwLDEpO1xuICB9XG5cbiAgaWYgKG9wdHMuaGlnaGxpZ2h0c09ubHkgPT09IHRydWUpIHtcbiAgICBxdWVyeS5xdWVyeS5maWx0ZXJlZC5maWx0ZXIuYW5kLnB1c2goe1xuICAgICAgdGVybToge2xiX2hpZ2hsaWdodDogdHJ1ZX1cbiAgICB9KTtcbiAgfVxuXG4gIGlmIChvcHRzLm5vdERlbGV0ZWQgPT09IHRydWUpIHtcbiAgICBxdWVyeS5xdWVyeS5maWx0ZXJlZC5maWx0ZXIuYW5kLnB1c2goe1xuICAgICAgbm90OiB7IHRlcm06IHtkZWxldGVkOiB0cnVlfSB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAob3B0cy5zb3J0ID09PSBcImFzY2VuZGluZ1wiKSB7XG4gICAgcXVlcnkuc29ydFswXS5wdWJsaXNoZWRfZGF0ZS5vcmRlciA9IFwiYXNjXCI7XG4gIH0gZWxzZSBpZiAob3B0cy5zb3J0ID09PSBcImVkaXRvcmlhbFwiKSB7XG4gICAgcXVlcnkuc29ydCA9IFtcbiAgICAgIHtcbiAgICAgICAgb3JkZXI6IHtcbiAgICAgICAgICBvcmRlcjogXCJkZXNjXCIsXG4gICAgICAgICAgbWlzc2luZzogXCJfbGFzdFwiLFxuICAgICAgICAgIHVubWFwcGVkX3R5cGU6IFwibG9uZ1wiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdO1xuICB9XG5cbiAgLy8gUmVtb3ZlIHRoZSByYW5nZSwgd2Ugd2FudCBhbGwgdGhlIHJlc3VsdHNcbiAgaWYgKCFvcHRzLmZyb21EYXRlKSB7XG4gICAgcXVlcnkucXVlcnkuZmlsdGVyZWQuZmlsdGVyLmFuZC5mb3JFYWNoKChydWxlLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKHJ1bGUuaGFzT3duUHJvcGVydHkoJ3JhbmdlJykpIHtcbiAgICAgICAgcXVlcnkucXVlcnkuZmlsdGVyZWQuZmlsdGVyLmFuZC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGVuY29kZVVSSShKU09OLnN0cmluZ2lmeShxdWVyeSkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB2bTtcbiIsInZhciBudW5qdWNrcyA9IHJlcXVpcmUoIFwibnVuanVja3MvYnJvd3Nlci9udW5qdWNrcy1zbGltXCIgKTtcbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkgeyh3aW5kb3cubnVuanVja3NQcmVjb21waWxlZCA9IHdpbmRvdy5udW5qdWNrc1ByZWNvbXBpbGVkIHx8IHt9KVtcInRlbXBsYXRlLWFkLWVudHJ5Lmh0bWxcIl0gPSAoZnVuY3Rpb24oKSB7XG5mdW5jdGlvbiByb290KGVudiwgY29udGV4dCwgZnJhbWUsIHJ1bnRpbWUsIGNiKSB7XG52YXIgbGluZW5vID0gbnVsbDtcbnZhciBjb2xubyA9IG51bGw7XG52YXIgb3V0cHV0ID0gXCJcIjtcbnRyeSB7XG52YXIgcGFyZW50VGVtcGxhdGUgPSBudWxsO1xudmFyIG1hY3JvX3RfMSA9IHJ1bnRpbWUubWFrZU1hY3JvKFxuW1widGV4dFwiXSwgXG5bXSwgXG5mdW5jdGlvbiAobF90ZXh0LCBrd2FyZ3MpIHtcbnZhciBjYWxsZXJGcmFtZSA9IGZyYW1lO1xuZnJhbWUgPSBuZXcgcnVudGltZS5GcmFtZSgpO1xua3dhcmdzID0ga3dhcmdzIHx8IHt9O1xuaWYgKGt3YXJncy5oYXNPd25Qcm9wZXJ0eShcImNhbGxlclwiKSkge1xuZnJhbWUuc2V0KFwiY2FsbGVyXCIsIGt3YXJncy5jYWxsZXIpOyB9XG5mcmFtZS5zZXQoXCJ0ZXh0XCIsIGxfdGV4dCk7XG52YXIgdF8yID0gXCJcIjtpZighcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIm9wdGlvbnNcIikpLFwiaTE4blwiKSkscnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwic2V0dGluZ3NcIikpLFwibGFuZ3VhZ2VcIikpKSB7XG50XzIgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKGxfdGV4dCwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG47XG59XG5lbHNlIHtcbmlmKCFydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIm9wdGlvbnNcIikpLFwiaTE4blwiKSkscnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwic2V0dGluZ3NcIikpLFwibGFuZ3VhZ2VcIikpKSxsX3RleHQpKSB7XG50XzIgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKGxfdGV4dCwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG47XG59XG5lbHNlIHtcbnRfMiArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJvcHRpb25zXCIpKSxcImkxOG5cIikpLHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcImxhbmd1YWdlXCIpKSksbF90ZXh0KSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG47XG59XG47XG59XG47XG5mcmFtZSA9IGNhbGxlckZyYW1lO1xucmV0dXJuIG5ldyBydW50aW1lLlNhZmVTdHJpbmcodF8yKTtcbn0pO1xuY29udGV4dC5hZGRFeHBvcnQoXCJ0cmFuc2xhdGVcIik7XG5jb250ZXh0LnNldFZhcmlhYmxlKFwidHJhbnNsYXRlXCIsIG1hY3JvX3RfMSk7XG5vdXRwdXQgKz0gXCJcXG5cXG48YXJ0aWNsZVxcbiAgICBjbGFzcz1cXFwibGItcG9zdCBsaXN0LWdyb3VwLWl0ZW0gc2hvdy1hdXRob3ItYXZhdGFyIGFkdmVydGlzZW1lbnRcXFwiXFxuICAgIGRhdGEtcG9zdC1pZD1cXFwiXCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwiX2lkXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIlxcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImxiLXBvc3QtaGVhZGVyXFxcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImxiLXR5cGUgbGItdHlwZS0tXCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwidHlwZVwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJcXFwiPjwvZGl2PlxcblxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwibGItcG9zdC1kYXRlLWljb25zXFxcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJsYi1hZHZlcnRpc2VtZW50XFxcIj5cIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUoKGxpbmVubyA9IDksIGNvbG5vID0gNTIsIHJ1bnRpbWUuY2FsbFdyYXAobWFjcm9fdF8xLCBcInRyYW5zbGF0ZVwiLCBjb250ZXh0LCBbXCJBZHZlcnRpc2VtZW50XCJdKSksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gIDwvZGl2PlxcblxcbiAgPCEtLSBwb3N0IHN0YXJ0IC0tPlxcbiAgPGRpdiBjbGFzcz1cXFwiaXRlbXMtY29udGFpbmVyXFxcIj5cXG4gICAgPCEtLSBpdGVtIHN0YXJ0IC0tPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJsYi1pdGVtIFwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJpdGVtXCIpKSxcInR5cGVcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiXFxcIj5cXG4gICAgICAgIDxhcnRpY2xlPlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShlbnYuZ2V0RmlsdGVyKFwic2FmZVwiKS5jYWxsKGNvbnRleHQsIHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwidGV4dFwiKSksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiPC9hcnRpY2xlPlxcbiAgICA8L2Rpdj5cXG4gICAgPCEtLSBpdGVtIGVuZCAtLT5cXG4gIDwvZGl2PlxcbiAgPCEtLSBwb3N0IGVuZCAtLT5cXG5cXG4gIDxkaXYgY2xhc3M9XFxcImxiLXBvc3QtYm90dG9tXFxcIj5cXG5cXG4gICAgPGRpdiBjbGFzcz1cXFwibGItcG9zdC1hY3Rpb25zXFxcIj5cXG5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJsYi1wb3N0LXNoYXJlXFxcIj5cXG4gICAgICAgIDxpbWcgc3JjPVxcXCJcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJhc3NldHNfcm9vdFwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJpbWFnZXMvYWN0aW9uX3NoYXJlLnN2Z1xcXCIgY2xhc3M9XFxcImxiLXBvc3Qtc2hhcmVJY29uXFxcIiAvPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwibGItcG9zdC1zaGFyZUJveFxcXCI+XFxuICAgICAgICAgIDxhIGNsYXNzPVxcXCJsYi1wb3N0LXNoYXJlQm94X19pdGVtXFxcIlxcbiAgICAgICAgICAgIG9uY2xpY2s9XFxcIndpbmRvdy5vcGVuKHRoaXMuaHJlZiwndGFyZ2V0V2luZG93JywndG9vbGJhcj1ubyxsb2NhdGlvbj1ubyxzdGF0dXM9bm8sbWVudWJhcj1ubyxzY3JvbGxiYXJzPXllcyxyZXNpemFibGU9eWVzLHdpZHRoPTU3MCxoZWlnaHQ9NDAwJyk7cmV0dXJuIGZhbHNlO1xcXCJcXG4gICAgICAgICAgICBkYXRhLWxpbmstYmFzZT1cXFwiLy93d3cuZmFjZWJvb2suY29tL3NoYXJlci5waHA/cz0xMDAmcFt0aXRsZV09JnBbdXJsXT1cXFwiXFxuICAgICAgICAgICAgZGF0YS1saW5rLWlkPVwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJpdGVtXCIpKSxcIl9pZFwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCI+PGltZyBzcmM9XFxcIlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcImFzc2V0c19yb290XCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcImltYWdlcy9zaGFyZV9mYWNlYm9vay5zdmdcXFwiLz5cXG4gICAgICAgICAgPC9hPlxcbiAgICAgICAgICA8YSBjbGFzcz1cXFwibGItcG9zdC1zaGFyZUJveF9faXRlbVxcXCJcXG4gICAgICAgICAgICBvbmNsaWNrPVxcXCJ3aW5kb3cub3Blbih0aGlzLmhyZWYsJ3RhcmdldFdpbmRvdycsJ3Rvb2xiYXI9bm8sbG9jYXRpb249bm8sc3RhdHVzPW5vLG1lbnViYXI9bm8sc2Nyb2xsYmFycz15ZXMscmVzaXphYmxlPXllcyx3aWR0aD01NzAsaGVpZ2h0PTQwMCcpO3JldHVybiBmYWxzZTtcXFwiXFxuICAgICAgICAgICAgZGF0YS1saW5rLWJhc2U9XFxcIi8vcGx1cy5nb29nbGUuY29tL3NoYXJlP3VybD1cXFwiXFxuICAgICAgICAgICAgZGF0YS1saW5rLWlkPVwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJpdGVtXCIpKSxcIl9pZFwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCI+PGltZyBzcmM9XFxcIlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcImFzc2V0c19yb290XCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcImltYWdlcy9zaGFyZV9nb29nbGUuc3ZnXFxcIi8+XFxuICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgPGEgY2xhc3M9XFxcImxiLXBvc3Qtc2hhcmVCb3hfX2l0ZW1cXFwiXFxuICAgICAgICAgICAgb25jbGljaz1cXFwid2luZG93Lm9wZW4odGhpcy5ocmVmLCd0YXJnZXRXaW5kb3cnLCd0b29sYmFyPW5vLGxvY2F0aW9uPW5vLHN0YXR1cz1ubyxtZW51YmFyPW5vLHNjcm9sbGJhcnM9eWVzLHJlc2l6YWJsZT15ZXMsd2lkdGg9NTcwLGhlaWdodD00MDAnKTtyZXR1cm4gZmFsc2U7XFxcIlxcbiAgICAgICAgICAgIGRhdGEtbGluay1iYXNlPVxcXCIvL3d3dy5saW5rZWRpbi5jb20vc2hhcmVBcnRpY2xlP21pbmk9dHJ1ZSZ1cmw9XFxcIlxcbiAgICAgICAgICAgIGRhdGEtbGluay1pZD1cIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJfaWRcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiPjxpbWcgc3JjPVxcXCJcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJhc3NldHNfcm9vdFwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJpbWFnZXMvc2hhcmVfbGlua2VkaW4uc3ZnXFxcIi8+XFxuICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgPGEgY2xhc3M9XFxcImxiLXBvc3Qtc2hhcmVCb3hfX2l0ZW1cXFwiXFxuICAgICAgICAgICAgb25jbGljaz1cXFwid2luZG93Lm9wZW4odGhpcy5ocmVmLCd0YXJnZXRXaW5kb3cnLCd0b29sYmFyPW5vLGxvY2F0aW9uPW5vLHN0YXR1cz1ubyxtZW51YmFyPW5vLHNjcm9sbGJhcnM9eWVzLHJlc2l6YWJsZT15ZXMsd2lkdGg9NTcwLGhlaWdodD00MDAnKTtyZXR1cm4gZmFsc2U7XFxcIlxcbiAgICAgICAgICAgIGRhdGEtbGluay1iYXNlPVxcXCIvL3R3aXR0ZXIuY29tL2hvbWU/c3RhdHVzPVxcXCJcXG4gICAgICAgICAgICBkYXRhLWxpbmstaWQ9XCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwiX2lkXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIj48aW1nIHNyYz1cXFwiXCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiYXNzZXRzX3Jvb3RcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiaW1hZ2VzL3NoYXJlX3R3aXR0ZXIuc3ZnXFxcIi8+XFxuICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgPGEgY2xhc3M9XFxcImxiLXBvc3Qtc2hhcmVCb3hfX2l0ZW1cXFwiXFxuICAgICAgICAgICAgb25jbGljaz1cXFwid2luZG93Lm9wZW4odGhpcy5ocmVmLCd0YXJnZXRXaW5kb3cnLCd0b29sYmFyPW5vLGxvY2F0aW9uPW5vLHN0YXR1cz1ubyxtZW51YmFyPW5vLHNjcm9sbGJhcnM9eWVzLHJlc2l6YWJsZT15ZXMsd2lkdGg9MTAyNCxoZWlnaHQ9NzY4Jyk7cmV0dXJuIGZhbHNlO1xcXCJcXG4gICAgICAgICAgICBkYXRhLWxpbmstYmFzZT1cXFwibWFpbHRvOj90bz0mc3ViamVjdD1MaXZlYmxvZyZib2R5PVxcXCJcXG4gICAgICAgICAgICBkYXRhLWxpbmstaWQ9XCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwiX2lkXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIj48aW1nIHNyYz1cXFwiXCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiYXNzZXRzX3Jvb3RcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiaW1hZ2VzL3NoYXJlX2VtYWlsLnN2Z1xcXCIvPlxcbiAgICAgICAgICA8L2E+XFxuICAgICAgICAgIDxzcGFuPiB8IDwvc3Bhbj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDwhLS0gZW5kIHNoYXJlIC0tPlxcblxcbiAgICAgIDwhLS0gcGVybWFsaW5rIC0tPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImxiLXBvc3QtcGVybWFsaW5rXFxcIj5cXG4gICAgICAgIDxhIGlkPVxcXCJcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJfaWRcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+XFxuICAgICAgICAgIDxpbWcgc3JjPVxcXCJcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJhc3NldHNfcm9vdFwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJpbWFnZXMvYWN0aW9uX2xpbmsuc3ZnXFxcIiBjbGFzcz1cXFwibGItcG9zdC1saW5rSWNvblxcXCIgLz5cXG4gICAgICAgIDwvYT5cXG4gICAgICA8L2Rpdj5cXG4gICAgICA8IS0tIGVuZCBwZXJtYWxpbmsgLS0+XFxuXFxuICAgIDwvZGl2PlxcblxcbjwvYXJ0aWNsZT5cXG5cIjtcbmlmKHBhcmVudFRlbXBsYXRlKSB7XG5wYXJlbnRUZW1wbGF0ZS5yb290UmVuZGVyRnVuYyhlbnYsIGNvbnRleHQsIGZyYW1lLCBydW50aW1lLCBjYik7XG59IGVsc2Uge1xuY2IobnVsbCwgb3V0cHV0KTtcbn1cbjtcbn0gY2F0Y2ggKGUpIHtcbiAgY2IocnVudGltZS5oYW5kbGVFcnJvcihlLCBsaW5lbm8sIGNvbG5vKSk7XG59XG59XG5yZXR1cm4ge1xucm9vdDogcm9vdFxufTtcblxufSkoKTtcbnJldHVybiBmdW5jdGlvbihjdHgsIGNiKSB7IHJldHVybiBudW5qdWNrcy5yZW5kZXIoXCJ0ZW1wbGF0ZS1hZC1lbnRyeS5odG1sXCIsIGN0eCwgY2IpOyB9XG59KSgpO1xuO1xuIiwidmFyIG51bmp1Y2tzID0gcmVxdWlyZSggXCJudW5qdWNrcy9icm93c2VyL251bmp1Y2tzLXNsaW1cIiApO1xubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7KHdpbmRvdy5udW5qdWNrc1ByZWNvbXBpbGVkID0gd2luZG93Lm51bmp1Y2tzUHJlY29tcGlsZWQgfHwge30pW1widGVtcGxhdGUtYXV0aG9yLmh0bWxcIl0gPSAoZnVuY3Rpb24oKSB7XG5mdW5jdGlvbiByb290KGVudiwgY29udGV4dCwgZnJhbWUsIHJ1bnRpbWUsIGNiKSB7XG52YXIgbGluZW5vID0gbnVsbDtcbnZhciBjb2xubyA9IG51bGw7XG52YXIgb3V0cHV0ID0gXCJcIjtcbnRyeSB7XG52YXIgcGFyZW50VGVtcGxhdGUgPSBudWxsO1xuaWYocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJwb3N0X2l0ZW1zX3R5cGVcIikgIT0gXCJhZHZlcnRpc2VtZW50XCIpIHtcbm91dHB1dCArPSBcIlxcbjwhLS0gYXV0aG9yIHBsdXMgYXZhdGFyIC0tPlxcbjxkaXYgY2xhc3M9XFxcImxiLWF1dGhvciBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcImF1dGhvclBvc2l0aW9uXCIpID09IFwiYm90dG9tXCIpIHtcbm91dHB1dCArPSBcImxiLWF1dGhvci0tYm90dG9tXCI7XG47XG59XG5vdXRwdXQgKz0gXCJcXFwiPlxcbiAgICBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIm1haW5JdGVtXCIpKSxcImNvbW1lbnRlclwiKSAmJiAhKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwic3luZGljYXRpb25faW5cIikgJiYgIXJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcInNob3dTeW5kaWNhdGVkQXV0aG9yXCIpKSkge1xub3V0cHV0ICs9IFwiXFxuICAgICAgPGRpdiBjbGFzcz1cXFwibGItYXV0aG9yX19uYW1lXFxcIj5cXG4gICAgICAgIFwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZSgobGluZW5vID0gNSwgY29sbm8gPSAxOCwgcnVudGltZS5jYWxsV3JhcChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInRyYW5zbGF0ZVwiKSwgXCJ0cmFuc2xhdGVcIiwgY29udGV4dCwgW1wiQ29tbWVudCBieVwiXSkpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIiBcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwibWFpbkl0ZW1cIikpLFwiY29tbWVudGVyXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIlxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDxpbWcgY2xhc3M9XFxcImxiLWF1dGhvcl9fYXZhdGFyIGxiLWF1dGhvcl9fYXZhdGFyLS1jb21tZW50XFxcIiBzcmM9XFxcIlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcImFzc2V0c19yb290XCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcImltYWdlcy9jb21tZW50X2ljb24uc3ZnXFxcIj5cXG4gICAgXCI7XG47XG59XG5lbHNlIHtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcInNob3dBdXRob3JcIikpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImxiLWF1dGhvcl9fbmFtZVxcXCI+XFxuICAgICAgXCI7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJtYWluSXRlbVwiKSksXCJzeW5kaWNhdGVkX2NyZWF0b3JcIikgJiYgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwic2V0dGluZ3NcIikpLFwic2hvd1N5bmRpY2F0ZWRBdXRob3JcIikpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgXCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJtYWluSXRlbVwiKSksXCJzeW5kaWNhdGVkX2NyZWF0b3JcIikpLFwiZGlzcGxheV9uYW1lXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIlxcbiAgICAgIFwiO1xuO1xufVxuZWxzZSB7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJpdGVtXCIpKSxcIm9yaWdpbmFsX2NyZWF0b3JcIikpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgXCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJpdGVtXCIpKSxcIm9yaWdpbmFsX2NyZWF0b3JcIikpLFwiZGlzcGxheV9uYW1lXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIlxcbiAgICAgIFwiO1xuO1xufVxuZWxzZSB7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJpdGVtXCIpKSxcInB1Ymxpc2hlclwiKSkge1xub3V0cHV0ICs9IFwiXFxuICAgICAgICBcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwicHVibGlzaGVyXCIpKSxcImRpc3BsYXlfbmFtZVwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJcXG4gICAgICBcIjtcbjtcbn1cbjtcbn1cbjtcbn1cbm91dHB1dCArPSBcIlxcbiAgICAgIFwiO1xuaWYocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJzeW5kaWNhdGlvbl9pblwiKSAmJiAhcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwic2V0dGluZ3NcIikpLFwic2hvd1N5bmRpY2F0ZWRBdXRob3JcIikpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcImxiLXByb2R1Y2VyXCI7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJzZXR0aW5nc1wiKSksXCJzaG93U3luZGljYXRlZEF1dGhvclwiKSkge1xub3V0cHV0ICs9IFwiIGxiLXByb2R1Y2VyX19hdXRob3JcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcXCI+XCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJpdGVtXCIpKSxcInN5bmRpY2F0aW9uX2luXCIpKSxcInByb2R1Y2VyX2Jsb2dfdGl0bGVcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiPC9zcGFuPlxcbiAgICAgIFwiO1xuO1xufVxub3V0cHV0ICs9IFwiXFxuICAgICAgPC9kaXY+XFxuICAgICAgXCI7XG5pZihydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInR5cGVcIikgPT0gXCJjb21tZW50XCIpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgPGltZyBjbGFzcz1cXFwibGItYXV0aG9yX19hdmF0YXIgbGItYXV0aG9yX19hdmF0YXItLWNvbW1lbnRcXFwiIHNyYz1cXFwiXCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiYXNzZXRzX3Jvb3RcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiaW1hZ2VzL2NvbW1lbnRfaWNvbi5zdmdcXFwiPlxcbiAgICAgIFwiO1xuO1xufVxub3V0cHV0ICs9IFwiXFxuICAgICAgXCI7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJzZXR0aW5nc1wiKSksXCJzaG93QXV0aG9yQXZhdGFyXCIpICYmIHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwidHlwZVwiKSAhPSBcImNvbW1lbnRcIikge1xub3V0cHV0ICs9IFwiXFxuICAgICAgICBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIm1haW5JdGVtXCIpKSxcInN5bmRpY2F0ZWRfY3JlYXRvclwiKSAmJiBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJzZXR0aW5nc1wiKSksXCJzaG93U3luZGljYXRlZEF1dGhvclwiKSAmJiBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwibWFpbkl0ZW1cIikpLFwic3luZGljYXRlZF9jcmVhdG9yXCIpKSxcInBpY3R1cmVfdXJsXCIpKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgIDxpbWcgY2xhc3M9XFxcImxiLWF1dGhvcl9fYXZhdGFyXFxcIiBzcmM9XFxcIlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwibWFpbkl0ZW1cIikpLFwic3luZGljYXRlZF9jcmVhdG9yXCIpKSxcInBpY3R1cmVfdXJsXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIlxcXCIgLz5cXG4gICAgICAgIFwiO1xuO1xufVxuZWxzZSB7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJpdGVtXCIpKSxcIm9yaWdpbmFsX2NyZWF0b3JcIikgJiYgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwib3JpZ2luYWxfY3JlYXRvclwiKSksXCJwaWN0dXJlX3VybFwiKSkge1xub3V0cHV0ICs9IFwiXFxuICAgICAgICA8aW1nIGNsYXNzPVxcXCJsYi1hdXRob3JfX2F2YXRhclxcXCIgc3JjPVxcXCJcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwib3JpZ2luYWxfY3JlYXRvclwiKSksXCJwaWN0dXJlX3VybFwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJcXFwiIC8+XFxuICAgICAgICBcIjtcbjtcbn1cbmVsc2Uge1xuaWYocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJwdWJsaXNoZXJcIikgJiYgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwicHVibGlzaGVyXCIpKSxcInBpY3R1cmVfdXJsXCIpKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgIDxpbWcgY2xhc3M9XFxcImxiLWF1dGhvcl9fYXZhdGFyXFxcIiBzcmM9XFxcIlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJwdWJsaXNoZXJcIikpLFwicGljdHVyZV91cmxcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiXFxcIiAvPlxcbiAgICAgICAgXCI7XG47XG59XG5lbHNlIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwibGItYXV0aG9yX19hdmF0YXJcXFwiPjwvZGl2PlxcbiAgICAgICAgXCI7XG47XG59XG47XG59XG47XG59XG5vdXRwdXQgKz0gXCJcXG4gICAgICBcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcbiAgICBcIjtcbjtcbn1cbjtcbn1cbm91dHB1dCArPSBcIlxcbiAgPC9kaXY+XFxuICA8IS0tIGVuZCBhdXRob3IgLS0+XFxuICBcIjtcbjtcbn1cbmlmKHBhcmVudFRlbXBsYXRlKSB7XG5wYXJlbnRUZW1wbGF0ZS5yb290UmVuZGVyRnVuYyhlbnYsIGNvbnRleHQsIGZyYW1lLCBydW50aW1lLCBjYik7XG59IGVsc2Uge1xuY2IobnVsbCwgb3V0cHV0KTtcbn1cbjtcbn0gY2F0Y2ggKGUpIHtcbiAgY2IocnVudGltZS5oYW5kbGVFcnJvcihlLCBsaW5lbm8sIGNvbG5vKSk7XG59XG59XG5yZXR1cm4ge1xucm9vdDogcm9vdFxufTtcblxufSkoKTtcbnJldHVybiBmdW5jdGlvbihjdHgsIGNiKSB7IHJldHVybiBudW5qdWNrcy5yZW5kZXIoXCJ0ZW1wbGF0ZS1hdXRob3IuaHRtbFwiLCBjdHgsIGNiKTsgfVxufSkoKTtcbjtcbiIsInZhciBudW5qdWNrcyA9IHJlcXVpcmUoIFwibnVuanVja3MvYnJvd3Nlci9udW5qdWNrcy1zbGltXCIgKTtcbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkgeyh3aW5kb3cubnVuanVja3NQcmVjb21waWxlZCA9IHdpbmRvdy5udW5qdWNrc1ByZWNvbXBpbGVkIHx8IHt9KVtcInRlbXBsYXRlLWl0ZW0tY29tbWVudC5odG1sXCJdID0gKGZ1bmN0aW9uKCkge1xuZnVuY3Rpb24gcm9vdChlbnYsIGNvbnRleHQsIGZyYW1lLCBydW50aW1lLCBjYikge1xudmFyIGxpbmVubyA9IG51bGw7XG52YXIgY29sbm8gPSBudWxsO1xudmFyIG91dHB1dCA9IFwiXCI7XG50cnkge1xudmFyIHBhcmVudFRlbXBsYXRlID0gbnVsbDtcbm91dHB1dCArPSBcIjxkaXYgY2xhc3M9XFxcIml0ZW1zLWNvbnRhaW5lckluZGVudFxcXCI+XFxuICA8IS0tIGF1dGhvciBwbHVzIGF2YXRhciAtLT5cXG4gIDxkaXYgY2xhc3M9XFxcImxiLWF1dGhvciBsYi1hdXRob3ItLWluZGVudFxcXCI+XFxuICAgIFwiO1xuaWYocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikgJiYgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInJlZlwiKSksXCJpdGVtXCIpKSxcImNvbW1lbnRlclwiKSAmJiAhKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwic3luZGljYXRpb25faW5cIikgJiYgIXJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcInNob3dTeW5kaWNhdGVkQXV0aG9yXCIpKSkge1xub3V0cHV0ICs9IFwiXFxuICAgICAgPGltZyBjbGFzcz1cXFwibGItYXV0aG9yX19hdmF0YXIgbGItYXV0aG9yX19hdmF0YXItLWNvbW1lbnRcXFwiIHNyYz1cXFwiXCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiYXNzZXRzX3Jvb3RcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiaW1hZ2VzL2NvbW1lbnRfaWNvbi5zdmdcXFwiPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImxiLWF1dGhvcl9fbmFtZVxcXCI+XFxuICAgICAgICBcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUoKGxpbmVubyA9IDYsIGNvbG5vID0gMTgsIHJ1bnRpbWUuY2FsbFdyYXAocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJ0cmFuc2xhdGVcIiksIFwidHJhbnNsYXRlXCIsIGNvbnRleHQsIFtcIkNvbW1lbnQgYnlcIl0pKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCIgXCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJjb21tZW50ZXJcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiXFxuICAgICAgPC9kaXY+XFxuICAgIFwiO1xuO1xufVxuZWxzZSB7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJzZXR0aW5nc1wiKSksXCJzaG93QXV0aG9yXCIpICYmIHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwic3luZGljYXRpb25faW5cIikgJiYgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikgJiYgKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJvcmlnaW5hbF9jcmVhdG9yXCIpIHx8IHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJzeW5kaWNhdGVkX2NyZWF0b3JcIikpKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcInNob3dBdXRob3JBdmF0YXJcIikpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgPGltZyBjbGFzcz1cXFwibGItYXV0aG9yX19hdmF0YXIgbGItYXV0aG9yX19hdmF0YXItLWNvbW1lbnRcXFwiIHNyYz1cXFwiXCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiYXNzZXRzX3Jvb3RcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiaW1hZ2VzL2NvbW1lbnRfaWNvbi5zdmdcXFwiPlxcbiAgICAgIFwiO1xuO1xufVxub3V0cHV0ICs9IFwiXFxuICAgICAgPGRpdiBjbGFzcz1cXFwibGItYXV0aG9yX19uYW1lXFxcIj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJsYi1wcm9kdWNlclwiO1xuaWYocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwic2V0dGluZ3NcIikpLFwic2hvd1N5bmRpY2F0ZWRBdXRob3JcIikpIHtcbm91dHB1dCArPSBcIiBsYi1wcm9kdWNlcl9fYXV0aG9yXCI7XG47XG59XG5vdXRwdXQgKz0gXCJcXFwiPlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJzeW5kaWNhdGlvbl9pblwiKSksXCJwcm9kdWNlcl9ibG9nX3RpdGxlXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIjwvc3Bhbj5cXG4gICAgICA8L2Rpdj5cXG4gICAgXCI7XG47XG59XG47XG59XG5vdXRwdXQgKz0gXCJcXG4gIDwvZGl2PlxcbiAgPGRpdiBjbGFzcz1cXFwibGItaXRlbSB0ZXh0XFxcIj5cXG4gICAgPGFydGljbGU+XCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKGVudi5nZXRGaWx0ZXIoXCJzYWZlXCIpLmNhbGwoY29udGV4dCwgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInJlZlwiKSksXCJpdGVtXCIpKSxcInRleHRcIikpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIjwvYXJ0aWNsZT5cXG4gIDwvZGl2PlxcbjwvZGl2PlwiO1xuaWYocGFyZW50VGVtcGxhdGUpIHtcbnBhcmVudFRlbXBsYXRlLnJvb3RSZW5kZXJGdW5jKGVudiwgY29udGV4dCwgZnJhbWUsIHJ1bnRpbWUsIGNiKTtcbn0gZWxzZSB7XG5jYihudWxsLCBvdXRwdXQpO1xufVxuO1xufSBjYXRjaCAoZSkge1xuICBjYihydW50aW1lLmhhbmRsZUVycm9yKGUsIGxpbmVubywgY29sbm8pKTtcbn1cbn1cbnJldHVybiB7XG5yb290OiByb290XG59O1xuXG59KSgpO1xucmV0dXJuIGZ1bmN0aW9uKGN0eCwgY2IpIHsgcmV0dXJuIG51bmp1Y2tzLnJlbmRlcihcInRlbXBsYXRlLWl0ZW0tY29tbWVudC5odG1sXCIsIGN0eCwgY2IpOyB9XG59KSgpO1xuO1xuIiwidmFyIG51bmp1Y2tzID0gcmVxdWlyZSggXCJudW5qdWNrcy9icm93c2VyL251bmp1Y2tzLXNsaW1cIiApO1xubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7KHdpbmRvdy5udW5qdWNrc1ByZWNvbXBpbGVkID0gd2luZG93Lm51bmp1Y2tzUHJlY29tcGlsZWQgfHwge30pW1widGVtcGxhdGUtaXRlbS1lbWJlZC5odG1sXCJdID0gKGZ1bmN0aW9uKCkge1xuZnVuY3Rpb24gcm9vdChlbnYsIGNvbnRleHQsIGZyYW1lLCBydW50aW1lLCBjYikge1xudmFyIGxpbmVubyA9IG51bGw7XG52YXIgY29sbm8gPSBudWxsO1xudmFyIG91dHB1dCA9IFwiXCI7XG50cnkge1xudmFyIHBhcmVudFRlbXBsYXRlID0gbnVsbDtcbmlmKGVudi5nZXRGaWx0ZXIoXCJsb3dlclwiKS5jYWxsKGNvbnRleHQsIHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJwcm92aWRlcl9uYW1lXCIpKSA9PSBcInlvdXR1YmVcIiAmJiBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInJlZlwiKSksXCJpdGVtXCIpKSxcIm1ldGFcIikpLFwiaHRtbFwiKSkge1xub3V0cHV0ICs9IFwiXFxuICAgIDxkaXYgY2xhc3M9XFxcIml0ZW0tLWVtYmVkX19lbGVtZW50IGxiLXJlc3BvbnNpdmUtdmlkZW9cXFwiPlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShlbnYuZ2V0RmlsdGVyKFwic2FmZVwiKS5jYWxsKGNvbnRleHQsIHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJodG1sXCIpKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCI8L2Rpdj5cXG5cIjtcbjtcbn1cbmVsc2Uge1xuaWYoKGVudi5nZXRGaWx0ZXIoXCJsb3dlclwiKS5jYWxsKGNvbnRleHQsIHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJwcm92aWRlcl9uYW1lXCIpKSA9PSBcInR3aXR0ZXJcIikgJiYgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJtZXRhXCIpKSxcImh0bWxcIikpIHtcbm91dHB1dCArPSBcIlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJpdGVtLS1lbWJlZF9fZWxlbWVudFxcXCI+XCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKGVudi5nZXRGaWx0ZXIoXCJzYWZlXCIpLmNhbGwoY29udGV4dCwgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJtZXRhXCIpKSxcImh0bWxcIikpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIjwvZGl2PlxcblwiO1xuO1xufVxuZWxzZSB7XG5pZihlbnYuZ2V0RmlsdGVyKFwibG93ZXJcIikuY2FsbChjb250ZXh0LCBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInJlZlwiKSksXCJpdGVtXCIpKSxcIm1ldGFcIikpLFwicHJvdmlkZXJfbmFtZVwiKSkgPT0gXCJmYWNlYm9va1wiICYmIHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJvcmlnaW5hbF91cmxcIikpIHtcbm91dHB1dCArPSBcIlxcbiAgICA8YmxvY2txdW90ZSBjbGFzcz1cXFwiZW1iZWRseS1jYXJkXFxcIiBkYXRhLWNhcmQtY29udHJvbHM9XFxcIjBcXFwiPlxcbiAgICAgICAgPGg0PjxhIGhyZWY9XFxcIlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInJlZlwiKSksXCJpdGVtXCIpKSxcIm1ldGFcIikpLFwib3JpZ2luYWxfdXJsXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIlxcXCI+XCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJjcmVkaXRcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiPC9hPjwvaDQ+XFxuICAgICAgICA8cD5cIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJtZXRhXCIpKSxcInRpdGxlXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIjwvcD5cXG4gICAgPC9ibG9ja3F1b3RlPlxcblwiO1xuO1xufVxuZWxzZSB7XG5pZihlbnYuZ2V0RmlsdGVyKFwibG93ZXJcIikuY2FsbChjb250ZXh0LCBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInJlZlwiKSksXCJpdGVtXCIpKSxcIm1ldGFcIikpLFwicHJvdmlkZXJfbmFtZVwiKSkgPT0gXCJpbnN0YWdyYW1cIiAmJiBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInJlZlwiKSksXCJpdGVtXCIpKSxcIm1ldGFcIikpLFwib3JpZ2luYWxfdXJsXCIpKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgPGJsb2NrcXVvdGUgY2xhc3M9XFxcImVtYmVkbHktY2FyZFxcXCIgZGF0YS1jYXJkLWNvbnRyb2xzPVxcXCIwXFxcIj5cXG4gICAgICAgIDxoND48YSBocmVmPVxcXCJcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJtZXRhXCIpKSxcIm9yaWdpbmFsX3VybFwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJcXFwiPlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInJlZlwiKSksXCJpdGVtXCIpKSxcIm1ldGFcIikpLFwiY3JlZGl0XCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIjwvYT48L2g0PlxcbiAgICAgICAgPHA+XCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJ0aXRsZVwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCI8L3A+XFxuICAgIDwvYmxvY2txdW90ZT5cXG5cIjtcbjtcbn1cbmVsc2Uge1xuaWYoZW52LmdldEZpbHRlcihcImxvd2VyXCIpLmNhbGwoY29udGV4dCwgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJtZXRhXCIpKSxcInByb3ZpZGVyX25hbWVcIikpID09IFwiYnJpZ2h0Y292ZVwiICYmIHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJodG1sXCIpKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgPGRpdiBjbGFzcz1cXFwiaXRlbS0tZW1iZWRfX2VsZW1lbnQgbGItcmVzcG9uc2l2ZS12aWRlb1xcXCI+XCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKGVudi5nZXRGaWx0ZXIoXCJzYWZlXCIpLmNhbGwoY29udGV4dCwgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJtZXRhXCIpKSxcImh0bWxcIikpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIjwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJpdGVtLS1lbWJlZF9faW5mb1xcXCI+XFxuICAgICAgICBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJ0aXRsZVwiKSkge1xub3V0cHV0ICs9IFwiXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpdGVtLS1lbWJlZF9fdGl0bGVcXFwiPlxcbiAgICAgICAgICAgXCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJ0aXRsZVwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgXCI7XG47XG59XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgIFwiO1xuaWYocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJtZXRhXCIpKSxcImRlc2NyaXB0aW9uXCIpKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcIml0ZW0tLWVtYmVkX19kZXNjcmlwdGlvblxcXCI+XCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJkZXNjcmlwdGlvblwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCI8L2Rpdj5cXG4gICAgICAgIFwiO1xuO1xufVxub3V0cHV0ICs9IFwiXFxuICAgIDwvZGl2PlxcblwiO1xuO1xufVxuZWxzZSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgXCI7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInJlZlwiKSksXCJpdGVtXCIpKSxcIm1ldGFcIikpLFwiaHRtbFwiKSkge1xub3V0cHV0ICs9IFwiXFxuICAgIDxkaXYgY2xhc3M9XFxcIml0ZW0tLWVtYmVkX19lbGVtZW50XFxcIj5cIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUoZW52LmdldEZpbHRlcihcInNhZmVcIikuY2FsbChjb250ZXh0LCBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInJlZlwiKSksXCJpdGVtXCIpKSxcIm1ldGFcIikpLFwiaHRtbFwiKSksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiPC9kaXY+XFxuICAgIFwiO1xuO1xufVxub3V0cHV0ICs9IFwiXFxuICAgIFwiO1xuaWYoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJ0aXRsZVwiKSB8fCBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInJlZlwiKSksXCJpdGVtXCIpKSxcIm1ldGFcIikpLFwiZGVzY3JpcHRpb25cIikgfHwgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJtZXRhXCIpKSxcImNyZWRpdFwiKSB8fCAoIXJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJodG1sXCIpICYmIHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJ0aHVtYm5haWxfdXJsXCIpKSkpIHtcbm91dHB1dCArPSBcIlxcbiAgICA8YXJ0aWNsZSBjbGFzcz1cXFwiaXRlbS0tZW1iZWQgaXRlbS0tZW1iZWRfX3dyYXBwZXJcXFwiPlxcbiAgICAgICAgXCI7XG5pZighcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJtZXRhXCIpKSxcImh0bWxcIikgJiYgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJtZXRhXCIpKSxcInRodW1ibmFpbF91cmxcIikpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgPGEgaHJlZj1cXFwiXCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJvcmlnaW5hbF91cmxcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCIgY2xhc3M9XFxcIlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZSgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJtZXRhXCIpKSxcImRlc2NyaXB0aW9uXCIpP1wiaXRlbS0tZW1iZWRfX2lsbHVzdHJhdGlvblwiOlwiaXRlbS0tZW1iZWRfX29ubHktaWxsdXN0cmF0aW9uXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIlxcXCI+XFxuICAgICAgICAgICAgPGltZyBzcmM9XFxcIlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInJlZlwiKSksXCJpdGVtXCIpKSxcIm1ldGFcIikpLFwidGh1bWJuYWlsX3VybFwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJcXFwiLz5cXG4gICAgPC9hPlxcbiAgICBcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcbiAgICBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJ0aXRsZVwiKSB8fCBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInJlZlwiKSksXCJpdGVtXCIpKSxcIm1ldGFcIikpLFwiZGVzY3JpcHRpb25cIikgfHwgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJtZXRhXCIpKSxcImNyZWRpdFwiKSkge1xub3V0cHV0ICs9IFwiXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpdGVtLS1lbWJlZF9faW5mb1xcXCI+XFxuICAgICAgICAgICAgXCI7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInJlZlwiKSksXCJpdGVtXCIpKSxcIm1ldGFcIikpLFwidGl0bGVcIikpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcIml0ZW0tLWVtYmVkX190aXRsZVxcXCI+XFxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XFxcIlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInJlZlwiKSksXCJpdGVtXCIpKSxcIm1ldGFcIikpLFwib3JpZ2luYWxfdXJsXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIlxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiIHRpdGxlPVxcXCJcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJtZXRhXCIpKSxcInRpdGxlXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIlxcXCI+XCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJ0aXRsZVwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCI8L2E+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgXCI7XG47XG59XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgICBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJkZXNjcmlwdGlvblwiKSkge1xub3V0cHV0ICs9IFwiXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaXRlbS0tZW1iZWRfX2Rlc2NyaXB0aW9uXFxcIj5cIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJtZXRhXCIpKSxcImRlc2NyaXB0aW9uXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIjwvZGl2PlxcbiAgICAgICAgICAgIFwiO1xuO1xufVxub3V0cHV0ICs9IFwiXFxuICAgICAgICAgICAgXCI7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInJlZlwiKSksXCJpdGVtXCIpKSxcIm1ldGFcIikpLFwiY3JlZGl0XCIpKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJpdGVtLS1lbWJlZF9fY3JlZGl0XFxcIj5cIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJtZXRhXCIpKSxcImNyZWRpdFwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCI8L2Rpdj5cXG4gICAgICAgICAgICBcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICBcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcblxcbiAgICA8L2FydGljbGU+XFxuICAgIFwiO1xuO1xufVxub3V0cHV0ICs9IFwiXFxuXCI7XG47XG59XG47XG59XG47XG59XG47XG59XG47XG59XG5pZihwYXJlbnRUZW1wbGF0ZSkge1xucGFyZW50VGVtcGxhdGUucm9vdFJlbmRlckZ1bmMoZW52LCBjb250ZXh0LCBmcmFtZSwgcnVudGltZSwgY2IpO1xufSBlbHNlIHtcbmNiKG51bGwsIG91dHB1dCk7XG59XG47XG59IGNhdGNoIChlKSB7XG4gIGNiKHJ1bnRpbWUuaGFuZGxlRXJyb3IoZSwgbGluZW5vLCBjb2xubykpO1xufVxufVxucmV0dXJuIHtcbnJvb3Q6IHJvb3Rcbn07XG5cbn0pKCk7XG5yZXR1cm4gZnVuY3Rpb24oY3R4LCBjYikgeyByZXR1cm4gbnVuanVja3MucmVuZGVyKFwidGVtcGxhdGUtaXRlbS1lbWJlZC5odG1sXCIsIGN0eCwgY2IpOyB9XG59KSgpO1xuO1xuIiwidmFyIG51bmp1Y2tzID0gcmVxdWlyZSggXCJudW5qdWNrcy9icm93c2VyL251bmp1Y2tzLXNsaW1cIiApO1xubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7KHdpbmRvdy5udW5qdWNrc1ByZWNvbXBpbGVkID0gd2luZG93Lm51bmp1Y2tzUHJlY29tcGlsZWQgfHwge30pW1widGVtcGxhdGUtaXRlbS1nYWxsZXJ5SW1hZ2UuaHRtbFwiXSA9IChmdW5jdGlvbigpIHtcbmZ1bmN0aW9uIHJvb3QoZW52LCBjb250ZXh0LCBmcmFtZSwgcnVudGltZSwgY2IpIHtcbnZhciBsaW5lbm8gPSBudWxsO1xudmFyIGNvbG5vID0gbnVsbDtcbnZhciBvdXRwdXQgPSBcIlwiO1xudHJ5IHtcbnZhciBwYXJlbnRUZW1wbGF0ZSA9IG51bGw7XG5vdXRwdXQgKz0gXCI8ZmlndXJlPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJsYi1zbGlkZXNob3dfaW1hZ2VDb250YWluZXJcXFwiPlxcbiAgICAgICAgPGltZ1xcbiAgICAgICAgICBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJhY3RpdmVcIikpIHtcbm91dHB1dCArPSBcImNsYXNzPVxcXCJhY3RpdmVcXFwiXCI7XG47XG59XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgc3JjPVxcXCJcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJtZXRhXCIpKSxcIm1lZGlhXCIpKSxcInJlbmRpdGlvbnNcIikpLFwidGh1bWJuYWlsXCIpKSxcImhyZWZcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiXFxcIlxcbiAgICAgICAgICBzcmNzZXQ9XFxcIlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInJlZlwiKSksXCJpdGVtXCIpKSxcIm1ldGFcIikpLFwibWVkaWFcIikpLFwicmVuZGl0aW9uc1wiKSksXCJiYXNlSW1hZ2VcIikpLFwiaHJlZlwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCIgODEwdyxcXG4gICAgICAgICAgXCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJtZWRpYVwiKSksXCJyZW5kaXRpb25zXCIpKSxcInRodW1ibmFpbFwiKSksXCJocmVmXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIiAyNDB3LFxcbiAgICAgICAgICBcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJtZXRhXCIpKSxcIm1lZGlhXCIpKSxcInJlbmRpdGlvbnNcIikpLFwidmlld0ltYWdlXCIpKSxcImhyZWZcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiIDU0MHdcXFwiXFxuICAgICAgICAgIGFsdD1cXFwiXCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJjYXB0aW9uXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIlxcXCI+XFxuICAgIDwvZGl2PlxcbiAgICA8ZmlnY2FwdGlvbj5cXG4gICAgICAgIFwiO1xuaWYocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJtZXRhXCIpKSxcImNhcHRpb25cIikpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcImNhcHRpb25cXFwiPlxcbiAgICAgICAgICAgIFwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInJlZlwiKSksXCJpdGVtXCIpKSxcIm1ldGFcIikpLFwiY2FwdGlvblwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgIDwvc3Bhbj4mbmJzcDtcXG4gICAgICAgIFwiO1xuO1xufVxub3V0cHV0ICs9IFwiXFxuICAgICAgICBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJjcmVkaXRcIikpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgPGI+XCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKChsaW5lbm8gPSAxNywgY29sbm8gPSAyMSwgcnVudGltZS5jYWxsV3JhcChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInRyYW5zbGF0ZVwiKSwgXCJ0cmFuc2xhdGVcIiwgY29udGV4dCwgW1wiY3JlZGl0OlwiXSkpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIjwvYj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJjcmVkaXRcXFwiPlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInJlZlwiKSksXCJpdGVtXCIpKSxcIm1ldGFcIikpLFwiY3JlZGl0XCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIjwvc3Bhbj5cXG4gICAgICAgIFwiO1xuO1xufVxub3V0cHV0ICs9IFwiXFxuICAgIDwvZmlnY2FwdGlvbj5cXG48L2ZpZ3VyZT5cXG4gICAgICBcIjtcbmlmKHBhcmVudFRlbXBsYXRlKSB7XG5wYXJlbnRUZW1wbGF0ZS5yb290UmVuZGVyRnVuYyhlbnYsIGNvbnRleHQsIGZyYW1lLCBydW50aW1lLCBjYik7XG59IGVsc2Uge1xuY2IobnVsbCwgb3V0cHV0KTtcbn1cbjtcbn0gY2F0Y2ggKGUpIHtcbiAgY2IocnVudGltZS5oYW5kbGVFcnJvcihlLCBsaW5lbm8sIGNvbG5vKSk7XG59XG59XG5yZXR1cm4ge1xucm9vdDogcm9vdFxufTtcblxufSkoKTtcbnJldHVybiBmdW5jdGlvbihjdHgsIGNiKSB7IHJldHVybiBudW5qdWNrcy5yZW5kZXIoXCJ0ZW1wbGF0ZS1pdGVtLWdhbGxlcnlJbWFnZS5odG1sXCIsIGN0eCwgY2IpOyB9XG59KSgpO1xuO1xuIiwidmFyIG51bmp1Y2tzID0gcmVxdWlyZSggXCJudW5qdWNrcy9icm93c2VyL251bmp1Y2tzLXNsaW1cIiApO1xubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7KHdpbmRvdy5udW5qdWNrc1ByZWNvbXBpbGVkID0gd2luZG93Lm51bmp1Y2tzUHJlY29tcGlsZWQgfHwge30pW1widGVtcGxhdGUtaXRlbS1pbWFnZS5odG1sXCJdID0gKGZ1bmN0aW9uKCkge1xuZnVuY3Rpb24gcm9vdChlbnYsIGNvbnRleHQsIGZyYW1lLCBydW50aW1lLCBjYikge1xudmFyIGxpbmVubyA9IG51bGw7XG52YXIgY29sbm8gPSBudWxsO1xudmFyIG91dHB1dCA9IFwiXCI7XG50cnkge1xudmFyIHBhcmVudFRlbXBsYXRlID0gbnVsbDtcbm91dHB1dCArPSBcIjxmaWd1cmU+XFxuICA8aW1nXFxuICAgIFwiO1xuaWYocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInJlZlwiKSksXCJpdGVtXCIpKSxcImFjdGl2ZVwiKSkge1xub3V0cHV0ICs9IFwiY2xhc3M9XFxcImFjdGl2ZVxcXCJcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcbiAgICBzcmM9XFxcIlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInJlZlwiKSksXCJpdGVtXCIpKSxcIm1ldGFcIikpLFwibWVkaWFcIikpLFwicmVuZGl0aW9uc1wiKSksXCJ0aHVtYm5haWxcIikpLFwiaHJlZlwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJcXFwiXFxuICAgIHNyY3NldD1cXFwiXCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJtZWRpYVwiKSksXCJyZW5kaXRpb25zXCIpKSxcImJhc2VJbWFnZVwiKSksXCJocmVmXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIiA4MTB3LFxcbiAgICBcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJtZXRhXCIpKSxcIm1lZGlhXCIpKSxcInJlbmRpdGlvbnNcIikpLFwidGh1bWJuYWlsXCIpKSxcImhyZWZcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiIDI0MHcsXFxuICAgIFwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInJlZlwiKSksXCJpdGVtXCIpKSxcIm1ldGFcIikpLFwibWVkaWFcIikpLFwicmVuZGl0aW9uc1wiKSksXCJ2aWV3SW1hZ2VcIikpLFwiaHJlZlwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCIgNTQwd1xcXCJcXG4gICAgYWx0PVxcXCJcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJtZXRhXCIpKSxcImNhcHRpb25cIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiXFxcIj5cXG4gIDxmaWdjYXB0aW9uPlxcbiAgICBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJjYXB0aW9uXCIpKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICA8c3BhbiBjbGFzcz1cXFwiY2FwdGlvblxcXCI+XFxuICAgICAgICBcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJtZXRhXCIpKSxcImNhcHRpb25cIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiXFxuICAgICAgPC9zcGFuPiZuYnNwO1xcbiAgICBcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcbiAgICBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJjcmVkaXRcIikpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgIDxiPlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZSgobGluZW5vID0gMTUsIGNvbG5vID0gMTksIHJ1bnRpbWUuY2FsbFdyYXAocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJ0cmFuc2xhdGVcIiksIFwidHJhbnNsYXRlXCIsIGNvbnRleHQsIFtcImNyZWRpdDpcIl0pKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCI8L2I+XFxuICAgICAgPHNwYW4gY2xhc3M9XFxcImNyZWRpdFxcXCI+XCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJjcmVkaXRcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiPC9zcGFuPlxcbiAgICBcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcbiAgPC9maWdjYXB0aW9uPlxcbjwvZmlndXJlPlxcblwiO1xuaWYocGFyZW50VGVtcGxhdGUpIHtcbnBhcmVudFRlbXBsYXRlLnJvb3RSZW5kZXJGdW5jKGVudiwgY29udGV4dCwgZnJhbWUsIHJ1bnRpbWUsIGNiKTtcbn0gZWxzZSB7XG5jYihudWxsLCBvdXRwdXQpO1xufVxuO1xufSBjYXRjaCAoZSkge1xuICBjYihydW50aW1lLmhhbmRsZUVycm9yKGUsIGxpbmVubywgY29sbm8pKTtcbn1cbn1cbnJldHVybiB7XG5yb290OiByb290XG59O1xuXG59KSgpO1xucmV0dXJuIGZ1bmN0aW9uKGN0eCwgY2IpIHsgcmV0dXJuIG51bmp1Y2tzLnJlbmRlcihcInRlbXBsYXRlLWl0ZW0taW1hZ2UuaHRtbFwiLCBjdHgsIGNiKTsgfVxufSkoKTtcbjtcbiIsInZhciBudW5qdWNrcyA9IHJlcXVpcmUoIFwibnVuanVja3MvYnJvd3Nlci9udW5qdWNrcy1zbGltXCIgKTtcbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkgeyh3aW5kb3cubnVuanVja3NQcmVjb21waWxlZCA9IHdpbmRvdy5udW5qdWNrc1ByZWNvbXBpbGVkIHx8IHt9KVtcInRlbXBsYXRlLWl0ZW0tcXVvdGUuaHRtbFwiXSA9IChmdW5jdGlvbigpIHtcbmZ1bmN0aW9uIHJvb3QoZW52LCBjb250ZXh0LCBmcmFtZSwgcnVudGltZSwgY2IpIHtcbnZhciBsaW5lbm8gPSBudWxsO1xudmFyIGNvbG5vID0gbnVsbDtcbnZhciBvdXRwdXQgPSBcIlwiO1xudHJ5IHtcbnZhciBwYXJlbnRUZW1wbGF0ZSA9IG51bGw7XG5vdXRwdXQgKz0gXCI8ZGl2IGNsYXNzPVxcXCJpdGVtLS1lbWJlZC1xdW90ZVxcXCI+XFxuICAgIDxibG9ja3F1b3RlPlxcbiAgICAgICAgPHA+XCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJxdW90ZVwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCI8L3A+XFxuICAgICAgICBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwicmVmXCIpKSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJjcmVkaXRcIikpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgICAgIDxoND5cIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJyZWZcIikpLFwiaXRlbVwiKSksXCJtZXRhXCIpKSxcImNyZWRpdFwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCI8L2g0PlxcbiAgICAgICAgXCI7XG47XG59XG5vdXRwdXQgKz0gXCJcXG4gICAgPC9ibG9ja3F1b3RlPlxcbjwvZGl2PlxcblwiO1xuaWYocGFyZW50VGVtcGxhdGUpIHtcbnBhcmVudFRlbXBsYXRlLnJvb3RSZW5kZXJGdW5jKGVudiwgY29udGV4dCwgZnJhbWUsIHJ1bnRpbWUsIGNiKTtcbn0gZWxzZSB7XG5jYihudWxsLCBvdXRwdXQpO1xufVxuO1xufSBjYXRjaCAoZSkge1xuICBjYihydW50aW1lLmhhbmRsZUVycm9yKGUsIGxpbmVubywgY29sbm8pKTtcbn1cbn1cbnJldHVybiB7XG5yb290OiByb290XG59O1xuXG59KSgpO1xucmV0dXJuIGZ1bmN0aW9uKGN0eCwgY2IpIHsgcmV0dXJuIG51bmp1Y2tzLnJlbmRlcihcInRlbXBsYXRlLWl0ZW0tcXVvdGUuaHRtbFwiLCBjdHgsIGNiKTsgfVxufSkoKTtcbjtcbiIsInZhciBudW5qdWNrcyA9IHJlcXVpcmUoIFwibnVuanVja3MvYnJvd3Nlci9udW5qdWNrcy1zbGltXCIgKTtcbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkgeyh3aW5kb3cubnVuanVja3NQcmVjb21waWxlZCA9IHdpbmRvdy5udW5qdWNrc1ByZWNvbXBpbGVkIHx8IHt9KVtcInRlbXBsYXRlLXBvc3QtYWN0aW9ucy5odG1sXCJdID0gKGZ1bmN0aW9uKCkge1xuZnVuY3Rpb24gcm9vdChlbnYsIGNvbnRleHQsIGZyYW1lLCBydW50aW1lLCBjYikge1xudmFyIGxpbmVubyA9IG51bGw7XG52YXIgY29sbm8gPSBudWxsO1xudmFyIG91dHB1dCA9IFwiXCI7XG50cnkge1xudmFyIHBhcmVudFRlbXBsYXRlID0gbnVsbDtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwicG9zdF9pdGVtc190eXBlXCIpICE9IFwiYWR2ZXJ0aXNlbWVudFwiKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgPGRpdiBjbGFzcz1cXFwibGItcG9zdC1hY3Rpb25zIFwiO1xuaWYocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwic2V0dGluZ3NcIikpLFwiYXV0aG9yUG9zaXRpb25cIikgPT0gXCJib3R0b21cIikge1xub3V0cHV0ICs9IFwibGItcG9zdC1hY3Rpb25zLS10b3BcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcXCI+XFxuXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJsYi1wb3N0LXNoYXJlXFxcIj5cXG4gICAgICAgIDxpbWcgc3JjPVxcXCJcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJhc3NldHNfcm9vdFwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJpbWFnZXMvYWN0aW9uX3NoYXJlLnN2Z1xcXCIgY2xhc3M9XFxcImxiLXBvc3Qtc2hhcmVJY29uXFxcIiAvPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwibGItcG9zdC1zaGFyZUJveFxcXCI+XFxuICAgICAgICAgICAgPGEgY2xhc3M9XFxcImxiLXBvc3Qtc2hhcmVCb3hfX2l0ZW1cXFwiXFxuICAgICAgICAgICAgb25jbGljaz1cXFwid2luZG93Lm9wZW4odGhpcy5ocmVmLCd0YXJnZXRXaW5kb3cnLCd0b29sYmFyPW5vLGxvY2F0aW9uPW5vLHN0YXR1cz1ubyxtZW51YmFyPW5vLHNjcm9sbGJhcnM9eWVzLHJlc2l6YWJsZT15ZXMsd2lkdGg9NTcwLGhlaWdodD00MDAnKTtyZXR1cm4gZmFsc2U7XFxcIlxcbiAgICAgICAgICAgIGRhdGEtbGluay1iYXNlPVxcXCIvL3d3dy5mYWNlYm9vay5jb20vc2hhcmVyLnBocD9zPTEwMCZwW3RpdGxlXT0mcFt1cmxdPVxcXCJcXG4gICAgICAgICAgICBkYXRhLWxpbmstaWQ9XCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwiX2lkXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIj48aW1nIHNyYz1cXFwiXCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiYXNzZXRzX3Jvb3RcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiaW1hZ2VzL3NoYXJlX2ZhY2Vib29rLnN2Z1xcXCIvPlxcbiAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgICA8YSBjbGFzcz1cXFwibGItcG9zdC1zaGFyZUJveF9faXRlbVxcXCJcXG4gICAgICAgICAgICBvbmNsaWNrPVxcXCJ3aW5kb3cub3Blbih0aGlzLmhyZWYsJ3RhcmdldFdpbmRvdycsJ3Rvb2xiYXI9bm8sbG9jYXRpb249bm8sc3RhdHVzPW5vLG1lbnViYXI9bm8sc2Nyb2xsYmFycz15ZXMscmVzaXphYmxlPXllcyx3aWR0aD01NzAsaGVpZ2h0PTQwMCcpO3JldHVybiBmYWxzZTtcXFwiXFxuICAgICAgICAgICAgZGF0YS1saW5rLWJhc2U9XFxcIi8vcGx1cy5nb29nbGUuY29tL3NoYXJlP3VybD1cXFwiXFxuICAgICAgICAgICAgZGF0YS1saW5rLWlkPVwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJpdGVtXCIpKSxcIl9pZFwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCI+PGltZyBzcmM9XFxcIlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcImFzc2V0c19yb290XCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcImltYWdlcy9zaGFyZV9nb29nbGUuc3ZnXFxcIi8+XFxuICAgICAgICAgICAgPC9hPlxcbiAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJsYi1wb3N0LXNoYXJlQm94X19pdGVtXFxcIlxcbiAgICAgICAgICAgIG9uY2xpY2s9XFxcIndpbmRvdy5vcGVuKHRoaXMuaHJlZiwndGFyZ2V0V2luZG93JywndG9vbGJhcj1ubyxsb2NhdGlvbj1ubyxzdGF0dXM9bm8sbWVudWJhcj1ubyxzY3JvbGxiYXJzPXllcyxyZXNpemFibGU9eWVzLHdpZHRoPTU3MCxoZWlnaHQ9NDAwJyk7cmV0dXJuIGZhbHNlO1xcXCJcXG4gICAgICAgICAgICBkYXRhLWxpbmstYmFzZT1cXFwiLy93d3cubGlua2VkaW4uY29tL3NoYXJlQXJ0aWNsZT9taW5pPXRydWUmdXJsPVxcXCJcXG4gICAgICAgICAgICBkYXRhLWxpbmstaWQ9XCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwiX2lkXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIj48aW1nIHNyYz1cXFwiXCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiYXNzZXRzX3Jvb3RcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiaW1hZ2VzL3NoYXJlX2xpbmtlZGluLnN2Z1xcXCIvPlxcbiAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgICA8YSBjbGFzcz1cXFwibGItcG9zdC1zaGFyZUJveF9faXRlbVxcXCJcXG4gICAgICAgICAgICBvbmNsaWNrPVxcXCJ3aW5kb3cub3Blbih0aGlzLmhyZWYsJ3RhcmdldFdpbmRvdycsJ3Rvb2xiYXI9bm8sbG9jYXRpb249bm8sc3RhdHVzPW5vLG1lbnViYXI9bm8sc2Nyb2xsYmFycz15ZXMscmVzaXphYmxlPXllcyx3aWR0aD01NzAsaGVpZ2h0PTQwMCcpO3JldHVybiBmYWxzZTtcXFwiXFxuICAgICAgICAgICAgZGF0YS1saW5rLWJhc2U9XFxcIi8vdHdpdHRlci5jb20vaG9tZT9zdGF0dXM9XFxcIlxcbiAgICAgICAgICAgIGRhdGEtbGluay1pZD1cIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJfaWRcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiPjxpbWcgc3JjPVxcXCJcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJhc3NldHNfcm9vdFwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJpbWFnZXMvc2hhcmVfdHdpdHRlci5zdmdcXFwiLz5cXG4gICAgICAgICAgICA8L2E+XFxuICAgICAgICAgICAgPGEgY2xhc3M9XFxcImxiLXBvc3Qtc2hhcmVCb3hfX2l0ZW1cXFwiXFxuICAgICAgICAgICAgb25jbGljaz1cXFwid2luZG93Lm9wZW4odGhpcy5ocmVmLCd0YXJnZXRXaW5kb3cnLCd0b29sYmFyPW5vLGxvY2F0aW9uPW5vLHN0YXR1cz1ubyxtZW51YmFyPW5vLHNjcm9sbGJhcnM9eWVzLHJlc2l6YWJsZT15ZXMsd2lkdGg9MTAyNCxoZWlnaHQ9NzY4Jyk7cmV0dXJuIGZhbHNlO1xcXCJcXG4gICAgICAgICAgICBkYXRhLWxpbmstYmFzZT1cXFwibWFpbHRvOj90bz0mc3ViamVjdD1MaXZlYmxvZyZib2R5PVxcXCJcXG4gICAgICAgICAgICBkYXRhLWxpbmstaWQ9XCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwiX2lkXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIj48aW1nIHNyYz1cXFwiXCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiYXNzZXRzX3Jvb3RcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiaW1hZ2VzL3NoYXJlX2VtYWlsLnN2Z1xcXCIvPlxcbiAgICAgICAgICAgIDwvYT5cXG4gICAgICAgICAgICA8c3Bhbj4gfCA8L3NwYW4+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPCEtLSBlbmQgc2hhcmUgLS0+XFxuXFxuICAgICAgICA8IS0tIHBlcm1hbGluayAtLT5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImxiLXBvc3QtcGVybWFsaW5rXFxcIj5cXG4gICAgICAgIDxhIGlkPVxcXCJcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJfaWRcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+XFxuICAgICAgICAgICAgPGltZyBzcmM9XFxcIlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcImFzc2V0c19yb290XCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcImltYWdlcy9hY3Rpb25fbGluay5zdmdcXFwiIGNsYXNzPVxcXCJsYi1wb3N0LWxpbmtJY29uXFxcIiAvPlxcbiAgICAgICAgPC9hPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8IS0tIGVuZCBwZXJtYWxpbmsgLS0+XFxuICAgIDwvZGl2PlxcblwiO1xuO1xufVxuaWYocGFyZW50VGVtcGxhdGUpIHtcbnBhcmVudFRlbXBsYXRlLnJvb3RSZW5kZXJGdW5jKGVudiwgY29udGV4dCwgZnJhbWUsIHJ1bnRpbWUsIGNiKTtcbn0gZWxzZSB7XG5jYihudWxsLCBvdXRwdXQpO1xufVxuO1xufSBjYXRjaCAoZSkge1xuICBjYihydW50aW1lLmhhbmRsZUVycm9yKGUsIGxpbmVubywgY29sbm8pKTtcbn1cbn1cbnJldHVybiB7XG5yb290OiByb290XG59O1xuXG59KSgpO1xucmV0dXJuIGZ1bmN0aW9uKGN0eCwgY2IpIHsgcmV0dXJuIG51bmp1Y2tzLnJlbmRlcihcInRlbXBsYXRlLXBvc3QtYWN0aW9ucy5odG1sXCIsIGN0eCwgY2IpOyB9XG59KSgpO1xuO1xuIiwidmFyIG51bmp1Y2tzID0gcmVxdWlyZSggXCJudW5qdWNrcy9icm93c2VyL251bmp1Y2tzLXNsaW1cIiApO1xubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7KHdpbmRvdy5udW5qdWNrc1ByZWNvbXBpbGVkID0gd2luZG93Lm51bmp1Y2tzUHJlY29tcGlsZWQgfHwge30pW1widGVtcGxhdGUtcG9zdC1jb21tZW50Lmh0bWxcIl0gPSAoZnVuY3Rpb24oKSB7XG5mdW5jdGlvbiByb290KGVudiwgY29udGV4dCwgZnJhbWUsIHJ1bnRpbWUsIGNiKSB7XG52YXIgbGluZW5vID0gbnVsbDtcbnZhciBjb2xubyA9IG51bGw7XG52YXIgb3V0cHV0ID0gXCJcIjtcbnRyeSB7XG52YXIgcGFyZW50VGVtcGxhdGUgPSBudWxsO1xub3V0cHV0ICs9IFwiPGRpdiBjbGFzcz1cXFwibGItaXRlbSBjb21tZW50SXRlbVxcXCI+XFxuICAgIDxhcnRpY2xlPlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShlbnYuZ2V0RmlsdGVyKFwic2FmZVwiKS5jYWxsKGNvbnRleHQsIHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJncm91cHNcIikpLDEpKSxcInJlZnNcIikpLDApKSxcIml0ZW1cIikpLFwidGV4dFwiKSksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiPC9hcnRpY2xlPlxcbjwvZGl2PlxcblwiO1xuaWYoZW52LmdldEZpbHRlcihcImxlbmd0aFwiKS5jYWxsKGNvbnRleHQsIHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJncm91cHNcIikpLDEpKSxcInJlZnNcIikpID4gMSkge1xub3V0cHV0ICs9IFwiXFxuPGRpdiBjbGFzcz1cXFwiaXRlbXMtY29udGFpbmVySW5kZW50XFxcIj5cXG5cIjtcbnZhciB0XzE7XG50XzEgPSBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJncm91cHNcIikpLDEpKSxcInJlZnNcIikpLDEpKSxcIml0ZW1cIik7XG5mcmFtZS5zZXQoXCJzZWNvbmRhcnlcIiwgdF8xLCB0cnVlKTtcbmlmKGZyYW1lLnRvcExldmVsKSB7XG5jb250ZXh0LnNldFZhcmlhYmxlKFwic2Vjb25kYXJ5XCIsIHRfMSk7XG59XG5pZihmcmFtZS50b3BMZXZlbCkge1xuY29udGV4dC5hZGRFeHBvcnQoXCJzZWNvbmRhcnlcIiwgdF8xKTtcbn1cbm91dHB1dCArPSBcIlxcbiAgPCEtLSBhdXRob3IgcGx1cyBhdmF0YXIgLS0+XFxuICA8ZGl2IGNsYXNzPVxcXCJsYi1hdXRob3IgbGItYXV0aG9yLS1pbmRlbnRcXFwiPlxcbiAgICBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNlY29uZGFyeVwiKSksXCJvcmlnaW5hbF9jcmVhdG9yXCIpIHx8IHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNlY29uZGFyeVwiKSksXCJzeW5kaWNhdGVkX2NyZWF0b3JcIikpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgXCI7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJzZWNvbmRhcnlcIikpLFwib3JpZ2luYWxfY3JlYXRvclwiKSAmJiBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwic2Vjb25kYXJ5XCIpKSxcIm9yaWdpbmFsX2NyZWF0b3JcIikpLFwicGljdHVyZV91cmxcIikpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgPGltZyBjbGFzcz1cXFwibGItYXV0aG9yX19hdmF0YXJcXFwiIHNyYz1cXFwiXCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJzZWNvbmRhcnlcIikpLFwib3JpZ2luYWxfY3JlYXRvclwiKSksXCJwaWN0dXJlX3VybFwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJcXFwiIC8+XFxuICAgICAgICBcIjtcbjtcbn1cbmVsc2Uge1xuaWYocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwic2Vjb25kYXJ5XCIpKSxcIm9yaWdpbmFsX2NyZWF0b3JcIikgJiYgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwic2Vjb25kYXJ5XCIpKSxcInN5bmRpY2F0ZWRfY3JlYXRvclwiKSAmJiBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJzZXR0aW5nc1wiKSksXCJzaG93U3luZGljYXRlZEF1dGhvclwiKSAmJiBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwibWFpbkl0ZW1cIikpLFwic3luZGljYXRlZF9jcmVhdG9yXCIpKSxcInBpY3R1cmVfdXJsXCIpKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgIDxpbWcgY2xhc3M9XFxcImxiLWF1dGhvcl9fYXZhdGFyXFxcIiBzcmM9XFxcIlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwibWFpbkl0ZW1cIikpLFwic3luZGljYXRlZF9jcmVhdG9yXCIpKSxcInBpY3R1cmVfdXJsXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIlxcXCIgLz5cXG4gICAgICAgIFwiO1xuO1xufVxuZWxzZSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImxiLWF1dGhvcl9fYXZhdGFyXFxcIj48L2Rpdj5cXG4gICAgICAgIFwiO1xuO1xufVxuO1xufVxub3V0cHV0ICs9IFwiXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJsYi1hdXRob3JfX25hbWVcXFwiPlxcbiAgICAgICAgXCI7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJzZWNvbmRhcnlcIikpLFwic3luZGljYXRlZF9jcmVhdG9yXCIpICYmIHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcInNob3dTeW5kaWNhdGVkQXV0aG9yXCIpKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgICBcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNlY29uZGFyeVwiKSksXCJzeW5kaWNhdGVkX2NyZWF0b3JcIikpLFwiZGlzcGxheV9uYW1lXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgXCI7XG47XG59XG5lbHNlIHtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNlY29uZGFyeVwiKSksXCJvcmlnaW5hbF9jcmVhdG9yXCIpKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgICBcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNlY29uZGFyeVwiKSksXCJvcmlnaW5hbF9jcmVhdG9yXCIpKSxcImRpc3BsYXlfbmFtZVwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgIFwiO1xuO1xufVxuO1xufVxub3V0cHV0ICs9IFwiXFxuICAgICAgICBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwic3luZGljYXRpb25faW5cIikgJiYgIXJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcInNob3dTeW5kaWNhdGVkQXV0aG9yXCIpKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwibGItcHJvZHVjZXJcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcInNob3dTeW5kaWNhdGVkQXV0aG9yXCIpKSB7XG5vdXRwdXQgKz0gXCIgbGItcHJvZHVjZXJfX2F1dGhvclwiO1xuO1xufVxub3V0cHV0ICs9IFwiXFxcIj5cIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwic3luZGljYXRpb25faW5cIikpLFwicHJvZHVjZXJfYmxvZ190aXRsZVwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCI8L3NwYW4+XFxuICAgICAgICBcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcbiAgICAgICAgPC9kaXY+XFxuICAgIFwiO1xuO1xufVxub3V0cHV0ICs9IFwiXFxuICA8L2Rpdj5cXG4gIDwhLS0gZW5kIGF1dGhvciAtLT5cXG4gICAgXCI7XG5pZihydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikgJiYgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJncm91cHNcIikgJiYgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwiZ3JvdXBzXCIpKSwxKSAmJiBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwiZ3JvdXBzXCIpKSwxKSksXCJyZWZzXCIpICYmIChlbnYuZ2V0RmlsdGVyKFwibGVuZ3RoXCIpLmNhbGwoY29udGV4dCwgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJpdGVtXCIpKSxcImdyb3Vwc1wiKSksMSkpLFwicmVmc1wiKSkgPiAwKSkge1xub3V0cHV0ICs9IFwiXFxuICAgICAgICBcIjtcbmZyYW1lID0gZnJhbWUucHVzaCgpO1xudmFyIHRfNCA9IHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJncm91cHNcIikpLDEpKSxcInJlZnNcIik7XG5pZih0XzQpIHt2YXIgdF8zID0gdF80Lmxlbmd0aDtcbmZvcih2YXIgdF8yPTA7IHRfMiA8IHRfNC5sZW5ndGg7IHRfMisrKSB7XG52YXIgdF81ID0gdF80W3RfMl07XG5mcmFtZS5zZXQoXCJyZWZcIiwgdF81KTtcbmZyYW1lLnNldChcImxvb3AuaW5kZXhcIiwgdF8yICsgMSk7XG5mcmFtZS5zZXQoXCJsb29wLmluZGV4MFwiLCB0XzIpO1xuZnJhbWUuc2V0KFwibG9vcC5yZXZpbmRleFwiLCB0XzMgLSB0XzIpO1xuZnJhbWUuc2V0KFwibG9vcC5yZXZpbmRleDBcIiwgdF8zIC0gdF8yIC0gMSk7XG5mcmFtZS5zZXQoXCJsb29wLmZpcnN0XCIsIHRfMiA9PT0gMCk7XG5mcmFtZS5zZXQoXCJsb29wLmxhc3RcIiwgdF8yID09PSB0XzMgLSAxKTtcbmZyYW1lLnNldChcImxvb3AubGVuZ3RoXCIsIHRfMyk7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgXCI7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJsb29wXCIpKSxcImluZGV4MFwiKSA+IDApIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgICAgICAgXCI7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHRfNSksXCJpdGVtXCIpKSxcIml0ZW1fdHlwZVwiKSA9PSBcImltYWdlXCIpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgICAgICAgXCI7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJzZXR0aW5nc1wiKSksXCJzaG93R2FsbGVyeVwiKSAmJiBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJsb29wXCIpKSxcImluZGV4MFwiKSArIDEgPCBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJsb29wXCIpKSxcImxlbmd0aFwiKSAmJiBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwiZ3JvdXBzXCIpKSwxKSksXCJyZWZzXCIpKSxydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJsb29wXCIpKSxcImluZGV4MFwiKSArIDEpKSxcIml0ZW1cIikpLFwiaXRlbV90eXBlXCIpID09IFwiaW1hZ2VcIiAmJiAocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwibG9vcFwiKSksXCJpbmRleDBcIikgLSAxIDwgMSB8fCAhKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcImxvb3BcIikpLFwiaW5kZXgwXCIpID4gMSAmJiBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwiZ3JvdXBzXCIpKSwxKSksXCJyZWZzXCIpKSxydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJsb29wXCIpKSxcImluZGV4MFwiKSAtIDEpKSxcIml0ZW1cIikpLFwiaXRlbV90eXBlXCIpID09IFwiaW1hZ2VcIikpKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImxiLXNsaWRlc2hvd1xcXCI+XFxuICAgICAgICAgICAgICBcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwibGItaXRlbSBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHRfNSksXCJpdGVtXCIpKSxcIm1ldGFcIikpLFwibWVkaWFcIikpLFwicmVuZGl0aW9uc1wiKSksXCJvcmlnaW5hbFwiKSksXCJoZWlnaHRcIikgPiBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKCh0XzUpLFwiaXRlbVwiKSksXCJtZXRhXCIpKSxcIm1lZGlhXCIpKSxcInJlbmRpdGlvbnNcIikpLFwib3JpZ2luYWxcIikpLFwid2lkdGhcIikpIHtcbm91dHB1dCArPSBcInBvcnRyYWl0XCI7XG47XG59XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgodF81KSxcIml0ZW1cIikpLFwiaXRlbV90eXBlXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIlxcXCI+XFxuICAgICAgICAgICAgICBcIjtcbjtcbn1cbmVsc2Uge1xub3V0cHV0ICs9IFwiXFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJsYi1pdGVtIFwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHRfNSksXCJpdGVtXCIpKSxcIml0ZW1fdHlwZVwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJcXFwiPlxcbiAgICAgICAgICAgICAgXCI7XG47XG59XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgICAgIFwiO1xuaWYocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKCh0XzUpLFwiaXRlbVwiKSksXCJpdGVtX3R5cGVcIikgPT0gXCJlbWJlZFwiKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgICAgICAgXCI7XG52YXIgdGFza3MgPSBbXTtcbnRhc2tzLnB1c2goXG5mdW5jdGlvbihjYWxsYmFjaykge1xuZW52LmdldFRlbXBsYXRlKFwidGVtcGxhdGUtaXRlbS1lbWJlZC5odG1sXCIsIGZhbHNlLCBcInRlbXBsYXRlLXBvc3QtY29tbWVudC5odG1sXCIsIG51bGwsIGZ1bmN0aW9uKHRfOCx0XzYpIHtcbmlmKHRfOCkgeyBjYih0XzgpOyByZXR1cm47IH1cbmNhbGxiYWNrKG51bGwsdF82KTt9KTtcbn0pO1xudGFza3MucHVzaChcbmZ1bmN0aW9uKHRlbXBsYXRlLCBjYWxsYmFjayl7XG50ZW1wbGF0ZS5yZW5kZXIoY29udGV4dC5nZXRWYXJpYWJsZXMoKSwgZnJhbWUsIGZ1bmN0aW9uKHRfOSx0XzcpIHtcbmlmKHRfOSkgeyBjYih0XzkpOyByZXR1cm47IH1cbmNhbGxiYWNrKG51bGwsdF83KTt9KTtcbn0pO1xudGFza3MucHVzaChcbmZ1bmN0aW9uKHJlc3VsdCwgY2FsbGJhY2spe1xub3V0cHV0ICs9IHJlc3VsdDtcbmNhbGxiYWNrKG51bGwpO1xufSk7XG5lbnYud2F0ZXJmYWxsKHRhc2tzLCBmdW5jdGlvbigpe1xub3V0cHV0ICs9IFwiXFxuICAgICAgICAgICAgICBcIjtcbn0pO1xufVxuZWxzZSB7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHRfNSksXCJpdGVtXCIpKSxcIml0ZW1fdHlwZVwiKSA9PSBcImltYWdlXCIpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgICAgICAgICBcIjtcbnZhciB0YXNrcyA9IFtdO1xudGFza3MucHVzaChcbmZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5lbnYuZ2V0VGVtcGxhdGUoXCJ0ZW1wbGF0ZS1pdGVtLWltYWdlLmh0bWxcIiwgZmFsc2UsIFwidGVtcGxhdGUtcG9zdC1jb21tZW50Lmh0bWxcIiwgbnVsbCwgZnVuY3Rpb24odF8xMix0XzEwKSB7XG5pZih0XzEyKSB7IGNiKHRfMTIpOyByZXR1cm47IH1cbmNhbGxiYWNrKG51bGwsdF8xMCk7fSk7XG59KTtcbnRhc2tzLnB1c2goXG5mdW5jdGlvbih0ZW1wbGF0ZSwgY2FsbGJhY2spe1xudGVtcGxhdGUucmVuZGVyKGNvbnRleHQuZ2V0VmFyaWFibGVzKCksIGZyYW1lLCBmdW5jdGlvbih0XzEzLHRfMTEpIHtcbmlmKHRfMTMpIHsgY2IodF8xMyk7IHJldHVybjsgfVxuY2FsbGJhY2sobnVsbCx0XzExKTt9KTtcbn0pO1xudGFza3MucHVzaChcbmZ1bmN0aW9uKHJlc3VsdCwgY2FsbGJhY2spe1xub3V0cHV0ICs9IHJlc3VsdDtcbmNhbGxiYWNrKG51bGwpO1xufSk7XG5lbnYud2F0ZXJmYWxsKHRhc2tzLCBmdW5jdGlvbigpe1xub3V0cHV0ICs9IFwiXFxuICAgICAgICAgICAgICBcIjtcbn0pO1xufVxuZWxzZSB7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHRfNSksXCJpdGVtXCIpKSxcIml0ZW1fdHlwZVwiKSA9PSBcInF1b3RlXCIpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgICAgICAgICBcIjtcbnZhciB0YXNrcyA9IFtdO1xudGFza3MucHVzaChcbmZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5lbnYuZ2V0VGVtcGxhdGUoXCJ0ZW1wbGF0ZS1pdGVtLXF1b3RlLmh0bWxcIiwgZmFsc2UsIFwidGVtcGxhdGUtcG9zdC1jb21tZW50Lmh0bWxcIiwgbnVsbCwgZnVuY3Rpb24odF8xNix0XzE0KSB7XG5pZih0XzE2KSB7IGNiKHRfMTYpOyByZXR1cm47IH1cbmNhbGxiYWNrKG51bGwsdF8xNCk7fSk7XG59KTtcbnRhc2tzLnB1c2goXG5mdW5jdGlvbih0ZW1wbGF0ZSwgY2FsbGJhY2spe1xudGVtcGxhdGUucmVuZGVyKGNvbnRleHQuZ2V0VmFyaWFibGVzKCksIGZyYW1lLCBmdW5jdGlvbih0XzE3LHRfMTUpIHtcbmlmKHRfMTcpIHsgY2IodF8xNyk7IHJldHVybjsgfVxuY2FsbGJhY2sobnVsbCx0XzE1KTt9KTtcbn0pO1xudGFza3MucHVzaChcbmZ1bmN0aW9uKHJlc3VsdCwgY2FsbGJhY2spe1xub3V0cHV0ICs9IHJlc3VsdDtcbmNhbGxiYWNrKG51bGwpO1xufSk7XG5lbnYud2F0ZXJmYWxsKHRhc2tzLCBmdW5jdGlvbigpe1xub3V0cHV0ICs9IFwiXFxuICAgICAgICAgICAgICBcIjtcbn0pO1xufVxuZWxzZSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgICAgICAgPGFydGljbGU+XCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKGVudi5nZXRGaWx0ZXIoXCJzYWZlXCIpLmNhbGwoY29udGV4dCwgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKCh0XzUpLFwiaXRlbVwiKSksXCJ0ZXh0XCIpKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCI8L2FydGljbGU+XFxuICAgICAgICAgICAgICBcIjtcbjtcbn1cbjtcbn1cbjtcbn1cbm91dHB1dCArPSBcIlxcbiAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgodF81KSxcIml0ZW1cIikpLFwiaXRlbV90eXBlXCIpID09IFwiaW1hZ2VcIiAmJiBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJsb29wXCIpKSxcImluZGV4MFwiKSAtIDEgPiAwICYmIHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJncm91cHNcIikpLDEpKSxcInJlZnNcIikpLHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcImxvb3BcIikpLFwiaW5kZXgwXCIpIC0gMSkpLFwiaXRlbVwiKSksXCJpdGVtX3R5cGVcIikgPT0gXCJpbWFnZVwiICYmICEocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwibG9vcFwiKSksXCJpbmRleDBcIikgKyAxID49IHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcImxvb3BcIikpLFwibGVuZ3RoXCIpIHx8IHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJncm91cHNcIikpLDEpKSxcInJlZnNcIikpLHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcImxvb3BcIikpLFwiaW5kZXgwXCIpICsgMSkpLFwiaXRlbVwiKSksXCJpdGVtX3R5cGVcIikgPT0gXCJpbWFnZVwiKSkge1xub3V0cHV0ICs9IFwiXFxuICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgIFwiO1xuO1xufVxub3V0cHV0ICs9IFwiXFxuICAgICAgICAgICAgXCI7XG47XG59XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgIFwiO1xuO1xufVxufVxuZnJhbWUgPSBmcmFtZS5wb3AoKTtcbm91dHB1dCArPSBcIlxcbiAgICBcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcbjwvZGl2PlxcblwiO1xuO1xufVxuaWYocGFyZW50VGVtcGxhdGUpIHtcbnBhcmVudFRlbXBsYXRlLnJvb3RSZW5kZXJGdW5jKGVudiwgY29udGV4dCwgZnJhbWUsIHJ1bnRpbWUsIGNiKTtcbn0gZWxzZSB7XG5jYihudWxsLCBvdXRwdXQpO1xufVxuO1xufSBjYXRjaCAoZSkge1xuICBjYihydW50aW1lLmhhbmRsZUVycm9yKGUsIGxpbmVubywgY29sbm8pKTtcbn1cbn1cbnJldHVybiB7XG5yb290OiByb290XG59O1xuXG59KSgpO1xucmV0dXJuIGZ1bmN0aW9uKGN0eCwgY2IpIHsgcmV0dXJuIG51bmp1Y2tzLnJlbmRlcihcInRlbXBsYXRlLXBvc3QtY29tbWVudC5odG1sXCIsIGN0eCwgY2IpOyB9XG59KSgpO1xuO1xuIiwidmFyIG51bmp1Y2tzID0gcmVxdWlyZSggXCJudW5qdWNrcy9icm93c2VyL251bmp1Y2tzLXNsaW1cIiApO1xubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7KHdpbmRvdy5udW5qdWNrc1ByZWNvbXBpbGVkID0gd2luZG93Lm51bmp1Y2tzUHJlY29tcGlsZWQgfHwge30pW1widGVtcGxhdGUtcG9zdC5odG1sXCJdID0gKGZ1bmN0aW9uKCkge1xuZnVuY3Rpb24gcm9vdChlbnYsIGNvbnRleHQsIGZyYW1lLCBydW50aW1lLCBjYikge1xudmFyIGxpbmVubyA9IG51bGw7XG52YXIgY29sbm8gPSBudWxsO1xudmFyIG91dHB1dCA9IFwiXCI7XG50cnkge1xudmFyIHBhcmVudFRlbXBsYXRlID0gbnVsbDtcbnZhciBtYWNyb190XzEgPSBydW50aW1lLm1ha2VNYWNybyhcbltcInRleHRcIl0sIFxuW10sIFxuZnVuY3Rpb24gKGxfdGV4dCwga3dhcmdzKSB7XG52YXIgY2FsbGVyRnJhbWUgPSBmcmFtZTtcbmZyYW1lID0gbmV3IHJ1bnRpbWUuRnJhbWUoKTtcbmt3YXJncyA9IGt3YXJncyB8fCB7fTtcbmlmIChrd2FyZ3MuaGFzT3duUHJvcGVydHkoXCJjYWxsZXJcIikpIHtcbmZyYW1lLnNldChcImNhbGxlclwiLCBrd2FyZ3MuY2FsbGVyKTsgfVxuZnJhbWUuc2V0KFwidGV4dFwiLCBsX3RleHQpO1xudmFyIHRfMiA9IFwiXCI7aWYoIXJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJvcHRpb25zXCIpKSxcImkxOG5cIikpLHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcImxhbmd1YWdlXCIpKSkge1xudF8yICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShsX3RleHQsIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xuO1xufVxuZWxzZSB7XG5pZighcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJvcHRpb25zXCIpKSxcImkxOG5cIikpLHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcImxhbmd1YWdlXCIpKSksbF90ZXh0KSkge1xudF8yICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShsX3RleHQsIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xuO1xufVxuZWxzZSB7XG50XzIgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwib3B0aW9uc1wiKSksXCJpMThuXCIpKSxydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJzZXR0aW5nc1wiKSksXCJsYW5ndWFnZVwiKSkpLGxfdGV4dCksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xuO1xufVxuO1xufVxuO1xuZnJhbWUgPSBjYWxsZXJGcmFtZTtcbnJldHVybiBuZXcgcnVudGltZS5TYWZlU3RyaW5nKHRfMik7XG59KTtcbmNvbnRleHQuYWRkRXhwb3J0KFwidHJhbnNsYXRlXCIpO1xuY29udGV4dC5zZXRWYXJpYWJsZShcInRyYW5zbGF0ZVwiLCBtYWNyb190XzEpO1xub3V0cHV0ICs9IFwiXFxuXCI7XG52YXIgdF8zO1xudF8zID0gcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwiZ3JvdXBzXCIpKSwxKSksXCJyZWZzXCIpKSwwKSksXCJpdGVtXCIpO1xuZnJhbWUuc2V0KFwibWFpbkl0ZW1cIiwgdF8zLCB0cnVlKTtcbmlmKGZyYW1lLnRvcExldmVsKSB7XG5jb250ZXh0LnNldFZhcmlhYmxlKFwibWFpbkl0ZW1cIiwgdF8zKTtcbn1cbmlmKGZyYW1lLnRvcExldmVsKSB7XG5jb250ZXh0LmFkZEV4cG9ydChcIm1haW5JdGVtXCIsIHRfMyk7XG59XG5vdXRwdXQgKz0gXCJcXG5cIjtcbnZhciB0XzQ7XG50XzQgPSBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJpdGVtXCIpKSxcInB1Ymxpc2hlZF9kYXRlXCIpO1xuZnJhbWUuc2V0KFwicG9zdERhdGVcIiwgdF80LCB0cnVlKTtcbmlmKGZyYW1lLnRvcExldmVsKSB7XG5jb250ZXh0LnNldFZhcmlhYmxlKFwicG9zdERhdGVcIiwgdF80KTtcbn1cbmlmKGZyYW1lLnRvcExldmVsKSB7XG5jb250ZXh0LmFkZEV4cG9ydChcInBvc3REYXRlXCIsIHRfNCk7XG59XG5vdXRwdXQgKz0gXCJcXG5cIjtcbnZhciB0XzU7XG50XzUgPSBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJpdGVtXCIpKSxcInBvc3RfaXRlbXNfdHlwZVwiKTtcbmZyYW1lLnNldChcInR5cGVcIiwgdF81LCB0cnVlKTtcbmlmKGZyYW1lLnRvcExldmVsKSB7XG5jb250ZXh0LnNldFZhcmlhYmxlKFwidHlwZVwiLCB0XzUpO1xufVxuaWYoZnJhbWUudG9wTGV2ZWwpIHtcbmNvbnRleHQuYWRkRXhwb3J0KFwidHlwZVwiLCB0XzUpO1xufVxub3V0cHV0ICs9IFwiXFxuXCI7XG52YXIgdF82O1xudF82ID0gZmFsc2U7XG5mcmFtZS5zZXQoXCJnYWxsZXJ5SXRlbVwiLCB0XzYsIHRydWUpO1xuaWYoZnJhbWUudG9wTGV2ZWwpIHtcbmNvbnRleHQuc2V0VmFyaWFibGUoXCJnYWxsZXJ5SXRlbVwiLCB0XzYpO1xufVxuaWYoZnJhbWUudG9wTGV2ZWwpIHtcbmNvbnRleHQuYWRkRXhwb3J0KFwiZ2FsbGVyeUl0ZW1cIiwgdF82KTtcbn1cbm91dHB1dCArPSBcIlxcblxcblwiO1xuaWYocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwibWFpbkl0ZW1cIikpLFwiY29tbWVudGVyXCIpKSB7XG5vdXRwdXQgKz0gXCJcXG4gIFwiO1xuaWYoZW52LmdldEZpbHRlcihcImxlbmd0aFwiKS5jYWxsKGNvbnRleHQsIHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJncm91cHNcIikpLDEpKSxcInJlZnNcIikpID4gMSkge1xub3V0cHV0ICs9IFwiXFxuICAgIFwiO1xudmFyIHRfNztcbnRfNyA9IFwiY29tbWVudFwiO1xuZnJhbWUuc2V0KFwidHlwZVwiLCB0XzcsIHRydWUpO1xuaWYoZnJhbWUudG9wTGV2ZWwpIHtcbmNvbnRleHQuc2V0VmFyaWFibGUoXCJ0eXBlXCIsIHRfNyk7XG59XG5pZihmcmFtZS50b3BMZXZlbCkge1xuY29udGV4dC5hZGRFeHBvcnQoXCJ0eXBlXCIsIHRfNyk7XG59XG5vdXRwdXQgKz0gXCJcXG4gIFwiO1xuO1xufVxub3V0cHV0ICs9IFwiXFxuICBcIjtcbnZhciB0Xzg7XG50XzggPSBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJtYWluSXRlbVwiKSksXCJfY3JlYXRlZFwiKTtcbmZyYW1lLnNldChcInBvc3REYXRlXCIsIHRfOCwgdHJ1ZSk7XG5pZihmcmFtZS50b3BMZXZlbCkge1xuY29udGV4dC5zZXRWYXJpYWJsZShcInBvc3REYXRlXCIsIHRfOCk7XG59XG5pZihmcmFtZS50b3BMZXZlbCkge1xuY29udGV4dC5hZGRFeHBvcnQoXCJwb3N0RGF0ZVwiLCB0XzgpO1xufVxub3V0cHV0ICs9IFwiXFxuICBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJtYWluSXRlbVwiKSksXCJtZXRhXCIpKSxcIl9jcmVhdGVkXCIpKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgXCI7XG52YXIgdF85O1xudF85ID0gcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIm1haW5JdGVtXCIpKSxcIm1ldGFcIikpLFwiX2NyZWF0ZWRcIik7XG5mcmFtZS5zZXQoXCJwb3N0RGF0ZVwiLCB0XzksIHRydWUpO1xuaWYoZnJhbWUudG9wTGV2ZWwpIHtcbmNvbnRleHQuc2V0VmFyaWFibGUoXCJwb3N0RGF0ZVwiLCB0XzkpO1xufVxuaWYoZnJhbWUudG9wTGV2ZWwpIHtcbmNvbnRleHQuYWRkRXhwb3J0KFwicG9zdERhdGVcIiwgdF85KTtcbn1cbm91dHB1dCArPSBcIlxcbiAgXCI7XG47XG59XG5vdXRwdXQgKz0gXCJcXG5cIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcblxcbjwhLS0gc3RpY2t5IHBvc2l0aW9uIHRvZ2dsZSAtLT5cXG5cIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwic3RpY2t5XCIpICYmIHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcInN0aWNreVBvc2l0aW9uXCIpID09IFwidG9wXCIpIHtcbm91dHB1dCArPSBcIlxcbjxhcnRpY2xlXFxuICBjbGFzcz1cXFwibGItc3RpY2t5LXRvcC1wb3N0IGxpc3QtZ3JvdXAtaXRlbSBcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJ0eXBlXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIiBcIjtcbmlmKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiZGlzcGxheW5vbmVcIikpIHtcbm91dHB1dCArPSBcIm1vZC0tZGlzcGxheW5vbmVcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcXCJcXG4gIGRhdGEtcG9zdC1pZD1cXFwiXCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwiX2lkXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIlxcXCJcXG4gIGRhdGEtcG9zdC1zdGlja3k9XFxcIlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJpdGVtXCIpKSxcInN0aWNreVwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJcXFwiPlxcbiAgXCI7XG47XG59XG5lbHNlIHtcbm91dHB1dCArPSBcIlxcbjxhcnRpY2xlXFxuICBjbGFzcz1cXFwibGItcG9zdCBsaXN0LWdyb3VwLWl0ZW0gc2hvdy1hdXRob3ItYXZhdGFyIFwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInR5cGVcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiIFwiO1xuaWYocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJsYl9oaWdobGlnaHRcIikpIHtcbm91dHB1dCArPSBcImxiLXBvc3QtLWhpZ2hsaWdodGVkXCI7XG47XG59XG5vdXRwdXQgKz0gXCIgXCI7XG5pZihydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcImRpc3BsYXlub25lXCIpKSB7XG5vdXRwdXQgKz0gXCJtb2QtLWRpc3BsYXlub25lXCI7XG47XG59XG5vdXRwdXQgKz0gXCJcXFwiXFxuICBkYXRhLXBvc3QtaWQ9XFxcIlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJpdGVtXCIpKSxcIl9pZFwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJcXFwiXFxuICBkYXRhLXBvc3Qtc3RpY2t5PVxcXCJcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJzdGlja3lcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiXFxcIj5cXG4gIDxkaXYgY2xhc3M9XFxcImxiLXBvc3QtaGVhZGVyXFxcIj5cXG5cXG4gICAgPGRpdiBjbGFzcz1cXFwibGItdHlwZSBsYi10eXBlLS1cIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJwb3N0X2l0ZW1zX3R5cGVcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiXFxcIj48L2Rpdj5cXG5cXG4gICAgPGRpdiBjbGFzcz1cXFwibGItcG9zdC1kYXRlLWljb25zXFxcIj5cXG4gICAgICBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwic3RpY2t5XCIpICYmIHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwibGJfaGlnaGxpZ2h0XCIpKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgIDxpbWcgc3JjPVxcXCJcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJhc3NldHNfcm9vdFwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJpbWFnZXMvcGlucG9zdC5zdmdcXFwiIGNsYXNzPVxcXCJwaW4taWNvblxcXCIgLz5cXG4gICAgICAgIDxpbWcgc3JjPVxcXCJcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJhc3NldHNfcm9vdFwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJpbWFnZXMvaGlnaGxpZ2h0ZWQuc3ZnXFxcIiBjbGFzcz1cXFwiaGlnaGxpZ2h0LWljb25cXFwiIC8+XFxuICAgICAgXCI7XG47XG59XG5lbHNlIHtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwic3RpY2t5XCIpKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgIDxpbWcgc3JjPVxcXCJcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJhc3NldHNfcm9vdFwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJpbWFnZXMvcGlucG9zdC5zdmdcXFwiIGNsYXNzPVxcXCJwaW4taWNvblxcXCIgLz5cXG4gICAgICBcIjtcbjtcbn1cbmVsc2Uge1xuaWYocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJsYl9oaWdobGlnaHRcIikpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgPGltZyBzcmM9XFxcIlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcImFzc2V0c19yb290XCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcImltYWdlcy9oaWdobGlnaHRlZC5zdmdcXFwiIGNsYXNzPVxcXCJoaWdobGlnaHQtaWNvblxcXCIgLz5cXG4gICAgICBcIjtcbjtcbn1cbmVsc2Uge1xuaWYocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJwb3N0X2l0ZW1zX3R5cGVcIikgPT0gXCJhZHZlcnRpc2VtZW50XCIpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwibGItYWR2ZXJ0aXNlbWVudFxcXCI+XCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKChsaW5lbm8gPSA0MCwgY29sbm8gPSA0OCwgcnVudGltZS5jYWxsV3JhcChtYWNyb190XzEsIFwidHJhbnNsYXRlXCIsIGNvbnRleHQsIFtcIkFkdmVydGlzZW1lbnRcIl0pKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCI8L2Rpdj5cXG4gICAgICBcIjtcbjtcbn1cbjtcbn1cbjtcbn1cbjtcbn1cbm91dHB1dCArPSBcIlxcblxcbiAgICAgIDwhLS0gcmVtb3ZlIGFkdmVydGlzZW1lbnQgc3R5bGl6YXRpb24tLT5cXG4gICAgICBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwicG9zdF9pdGVtc190eXBlXCIpICE9IFwiYWR2ZXJ0aXNlbWVudFwiKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImxiLXBvc3QtZGF0ZSByZWxhdGl2ZURhdGVcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcImNsaWVudERhdGV0aW1lT25seVwiKSkge1xub3V0cHV0ICs9IFwiIG1vZC0tZGlzcGxheW5vbmVcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcXCIgZGF0YS1qcy10aW1lc3RhbXA9XFxcIlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInBvc3REYXRlXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIlxcXCI+XCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKGVudi5nZXRGaWx0ZXIoXCJkYXRlXCIpLmNhbGwoY29udGV4dCwgcnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJwb3N0RGF0ZVwiKSxcIlwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCI8L2Rpdj5cXG4gICAgICBcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcbiAgICA8L2Rpdj5cXG4gICAgXCI7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJzZXR0aW5nc1wiKSksXCJhdXRob3JQb3NpdGlvblwiKSA9PSBcInRvcFwiKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICBcIjtcbnZhciB0YXNrcyA9IFtdO1xudGFza3MucHVzaChcbmZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5lbnYuZ2V0VGVtcGxhdGUoXCJ0ZW1wbGF0ZS1hdXRob3IuaHRtbFwiLCBmYWxzZSwgXCJ0ZW1wbGF0ZS1wb3N0Lmh0bWxcIiwgbnVsbCwgZnVuY3Rpb24odF8xMix0XzEwKSB7XG5pZih0XzEyKSB7IGNiKHRfMTIpOyByZXR1cm47IH1cbmNhbGxiYWNrKG51bGwsdF8xMCk7fSk7XG59KTtcbnRhc2tzLnB1c2goXG5mdW5jdGlvbih0ZW1wbGF0ZSwgY2FsbGJhY2spe1xudGVtcGxhdGUucmVuZGVyKGNvbnRleHQuZ2V0VmFyaWFibGVzKCksIGZyYW1lLCBmdW5jdGlvbih0XzEzLHRfMTEpIHtcbmlmKHRfMTMpIHsgY2IodF8xMyk7IHJldHVybjsgfVxuY2FsbGJhY2sobnVsbCx0XzExKTt9KTtcbn0pO1xudGFza3MucHVzaChcbmZ1bmN0aW9uKHJlc3VsdCwgY2FsbGJhY2spe1xub3V0cHV0ICs9IHJlc3VsdDtcbmNhbGxiYWNrKG51bGwpO1xufSk7XG5lbnYud2F0ZXJmYWxsKHRhc2tzLCBmdW5jdGlvbigpe1xub3V0cHV0ICs9IFwiXFxuICAgIFwiO1xufSk7XG59XG5lbHNlIHtcbm91dHB1dCArPSBcIlxcbiAgICAgIFwiO1xudmFyIHRhc2tzID0gW107XG50YXNrcy5wdXNoKFxuZnVuY3Rpb24oY2FsbGJhY2spIHtcbmVudi5nZXRUZW1wbGF0ZShcInRlbXBsYXRlLXBvc3QtYWN0aW9ucy5odG1sXCIsIGZhbHNlLCBcInRlbXBsYXRlLXBvc3QuaHRtbFwiLCBudWxsLCBmdW5jdGlvbih0XzE2LHRfMTQpIHtcbmlmKHRfMTYpIHsgY2IodF8xNik7IHJldHVybjsgfVxuY2FsbGJhY2sobnVsbCx0XzE0KTt9KTtcbn0pO1xudGFza3MucHVzaChcbmZ1bmN0aW9uKHRlbXBsYXRlLCBjYWxsYmFjayl7XG50ZW1wbGF0ZS5yZW5kZXIoY29udGV4dC5nZXRWYXJpYWJsZXMoKSwgZnJhbWUsIGZ1bmN0aW9uKHRfMTcsdF8xNSkge1xuaWYodF8xNykgeyBjYih0XzE3KTsgcmV0dXJuOyB9XG5jYWxsYmFjayhudWxsLHRfMTUpO30pO1xufSk7XG50YXNrcy5wdXNoKFxuZnVuY3Rpb24ocmVzdWx0LCBjYWxsYmFjayl7XG5vdXRwdXQgKz0gcmVzdWx0O1xuY2FsbGJhY2sobnVsbCk7XG59KTtcbmVudi53YXRlcmZhbGwodGFza3MsIGZ1bmN0aW9uKCl7XG5vdXRwdXQgKz0gXCJcXG4gICAgXCI7XG59KTtcbn1cbm91dHB1dCArPSBcIlxcblxcbiAgPC9kaXY+XFxuXFxuICBcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcbiAgPCEtLSBlbmQgc3RpY2t5IHBvc2l0aW9uIHRvZ2dsZSAtLT5cXG5cXG4gIDwhLS0gcG9zdCBzdGFydCAtLT5cXG4gIDxkaXYgY2xhc3M9XFxcIml0ZW1zLWNvbnRhaW5lclxcXCI+XFxuICBcIjtcbmlmKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwidHlwZVwiKSA9PSBcImNvbW1lbnRcIikge1xub3V0cHV0ICs9IFwiXFxuICAgIFwiO1xudmFyIHRhc2tzID0gW107XG50YXNrcy5wdXNoKFxuZnVuY3Rpb24oY2FsbGJhY2spIHtcbmVudi5nZXRUZW1wbGF0ZShcInRlbXBsYXRlLXBvc3QtY29tbWVudC5odG1sXCIsIGZhbHNlLCBcInRlbXBsYXRlLXBvc3QuaHRtbFwiLCBudWxsLCBmdW5jdGlvbih0XzIwLHRfMTgpIHtcbmlmKHRfMjApIHsgY2IodF8yMCk7IHJldHVybjsgfVxuY2FsbGJhY2sobnVsbCx0XzE4KTt9KTtcbn0pO1xudGFza3MucHVzaChcbmZ1bmN0aW9uKHRlbXBsYXRlLCBjYWxsYmFjayl7XG50ZW1wbGF0ZS5yZW5kZXIoY29udGV4dC5nZXRWYXJpYWJsZXMoKSwgZnJhbWUsIGZ1bmN0aW9uKHRfMjEsdF8xOSkge1xuaWYodF8yMSkgeyBjYih0XzIxKTsgcmV0dXJuOyB9XG5jYWxsYmFjayhudWxsLHRfMTkpO30pO1xufSk7XG50YXNrcy5wdXNoKFxuZnVuY3Rpb24ocmVzdWx0LCBjYWxsYmFjayl7XG5vdXRwdXQgKz0gcmVzdWx0O1xuY2FsbGJhY2sobnVsbCk7XG59KTtcbmVudi53YXRlcmZhbGwodGFza3MsIGZ1bmN0aW9uKCl7XG5vdXRwdXQgKz0gXCJcXG4gIFwiO1xufSk7XG59XG5lbHNlIHtcbm91dHB1dCArPSBcIlxcbiAgICBcIjtcbmlmKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSAmJiBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJpdGVtXCIpKSxcImdyb3Vwc1wiKSAmJiBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJncm91cHNcIikpLDEpICYmIHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJncm91cHNcIikpLDEpKSxcInJlZnNcIikgJiYgKGVudi5nZXRGaWx0ZXIoXCJsZW5ndGhcIikuY2FsbChjb250ZXh0LCBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIml0ZW1cIikpLFwiZ3JvdXBzXCIpKSwxKSksXCJyZWZzXCIpKSA+IDApKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgIFwiO1xuZnJhbWUgPSBmcmFtZS5wdXNoKCk7XG52YXIgdF8yNCA9IHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJncm91cHNcIikpLDEpKSxcInJlZnNcIik7XG5pZih0XzI0KSB7dmFyIHRfMjMgPSB0XzI0Lmxlbmd0aDtcbmZvcih2YXIgdF8yMj0wOyB0XzIyIDwgdF8yNC5sZW5ndGg7IHRfMjIrKykge1xudmFyIHRfMjUgPSB0XzI0W3RfMjJdO1xuZnJhbWUuc2V0KFwicmVmXCIsIHRfMjUpO1xuZnJhbWUuc2V0KFwibG9vcC5pbmRleFwiLCB0XzIyICsgMSk7XG5mcmFtZS5zZXQoXCJsb29wLmluZGV4MFwiLCB0XzIyKTtcbmZyYW1lLnNldChcImxvb3AucmV2aW5kZXhcIiwgdF8yMyAtIHRfMjIpO1xuZnJhbWUuc2V0KFwibG9vcC5yZXZpbmRleDBcIiwgdF8yMyAtIHRfMjIgLSAxKTtcbmZyYW1lLnNldChcImxvb3AuZmlyc3RcIiwgdF8yMiA9PT0gMCk7XG5mcmFtZS5zZXQoXCJsb29wLmxhc3RcIiwgdF8yMiA9PT0gdF8yMyAtIDEpO1xuZnJhbWUuc2V0KFwibG9vcC5sZW5ndGhcIiwgdF8yMyk7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgXCI7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHRfMjUpLFwiaXRlbVwiKSksXCJpdGVtX3R5cGVcIikgPT0gXCJpbWFnZVwiKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgICBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcInNob3dHYWxsZXJ5XCIpICYmIHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcImxvb3BcIikpLFwiaW5kZXgwXCIpICsgMSA8IHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcImxvb3BcIikpLFwibGVuZ3RoXCIpICYmIHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJncm91cHNcIikpLDEpKSxcInJlZnNcIikpLHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcImxvb3BcIikpLFwiaW5kZXgwXCIpICsgMSkpLFwiaXRlbVwiKSksXCJpdGVtX3R5cGVcIikgPT0gXCJpbWFnZVwiICYmIChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJsb29wXCIpKSxcImluZGV4MFwiKSAtIDEgPCAwIHx8ICEocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwibG9vcFwiKSksXCJpbmRleDBcIikgPiAwICYmIHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJncm91cHNcIikpLDEpKSxcInJlZnNcIikpLHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcImxvb3BcIikpLFwiaW5kZXgwXCIpIC0gMSkpLFwiaXRlbVwiKSksXCJpdGVtX3R5cGVcIikgPT0gXCJpbWFnZVwiKSkpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgICAgICAgXCI7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgICAgIFwiO1xudmFyIHRfMjY7XG50XzI2ID0gdHJ1ZTtcbmZyYW1lLnNldChcImdhbGxlcnlJdGVtXCIsIHRfMjYsIHRydWUpO1xuaWYoZnJhbWUudG9wTGV2ZWwpIHtcbmNvbnRleHQuc2V0VmFyaWFibGUoXCJnYWxsZXJ5SXRlbVwiLCB0XzI2KTtcbn1cbmlmKGZyYW1lLnRvcExldmVsKSB7XG5jb250ZXh0LmFkZEV4cG9ydChcImdhbGxlcnlJdGVtXCIsIHRfMjYpO1xufVxub3V0cHV0ICs9IFwiXFxuICAgICAgICAgICAgICA8IS0tIHNsaWRlc2hvdyBzdGFydCAtLT5cXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImxiLXNsaWRlc2hvd1xcXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImxiLXNsaWRlc2hvd19mcmFtZVxcXCI+XFxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwibGItc2xpZGVzaG93X3NsaWRlc1xcXCI+XFxuICAgICAgICAgICAgXCI7XG47XG59XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgICBcIjtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgICAgIFwiO1xuaWYocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwic2V0dGluZ3NcIikpLFwic2hvd0dhbGxlcnlcIikgJiYgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJpdGVtXCIpKSxcImdyb3Vwc1wiKSksMSkpLFwicmVmc1wiKSkscnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwibG9vcFwiKSksXCJpbmRleDBcIikgLSAxKSksXCJpdGVtXCIpKSxcIml0ZW1fdHlwZVwiKSA9PSBcImltYWdlXCIpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgICAgICAgXCI7XG52YXIgdF8yNztcbnRfMjcgPSB0cnVlO1xuZnJhbWUuc2V0KFwiZ2FsbGVyeUl0ZW1cIiwgdF8yNywgdHJ1ZSk7XG5pZihmcmFtZS50b3BMZXZlbCkge1xuY29udGV4dC5zZXRWYXJpYWJsZShcImdhbGxlcnlJdGVtXCIsIHRfMjcpO1xufVxuaWYoZnJhbWUudG9wTGV2ZWwpIHtcbmNvbnRleHQuYWRkRXhwb3J0KFwiZ2FsbGVyeUl0ZW1cIiwgdF8yNyk7XG59XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgICBcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcbiAgICAgICAgICAgIDwhLS0gaW1hZ2UgaXRlbSBzdGFydCAtLT5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJsYi1pdGVtIFwiO1xuaWYocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgodF8yNSksXCJpdGVtXCIpKSxcIm1ldGFcIikpLFwibWVkaWFcIikpLFwicmVuZGl0aW9uc1wiKSksXCJvcmlnaW5hbFwiKSksXCJoZWlnaHRcIikgPiBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKCh0XzI1KSxcIml0ZW1cIikpLFwibWV0YVwiKSksXCJtZWRpYVwiKSksXCJyZW5kaXRpb25zXCIpKSxcIm9yaWdpbmFsXCIpKSxcIndpZHRoXCIpKSB7XG5vdXRwdXQgKz0gXCJwb3J0cmFpdFwiO1xuO1xufVxub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHRfMjUpLFwiaXRlbVwiKSksXCJpdGVtX3R5cGVcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiXFxcIj5cXG4gICAgICAgICAgXCI7XG47XG59XG5lbHNlIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgICAgIDwhLS0gaXRlbSBzdGFydCAtLT5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJsYi1pdGVtIFwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHRfMjUpLFwiaXRlbVwiKSksXCJpdGVtX3R5cGVcIiksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiXFxcIj5cXG4gICAgICAgICAgXCI7XG47XG59XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgXCI7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHRfMjUpLFwiaXRlbVwiKSksXCJpdGVtX3R5cGVcIikgPT0gXCJlbWJlZFwiKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgICBcIjtcbnZhciB0YXNrcyA9IFtdO1xudGFza3MucHVzaChcbmZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5lbnYuZ2V0VGVtcGxhdGUoXCJ0ZW1wbGF0ZS1pdGVtLWVtYmVkLmh0bWxcIiwgZmFsc2UsIFwidGVtcGxhdGUtcG9zdC5odG1sXCIsIG51bGwsIGZ1bmN0aW9uKHRfMzAsdF8yOCkge1xuaWYodF8zMCkgeyBjYih0XzMwKTsgcmV0dXJuOyB9XG5jYWxsYmFjayhudWxsLHRfMjgpO30pO1xufSk7XG50YXNrcy5wdXNoKFxuZnVuY3Rpb24odGVtcGxhdGUsIGNhbGxiYWNrKXtcbnRlbXBsYXRlLnJlbmRlcihjb250ZXh0LmdldFZhcmlhYmxlcygpLCBmcmFtZSwgZnVuY3Rpb24odF8zMSx0XzI5KSB7XG5pZih0XzMxKSB7IGNiKHRfMzEpOyByZXR1cm47IH1cbmNhbGxiYWNrKG51bGwsdF8yOSk7fSk7XG59KTtcbnRhc2tzLnB1c2goXG5mdW5jdGlvbihyZXN1bHQsIGNhbGxiYWNrKXtcbm91dHB1dCArPSByZXN1bHQ7XG5jYWxsYmFjayhudWxsKTtcbn0pO1xuZW52LndhdGVyZmFsbCh0YXNrcywgZnVuY3Rpb24oKXtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgICBcIjtcbn0pO1xufVxuZWxzZSB7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHRfMjUpLFwiaXRlbVwiKSksXCJpdGVtX3R5cGVcIikgPT0gXCJpbWFnZVwiICYmIHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiZ2FsbGVyeUl0ZW1cIikpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgICAgIFwiO1xudmFyIHRhc2tzID0gW107XG50YXNrcy5wdXNoKFxuZnVuY3Rpb24oY2FsbGJhY2spIHtcbmVudi5nZXRUZW1wbGF0ZShcInRlbXBsYXRlLWl0ZW0tZ2FsbGVyeUltYWdlLmh0bWxcIiwgZmFsc2UsIFwidGVtcGxhdGUtcG9zdC5odG1sXCIsIG51bGwsIGZ1bmN0aW9uKHRfMzQsdF8zMikge1xuaWYodF8zNCkgeyBjYih0XzM0KTsgcmV0dXJuOyB9XG5jYWxsYmFjayhudWxsLHRfMzIpO30pO1xufSk7XG50YXNrcy5wdXNoKFxuZnVuY3Rpb24odGVtcGxhdGUsIGNhbGxiYWNrKXtcbnRlbXBsYXRlLnJlbmRlcihjb250ZXh0LmdldFZhcmlhYmxlcygpLCBmcmFtZSwgZnVuY3Rpb24odF8zNSx0XzMzKSB7XG5pZih0XzM1KSB7IGNiKHRfMzUpOyByZXR1cm47IH1cbmNhbGxiYWNrKG51bGwsdF8zMyk7fSk7XG59KTtcbnRhc2tzLnB1c2goXG5mdW5jdGlvbihyZXN1bHQsIGNhbGxiYWNrKXtcbm91dHB1dCArPSByZXN1bHQ7XG5jYWxsYmFjayhudWxsKTtcbn0pO1xuZW52LndhdGVyZmFsbCh0YXNrcywgZnVuY3Rpb24oKXtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgICBcIjtcbn0pO1xufVxuZWxzZSB7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHRfMjUpLFwiaXRlbVwiKSksXCJpdGVtX3R5cGVcIikgPT0gXCJpbWFnZVwiKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgICBcIjtcbnZhciB0YXNrcyA9IFtdO1xudGFza3MucHVzaChcbmZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5lbnYuZ2V0VGVtcGxhdGUoXCJ0ZW1wbGF0ZS1pdGVtLWltYWdlLmh0bWxcIiwgZmFsc2UsIFwidGVtcGxhdGUtcG9zdC5odG1sXCIsIG51bGwsIGZ1bmN0aW9uKHRfMzgsdF8zNikge1xuaWYodF8zOCkgeyBjYih0XzM4KTsgcmV0dXJuOyB9XG5jYWxsYmFjayhudWxsLHRfMzYpO30pO1xufSk7XG50YXNrcy5wdXNoKFxuZnVuY3Rpb24odGVtcGxhdGUsIGNhbGxiYWNrKXtcbnRlbXBsYXRlLnJlbmRlcihjb250ZXh0LmdldFZhcmlhYmxlcygpLCBmcmFtZSwgZnVuY3Rpb24odF8zOSx0XzM3KSB7XG5pZih0XzM5KSB7IGNiKHRfMzkpOyByZXR1cm47IH1cbmNhbGxiYWNrKG51bGwsdF8zNyk7fSk7XG59KTtcbnRhc2tzLnB1c2goXG5mdW5jdGlvbihyZXN1bHQsIGNhbGxiYWNrKXtcbm91dHB1dCArPSByZXN1bHQ7XG5jYWxsYmFjayhudWxsKTtcbn0pO1xuZW52LndhdGVyZmFsbCh0YXNrcywgZnVuY3Rpb24oKXtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgICBcIjtcbn0pO1xufVxuZWxzZSB7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHRfMjUpLFwiaXRlbVwiKSksXCJpdGVtX3R5cGVcIikgPT0gXCJxdW90ZVwiKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgICBcIjtcbnZhciB0YXNrcyA9IFtdO1xudGFza3MucHVzaChcbmZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5lbnYuZ2V0VGVtcGxhdGUoXCJ0ZW1wbGF0ZS1pdGVtLXF1b3RlLmh0bWxcIiwgZmFsc2UsIFwidGVtcGxhdGUtcG9zdC5odG1sXCIsIG51bGwsIGZ1bmN0aW9uKHRfNDIsdF80MCkge1xuaWYodF80MikgeyBjYih0XzQyKTsgcmV0dXJuOyB9XG5jYWxsYmFjayhudWxsLHRfNDApO30pO1xufSk7XG50YXNrcy5wdXNoKFxuZnVuY3Rpb24odGVtcGxhdGUsIGNhbGxiYWNrKXtcbnRlbXBsYXRlLnJlbmRlcihjb250ZXh0LmdldFZhcmlhYmxlcygpLCBmcmFtZSwgZnVuY3Rpb24odF80Myx0XzQxKSB7XG5pZih0XzQzKSB7IGNiKHRfNDMpOyByZXR1cm47IH1cbmNhbGxiYWNrKG51bGwsdF80MSk7fSk7XG59KTtcbnRhc2tzLnB1c2goXG5mdW5jdGlvbihyZXN1bHQsIGNhbGxiYWNrKXtcbm91dHB1dCArPSByZXN1bHQ7XG5jYWxsYmFjayhudWxsKTtcbn0pO1xuZW52LndhdGVyZmFsbCh0YXNrcywgZnVuY3Rpb24oKXtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgICBcIjtcbn0pO1xufVxuZWxzZSB7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHRfMjUpLFwiaXRlbVwiKSksXCJpdGVtX3R5cGVcIikgPT0gXCJjb21tZW50XCIpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgICAgIFwiO1xudmFyIHRhc2tzID0gW107XG50YXNrcy5wdXNoKFxuZnVuY3Rpb24oY2FsbGJhY2spIHtcbmVudi5nZXRUZW1wbGF0ZShcInRlbXBsYXRlLWl0ZW0tY29tbWVudC5odG1sXCIsIGZhbHNlLCBcInRlbXBsYXRlLXBvc3QuaHRtbFwiLCBudWxsLCBmdW5jdGlvbih0XzQ2LHRfNDQpIHtcbmlmKHRfNDYpIHsgY2IodF80Nik7IHJldHVybjsgfVxuY2FsbGJhY2sobnVsbCx0XzQ0KTt9KTtcbn0pO1xudGFza3MucHVzaChcbmZ1bmN0aW9uKHRlbXBsYXRlLCBjYWxsYmFjayl7XG50ZW1wbGF0ZS5yZW5kZXIoY29udGV4dC5nZXRWYXJpYWJsZXMoKSwgZnJhbWUsIGZ1bmN0aW9uKHRfNDcsdF80NSkge1xuaWYodF80NykgeyBjYih0XzQ3KTsgcmV0dXJuOyB9XG5jYWxsYmFjayhudWxsLHRfNDUpO30pO1xufSk7XG50YXNrcy5wdXNoKFxuZnVuY3Rpb24ocmVzdWx0LCBjYWxsYmFjayl7XG5vdXRwdXQgKz0gcmVzdWx0O1xuY2FsbGJhY2sobnVsbCk7XG59KTtcbmVudi53YXRlcmZhbGwodGFza3MsIGZ1bmN0aW9uKCl7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgXCI7XG59KTtcbn1cbmVsc2Uge1xub3V0cHV0ICs9IFwiXFxuICAgICAgICAgICAgPGFydGljbGU+XCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKGVudi5nZXRGaWx0ZXIoXCJzYWZlXCIpLmNhbGwoY29udGV4dCwgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKCh0XzI1KSxcIml0ZW1cIikpLFwidGV4dFwiKSksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiPC9hcnRpY2xlPlxcbiAgICAgICAgICBcIjtcbjtcbn1cbjtcbn1cbjtcbn1cbjtcbn1cbjtcbn1cbm91dHB1dCArPSBcIlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgPCEtLSBpdGVtIGVuZCAtLT5cXG4gICAgICAgICAgXCI7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJzZXR0aW5nc1wiKSksXCJzaG93R2FsbGVyeVwiKSAmJiBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHRfMjUpLFwiaXRlbVwiKSksXCJpdGVtX3R5cGVcIikgPT0gXCJpbWFnZVwiICYmIHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcImxvb3BcIikpLFwiaW5kZXgwXCIpIC0gMSA+PSAwICYmIHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJncm91cHNcIikpLDEpKSxcInJlZnNcIikpLHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcImxvb3BcIikpLFwiaW5kZXgwXCIpIC0gMSkpLFwiaXRlbVwiKSksXCJpdGVtX3R5cGVcIikgPT0gXCJpbWFnZVwiICYmIHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJncm91cHNcIikpLDEpKSxcInJlZnNcIikpLHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcImxvb3BcIikpLFwiaW5kZXgwXCIpICsgMSkpLFwiaXRlbVwiKSksXCJpdGVtX3R5cGVcIikgIT0gXCJpbWFnZVwiKSB7XG5vdXRwdXQgKz0gXCIgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJsYi1zbGlkZXNob3dfcHJldlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgd2lkdGg9XFxcIjUwXFxcIiBoZWlnaHQ9XFxcIjUwXFxcIiB2aWV3Qm94PVxcXCIwIDAgNTAxLjUgNTAxLjVcXFwiPjxnPjxwYXRoIGZpbGw9XFxcIiMyRTQzNUFcXFwiIGQ9XFxcIk0zMDIuNjcgOTAuODc3bDU1Ljc3IDU1LjUwOEwyNTQuNTc1IDI1MC43NSAzNTguNDQgMzU1LjExNmwtNTUuNzcgNTUuNTA2TDE0My41NiAyNTAuNzV6XFxcIi8+PC9nPjwvc3ZnPlxcbiAgICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJsYi1zbGlkZXNob3dfbmV4dFxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgd2lkdGg9XFxcIjUwXFxcIiBoZWlnaHQ9XFxcIjUwXFxcIiB2aWV3Qm94PVxcXCIwIDAgNTAxLjUgNTAxLjVcXFwiPjxnPjxwYXRoIGZpbGw9XFxcIiMyRTQzNUFcXFwiIGQ9XFxcIk0xOTkuMzMgNDEwLjYyMmwtNTUuNzctNTUuNTA4TDI0Ny40MjUgMjUwLjc1IDE0My41NiAxNDYuMzg0bDU1Ljc3LTU1LjUwN0wzNTguNDQgMjUwLjc1elxcXCIvPjwvZz48L3N2Zz5cXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPCEtLSBzbGlkZXNob3cgZW5kIC0tPlxcbiAgICAgICAgICBcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcbiAgICAgICAgXCI7XG47XG59XG59XG5mcmFtZSA9IGZyYW1lLnBvcCgpO1xub3V0cHV0ICs9IFwiXFxuICAgIFwiO1xuO1xufVxub3V0cHV0ICs9IFwiXFxuICBcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcbiAgPC9kaXY+XFxuICA8IS0tIHBvc3QgZW5kIC0tPlxcblxcbiAgPGRpdiBjbGFzcz1cXFwibGItcG9zdC1ib3R0b21cXFwiPlxcbiAgICBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcInNob3dVcGRhdGVEYXRldGltZVwiKSAmJiAocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJjb250ZW50X3VwZGF0ZWRfZGF0ZVwiKSAhPSBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJpdGVtXCIpKSxcImZpcnN0Y3JlYXRlZFwiKSkgJiYgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJwb3N0X2l0ZW1zX3R5cGVcIikgIT0gXCJhZHZlcnRpc2VtZW50XCIpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcImxiLXBvc3QtdXBkYXRlZFxcXCI+XFxuICAgICAgICA8c3Bhbj5cIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUoKGxpbmVubyA9IDEyMCwgY29sbm8gPSAyNCwgcnVudGltZS5jYWxsV3JhcChtYWNyb190XzEsIFwidHJhbnNsYXRlXCIsIGNvbnRleHQsIFtcIlVwZGF0ZWRcIl0pKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCI8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJsYi1wb3N0LXVwZGF0ZWQtdGltZSByZWxhdGl2ZURhdGVcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcImNsaWVudERhdGV0aW1lT25seVwiKSkge1xub3V0cHV0ICs9IFwiIG1vZC0tZGlzcGxheW5vbmVcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcXCIgZGF0YS1qcy10aW1lc3RhbXA9XFxcIlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJpdGVtXCIpKSxcImNvbnRlbnRfdXBkYXRlZF9kYXRlXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIlxcXCI+XCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKGVudi5nZXRGaWx0ZXIoXCJkYXRlXCIpLmNhbGwoY29udGV4dCwgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiaXRlbVwiKSksXCJjb250ZW50X3VwZGF0ZWRfZGF0ZVwiKSxcIlwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCI8L3NwYW4+XFxuICAgICAgPC9kaXY+XFxuICAgIFwiO1xuO1xufVxub3V0cHV0ICs9IFwiXFxuXFxuICAgIFwiO1xuaWYocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwic2V0dGluZ3NcIikpLFwiYXV0aG9yUG9zaXRpb25cIikgPT0gXCJib3R0b21cIikge1xub3V0cHV0ICs9IFwiXFxuICAgICAgXCI7XG52YXIgdGFza3MgPSBbXTtcbnRhc2tzLnB1c2goXG5mdW5jdGlvbihjYWxsYmFjaykge1xuZW52LmdldFRlbXBsYXRlKFwidGVtcGxhdGUtYXV0aG9yLmh0bWxcIiwgZmFsc2UsIFwidGVtcGxhdGUtcG9zdC5odG1sXCIsIG51bGwsIGZ1bmN0aW9uKHRfNTAsdF80OCkge1xuaWYodF81MCkgeyBjYih0XzUwKTsgcmV0dXJuOyB9XG5jYWxsYmFjayhudWxsLHRfNDgpO30pO1xufSk7XG50YXNrcy5wdXNoKFxuZnVuY3Rpb24odGVtcGxhdGUsIGNhbGxiYWNrKXtcbnRlbXBsYXRlLnJlbmRlcihjb250ZXh0LmdldFZhcmlhYmxlcygpLCBmcmFtZSwgZnVuY3Rpb24odF81MSx0XzQ5KSB7XG5pZih0XzUxKSB7IGNiKHRfNTEpOyByZXR1cm47IH1cbmNhbGxiYWNrKG51bGwsdF80OSk7fSk7XG59KTtcbnRhc2tzLnB1c2goXG5mdW5jdGlvbihyZXN1bHQsIGNhbGxiYWNrKXtcbm91dHB1dCArPSByZXN1bHQ7XG5jYWxsYmFjayhudWxsKTtcbn0pO1xuZW52LndhdGVyZmFsbCh0YXNrcywgZnVuY3Rpb24oKXtcbm91dHB1dCArPSBcIlxcbiAgICBcIjtcbn0pO1xufVxuZWxzZSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICBcIjtcbnZhciB0YXNrcyA9IFtdO1xudGFza3MucHVzaChcbmZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5lbnYuZ2V0VGVtcGxhdGUoXCJ0ZW1wbGF0ZS1wb3N0LWFjdGlvbnMuaHRtbFwiLCBmYWxzZSwgXCJ0ZW1wbGF0ZS1wb3N0Lmh0bWxcIiwgbnVsbCwgZnVuY3Rpb24odF81NCx0XzUyKSB7XG5pZih0XzU0KSB7IGNiKHRfNTQpOyByZXR1cm47IH1cbmNhbGxiYWNrKG51bGwsdF81Mik7fSk7XG59KTtcbnRhc2tzLnB1c2goXG5mdW5jdGlvbih0ZW1wbGF0ZSwgY2FsbGJhY2spe1xudGVtcGxhdGUucmVuZGVyKGNvbnRleHQuZ2V0VmFyaWFibGVzKCksIGZyYW1lLCBmdW5jdGlvbih0XzU1LHRfNTMpIHtcbmlmKHRfNTUpIHsgY2IodF81NSk7IHJldHVybjsgfVxuY2FsbGJhY2sobnVsbCx0XzUzKTt9KTtcbn0pO1xudGFza3MucHVzaChcbmZ1bmN0aW9uKHJlc3VsdCwgY2FsbGJhY2spe1xub3V0cHV0ICs9IHJlc3VsdDtcbmNhbGxiYWNrKG51bGwpO1xufSk7XG5lbnYud2F0ZXJmYWxsKHRhc2tzLCBmdW5jdGlvbigpe1xub3V0cHV0ICs9IFwiXFxuICAgIFwiO1xufSk7XG59XG5vdXRwdXQgKz0gXCJcXG5cXG4gICAgPC9kaXY+XFxuXFxuPC9hcnRpY2xlPlxcblwiO1xuaWYocGFyZW50VGVtcGxhdGUpIHtcbnBhcmVudFRlbXBsYXRlLnJvb3RSZW5kZXJGdW5jKGVudiwgY29udGV4dCwgZnJhbWUsIHJ1bnRpbWUsIGNiKTtcbn0gZWxzZSB7XG5jYihudWxsLCBvdXRwdXQpO1xufVxuO1xufSBjYXRjaCAoZSkge1xuICBjYihydW50aW1lLmhhbmRsZUVycm9yKGUsIGxpbmVubywgY29sbm8pKTtcbn1cbn1cbnJldHVybiB7XG5yb290OiByb290XG59O1xuXG59KSgpO1xucmV0dXJuIGZ1bmN0aW9uKGN0eCwgY2IpIHsgcmV0dXJuIG51bmp1Y2tzLnJlbmRlcihcInRlbXBsYXRlLXBvc3QuaHRtbFwiLCBjdHgsIGNiKTsgfVxufSkoKTtcbjtcbiIsInZhciBudW5qdWNrcyA9IHJlcXVpcmUoIFwibnVuanVja3MvYnJvd3Nlci9udW5qdWNrcy1zbGltXCIgKTtcbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkgeyh3aW5kb3cubnVuanVja3NQcmVjb21waWxlZCA9IHdpbmRvdy5udW5qdWNrc1ByZWNvbXBpbGVkIHx8IHt9KVtcInRlbXBsYXRlLXRpbWVsaW5lLmh0bWxcIl0gPSAoZnVuY3Rpb24oKSB7XG5mdW5jdGlvbiByb290KGVudiwgY29udGV4dCwgZnJhbWUsIHJ1bnRpbWUsIGNiKSB7XG52YXIgbGluZW5vID0gbnVsbDtcbnZhciBjb2xubyA9IG51bGw7XG52YXIgb3V0cHV0ID0gXCJcIjtcbnRyeSB7XG52YXIgcGFyZW50VGVtcGxhdGUgPSBudWxsO1xudmFyIG1hY3JvX3RfMSA9IHJ1bnRpbWUubWFrZU1hY3JvKFxuW1widGV4dFwiXSwgXG5bXSwgXG5mdW5jdGlvbiAobF90ZXh0LCBrd2FyZ3MpIHtcbnZhciBjYWxsZXJGcmFtZSA9IGZyYW1lO1xuZnJhbWUgPSBuZXcgcnVudGltZS5GcmFtZSgpO1xua3dhcmdzID0ga3dhcmdzIHx8IHt9O1xuaWYgKGt3YXJncy5oYXNPd25Qcm9wZXJ0eShcImNhbGxlclwiKSkge1xuZnJhbWUuc2V0KFwiY2FsbGVyXCIsIGt3YXJncy5jYWxsZXIpOyB9XG5mcmFtZS5zZXQoXCJ0ZXh0XCIsIGxfdGV4dCk7XG52YXIgdF8yID0gXCJcIjtpZighcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIm9wdGlvbnNcIikpLFwiaTE4blwiKSkscnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwic2V0dGluZ3NcIikpLFwibGFuZ3VhZ2VcIikpKSB7XG50XzIgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKGxfdGV4dCwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG47XG59XG5lbHNlIHtcbmlmKCFydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcIm9wdGlvbnNcIikpLFwiaTE4blwiKSkscnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwic2V0dGluZ3NcIikpLFwibGFuZ3VhZ2VcIikpKSxsX3RleHQpKSB7XG50XzIgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKGxfdGV4dCwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG47XG59XG5lbHNlIHtcbnRfMiArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJvcHRpb25zXCIpKSxcImkxOG5cIikpLHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcImxhbmd1YWdlXCIpKSksbF90ZXh0KSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG47XG59XG47XG59XG47XG5mcmFtZSA9IGNhbGxlckZyYW1lO1xucmV0dXJuIG5ldyBydW50aW1lLlNhZmVTdHJpbmcodF8yKTtcbn0pO1xuY29udGV4dC5hZGRFeHBvcnQoXCJ0cmFuc2xhdGVcIik7XG5jb250ZXh0LnNldFZhcmlhYmxlKFwidHJhbnNsYXRlXCIsIG1hY3JvX3RfMSk7XG5vdXRwdXQgKz0gXCJcXG5cXG5cIjtcbihwYXJlbnRUZW1wbGF0ZSA/IGZ1bmN0aW9uKGUsIGMsIGYsIHIsIGNiKSB7IGNiKFwiXCIpOyB9IDogY29udGV4dC5nZXRCbG9jayhcInRpbWVsaW5lXCIpKShlbnYsIGNvbnRleHQsIGZyYW1lLCBydW50aW1lLCBmdW5jdGlvbih0XzQsdF8zKSB7XG5pZih0XzQpIHsgY2IodF80KTsgcmV0dXJuOyB9XG5vdXRwdXQgKz0gdF8zO1xub3V0cHV0ICs9IFwiXFxuXFxuXCI7XG52YXIgdGFza3MgPSBbXTtcbnRhc2tzLnB1c2goXG5mdW5jdGlvbihjYWxsYmFjaykge1xuZW52LmdldFRlbXBsYXRlKFwidGVtcGxhdGUtZW1iZWQtcHJvdmlkZXJzLmh0bWxcIiwgZmFsc2UsIFwidGVtcGxhdGUtdGltZWxpbmUuaHRtbFwiLCBudWxsLCBmdW5jdGlvbih0XzcsdF81KSB7XG5pZih0XzcpIHsgY2IodF83KTsgcmV0dXJuOyB9XG5jYWxsYmFjayhudWxsLHRfNSk7fSk7XG59KTtcbnRhc2tzLnB1c2goXG5mdW5jdGlvbih0ZW1wbGF0ZSwgY2FsbGJhY2spe1xudGVtcGxhdGUucmVuZGVyKGNvbnRleHQuZ2V0VmFyaWFibGVzKCksIGZyYW1lLCBmdW5jdGlvbih0XzgsdF82KSB7XG5pZih0XzgpIHsgY2IodF84KTsgcmV0dXJuOyB9XG5jYWxsYmFjayhudWxsLHRfNik7fSk7XG59KTtcbnRhc2tzLnB1c2goXG5mdW5jdGlvbihyZXN1bHQsIGNhbGxiYWNrKXtcbm91dHB1dCArPSByZXN1bHQ7XG5jYWxsYmFjayhudWxsKTtcbn0pO1xuZW52LndhdGVyZmFsbCh0YXNrcywgZnVuY3Rpb24oKXtcbm91dHB1dCArPSBcIlxcblxcblwiO1xuaWYocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJpbmNsdWRlX2pzX29wdGlvbnNcIikpIHtcbm91dHB1dCArPSBcIlxcbiAgPHNjcmlwdCB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiPlxcbiAgICB3aW5kb3cuTEIgPSBcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUoZW52LmdldEZpbHRlcihcInNhZmVcIikuY2FsbChjb250ZXh0LCBydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcImpzb25fb3B0aW9uc1wiKSksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiO1xcbiAgPC9zY3JpcHQ+XFxuXCI7XG47XG59XG5vdXRwdXQgKz0gXCJcXG5cIjtcbmlmKHBhcmVudFRlbXBsYXRlKSB7XG5wYXJlbnRUZW1wbGF0ZS5yb290UmVuZGVyRnVuYyhlbnYsIGNvbnRleHQsIGZyYW1lLCBydW50aW1lLCBjYik7XG59IGVsc2Uge1xuY2IobnVsbCwgb3V0cHV0KTtcbn1cbn0pfSk7XG59IGNhdGNoIChlKSB7XG4gIGNiKHJ1bnRpbWUuaGFuZGxlRXJyb3IoZSwgbGluZW5vLCBjb2xubykpO1xufVxufVxuZnVuY3Rpb24gYl90aW1lbGluZShlbnYsIGNvbnRleHQsIGZyYW1lLCBydW50aW1lLCBjYikge1xudmFyIGxpbmVubyA9IG51bGw7XG52YXIgY29sbm8gPSBudWxsO1xudmFyIG91dHB1dCA9IFwiXCI7XG50cnkge1xudmFyIGZyYW1lID0gZnJhbWUucHVzaCh0cnVlKTtcbm91dHB1dCArPSBcIlxcbjxkaXYgZGF0YS10aW1lbGluZSBjbGFzcz1cXFwibGItdGltZWxpbmUgXCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcImxhbmd1YWdlXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIlxcXCI+XFxuICBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcInNob3dUaXRsZVwiKSAmJiBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJibG9nXCIpKSxcInRpdGxlXCIpKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgPGgxPlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZShydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJibG9nXCIpKSxcInRpdGxlXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIjwvaDE+XFxuICBcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcblxcbiAgXCI7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJzZXR0aW5nc1wiKSksXCJzaG93RGVzY3JpcHRpb25cIikgJiYgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiYmxvZ1wiKSksXCJkZXNjcmlwdGlvblwiKSkge1xub3V0cHV0ICs9IFwiXFxuICAgIDxkaXYgY2xhc3M9XFxcImRlc2NyaXB0aW9uXFxcIj5cXG4gICAgICBcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUoZW52LmdldEZpbHRlcihcInNhZmVcIikuY2FsbChjb250ZXh0LCBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJibG9nXCIpKSxcImRlc2NyaXB0aW9uXCIpKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJcXG4gICAgPC9kaXY+XFxuICBcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcblxcbiAgXCI7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJzZXR0aW5nc1wiKSksXCJzaG93SW1hZ2VcIikgJiYgcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiYmxvZ1wiKSksXCJwaWN0dXJlX3VybFwiKSkge1xub3V0cHV0ICs9IFwiXFxuICAgIDxpbWcgc3JjPVxcXCJcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiYmxvZ1wiKSksXCJwaWN0dXJlX3VybFwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJcXFwiIC8+XFxuICBcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcblxcbiAgXCI7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJzZXR0aW5nc1wiKSksXCJzdGlja3lQb3NpdGlvblwiKSA9PSBcInRvcFwiKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgPGRpdiBjbGFzcz1cXFwidGltZWxpbmUtdG9wIHRpbWVsaW5lLXRvcC0tbG9hZGVkXFxcIj5cXG4gICAgICA8c2VjdGlvbiBkYXRhLXRpbWVsaW5lLXN0aWNreSBjbGFzcz1cXFwibGItcG9zdHMgbGlzdC1ncm91cFwiO1xuaWYoIWVudi5nZXRGaWx0ZXIoXCJsZW5ndGhcIikuY2FsbChjb250ZXh0LCBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiYXBpX3Jlc3BvbnNlXCIpKSxcInN0aWNreVBvc3RzXCIpKSxcIl9pdGVtc1wiKSkpIHtcbm91dHB1dCArPSBcIiBzdGlja3ktLWVtcHR5XCI7XG47XG59XG5vdXRwdXQgKz0gXCJcXFwiPlxcbiAgICAgICAgXCI7XG5mcmFtZSA9IGZyYW1lLnB1c2goKTtcbnZhciB0XzExID0gcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcImFwaV9yZXNwb25zZVwiKSksXCJzdGlja3lQb3N0c1wiKSksXCJfaXRlbXNcIik7XG5pZih0XzExKSB7dmFyIHRfMTAgPSB0XzExLmxlbmd0aDtcbmZvcih2YXIgdF85PTA7IHRfOSA8IHRfMTEubGVuZ3RoOyB0XzkrKykge1xudmFyIHRfMTIgPSB0XzExW3RfOV07XG5mcmFtZS5zZXQoXCJpdGVtXCIsIHRfMTIpO1xuZnJhbWUuc2V0KFwibG9vcC5pbmRleFwiLCB0XzkgKyAxKTtcbmZyYW1lLnNldChcImxvb3AuaW5kZXgwXCIsIHRfOSk7XG5mcmFtZS5zZXQoXCJsb29wLnJldmluZGV4XCIsIHRfMTAgLSB0XzkpO1xuZnJhbWUuc2V0KFwibG9vcC5yZXZpbmRleDBcIiwgdF8xMCAtIHRfOSAtIDEpO1xuZnJhbWUuc2V0KFwibG9vcC5maXJzdFwiLCB0XzkgPT09IDApO1xuZnJhbWUuc2V0KFwibG9vcC5sYXN0XCIsIHRfOSA9PT0gdF8xMCAtIDEpO1xuZnJhbWUuc2V0KFwibG9vcC5sZW5ndGhcIiwgdF8xMCk7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgXCI7XG5pZighcnVudGltZS5tZW1iZXJMb29rdXAoKHRfMTIpLFwiZGVsZXRlZFwiKSkge1xub3V0cHV0ICs9IFwiXFxuICAgICAgICAgICAgXCI7XG52YXIgdGFza3MgPSBbXTtcbnRhc2tzLnB1c2goXG5mdW5jdGlvbihjYWxsYmFjaykge1xuZW52LmdldFRlbXBsYXRlKFwidGVtcGxhdGUtcG9zdC5odG1sXCIsIGZhbHNlLCBcInRlbXBsYXRlLXRpbWVsaW5lLmh0bWxcIiwgbnVsbCwgZnVuY3Rpb24odF8xNSx0XzEzKSB7XG5pZih0XzE1KSB7IGNiKHRfMTUpOyByZXR1cm47IH1cbmNhbGxiYWNrKG51bGwsdF8xMyk7fSk7XG59KTtcbnRhc2tzLnB1c2goXG5mdW5jdGlvbih0ZW1wbGF0ZSwgY2FsbGJhY2spe1xudGVtcGxhdGUucmVuZGVyKGNvbnRleHQuZ2V0VmFyaWFibGVzKCksIGZyYW1lLCBmdW5jdGlvbih0XzE2LHRfMTQpIHtcbmlmKHRfMTYpIHsgY2IodF8xNik7IHJldHVybjsgfVxuY2FsbGJhY2sobnVsbCx0XzE0KTt9KTtcbn0pO1xudGFza3MucHVzaChcbmZ1bmN0aW9uKHJlc3VsdCwgY2FsbGJhY2spe1xub3V0cHV0ICs9IHJlc3VsdDtcbmNhbGxiYWNrKG51bGwpO1xufSk7XG5lbnYud2F0ZXJmYWxsKHRhc2tzLCBmdW5jdGlvbigpe1xub3V0cHV0ICs9IFwiXFxuICAgICAgICAgIFwiO1xufSk7XG59XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgIFwiO1xuO1xufVxufVxuZnJhbWUgPSBmcmFtZS5wb3AoKTtcbm91dHB1dCArPSBcIlxcbiAgICAgIDwvc2VjdGlvbj5cXG4gICAgPC9kaXY+XFxuICBcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcblxcbiAgPCEtLSBIZWFkZXIgLS0+XFxuICA8ZGl2IGNsYXNzPVxcXCJoZWFkZXItYmFyXFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwic29ydGluZy1iYXJcXFwiPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcInNvcnRpbmctYmFyX19vcmRlcnNcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwic29ydGluZy1iYXJfX2Ryb3Bkb3duQnRuXFxcIiBkYXRhLWpzLXNvcnRfZHJvcGRvd25fYnV0dG9uPlxcbiAgICAgICAgICBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcInBvc3RPcmRlclwiKSA9PSBcImVkaXRvcmlhbFwiKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgICBcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUoKGxpbmVubyA9IDM2LCBjb2xubyA9IDIzLCBydW50aW1lLmNhbGxXcmFwKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwidHJhbnNsYXRlXCIpLCBcInRyYW5zbGF0ZVwiLCBjb250ZXh0LCBbXCJFZGl0b3JpYWxcIl0pKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgXCI7XG47XG59XG5lbHNlIHtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcInBvc3RPcmRlclwiKSA9PSBcIm5ld2VzdF9maXJzdFwiKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgICBcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUoKGxpbmVubyA9IDM4LCBjb2xubyA9IDIzLCBydW50aW1lLmNhbGxXcmFwKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwidHJhbnNsYXRlXCIpLCBcInRyYW5zbGF0ZVwiLCBjb250ZXh0LCBbXCJOZXdlc3QgZmlyc3RcIl0pKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgXCI7XG47XG59XG5lbHNlIHtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcInBvc3RPcmRlclwiKSA9PSBcIm9sZGVzdF9maXJzdFwiKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgICBcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUoKGxpbmVubyA9IDQwLCBjb2xubyA9IDIyLCBydW50aW1lLmNhbGxXcmFwKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwidHJhbnNsYXRlXCIpLCBcInRyYW5zbGF0ZVwiLCBjb250ZXh0LCBbXCJPbGRlc3QgZmlyc3RcIl0pKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgXCI7XG47XG59XG47XG59XG47XG59XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwic29ydGluZy1iYXJfX2Ryb3Bkb3duQ29udGVudFxcXCI+XFxuICAgICAgICAgIDxkaXZcXG4gICAgICAgICAgICBjbGFzcz1cXFwic29ydGluZy1iYXJfX29yZGVyIFwiO1xuaWYocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwic2V0dGluZ3NcIikpLFwicG9zdE9yZGVyXCIpID09IFwiZWRpdG9yaWFsXCIpIHtcbm91dHB1dCArPSBcInNvcnRpbmctYmFyX19vcmRlci0tYWN0aXZlXCI7XG47XG59XG5vdXRwdXQgKz0gXCJcXFwiXFxuICAgICAgICAgICAgZGF0YS1qcy1vcmRlcmJ5X2VkaXRvcmlhbD5cXG4gICAgICAgICAgICBcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUoKGxpbmVubyA9IDQ3LCBjb2xubyA9IDIzLCBydW50aW1lLmNhbGxXcmFwKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwidHJhbnNsYXRlXCIpLCBcInRyYW5zbGF0ZVwiLCBjb250ZXh0LCBbXCJFZGl0b3JpYWxcIl0pKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDxkaXZcXG4gICAgICAgICAgICBjbGFzcz1cXFwic29ydGluZy1iYXJfX29yZGVyIFwiO1xuaWYocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwic2V0dGluZ3NcIikpLFwicG9zdE9yZGVyXCIpID09IFwibmV3ZXN0X2ZpcnN0XCIpIHtcbm91dHB1dCArPSBcInNvcnRpbmctYmFyX19vcmRlci0tYWN0aXZlXCI7XG47XG59XG5vdXRwdXQgKz0gXCJcXFwiXFxuICAgICAgICAgICAgZGF0YS1qcy1vcmRlcmJ5X2Rlc2NlbmRpbmc+XFxuICAgICAgICAgICAgXCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKChsaW5lbm8gPSA1MiwgY29sbm8gPSAyMywgcnVudGltZS5jYWxsV3JhcChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInRyYW5zbGF0ZVwiKSwgXCJ0cmFuc2xhdGVcIiwgY29udGV4dCwgW1wiTmV3ZXN0IGZpcnN0XCJdKSksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiXFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8ZGl2XFxuICAgICAgICAgICAgY2xhc3M9XFxcInNvcnRpbmctYmFyX19vcmRlciBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcInBvc3RPcmRlclwiKSA9PSBcIm9sZGVzdF9maXJzdFwiKSB7XG5vdXRwdXQgKz0gXCJzb3J0aW5nLWJhcl9fb3JkZXItLWFjdGl2ZVwiO1xuO1xufVxub3V0cHV0ICs9IFwiXFxcIlxcbiAgICAgICAgICAgIGRhdGEtanMtb3JkZXJieV9hc2NlbmRpbmc+XFxuICAgICAgICAgICAgXCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKChsaW5lbm8gPSA1NywgY29sbm8gPSAyMiwgcnVudGltZS5jYWxsV3JhcChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInRyYW5zbGF0ZVwiKSwgXCJ0cmFuc2xhdGVcIiwgY29udGV4dCwgW1wiT2xkZXN0IGZpcnN0XCJdKSksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiXFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJoZWFkZXItYmFyX19hY3Rpb25zXFxcIj48L2Rpdj5cXG4gICAgICBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcImhhc0hpZ2hsaWdodHNcIikpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJoZWFkZXItYmFyX19oaWdobGlnaHRcXFwiIGRhdGEtanMtc2hvdy1oaWdobGlnaHRlZD48c3Bhbj5cIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUoKGxpbmVubyA9IDY0LCBjb2xubyA9IDg5LCBydW50aW1lLmNhbGxXcmFwKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwidHJhbnNsYXRlXCIpLCBcInRyYW5zbGF0ZVwiLCBjb250ZXh0LCBbXCJIaWdobGlnaHRzXCJdKSksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiPC9zcGFuPjwvYnV0dG9uPlxcbiAgICAgIFwiO1xuO1xufVxub3V0cHV0ICs9IFwiXFxuXFxuICAgICAgXCI7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJzZXR0aW5nc1wiKSksXCJjYW5Db21tZW50XCIpKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgIDxidXR0b24gY2xhc3M9XFxcImhlYWRlci1iYXJfX2NvbW1lbnRcXFwiIGRhdGEtanMtc2hvdy1jb21tZW50LWRpYWxvZz5cXG4gICAgICAgICAgICBcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUoKGxpbmVubyA9IDY5LCBjb2xubyA9IDIyLCBydW50aW1lLmNhbGxXcmFwKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwidHJhbnNsYXRlXCIpLCBcInRyYW5zbGF0ZVwiLCBjb250ZXh0LCBbXCJDb21tZW50XCJdKSksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiXFxuICAgICAgICA8L2J1dHRvbj5cXG4gICAgICBcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcblxcbiAgICAgIFwiO1xuaWYocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwic2V0dGluZ3NcIikpLFwic2hvd0xpdmVibG9nTG9nb1wiKSB8fCBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJvdXRwdXRcIikpLFwibG9nb191cmxcIikpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgXCI7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJvdXRwdXRcIikpLFwibG9nb191cmxcIikpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiaGVhZGVyLWJhcl9fbG9nb1xcXCI+XFxuICAgICAgICAgIDxpbWcgc3JjPVxcXCJcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwib3V0cHV0XCIpKSxcImxvZ29fdXJsXCIpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIlxcXCIvPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICBcIjtcbjtcbn1cbmVsc2Uge1xub3V0cHV0ICs9IFwiXFxuICAgICAgICA8YSBjbGFzcz1cXFwiaGVhZGVyLWJhcl9fbG9nb1xcXCIgaHJlZj1cXFwiaHR0cHM6Ly93d3cubGl2ZWJsb2cucHJvXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+XFxuICAgICAgICAgIDxzcGFuPlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZSgobGluZW5vID0gODAsIGNvbG5vID0gMjYsIHJ1bnRpbWUuY2FsbFdyYXAocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJ0cmFuc2xhdGVcIiksIFwidHJhbnNsYXRlXCIsIGNvbnRleHQsIFtcIlBvd2VyZWQgYnlcIl0pKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCI8L3NwYW4+XFxuICAgICAgICAgIDxpbWcgc3JjPVxcXCJcIjtcbm91dHB1dCArPSBydW50aW1lLnN1cHByZXNzVmFsdWUocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJhc3NldHNfcm9vdFwiKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJpbWFnZXMvbGItbG9nby5zdmdcXFwiIC8+XFxuICAgICAgICA8L2E+XFxuICAgICAgICBcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcbiAgICAgIFwiO1xuO1xufVxub3V0cHV0ICs9IFwiXFxuICAgIDwvZGl2PlxcbiAgPCEtLSBIZWFkZXIgRW5kIC0tPlxcblxcbiAgPCEtLSBDb21tZW50IC0tPlxcbiAgXCI7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJzZXR0aW5nc1wiKSksXCJjYW5Db21tZW50XCIpKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgXCI7XG52YXIgdGFza3MgPSBbXTtcbnRhc2tzLnB1c2goXG5mdW5jdGlvbihjYWxsYmFjaykge1xuZW52LmdldFRlbXBsYXRlKFwidGVtcGxhdGUtY29tbWVudC5odG1sXCIsIGZhbHNlLCBcInRlbXBsYXRlLXRpbWVsaW5lLmh0bWxcIiwgbnVsbCwgZnVuY3Rpb24odF8xOSx0XzE3KSB7XG5pZih0XzE5KSB7IGNiKHRfMTkpOyByZXR1cm47IH1cbmNhbGxiYWNrKG51bGwsdF8xNyk7fSk7XG59KTtcbnRhc2tzLnB1c2goXG5mdW5jdGlvbih0ZW1wbGF0ZSwgY2FsbGJhY2spe1xudGVtcGxhdGUucmVuZGVyKGNvbnRleHQuZ2V0VmFyaWFibGVzKCksIGZyYW1lLCBmdW5jdGlvbih0XzIwLHRfMTgpIHtcbmlmKHRfMjApIHsgY2IodF8yMCk7IHJldHVybjsgfVxuY2FsbGJhY2sobnVsbCx0XzE4KTt9KTtcbn0pO1xudGFza3MucHVzaChcbmZ1bmN0aW9uKHJlc3VsdCwgY2FsbGJhY2spe1xub3V0cHV0ICs9IHJlc3VsdDtcbmNhbGxiYWNrKG51bGwpO1xufSk7XG5lbnYud2F0ZXJmYWxsKHRhc2tzLCBmdW5jdGlvbigpe1xub3V0cHV0ICs9IFwiXFxuICBcIjtcbn0pO1xufVxub3V0cHV0ICs9IFwiXFxuICA8IS0tIENvbW1lbnQgRW5kIC0tPlxcblxcbiAgPCEtLSBUaW1lbGluZSAtLT5cXG4gIDxkaXYgY2xhc3M9XFxcInRpbWVsaW5lLWJvZHkgdGltZWxpbmUtYm9keS0tbG9hZGVkXFxcIj5cXG4gICAgICA8ZGl2IGRhdGEtb25lLW5ldy11cGRhdGUgY2xhc3M9XFxcImxiLXBvc3QgbmV3LXVwZGF0ZXMgbW9kLS1kaXNwbGF5bm9uZVxcXCI+XFxuICAgICAgICA8ZGl2PlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZSgobGluZW5vID0gOTcsIGNvbG5vID0gMjMsIHJ1bnRpbWUuY2FsbFdyYXAocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJ0cmFuc2xhdGVcIiksIFwidHJhbnNsYXRlXCIsIGNvbnRleHQsIFtcIlNlZSBvbmUgbmV3IHVwZGF0ZVwiXSkpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIjwvZGl2PlxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDxkaXYgZGF0YS1uZXctdXBkYXRlcyBjbGFzcz1cXFwibGItcG9zdCBuZXctdXBkYXRlcyBtb2QtLWRpc3BsYXlub25lXFxcIj5cXG4gICAgICAgIDxkaXY+XCI7XG5vdXRwdXQgKz0gcnVudGltZS5zdXBwcmVzc1ZhbHVlKChsaW5lbm8gPSAxMDAsIGNvbG5vID0gMjMsIHJ1bnRpbWUuY2FsbFdyYXAocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJ0cmFuc2xhdGVcIiksIFwidHJhbnNsYXRlXCIsIGNvbnRleHQsIFtcIlNlZSBuZXcgdXBkYXRlc1wiXSkpLCBlbnYub3B0cy5hdXRvZXNjYXBlKTtcbm91dHB1dCArPSBcIjwvZGl2PlxcbiAgICAgIDwvZGl2PlxcbiAgICBcIjtcbmlmKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcInNldHRpbmdzXCIpKSxcInN0aWNreVBvc2l0aW9uXCIpID09IFwiYm90dG9tXCIpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgIDxzZWN0aW9uIGRhdGEtdGltZWxpbmUtc3RpY2t5IGNsYXNzPVxcXCJsYi1wb3N0cyBsaXN0LWdyb3VwIHN0aWNreVwiO1xuaWYoIWVudi5nZXRGaWx0ZXIoXCJsZW5ndGhcIikuY2FsbChjb250ZXh0LCBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiYXBpX3Jlc3BvbnNlXCIpKSxcInN0aWNreVBvc3RzXCIpKSxcIl9pdGVtc1wiKSkpIHtcbm91dHB1dCArPSBcIiBzdGlja3ktLWVtcHR5XCI7XG47XG59XG5vdXRwdXQgKz0gXCJcXFwiPlxcbiAgICAgICAgXCI7XG5mcmFtZSA9IGZyYW1lLnB1c2goKTtcbnZhciB0XzIzID0gcnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcImFwaV9yZXNwb25zZVwiKSksXCJzdGlja3lQb3N0c1wiKSksXCJfaXRlbXNcIik7XG5pZih0XzIzKSB7dmFyIHRfMjIgPSB0XzIzLmxlbmd0aDtcbmZvcih2YXIgdF8yMT0wOyB0XzIxIDwgdF8yMy5sZW5ndGg7IHRfMjErKykge1xudmFyIHRfMjQgPSB0XzIzW3RfMjFdO1xuZnJhbWUuc2V0KFwiaXRlbVwiLCB0XzI0KTtcbmZyYW1lLnNldChcImxvb3AuaW5kZXhcIiwgdF8yMSArIDEpO1xuZnJhbWUuc2V0KFwibG9vcC5pbmRleDBcIiwgdF8yMSk7XG5mcmFtZS5zZXQoXCJsb29wLnJldmluZGV4XCIsIHRfMjIgLSB0XzIxKTtcbmZyYW1lLnNldChcImxvb3AucmV2aW5kZXgwXCIsIHRfMjIgLSB0XzIxIC0gMSk7XG5mcmFtZS5zZXQoXCJsb29wLmZpcnN0XCIsIHRfMjEgPT09IDApO1xuZnJhbWUuc2V0KFwibG9vcC5sYXN0XCIsIHRfMjEgPT09IHRfMjIgLSAxKTtcbmZyYW1lLnNldChcImxvb3AubGVuZ3RoXCIsIHRfMjIpO1xub3V0cHV0ICs9IFwiXFxuICAgICAgICAgIFwiO1xuaWYoIXJ1bnRpbWUubWVtYmVyTG9va3VwKCh0XzI0KSxcImRlbGV0ZWRcIikpIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgICAgIFwiO1xudmFyIHRhc2tzID0gW107XG50YXNrcy5wdXNoKFxuZnVuY3Rpb24oY2FsbGJhY2spIHtcbmVudi5nZXRUZW1wbGF0ZShcInRlbXBsYXRlLXBvc3QuaHRtbFwiLCBmYWxzZSwgXCJ0ZW1wbGF0ZS10aW1lbGluZS5odG1sXCIsIG51bGwsIGZ1bmN0aW9uKHRfMjcsdF8yNSkge1xuaWYodF8yNykgeyBjYih0XzI3KTsgcmV0dXJuOyB9XG5jYWxsYmFjayhudWxsLHRfMjUpO30pO1xufSk7XG50YXNrcy5wdXNoKFxuZnVuY3Rpb24odGVtcGxhdGUsIGNhbGxiYWNrKXtcbnRlbXBsYXRlLnJlbmRlcihjb250ZXh0LmdldFZhcmlhYmxlcygpLCBmcmFtZSwgZnVuY3Rpb24odF8yOCx0XzI2KSB7XG5pZih0XzI4KSB7IGNiKHRfMjgpOyByZXR1cm47IH1cbmNhbGxiYWNrKG51bGwsdF8yNik7fSk7XG59KTtcbnRhc2tzLnB1c2goXG5mdW5jdGlvbihyZXN1bHQsIGNhbGxiYWNrKXtcbm91dHB1dCArPSByZXN1bHQ7XG5jYWxsYmFjayhudWxsKTtcbn0pO1xuZW52LndhdGVyZmFsbCh0YXNrcywgZnVuY3Rpb24oKXtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgICBcIjtcbn0pO1xufVxub3V0cHV0ICs9IFwiXFxuICAgICAgICBcIjtcbjtcbn1cbn1cbmZyYW1lID0gZnJhbWUucG9wKCk7XG5vdXRwdXQgKz0gXCJcXG4gICAgICA8L3NlY3Rpb24+XFxuICAgIFwiO1xuO1xufVxub3V0cHV0ICs9IFwiXFxuICAgICAgPGRpdiBkYXRhLWVtcHR5LW1lc3NhZ2UgY2xhc3M9XFxcImxiLXBvc3QgZW1wdHktbWVzc2FnZSBcIjtcbmlmKGVudi5nZXRGaWx0ZXIoXCJsZW5ndGhcIikuY2FsbChjb250ZXh0LCBydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiYXBpX3Jlc3BvbnNlXCIpKSxcInBvc3RzXCIpKSxcIl9pdGVtc1wiKSkpIHtcbm91dHB1dCArPSBcIm1vZC0tZGlzcGxheW5vbmVcIjtcbjtcbn1cbm91dHB1dCArPSBcIlxcXCI+XFxuICAgICAgICA8ZGl2PlwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZSgobGluZW5vID0gMTEyLCBjb2xubyA9IDIzLCBydW50aW1lLmNhbGxXcmFwKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwidHJhbnNsYXRlXCIpLCBcInRyYW5zbGF0ZVwiLCBjb250ZXh0LCBbXCJObyBwb3N0cyBmb3Igbm93XCJdKSksIGVudi5vcHRzLmF1dG9lc2NhcGUpO1xub3V0cHV0ICs9IFwiPC9kaXY+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPHNlY3Rpb24gZGF0YS10aW1lbGluZS1ub3JtYWwgY2xhc3M9XFxcImxiLXBvc3RzIGxpc3QtZ3JvdXAgbm9ybWFsXFxcIj5cXG4gICAgICAgIFwiO1xuaWYoZW52LmdldEZpbHRlcihcImxlbmd0aFwiKS5jYWxsKGNvbnRleHQsIHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJhcGlfcmVzcG9uc2VcIikpLFwicG9zdHNcIikpLFwiX2l0ZW1zXCIpKSA+IDApIHtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgICAgIFwiO1xuZnJhbWUgPSBmcmFtZS5wdXNoKCk7XG52YXIgdF8zMSA9IHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgXCJhcGlfcmVzcG9uc2VcIikpLFwicG9zdHNcIikpLFwiX2l0ZW1zXCIpO1xuaWYodF8zMSkge3ZhciB0XzMwID0gdF8zMS5sZW5ndGg7XG5mb3IodmFyIHRfMjk9MDsgdF8yOSA8IHRfMzEubGVuZ3RoOyB0XzI5KyspIHtcbnZhciB0XzMyID0gdF8zMVt0XzI5XTtcbmZyYW1lLnNldChcIml0ZW1cIiwgdF8zMik7XG5mcmFtZS5zZXQoXCJsb29wLmluZGV4XCIsIHRfMjkgKyAxKTtcbmZyYW1lLnNldChcImxvb3AuaW5kZXgwXCIsIHRfMjkpO1xuZnJhbWUuc2V0KFwibG9vcC5yZXZpbmRleFwiLCB0XzMwIC0gdF8yOSk7XG5mcmFtZS5zZXQoXCJsb29wLnJldmluZGV4MFwiLCB0XzMwIC0gdF8yOSAtIDEpO1xuZnJhbWUuc2V0KFwibG9vcC5maXJzdFwiLCB0XzI5ID09PSAwKTtcbmZyYW1lLnNldChcImxvb3AubGFzdFwiLCB0XzI5ID09PSB0XzMwIC0gMSk7XG5mcmFtZS5zZXQoXCJsb29wLmxlbmd0aFwiLCB0XzMwKTtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgICAgICAgXCI7XG5pZighcnVudGltZS5tZW1iZXJMb29rdXAoKHRfMzIpLFwiZGVsZXRlZFwiKSkge1xub3V0cHV0ICs9IFwiXFxuICAgICAgICAgICAgICAgIFwiO1xudmFyIHRhc2tzID0gW107XG50YXNrcy5wdXNoKFxuZnVuY3Rpb24oY2FsbGJhY2spIHtcbmVudi5nZXRUZW1wbGF0ZShcInRlbXBsYXRlLXBvc3QuaHRtbFwiLCBmYWxzZSwgXCJ0ZW1wbGF0ZS10aW1lbGluZS5odG1sXCIsIG51bGwsIGZ1bmN0aW9uKHRfMzUsdF8zMykge1xuaWYodF8zNSkgeyBjYih0XzM1KTsgcmV0dXJuOyB9XG5jYWxsYmFjayhudWxsLHRfMzMpO30pO1xufSk7XG50YXNrcy5wdXNoKFxuZnVuY3Rpb24odGVtcGxhdGUsIGNhbGxiYWNrKXtcbnRlbXBsYXRlLnJlbmRlcihjb250ZXh0LmdldFZhcmlhYmxlcygpLCBmcmFtZSwgZnVuY3Rpb24odF8zNix0XzM0KSB7XG5pZih0XzM2KSB7IGNiKHRfMzYpOyByZXR1cm47IH1cbmNhbGxiYWNrKG51bGwsdF8zNCk7fSk7XG59KTtcbnRhc2tzLnB1c2goXG5mdW5jdGlvbihyZXN1bHQsIGNhbGxiYWNrKXtcbm91dHB1dCArPSByZXN1bHQ7XG5jYWxsYmFjayhudWxsKTtcbn0pO1xuZW52LndhdGVyZmFsbCh0YXNrcywgZnVuY3Rpb24oKXtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgICAgICAgXCI7XG59KTtcbn1cbm91dHB1dCArPSBcIlxcbiAgICAgICAgICAgIFwiO1xuO1xufVxufVxuZnJhbWUgPSBmcmFtZS5wb3AoKTtcbm91dHB1dCArPSBcIlxcbiAgICAgICAgXCI7XG47XG59XG5vdXRwdXQgKz0gXCJcXG4gICAgICA8L3NlY3Rpb24+XFxuICAgICAgXCI7XG5pZihydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwKGNvbnRleHQsIGZyYW1lLCBcImFwaV9yZXNwb25zZVwiKSksXCJwb3N0c1wiKSksXCJfbWV0YVwiKSksXCJtYXhfcmVzdWx0c1wiKSA8IHJ1bnRpbWUubWVtYmVyTG9va3VwKChydW50aW1lLm1lbWJlckxvb2t1cCgocnVudGltZS5tZW1iZXJMb29rdXAoKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwiYXBpX3Jlc3BvbnNlXCIpKSxcInBvc3RzXCIpKSxcIl9tZXRhXCIpKSxcInRvdGFsXCIpKSB7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgIDxidXR0b24gZGF0YS1sb2FkLW1vcmUgY2xhc3M9XFxcImxiLWJ1dHRvbiBsb2FkLW1vcmUtcG9zdHNcXFwiPlxcbiAgICAgICAgICAgIFwiO1xub3V0cHV0ICs9IHJ1bnRpbWUuc3VwcHJlc3NWYWx1ZSgobGluZW5vID0gMTI1LCBjb2xubyA9IDIyLCBydW50aW1lLmNhbGxXcmFwKHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAoY29udGV4dCwgZnJhbWUsIFwidHJhbnNsYXRlXCIpLCBcInRyYW5zbGF0ZVwiLCBjb250ZXh0LCBbXCJMb2FkIG1vcmUgcG9zdHNcIl0pKSwgZW52Lm9wdHMuYXV0b2VzY2FwZSk7XG5vdXRwdXQgKz0gXCJcXG4gICAgICAgIDwvYnV0dG9uPlxcbiAgICAgIFwiO1xuO1xufVxub3V0cHV0ICs9IFwiXFxuICA8L2Rpdj5cXG4gIDwhLS0gVGltZWxpbmUgRW5kIC0tPlxcblxcbjwvZGl2PlxcblwiO1xuY2IobnVsbCwgb3V0cHV0KTtcbjtcbn0gY2F0Y2ggKGUpIHtcbiAgY2IocnVudGltZS5oYW5kbGVFcnJvcihlLCBsaW5lbm8sIGNvbG5vKSk7XG59XG59XG5yZXR1cm4ge1xuYl90aW1lbGluZTogYl90aW1lbGluZSxcbnJvb3Q6IHJvb3Rcbn07XG5cbn0pKCk7XG5yZXR1cm4gZnVuY3Rpb24oY3R4LCBjYikgeyByZXR1cm4gbnVuanVja3MucmVuZGVyKFwidGVtcGxhdGUtdGltZWxpbmUuaHRtbFwiLCBjdHgsIGNiKTsgfVxufSkoKTtcbjtcbiIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSB7XG5cdFx0dmFyIGEgPSBmYWN0b3J5KCk7XG5cdFx0Zm9yKHZhciBpIGluIGEpICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgPyBleHBvcnRzIDogcm9vdClbaV0gPSBhW2ldO1xuXHR9XG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDcpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgLyogZ2xvYmFscyBqUXVlcnkgKi9cblxuZXhwb3J0cy5sb3J5ID0gbG9yeTtcblxudmFyIF9kZXRlY3RQcmVmaXhlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cbnZhciBfZGV0ZWN0UHJlZml4ZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGV0ZWN0UHJlZml4ZXMpO1xuXG52YXIgX2RldGVjdFN1cHBvcnRzUGFzc2l2ZSA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfZGV0ZWN0U3VwcG9ydHNQYXNzaXZlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RldGVjdFN1cHBvcnRzUGFzc2l2ZSk7XG5cbnZhciBfZGlzcGF0Y2hFdmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfZGlzcGF0Y2hFdmVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXNwYXRjaEV2ZW50KTtcblxudmFyIF9kZWZhdWx0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cbnZhciBfZGVmYXVsdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVmYXVsdHMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbmZ1bmN0aW9uIGxvcnkoc2xpZGVyLCBvcHRzKSB7XG4gICAgdmFyIHBvc2l0aW9uID0gdm9pZCAwO1xuICAgIHZhciBzbGlkZXNXaWR0aCA9IHZvaWQgMDtcbiAgICB2YXIgZnJhbWVXaWR0aCA9IHZvaWQgMDtcbiAgICB2YXIgc2xpZGVzID0gdm9pZCAwO1xuXG4gICAgLyoqXG4gICAgICogc2xpZGVyIERPTSBlbGVtZW50c1xuICAgICAqL1xuICAgIHZhciBmcmFtZSA9IHZvaWQgMDtcbiAgICB2YXIgc2xpZGVDb250YWluZXIgPSB2b2lkIDA7XG4gICAgdmFyIHByZXZDdHJsID0gdm9pZCAwO1xuICAgIHZhciBuZXh0Q3RybCA9IHZvaWQgMDtcbiAgICB2YXIgcHJlZml4ZXMgPSB2b2lkIDA7XG4gICAgdmFyIHRyYW5zaXRpb25FbmRDYWxsYmFjayA9IHZvaWQgMDtcblxuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgICB2YXIgdG91Y2hFdmVudFBhcmFtcyA9ICgwLCBfZGV0ZWN0U3VwcG9ydHNQYXNzaXZlMi5kZWZhdWx0KSgpID8geyBwYXNzaXZlOiB0cnVlIH0gOiBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIGlmIG9iamVjdCBpcyBqUXVlcnkgY29udmVydCB0byBuYXRpdmUgRE9NIGVsZW1lbnRcbiAgICAgKi9cbiAgICBpZiAodHlwZW9mIGpRdWVyeSAhPT0gJ3VuZGVmaW5lZCcgJiYgc2xpZGVyIGluc3RhbmNlb2YgalF1ZXJ5KSB7XG4gICAgICAgIHNsaWRlciA9IHNsaWRlclswXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBwcml2YXRlXG4gICAgICogc2V0IGFjdGl2ZSBjbGFzcyB0byBlbGVtZW50IHdoaWNoIGlzIHRoZSBjdXJyZW50IHNsaWRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0QWN0aXZlRWxlbWVudChzbGlkZXMsIGN1cnJlbnRJbmRleCkge1xuICAgICAgICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgICAgICAgY2xhc3NOYW1lQWN0aXZlU2xpZGUgPSBfb3B0aW9ucy5jbGFzc05hbWVBY3RpdmVTbGlkZTtcblxuXG4gICAgICAgIHNsaWRlcy5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50LCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZUFjdGl2ZVNsaWRlKSkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWVBY3RpdmVTbGlkZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNsaWRlc1tjdXJyZW50SW5kZXhdLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lQWN0aXZlU2xpZGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHByaXZhdGVcbiAgICAgKiBzZXR1cEluZmluaXRlOiBmdW5jdGlvbiB0byBzZXR1cCBpZiBpbmZpbml0ZSBpcyBzZXRcbiAgICAgKlxuICAgICAqIEBwYXJhbSAge2FycmF5fSBzbGlkZUFycmF5XG4gICAgICogQHJldHVybiB7YXJyYXl9IGFycmF5IG9mIHVwZGF0ZWQgc2xpZGVDb250YWluZXIgZWxlbWVudHNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXR1cEluZmluaXRlKHNsaWRlQXJyYXkpIHtcbiAgICAgICAgdmFyIF9vcHRpb25zMiA9IG9wdGlvbnMsXG4gICAgICAgICAgICBpbmZpbml0ZSA9IF9vcHRpb25zMi5pbmZpbml0ZTtcblxuXG4gICAgICAgIHZhciBmcm9udCA9IHNsaWRlQXJyYXkuc2xpY2UoMCwgaW5maW5pdGUpO1xuICAgICAgICB2YXIgYmFjayA9IHNsaWRlQXJyYXkuc2xpY2Uoc2xpZGVBcnJheS5sZW5ndGggLSBpbmZpbml0ZSwgc2xpZGVBcnJheS5sZW5ndGgpO1xuXG4gICAgICAgIGZyb250LmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHZhciBjbG9uZWQgPSBlbGVtZW50LmNsb25lTm9kZSh0cnVlKTtcblxuICAgICAgICAgICAgc2xpZGVDb250YWluZXIuYXBwZW5kQ2hpbGQoY2xvbmVkKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYmFjay5yZXZlcnNlKCkuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIGNsb25lZCA9IGVsZW1lbnQuY2xvbmVOb2RlKHRydWUpO1xuXG4gICAgICAgICAgICBzbGlkZUNvbnRhaW5lci5pbnNlcnRCZWZvcmUoY2xvbmVkLCBzbGlkZUNvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2xpZGVDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihwcmVmaXhlcy50cmFuc2l0aW9uRW5kLCBvblRyYW5zaXRpb25FbmQpO1xuXG4gICAgICAgIHJldHVybiBzbGljZS5jYWxsKHNsaWRlQ29udGFpbmVyLmNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBbZGlzcGF0Y2hTbGlkZXJFdmVudCBkZXNjcmlwdGlvbl1cbiAgICAgKiBAcmV0dXJuIHtbdHlwZV19IFtkZXNjcmlwdGlvbl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkaXNwYXRjaFNsaWRlckV2ZW50KHBoYXNlLCB0eXBlLCBkZXRhaWwpIHtcbiAgICAgICAgKDAsIF9kaXNwYXRjaEV2ZW50Mi5kZWZhdWx0KShzbGlkZXIsIHBoYXNlICsgJy5sb3J5LicgKyB0eXBlLCBkZXRhaWwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHRyYW5zbGF0ZXMgdG8gYSBnaXZlbiBwb3NpdGlvbiBpbiBhIGdpdmVuIHRpbWUgaW4gbWlsbGlzZWNvbmRzXG4gICAgICpcbiAgICAgKiBAdG8gICAgICAgIHtudW1iZXJ9IG51bWJlciBpbiBwaXhlbHMgd2hlcmUgdG8gdHJhbnNsYXRlIHRvXG4gICAgICogQGR1cmF0aW9uICB7bnVtYmVyfSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHRyYW5zaXN0aW9uXG4gICAgICogQGVhc2UgICAgICB7c3RyaW5nfSBlYXNpbmcgY3NzIHByb3BlcnR5XG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKHRvLCBkdXJhdGlvbiwgZWFzZSkge1xuICAgICAgICB2YXIgc3R5bGUgPSBzbGlkZUNvbnRhaW5lciAmJiBzbGlkZUNvbnRhaW5lci5zdHlsZTtcblxuICAgICAgICBpZiAoc3R5bGUpIHtcbiAgICAgICAgICAgIHN0eWxlW3ByZWZpeGVzLnRyYW5zaXRpb24gKyAnVGltaW5nRnVuY3Rpb24nXSA9IGVhc2U7XG4gICAgICAgICAgICBzdHlsZVtwcmVmaXhlcy50cmFuc2l0aW9uICsgJ0R1cmF0aW9uJ10gPSBkdXJhdGlvbiArICdtcyc7XG5cbiAgICAgICAgICAgIGlmIChwcmVmaXhlcy5oYXNUcmFuc2xhdGUzZCkge1xuICAgICAgICAgICAgICAgIHN0eWxlW3ByZWZpeGVzLnRyYW5zZm9ybV0gPSAndHJhbnNsYXRlM2QoJyArIHRvICsgJ3B4LCAwLCAwKSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0eWxlW3ByZWZpeGVzLnRyYW5zZm9ybV0gPSAndHJhbnNsYXRlKCcgKyB0byArICdweCwgMCknO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc2xpZGVmdW5jdGlvbiBjYWxsZWQgYnkgcHJldiwgbmV4dCAmIHRvdWNoZW5kXG4gICAgICpcbiAgICAgKiBkZXRlcm1pbmUgbmV4dEluZGV4IGFuZCBzbGlkZSB0byBuZXh0IHBvc3Rpb25cbiAgICAgKiB1bmRlciByZXN0cmljdGlvbnMgb2YgdGhlIGRlZmluZWQgb3B0aW9uc1xuICAgICAqXG4gICAgICogQGRpcmVjdGlvbiAge2Jvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2xpZGUobmV4dEluZGV4LCBkaXJlY3Rpb24pIHtcbiAgICAgICAgdmFyIF9vcHRpb25zMyA9IG9wdGlvbnMsXG4gICAgICAgICAgICBzbGlkZVNwZWVkID0gX29wdGlvbnMzLnNsaWRlU3BlZWQsXG4gICAgICAgICAgICBzbGlkZXNUb1Njcm9sbCA9IF9vcHRpb25zMy5zbGlkZXNUb1Njcm9sbCxcbiAgICAgICAgICAgIGluZmluaXRlID0gX29wdGlvbnMzLmluZmluaXRlLFxuICAgICAgICAgICAgcmV3aW5kID0gX29wdGlvbnMzLnJld2luZCxcbiAgICAgICAgICAgIHJld2luZFNwZWVkID0gX29wdGlvbnMzLnJld2luZFNwZWVkLFxuICAgICAgICAgICAgZWFzZSA9IF9vcHRpb25zMy5lYXNlLFxuICAgICAgICAgICAgY2xhc3NOYW1lQWN0aXZlU2xpZGUgPSBfb3B0aW9uczMuY2xhc3NOYW1lQWN0aXZlU2xpZGU7XG5cblxuICAgICAgICB2YXIgZHVyYXRpb24gPSBzbGlkZVNwZWVkO1xuXG4gICAgICAgIHZhciBuZXh0U2xpZGUgPSBkaXJlY3Rpb24gPyBpbmRleCArIDEgOiBpbmRleCAtIDE7XG4gICAgICAgIHZhciBtYXhPZmZzZXQgPSBNYXRoLnJvdW5kKHNsaWRlc1dpZHRoIC0gZnJhbWVXaWR0aCk7XG5cbiAgICAgICAgZGlzcGF0Y2hTbGlkZXJFdmVudCgnYmVmb3JlJywgJ3NsaWRlJywge1xuICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICAgICAgbmV4dFNsaWRlOiBuZXh0U2xpZGVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc2V0IGNvbnRyb2wgY2xhc3Nlc1xuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHByZXZDdHJsKSB7XG4gICAgICAgICAgICBwcmV2Q3RybC5jbGFzc0xpc3QucmVtb3ZlKCdkaXNhYmxlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXh0Q3RybCkge1xuICAgICAgICAgICAgbmV4dEN0cmwuY2xhc3NMaXN0LnJlbW92ZSgnZGlzYWJsZWQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgbmV4dEluZGV4ICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgaWYgKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgIG5leHRJbmRleCA9IGluZGV4ICsgc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5leHRJbmRleCA9IGluZGV4IC0gc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBuZXh0SW5kZXggPSBNYXRoLm1pbihNYXRoLm1heChuZXh0SW5kZXgsIDApLCBzbGlkZXMubGVuZ3RoIC0gMSk7XG5cbiAgICAgICAgaWYgKGluZmluaXRlICYmIGRpcmVjdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXh0SW5kZXggKz0gaW5maW5pdGU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbmV4dE9mZnNldCA9IE1hdGgubWluKE1hdGgubWF4KHNsaWRlc1tuZXh0SW5kZXhdLm9mZnNldExlZnQgKiAtMSwgbWF4T2Zmc2V0ICogLTEpLCAwKTtcblxuICAgICAgICBpZiAocmV3aW5kICYmIE1hdGguYWJzKHBvc2l0aW9uLngpID09PSBtYXhPZmZzZXQgJiYgZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICBuZXh0T2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIG5leHRJbmRleCA9IDA7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHJld2luZFNwZWVkO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRyYW5zbGF0ZSB0byB0aGUgbmV4dE9mZnNldCBieSBhIGRlZmluZWQgZHVyYXRpb24gYW5kIGVhc2UgZnVuY3Rpb25cbiAgICAgICAgICovXG4gICAgICAgIHRyYW5zbGF0ZShuZXh0T2Zmc2V0LCBkdXJhdGlvbiwgZWFzZSk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHVwZGF0ZSB0aGUgcG9zaXRpb24gd2l0aCB0aGUgbmV4dCBwb3NpdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgcG9zaXRpb24ueCA9IG5leHRPZmZzZXQ7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHVwZGF0ZSB0aGUgaW5kZXggd2l0aCB0aGUgbmV4dEluZGV4IG9ubHkgaWZcbiAgICAgICAgICogdGhlIG9mZnNldCBvZiB0aGUgbmV4dEluZGV4IGlzIGluIHRoZSByYW5nZSBvZiB0aGUgbWF4T2Zmc2V0XG4gICAgICAgICAqL1xuICAgICAgICBpZiAoc2xpZGVzW25leHRJbmRleF0ub2Zmc2V0TGVmdCA8PSBtYXhPZmZzZXQpIHtcbiAgICAgICAgICAgIGluZGV4ID0gbmV4dEluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZmluaXRlICYmIChuZXh0SW5kZXggPT09IHNsaWRlcy5sZW5ndGggLSBpbmZpbml0ZSB8fCBuZXh0SW5kZXggPT09IDApKSB7XG4gICAgICAgICAgICBpZiAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBpbmZpbml0ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IHNsaWRlcy5sZW5ndGggLSBpbmZpbml0ZSAqIDI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBvc2l0aW9uLnggPSBzbGlkZXNbaW5kZXhdLm9mZnNldExlZnQgKiAtMTtcblxuICAgICAgICAgICAgdHJhbnNpdGlvbkVuZENhbGxiYWNrID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZShzbGlkZXNbaW5kZXhdLm9mZnNldExlZnQgKiAtMSwgMCwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2xhc3NOYW1lQWN0aXZlU2xpZGUpIHtcbiAgICAgICAgICAgIHNldEFjdGl2ZUVsZW1lbnQoc2xpY2UuY2FsbChzbGlkZXMpLCBpbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogdXBkYXRlIGNsYXNzZXMgZm9yIG5leHQgYW5kIHByZXYgYXJyb3dzXG4gICAgICAgICAqIGJhc2VkIG9uIHVzZXIgc2V0dGluZ3NcbiAgICAgICAgICovXG4gICAgICAgIGlmIChwcmV2Q3RybCAmJiAhaW5maW5pdGUgJiYgbmV4dEluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICBwcmV2Q3RybC5jbGFzc0xpc3QuYWRkKCdkaXNhYmxlZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHRDdHJsICYmICFpbmZpbml0ZSAmJiAhcmV3aW5kICYmIG5leHRJbmRleCArIDEgPT09IHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIG5leHRDdHJsLmNsYXNzTGlzdC5hZGQoJ2Rpc2FibGVkJyk7XG4gICAgICAgIH1cblxuICAgICAgICBkaXNwYXRjaFNsaWRlckV2ZW50KCdhZnRlcicsICdzbGlkZScsIHtcbiAgICAgICAgICAgIGN1cnJlbnRTbGlkZTogaW5kZXhcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcHVibGljXG4gICAgICogc2V0dXAgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXR1cCgpIHtcbiAgICAgICAgZGlzcGF0Y2hTbGlkZXJFdmVudCgnYmVmb3JlJywgJ2luaXQnKTtcblxuICAgICAgICBwcmVmaXhlcyA9ICgwLCBfZGV0ZWN0UHJlZml4ZXMyLmRlZmF1bHQpKCk7XG4gICAgICAgIG9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgX2RlZmF1bHRzMi5kZWZhdWx0LCBvcHRzKTtcblxuICAgICAgICB2YXIgX29wdGlvbnM0ID0gb3B0aW9ucyxcbiAgICAgICAgICAgIGNsYXNzTmFtZUZyYW1lID0gX29wdGlvbnM0LmNsYXNzTmFtZUZyYW1lLFxuICAgICAgICAgICAgY2xhc3NOYW1lU2xpZGVDb250YWluZXIgPSBfb3B0aW9uczQuY2xhc3NOYW1lU2xpZGVDb250YWluZXIsXG4gICAgICAgICAgICBjbGFzc05hbWVQcmV2Q3RybCA9IF9vcHRpb25zNC5jbGFzc05hbWVQcmV2Q3RybCxcbiAgICAgICAgICAgIGNsYXNzTmFtZU5leHRDdHJsID0gX29wdGlvbnM0LmNsYXNzTmFtZU5leHRDdHJsLFxuICAgICAgICAgICAgZW5hYmxlTW91c2VFdmVudHMgPSBfb3B0aW9uczQuZW5hYmxlTW91c2VFdmVudHMsXG4gICAgICAgICAgICBjbGFzc05hbWVBY3RpdmVTbGlkZSA9IF9vcHRpb25zNC5jbGFzc05hbWVBY3RpdmVTbGlkZSxcbiAgICAgICAgICAgIGluaXRpYWxJbmRleCA9IF9vcHRpb25zNC5pbml0aWFsSW5kZXg7XG5cblxuICAgICAgICBpbmRleCA9IGluaXRpYWxJbmRleDtcbiAgICAgICAgZnJhbWUgPSBzbGlkZXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShjbGFzc05hbWVGcmFtZSlbMF07XG4gICAgICAgIHNsaWRlQ29udGFpbmVyID0gZnJhbWUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShjbGFzc05hbWVTbGlkZUNvbnRhaW5lcilbMF07XG4gICAgICAgIHByZXZDdHJsID0gc2xpZGVyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoY2xhc3NOYW1lUHJldkN0cmwpWzBdO1xuICAgICAgICBuZXh0Q3RybCA9IHNsaWRlci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGNsYXNzTmFtZU5leHRDdHJsKVswXTtcblxuICAgICAgICBwb3NpdGlvbiA9IHtcbiAgICAgICAgICAgIHg6IHNsaWRlQ29udGFpbmVyLm9mZnNldExlZnQsXG4gICAgICAgICAgICB5OiBzbGlkZUNvbnRhaW5lci5vZmZzZXRUb3BcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAob3B0aW9ucy5pbmZpbml0ZSkge1xuICAgICAgICAgICAgc2xpZGVzID0gc2V0dXBJbmZpbml0ZShzbGljZS5jYWxsKHNsaWRlQ29udGFpbmVyLmNoaWxkcmVuKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzbGlkZXMgPSBzbGljZS5jYWxsKHNsaWRlQ29udGFpbmVyLmNoaWxkcmVuKTtcblxuICAgICAgICAgICAgaWYgKHByZXZDdHJsKSB7XG4gICAgICAgICAgICAgICAgcHJldkN0cmwuY2xhc3NMaXN0LmFkZCgnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG5leHRDdHJsICYmIHNsaWRlcy5sZW5ndGggPT09IDEgJiYgIW9wdGlvbnMucmV3aW5kKSB7XG4gICAgICAgICAgICAgICAgbmV4dEN0cmwuY2xhc3NMaXN0LmFkZCgnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJlc2V0KCk7XG5cbiAgICAgICAgaWYgKGNsYXNzTmFtZUFjdGl2ZVNsaWRlKSB7XG4gICAgICAgICAgICBzZXRBY3RpdmVFbGVtZW50KHNsaWRlcywgaW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByZXZDdHJsICYmIG5leHRDdHJsKSB7XG4gICAgICAgICAgICBwcmV2Q3RybC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHByZXYpO1xuICAgICAgICAgICAgbmV4dEN0cmwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBuZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZyYW1lLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvblRvdWNoc3RhcnQsIHRvdWNoRXZlbnRQYXJhbXMpO1xuXG4gICAgICAgIGlmIChlbmFibGVNb3VzZUV2ZW50cykge1xuICAgICAgICAgICAgZnJhbWUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25Ub3VjaHN0YXJ0KTtcbiAgICAgICAgICAgIGZyYW1lLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbGljayk7XG4gICAgICAgIH1cblxuICAgICAgICBvcHRpb25zLndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvblJlc2l6ZSk7XG5cbiAgICAgICAgZGlzcGF0Y2hTbGlkZXJFdmVudCgnYWZ0ZXInLCAnaW5pdCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHB1YmxpY1xuICAgICAqIHJlc2V0IGZ1bmN0aW9uOiBjYWxsZWQgb24gcmVzaXplXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICAgIHZhciBfb3B0aW9uczUgPSBvcHRpb25zLFxuICAgICAgICAgICAgaW5maW5pdGUgPSBfb3B0aW9uczUuaW5maW5pdGUsXG4gICAgICAgICAgICBlYXNlID0gX29wdGlvbnM1LmVhc2UsXG4gICAgICAgICAgICByZXdpbmRTcGVlZCA9IF9vcHRpb25zNS5yZXdpbmRTcGVlZCxcbiAgICAgICAgICAgIHJld2luZE9uUmVzaXplID0gX29wdGlvbnM1LnJld2luZE9uUmVzaXplLFxuICAgICAgICAgICAgY2xhc3NOYW1lQWN0aXZlU2xpZGUgPSBfb3B0aW9uczUuY2xhc3NOYW1lQWN0aXZlU2xpZGUsXG4gICAgICAgICAgICBpbml0aWFsSW5kZXggPSBfb3B0aW9uczUuaW5pdGlhbEluZGV4O1xuXG5cbiAgICAgICAgc2xpZGVzV2lkdGggPSBzbGlkZUNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB8fCBzbGlkZUNvbnRhaW5lci5vZmZzZXRXaWR0aDtcbiAgICAgICAgZnJhbWVXaWR0aCA9IGZyYW1lLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHx8IGZyYW1lLm9mZnNldFdpZHRoO1xuXG4gICAgICAgIGlmIChmcmFtZVdpZHRoID09PSBzbGlkZXNXaWR0aCkge1xuICAgICAgICAgICAgc2xpZGVzV2lkdGggPSBzbGlkZXMucmVkdWNlKGZ1bmN0aW9uIChwcmV2aW91c1ZhbHVlLCBzbGlkZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1ZhbHVlICsgc2xpZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggfHwgc2xpZGUub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXdpbmRPblJlc2l6ZSkge1xuICAgICAgICAgICAgaW5kZXggPSBpbml0aWFsSW5kZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlYXNlID0gbnVsbDtcbiAgICAgICAgICAgIHJld2luZFNwZWVkID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmZpbml0ZSkge1xuICAgICAgICAgICAgdHJhbnNsYXRlKHNsaWRlc1tpbmRleCArIGluZmluaXRlXS5vZmZzZXRMZWZ0ICogLTEsIDAsIG51bGwpO1xuXG4gICAgICAgICAgICBpbmRleCA9IGluZGV4ICsgaW5maW5pdGU7XG4gICAgICAgICAgICBwb3NpdGlvbi54ID0gc2xpZGVzW2luZGV4XS5vZmZzZXRMZWZ0ICogLTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cmFuc2xhdGUoc2xpZGVzW2luZGV4XS5vZmZzZXRMZWZ0ICogLTEsIHJld2luZFNwZWVkLCBlYXNlKTtcbiAgICAgICAgICAgIHBvc2l0aW9uLnggPSBzbGlkZXNbaW5kZXhdLm9mZnNldExlZnQgKiAtMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjbGFzc05hbWVBY3RpdmVTbGlkZSkge1xuICAgICAgICAgICAgc2V0QWN0aXZlRWxlbWVudChzbGljZS5jYWxsKHNsaWRlcyksIGluZGV4KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHB1YmxpY1xuICAgICAqIHNsaWRlVG86IGNhbGxlZCBvbiBjbGlja2hhbmRsZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzbGlkZVRvKGluZGV4KSB7XG4gICAgICAgIHNsaWRlKGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBwdWJsaWNcbiAgICAgKiByZXR1cm5JbmRleCBmdW5jdGlvbjogY2FsbGVkIG9uIGNsaWNraGFuZGxlclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJldHVybkluZGV4KCkge1xuICAgICAgICByZXR1cm4gaW5kZXggLSBvcHRpb25zLmluZmluaXRlIHx8IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcHVibGljXG4gICAgICogcHJldiBmdW5jdGlvbjogY2FsbGVkIG9uIGNsaWNraGFuZGxlclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByZXYoKSB7XG4gICAgICAgIHNsaWRlKGZhbHNlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcHVibGljXG4gICAgICogbmV4dCBmdW5jdGlvbjogY2FsbGVkIG9uIGNsaWNraGFuZGxlclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgIHNsaWRlKGZhbHNlLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBwdWJsaWNcbiAgICAgKiBkZXN0cm95IGZ1bmN0aW9uOiBjYWxsZWQgdG8gZ3JhY2VmdWxseSBkZXN0cm95IHRoZSBsb3J5IGluc3RhbmNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgZGlzcGF0Y2hTbGlkZXJFdmVudCgnYmVmb3JlJywgJ2Rlc3Ryb3knKTtcblxuICAgICAgICAvLyByZW1vdmUgZXZlbnQgbGlzdGVuZXJzXG4gICAgICAgIGZyYW1lLnJlbW92ZUV2ZW50TGlzdGVuZXIocHJlZml4ZXMudHJhbnNpdGlvbkVuZCwgb25UcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgZnJhbWUucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uVG91Y2hzdGFydCwgdG91Y2hFdmVudFBhcmFtcyk7XG4gICAgICAgIGZyYW1lLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uVG91Y2htb3ZlLCB0b3VjaEV2ZW50UGFyYW1zKTtcbiAgICAgICAgZnJhbWUucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvblRvdWNoZW5kKTtcbiAgICAgICAgZnJhbWUucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Ub3VjaG1vdmUpO1xuICAgICAgICBmcmFtZS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvblRvdWNoc3RhcnQpO1xuICAgICAgICBmcmFtZS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25Ub3VjaGVuZCk7XG4gICAgICAgIGZyYW1lLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBvblRvdWNoZW5kKTtcbiAgICAgICAgZnJhbWUucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsaWNrKTtcblxuICAgICAgICBvcHRpb25zLndpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvblJlc2l6ZSk7XG5cbiAgICAgICAgaWYgKHByZXZDdHJsKSB7XG4gICAgICAgICAgICBwcmV2Q3RybC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHByZXYpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHRDdHJsKSB7XG4gICAgICAgICAgICBuZXh0Q3RybC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIG5leHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVtb3ZlIGNsb25lZCBzbGlkZXMgaWYgaW5maW5pdGUgaXMgc2V0XG4gICAgICAgIGlmIChvcHRpb25zLmluZmluaXRlKSB7XG4gICAgICAgICAgICBBcnJheS5hcHBseShudWxsLCBBcnJheShvcHRpb25zLmluZmluaXRlKSkuZm9yRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2xpZGVDb250YWluZXIucmVtb3ZlQ2hpbGQoc2xpZGVDb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgc2xpZGVDb250YWluZXIucmVtb3ZlQ2hpbGQoc2xpZGVDb250YWluZXIubGFzdENoaWxkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZGlzcGF0Y2hTbGlkZXJFdmVudCgnYWZ0ZXInLCAnZGVzdHJveScpO1xuICAgIH1cblxuICAgIC8vIGV2ZW50IGhhbmRsaW5nXG5cbiAgICB2YXIgdG91Y2hPZmZzZXQgPSB2b2lkIDA7XG4gICAgdmFyIGRlbHRhID0gdm9pZCAwO1xuICAgIHZhciBpc1Njcm9sbGluZyA9IHZvaWQgMDtcblxuICAgIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgICAgaWYgKHRyYW5zaXRpb25FbmRDYWxsYmFjaykge1xuICAgICAgICAgICAgdHJhbnNpdGlvbkVuZENhbGxiYWNrKCk7XG5cbiAgICAgICAgICAgIHRyYW5zaXRpb25FbmRDYWxsYmFjayA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uVG91Y2hzdGFydChldmVudCkge1xuICAgICAgICB2YXIgX29wdGlvbnM2ID0gb3B0aW9ucyxcbiAgICAgICAgICAgIGVuYWJsZU1vdXNlRXZlbnRzID0gX29wdGlvbnM2LmVuYWJsZU1vdXNlRXZlbnRzO1xuXG4gICAgICAgIHZhciB0b3VjaGVzID0gZXZlbnQudG91Y2hlcyA/IGV2ZW50LnRvdWNoZXNbMF0gOiBldmVudDtcblxuICAgICAgICBpZiAoZW5hYmxlTW91c2VFdmVudHMpIHtcbiAgICAgICAgICAgIGZyYW1lLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uVG91Y2htb3ZlKTtcbiAgICAgICAgICAgIGZyYW1lLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvblRvdWNoZW5kKTtcbiAgICAgICAgICAgIGZyYW1lLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBvblRvdWNoZW5kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZyYW1lLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uVG91Y2htb3ZlLCB0b3VjaEV2ZW50UGFyYW1zKTtcbiAgICAgICAgZnJhbWUuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvblRvdWNoZW5kKTtcblxuICAgICAgICB2YXIgcGFnZVggPSB0b3VjaGVzLnBhZ2VYLFxuICAgICAgICAgICAgcGFnZVkgPSB0b3VjaGVzLnBhZ2VZO1xuXG5cbiAgICAgICAgdG91Y2hPZmZzZXQgPSB7XG4gICAgICAgICAgICB4OiBwYWdlWCxcbiAgICAgICAgICAgIHk6IHBhZ2VZLFxuICAgICAgICAgICAgdGltZTogRGF0ZS5ub3coKVxuICAgICAgICB9O1xuXG4gICAgICAgIGlzU2Nyb2xsaW5nID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGRlbHRhID0ge307XG5cbiAgICAgICAgZGlzcGF0Y2hTbGlkZXJFdmVudCgnb24nLCAndG91Y2hzdGFydCcsIHtcbiAgICAgICAgICAgIGV2ZW50OiBldmVudFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblRvdWNobW92ZShldmVudCkge1xuICAgICAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LnRvdWNoZXMgPyBldmVudC50b3VjaGVzWzBdIDogZXZlbnQ7XG4gICAgICAgIHZhciBwYWdlWCA9IHRvdWNoZXMucGFnZVgsXG4gICAgICAgICAgICBwYWdlWSA9IHRvdWNoZXMucGFnZVk7XG5cblxuICAgICAgICBkZWx0YSA9IHtcbiAgICAgICAgICAgIHg6IHBhZ2VYIC0gdG91Y2hPZmZzZXQueCxcbiAgICAgICAgICAgIHk6IHBhZ2VZIC0gdG91Y2hPZmZzZXQueVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0eXBlb2YgaXNTY3JvbGxpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBpc1Njcm9sbGluZyA9ICEhKGlzU2Nyb2xsaW5nIHx8IE1hdGguYWJzKGRlbHRhLngpIDwgTWF0aC5hYnMoZGVsdGEueSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc1Njcm9sbGluZyAmJiB0b3VjaE9mZnNldCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRyYW5zbGF0ZShwb3NpdGlvbi54ICsgZGVsdGEueCwgMCwgbnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBtYXkgYmVcbiAgICAgICAgZGlzcGF0Y2hTbGlkZXJFdmVudCgnb24nLCAndG91Y2htb3ZlJywge1xuICAgICAgICAgICAgZXZlbnQ6IGV2ZW50XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uVG91Y2hlbmQoZXZlbnQpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHRpbWUgYmV0d2VlbiB0b3VjaHN0YXJ0IGFuZCB0b3VjaGVuZCBpbiBtaWxsaXNlY29uZHNcbiAgICAgICAgICogQGR1cmF0aW9uIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB2YXIgZHVyYXRpb24gPSB0b3VjaE9mZnNldCA/IERhdGUubm93KCkgLSB0b3VjaE9mZnNldC50aW1lIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBpcyB2YWxpZCBpZjpcbiAgICAgICAgICpcbiAgICAgICAgICogLT4gc3dpcGUgYXR0ZW1wdCB0aW1lIGlzIG92ZXIgMzAwIG1zXG4gICAgICAgICAqIGFuZFxuICAgICAgICAgKiAtPiBzd2lwZSBkaXN0YW5jZSBpcyBncmVhdGVyIHRoYW4gMjVweFxuICAgICAgICAgKiBvclxuICAgICAgICAgKiAtPiBzd2lwZSBkaXN0YW5jZSBpcyBtb3JlIHRoZW4gYSB0aGlyZCBvZiB0aGUgc3dpcGUgYXJlYVxuICAgICAgICAgKlxuICAgICAgICAgKiBAaXNWYWxpZFNsaWRlIHtCb29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIGlzVmFsaWQgPSBOdW1iZXIoZHVyYXRpb24pIDwgMzAwICYmIE1hdGguYWJzKGRlbHRhLngpID4gMjUgfHwgTWF0aC5hYnMoZGVsdGEueCkgPiBmcmFtZVdpZHRoIC8gMztcblxuICAgICAgICAvKipcbiAgICAgICAgICogaXMgb3V0IG9mIGJvdW5kcyBpZjpcbiAgICAgICAgICpcbiAgICAgICAgICogLT4gaW5kZXggaXMgMCBhbmQgZGVsdGEgeCBpcyBncmVhdGVyIHRoYW4gMFxuICAgICAgICAgKiBvclxuICAgICAgICAgKiAtPiBpbmRleCBpcyB0aGUgbGFzdCBzbGlkZSBhbmQgZGVsdGEgaXMgc21hbGxlciB0aGFuIDBcbiAgICAgICAgICpcbiAgICAgICAgICogQGlzT3V0T2ZCb3VuZHMge0Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICB2YXIgaXNPdXRPZkJvdW5kcyA9ICFpbmRleCAmJiBkZWx0YS54ID4gMCB8fCBpbmRleCA9PT0gc2xpZGVzLmxlbmd0aCAtIDEgJiYgZGVsdGEueCA8IDA7XG5cbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGRlbHRhLnggPCAwO1xuXG4gICAgICAgIGlmICghaXNTY3JvbGxpbmcpIHtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkICYmICFpc091dE9mQm91bmRzKSB7XG4gICAgICAgICAgICAgICAgc2xpZGUoZmFsc2UsIGRpcmVjdGlvbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZShwb3NpdGlvbi54LCBvcHRpb25zLnNuYXBCYWNrU3BlZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdG91Y2hPZmZzZXQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHJlbW92ZSBldmVudGxpc3RlbmVycyBhZnRlciBzd2lwZSBhdHRlbXB0XG4gICAgICAgICAqL1xuICAgICAgICBmcmFtZS5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvblRvdWNobW92ZSk7XG4gICAgICAgIGZyYW1lLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25Ub3VjaGVuZCk7XG4gICAgICAgIGZyYW1lLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uVG91Y2htb3ZlKTtcbiAgICAgICAgZnJhbWUucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9uVG91Y2hlbmQpO1xuICAgICAgICBmcmFtZS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgb25Ub3VjaGVuZCk7XG5cbiAgICAgICAgZGlzcGF0Y2hTbGlkZXJFdmVudCgnb24nLCAndG91Y2hlbmQnLCB7XG4gICAgICAgICAgICBldmVudDogZXZlbnRcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgICBpZiAoZGVsdGEueCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uUmVzaXplKGV2ZW50KSB7XG4gICAgICAgIHJlc2V0KCk7XG5cbiAgICAgICAgZGlzcGF0Y2hTbGlkZXJFdmVudCgnb24nLCAncmVzaXplJywge1xuICAgICAgICAgICAgZXZlbnQ6IGV2ZW50XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIHRyaWdnZXIgaW5pdGlhbCBzZXR1cFxuICAgIHNldHVwKCk7XG5cbiAgICAvLyBleHBvc2UgcHVibGljIGFwaVxuICAgIHJldHVybiB7XG4gICAgICAgIHNldHVwOiBzZXR1cCxcbiAgICAgICAgcmVzZXQ6IHJlc2V0LFxuICAgICAgICBzbGlkZVRvOiBzbGlkZVRvLFxuICAgICAgICByZXR1cm5JbmRleDogcmV0dXJuSW5kZXgsXG4gICAgICAgIHByZXY6IHByZXYsXG4gICAgICAgIG5leHQ6IG5leHQsXG4gICAgICAgIGRlc3Ryb3k6IGRlc3Ryb3lcbiAgICB9O1xufVxuXG4vKioqLyB9KSxcbi8qIDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRldGVjdFByZWZpeGVzO1xuLyoqXG4gKiBEZXRlY3RpbmcgcHJlZml4ZXMgZm9yIHNhdmluZyB0aW1lIGFuZCBieXRlc1xuICovXG5mdW5jdGlvbiBkZXRlY3RQcmVmaXhlcygpIHtcbiAgICB2YXIgdHJhbnNmb3JtID0gdm9pZCAwO1xuICAgIHZhciB0cmFuc2l0aW9uID0gdm9pZCAwO1xuICAgIHZhciB0cmFuc2l0aW9uRW5kID0gdm9pZCAwO1xuICAgIHZhciBoYXNUcmFuc2xhdGUzZCA9IHZvaWQgMDtcblxuICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ18nKTtcbiAgICAgICAgdmFyIHN0eWxlID0gZWwuc3R5bGU7XG5cbiAgICAgICAgdmFyIHByb3AgPSB2b2lkIDA7XG5cbiAgICAgICAgaWYgKHN0eWxlW3Byb3AgPSAnd2Via2l0VHJhbnNpdGlvbiddID09PSAnJykge1xuICAgICAgICAgICAgdHJhbnNpdGlvbkVuZCA9ICd3ZWJraXRUcmFuc2l0aW9uRW5kJztcbiAgICAgICAgICAgIHRyYW5zaXRpb24gPSBwcm9wO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0eWxlW3Byb3AgPSAndHJhbnNpdGlvbiddID09PSAnJykge1xuICAgICAgICAgICAgdHJhbnNpdGlvbkVuZCA9ICd0cmFuc2l0aW9uZW5kJztcbiAgICAgICAgICAgIHRyYW5zaXRpb24gPSBwcm9wO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0eWxlW3Byb3AgPSAnd2Via2l0VHJhbnNmb3JtJ10gPT09ICcnKSB7XG4gICAgICAgICAgICB0cmFuc2Zvcm0gPSBwcm9wO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0eWxlW3Byb3AgPSAnbXNUcmFuc2Zvcm0nXSA9PT0gJycpIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybSA9IHByb3A7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3R5bGVbcHJvcCA9ICd0cmFuc2Zvcm0nXSA9PT0gJycpIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybSA9IHByb3A7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5ib2R5Lmluc2VydEJlZm9yZShlbCwgbnVsbCk7XG4gICAgICAgIHN0eWxlW3RyYW5zZm9ybV0gPSAndHJhbnNsYXRlM2QoMCwgMCwgMCknO1xuICAgICAgICBoYXNUcmFuc2xhdGUzZCA9ICEhZ2xvYmFsLmdldENvbXB1dGVkU3R5bGUoZWwpLmdldFByb3BlcnR5VmFsdWUodHJhbnNmb3JtKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbCk7XG4gICAgfSkoKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLFxuICAgICAgICB0cmFuc2l0aW9uRW5kOiB0cmFuc2l0aW9uRW5kLFxuICAgICAgICBoYXNUcmFuc2xhdGUzZDogaGFzVHJhbnNsYXRlM2RcbiAgICB9O1xufVxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMCkpKVxuXG4vKioqLyB9KSxcbi8qIDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZGV0ZWN0U3VwcG9ydHNQYXNzaXZlO1xuZnVuY3Rpb24gZGV0ZWN0U3VwcG9ydHNQYXNzaXZlKCkge1xuICAgIHZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcblxuICAgIHRyeSB7XG4gICAgICAgIHZhciBvcHRzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0UGFzc2l2ZScsIG51bGwsIG9wdHMpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGVzdFBhc3NpdmUnLCBudWxsLCBvcHRzKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgcmV0dXJuIHN1cHBvcnRzUGFzc2l2ZTtcbn1cblxuLyoqKi8gfSksXG4vKiA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRpc3BhdGNoRXZlbnQ7XG5cbnZhciBfY3VzdG9tRXZlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG52YXIgX2N1c3RvbUV2ZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2N1c3RvbUV2ZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBkaXNwYXRjaCBjdXN0b20gZXZlbnRzXG4gKlxuICogQHBhcmFtICB7ZWxlbWVudH0gZWwgICAgICAgICBzbGlkZXNob3cgZWxlbWVudFxuICogQHBhcmFtICB7c3RyaW5nfSAgdHlwZSAgICAgICBjdXN0b20gZXZlbnQgbmFtZVxuICogQHBhcmFtICB7b2JqZWN0fSAgZGV0YWlsICAgICBjdXN0b20gZGV0YWlsIGluZm9ybWF0aW9uXG4gKi9cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQodGFyZ2V0LCB0eXBlLCBkZXRhaWwpIHtcbiAgICB2YXIgZXZlbnQgPSBuZXcgX2N1c3RvbUV2ZW50Mi5kZWZhdWx0KHR5cGUsIHtcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcbiAgICAgICAgZGV0YWlsOiBkZXRhaWxcbiAgICB9KTtcblxuICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn1cblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHtcbnZhciBOYXRpdmVDdXN0b21FdmVudCA9IGdsb2JhbC5DdXN0b21FdmVudDtcblxuZnVuY3Rpb24gdXNlTmF0aXZlICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgcCA9IG5ldyBOYXRpdmVDdXN0b21FdmVudCgnY2F0JywgeyBkZXRhaWw6IHsgZm9vOiAnYmFyJyB9IH0pO1xuICAgIHJldHVybiAgJ2NhdCcgPT09IHAudHlwZSAmJiAnYmFyJyA9PT0gcC5kZXRhaWwuZm9vO1xuICB9IGNhdGNoIChlKSB7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENyb3NzLWJyb3dzZXIgYEN1c3RvbUV2ZW50YCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ3VzdG9tRXZlbnQuQ3VzdG9tRXZlbnRcbiAqXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB1c2VOYXRpdmUoKSA/IE5hdGl2ZUN1c3RvbUV2ZW50IDpcblxuLy8gSUUgPj0gOVxuJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBkb2N1bWVudCAmJiAnZnVuY3Rpb24nID09PSB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRXZlbnQgPyBmdW5jdGlvbiBDdXN0b21FdmVudCAodHlwZSwgcGFyYW1zKSB7XG4gIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gIGlmIChwYXJhbXMpIHtcbiAgICBlLmluaXRDdXN0b21FdmVudCh0eXBlLCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUsIHBhcmFtcy5kZXRhaWwpO1xuICB9IGVsc2Uge1xuICAgIGUuaW5pdEN1c3RvbUV2ZW50KHR5cGUsIGZhbHNlLCBmYWxzZSwgdm9pZCAwKTtcbiAgfVxuICByZXR1cm4gZTtcbn0gOlxuXG4vLyBJRSA8PSA4XG5mdW5jdGlvbiBDdXN0b21FdmVudCAodHlwZSwgcGFyYW1zKSB7XG4gIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnRPYmplY3QoKTtcbiAgZS50eXBlID0gdHlwZTtcbiAgaWYgKHBhcmFtcykge1xuICAgIGUuYnViYmxlcyA9IEJvb2xlYW4ocGFyYW1zLmJ1YmJsZXMpO1xuICAgIGUuY2FuY2VsYWJsZSA9IEJvb2xlYW4ocGFyYW1zLmNhbmNlbGFibGUpO1xuICAgIGUuZGV0YWlsID0gcGFyYW1zLmRldGFpbDtcbiAgfSBlbHNlIHtcbiAgICBlLmJ1YmJsZXMgPSBmYWxzZTtcbiAgICBlLmNhbmNlbGFibGUgPSBmYWxzZTtcbiAgICBlLmRldGFpbCA9IHZvaWQgMDtcbiAgfVxuICByZXR1cm4gZTtcbn1cblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMCkpKVxuXG4vKioqLyB9KSxcbi8qIDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHtcbiAgLyoqXG4gICAqIHNsaWRlcyBzY3JvbGxlZCBhdCBvbmNlXG4gICAqIEBzbGlkZXNUb1Njcm9sbCB7TnVtYmVyfVxuICAgKi9cbiAgc2xpZGVzVG9TY3JvbGw6IDEsXG5cbiAgLyoqXG4gICAqIHRpbWUgaW4gbWlsbGlzZWNvbmRzIGZvciB0aGUgYW5pbWF0aW9uIG9mIGEgdmFsaWQgc2xpZGUgYXR0ZW1wdFxuICAgKiBAc2xpZGVTcGVlZCB7TnVtYmVyfVxuICAgKi9cbiAgc2xpZGVTcGVlZDogMzAwLFxuXG4gIC8qKlxuICAgKiB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIGFuaW1hdGlvbiBvZiB0aGUgcmV3aW5kIGFmdGVyIHRoZSBsYXN0IHNsaWRlXG4gICAqIEByZXdpbmRTcGVlZCB7TnVtYmVyfVxuICAgKi9cbiAgcmV3aW5kU3BlZWQ6IDYwMCxcblxuICAvKipcbiAgICogdGltZSBmb3IgdGhlIHNuYXBCYWNrIG9mIHRoZSBzbGlkZXIgaWYgdGhlIHNsaWRlIGF0dGVtcHQgd2FzIG5vdCB2YWxpZFxuICAgKiBAc25hcEJhY2tTcGVlZCB7TnVtYmVyfVxuICAgKi9cbiAgc25hcEJhY2tTcGVlZDogMjAwLFxuXG4gIC8qKlxuICAgKiBCYXNpYyBlYXNpbmcgZnVuY3Rpb25zOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kZS9kb2NzL1dlYi9DU1MvdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb25cbiAgICogY3ViaWMgYmV6aWVyIGVhc2luZyBmdW5jdGlvbnM6IGh0dHA6Ly9lYXNpbmdzLm5ldC9kZVxuICAgKiBAZWFzZSB7U3RyaW5nfVxuICAgKi9cbiAgZWFzZTogJ2Vhc2UnLFxuXG4gIC8qKlxuICAgKiBpZiBzbGlkZXIgcmVhY2hlZCB0aGUgbGFzdCBzbGlkZSwgd2l0aCBuZXh0IGNsaWNrIHRoZSBzbGlkZXIgZ29lcyBiYWNrIHRvIHRoZSBzdGFydGluZGV4LlxuICAgKiB1c2UgaW5maW5pdGUgb3IgcmV3aW5kLCBub3QgYm90aFxuICAgKiBAcmV3aW5kIHtCb29sZWFufVxuICAgKi9cbiAgcmV3aW5kOiBmYWxzZSxcblxuICAvKipcbiAgICogbnVtYmVyIG9mIHZpc2libGUgc2xpZGVzIG9yIGZhbHNlXG4gICAqIHVzZSBpbmZpbml0ZSBvciByZXdpbmQsIG5vdCBib3RoXG4gICAqIEBpbmZpbml0ZSB7bnVtYmVyfVxuICAgKi9cbiAgaW5maW5pdGU6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiB0aGUgc2xpZGUgaW5kZXggdG8gc2hvdyB3aGVuIHRoZSBzbGlkZXIgaXMgaW5pdGlhbGl6ZWQuXG4gICAqIEBpbml0aWFsSW5kZXgge251bWJlcn1cbiAgICovXG4gIGluaXRpYWxJbmRleDogMCxcblxuICAvKipcbiAgICogY2xhc3MgbmFtZSBmb3Igc2xpZGVyIGZyYW1lXG4gICAqIEBjbGFzc05hbWVGcmFtZSB7c3RyaW5nfVxuICAgKi9cbiAgY2xhc3NOYW1lRnJhbWU6ICdqc19mcmFtZScsXG5cbiAgLyoqXG4gICAqIGNsYXNzIG5hbWUgZm9yIHNsaWRlcyBjb250YWluZXJcbiAgICogQGNsYXNzTmFtZVNsaWRlQ29udGFpbmVyIHtzdHJpbmd9XG4gICAqL1xuICBjbGFzc05hbWVTbGlkZUNvbnRhaW5lcjogJ2pzX3NsaWRlcycsXG5cbiAgLyoqXG4gICAqIGNsYXNzIG5hbWUgZm9yIHNsaWRlciBwcmV2IGNvbnRyb2xcbiAgICogQGNsYXNzTmFtZVByZXZDdHJsIHtzdHJpbmd9XG4gICAqL1xuICBjbGFzc05hbWVQcmV2Q3RybDogJ2pzX3ByZXYnLFxuXG4gIC8qKlxuICAgKiBjbGFzcyBuYW1lIGZvciBzbGlkZXIgbmV4dCBjb250cm9sXG4gICAqIEBjbGFzc05hbWVOZXh0Q3RybCB7c3RyaW5nfVxuICAgKi9cbiAgY2xhc3NOYW1lTmV4dEN0cmw6ICdqc19uZXh0JyxcblxuICAvKipcbiAgICogY2xhc3MgbmFtZSBmb3IgY3VycmVudCBhY3RpdmUgc2xpZGVcbiAgICogaWYgZW1wdHlTdHJpbmcgdGhlbiBubyBjbGFzcyBpcyBzZXRcbiAgICogQGNsYXNzTmFtZUFjdGl2ZVNsaWRlIHtzdHJpbmd9XG4gICAqL1xuICBjbGFzc05hbWVBY3RpdmVTbGlkZTogJ2FjdGl2ZScsXG5cbiAgLyoqXG4gICAqIGVuYWJsZXMgbW91c2UgZXZlbnRzIGZvciBzd2lwaW5nIG9uIGRlc2t0b3AgZGV2aWNlc1xuICAgKiBAZW5hYmxlTW91c2VFdmVudHMge2Jvb2xlYW59XG4gICAqL1xuICBlbmFibGVNb3VzZUV2ZW50czogZmFsc2UsXG5cbiAgLyoqXG4gICAqIHdpbmRvdyBpbnN0YW5jZVxuICAgKiBAd2luZG93IHtvYmplY3R9XG4gICAqL1xuICB3aW5kb3c6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogbnVsbCxcblxuICAvKipcbiAgICogSWYgZmFsc2UsIHNsaWRlcyBsb3J5IHRvIHRoZSBmaXJzdCBzbGlkZSBvbiB3aW5kb3cgcmVzaXplLlxuICAgKiBAcmV3aW5kT25SZXNpemUge2Jvb2xlYW59XG4gICAqL1xuICByZXdpbmRPblJlc2l6ZTogdHJ1ZVxufTtcblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxuXG4vKioqLyB9KVxuLyoqKioqKi8gXSk7XG59KTsiLCIhZnVuY3Rpb24oZSxhKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZT9hKHJlcXVpcmUoXCIuLi9tb21lbnRcIikpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wiLi4vbW9tZW50XCJdLGEpOmEoZS5tb21lbnQpfSh0aGlzLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2UuZGVmaW5lTG9jYWxlKFwiYWZcIix7bW9udGhzOlwiSmFudWFyaWVfRmVicnVhcmllX01hYXJ0X0FwcmlsX01laV9KdW5pZV9KdWxpZV9BdWd1c3R1c19TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXNlbWJlclwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIkphbl9GZWJfTXJ0X0Fwcl9NZWlfSnVuX0p1bF9BdWdfU2VwX09rdF9Ob3ZfRGVzXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiU29uZGFnX01hYW5kYWdfRGluc2RhZ19Xb2Vuc2RhZ19Eb25kZXJkYWdfVnJ5ZGFnX1NhdGVyZGFnXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJTb25fTWFhX0Rpbl9Xb2VfRG9uX1ZyeV9TYXRcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJTb19NYV9EaV9Xb19Eb19Wcl9TYVwiLnNwbGl0KFwiX1wiKSxtZXJpZGllbVBhcnNlOi92bXxubS9pLGlzUE06ZnVuY3Rpb24oZSl7cmV0dXJuL15ubSQvaS50ZXN0KGUpfSxtZXJpZGllbTpmdW5jdGlvbihlLGEsXyl7cmV0dXJuIGU8MTI/Xz9cInZtXCI6XCJWTVwiOl8/XCJubVwiOlwiTk1cIn0sbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1ZhbmRhZyBvbV0gTFRcIixuZXh0RGF5OlwiW01cXHhmNHJlIG9tXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbb21dIExUXCIsbGFzdERheTpcIltHaXN0ZXIgb21dIExUXCIsbGFzdFdlZWs6XCJbTGFhc10gZGRkZCBbb21dIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwib29yICVzXCIscGFzdDpcIiVzIGdlbGVkZVwiLHM6XCInbiBwYWFyIHNla29uZGVzXCIsc3M6XCIlZCBzZWtvbmRlc1wiLG06XCInbiBtaW51dXRcIixtbTpcIiVkIG1pbnV0ZVwiLGg6XCInbiB1dXJcIixoaDpcIiVkIHVyZVwiLGQ6XCInbiBkYWdcIixkZDpcIiVkIGRhZVwiLE06XCInbiBtYWFuZFwiLE1NOlwiJWQgbWFhbmRlXCIseTpcIiduIGphYXJcIix5eTpcIiVkIGphYXJcIn0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn0oc3RlfGRlKS8sb3JkaW5hbDpmdW5jdGlvbihlKXtyZXR1cm4gZSsoMT09PWV8fDg9PT1lfHxlPj0yMD9cInN0ZVwiOlwiZGVcIil9LHdlZWs6e2RvdzoxLGRveTo0fX0pLGUuZGVmaW5lTG9jYWxlKFwiYXItZHpcIix7bW9udGhzOlwiXFx1MDYyY1xcdTA2MjdcXHUwNjQ2XFx1MDY0MVxcdTA2NGFfXFx1MDY0MVxcdTA2NGFcXHUwNjQxXFx1MDYzMVxcdTA2NGFfXFx1MDY0NVxcdTA2MjdcXHUwNjMxXFx1MDYzM19cXHUwNjIzXFx1MDY0MVxcdTA2MzFcXHUwNjRhXFx1MDY0NF9cXHUwNjQ1XFx1MDYyN1xcdTA2NGFfXFx1MDYyY1xcdTA2NDhcXHUwNjI3XFx1MDY0Nl9cXHUwNjJjXFx1MDY0OFxcdTA2NGFcXHUwNjQ0XFx1MDY0YVxcdTA2MjlfXFx1MDYyM1xcdTA2NDhcXHUwNjJhX1xcdTA2MzNcXHUwNjI4XFx1MDYyYVxcdTA2NDVcXHUwNjI4XFx1MDYzMV9cXHUwNjIzXFx1MDY0M1xcdTA2MmFcXHUwNjQ4XFx1MDYyOFxcdTA2MzFfXFx1MDY0NlxcdTA2NDhcXHUwNjQxXFx1MDY0NVxcdTA2MjhcXHUwNjMxX1xcdTA2MmZcXHUwNjRhXFx1MDYzM1xcdTA2NDVcXHUwNjI4XFx1MDYzMVwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIlxcdTA2MmNcXHUwNjI3XFx1MDY0NlxcdTA2NDFcXHUwNjRhX1xcdTA2NDFcXHUwNjRhXFx1MDY0MVxcdTA2MzFcXHUwNjRhX1xcdTA2NDVcXHUwNjI3XFx1MDYzMVxcdTA2MzNfXFx1MDYyM1xcdTA2NDFcXHUwNjMxXFx1MDY0YVxcdTA2NDRfXFx1MDY0NVxcdTA2MjdcXHUwNjRhX1xcdTA2MmNcXHUwNjQ4XFx1MDYyN1xcdTA2NDZfXFx1MDYyY1xcdTA2NDhcXHUwNjRhXFx1MDY0NFxcdTA2NGFcXHUwNjI5X1xcdTA2MjNcXHUwNjQ4XFx1MDYyYV9cXHUwNjMzXFx1MDYyOFxcdTA2MmFcXHUwNjQ1XFx1MDYyOFxcdTA2MzFfXFx1MDYyM1xcdTA2NDNcXHUwNjJhXFx1MDY0OFxcdTA2MjhcXHUwNjMxX1xcdTA2NDZcXHUwNjQ4XFx1MDY0MVxcdTA2NDVcXHUwNjI4XFx1MDYzMV9cXHUwNjJmXFx1MDY0YVxcdTA2MzNcXHUwNjQ1XFx1MDYyOFxcdTA2MzFcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJcXHUwNjI3XFx1MDY0NFxcdTA2MjNcXHUwNjJkXFx1MDYyZl9cXHUwNjI3XFx1MDY0NFxcdTA2MjVcXHUwNjJiXFx1MDY0NlxcdTA2NGFcXHUwNjQ2X1xcdTA2MjdcXHUwNjQ0XFx1MDYyYlxcdTA2NDRcXHUwNjI3XFx1MDYyYlxcdTA2MjdcXHUwNjIxX1xcdTA2MjdcXHUwNjQ0XFx1MDYyM1xcdTA2MzFcXHUwNjI4XFx1MDYzOVxcdTA2MjdcXHUwNjIxX1xcdTA2MjdcXHUwNjQ0XFx1MDYyZVxcdTA2NDVcXHUwNjRhXFx1MDYzM19cXHUwNjI3XFx1MDY0NFxcdTA2MmNcXHUwNjQ1XFx1MDYzOVxcdTA2MjlfXFx1MDYyN1xcdTA2NDRcXHUwNjMzXFx1MDYyOFxcdTA2MmFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlxcdTA2MjdcXHUwNjJkXFx1MDYyZl9cXHUwNjI3XFx1MDYyYlxcdTA2NDZcXHUwNjRhXFx1MDY0Nl9cXHUwNjJiXFx1MDY0NFxcdTA2MjdcXHUwNjJiXFx1MDYyN1xcdTA2MjFfXFx1MDYyN1xcdTA2MzFcXHUwNjI4XFx1MDYzOVxcdTA2MjdcXHUwNjIxX1xcdTA2MmVcXHUwNjQ1XFx1MDY0YVxcdTA2MzNfXFx1MDYyY1xcdTA2NDVcXHUwNjM5XFx1MDYyOV9cXHUwNjMzXFx1MDYyOFxcdTA2MmFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJcXHUwNjIzXFx1MDYyZF9cXHUwNjI1XFx1MDYyYl9cXHUwNjJiXFx1MDY0NFxcdTA2MjdfXFx1MDYyM1xcdTA2MzFfXFx1MDYyZVxcdTA2NDVfXFx1MDYyY1xcdTA2NDVfXFx1MDYzM1xcdTA2MjhcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTA2MjdcXHUwNjQ0XFx1MDY0YVxcdTA2NDhcXHUwNjQ1IFxcdTA2MzlcXHUwNjQ0XFx1MDY0OSBcXHUwNjI3XFx1MDY0NFxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MjldIExUXCIsbmV4dERheTpcIltcXHUwNjNhXFx1MDYyZlxcdTA2MjcgXFx1MDYzOVxcdTA2NDRcXHUwNjQ5IFxcdTA2MjdcXHUwNjQ0XFx1MDYzM1xcdTA2MjdcXHUwNjM5XFx1MDYyOV0gTFRcIixuZXh0V2VlazpcImRkZGQgW1xcdTA2MzlcXHUwNjQ0XFx1MDY0OSBcXHUwNjI3XFx1MDY0NFxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MjldIExUXCIsbGFzdERheTpcIltcXHUwNjIzXFx1MDY0NVxcdTA2MzMgXFx1MDYzOVxcdTA2NDRcXHUwNjQ5IFxcdTA2MjdcXHUwNjQ0XFx1MDYzM1xcdTA2MjdcXHUwNjM5XFx1MDYyOV0gTFRcIixsYXN0V2VlazpcImRkZGQgW1xcdTA2MzlcXHUwNjQ0XFx1MDY0OSBcXHUwNjI3XFx1MDY0NFxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MjldIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiXFx1MDY0MVxcdTA2NGEgJXNcIixwYXN0OlwiXFx1MDY0NVxcdTA2NDZcXHUwNjMwICVzXCIsczpcIlxcdTA2MmJcXHUwNjQ4XFx1MDYyN1xcdTA2NDZcIixzczpcIiVkIFxcdTA2MmJcXHUwNjI3XFx1MDY0NlxcdTA2NGFcXHUwNjI5XCIsbTpcIlxcdTA2MmZcXHUwNjQyXFx1MDY0YVxcdTA2NDJcXHUwNjI5XCIsbW06XCIlZCBcXHUwNjJmXFx1MDY0MlxcdTA2MjdcXHUwNjI2XFx1MDY0MlwiLGg6XCJcXHUwNjMzXFx1MDYyN1xcdTA2MzlcXHUwNjI5XCIsaGg6XCIlZCBcXHUwNjMzXFx1MDYyN1xcdTA2MzlcXHUwNjI3XFx1MDYyYVwiLGQ6XCJcXHUwNjRhXFx1MDY0OFxcdTA2NDVcIixkZDpcIiVkIFxcdTA2MjNcXHUwNjRhXFx1MDYyN1xcdTA2NDVcIixNOlwiXFx1MDYzNFxcdTA2NDdcXHUwNjMxXCIsTU06XCIlZCBcXHUwNjIzXFx1MDYzNFxcdTA2NDdcXHUwNjMxXCIseTpcIlxcdTA2MzNcXHUwNjQ2XFx1MDYyOVwiLHl5OlwiJWQgXFx1MDYzM1xcdTA2NDZcXHUwNjQ4XFx1MDYyN1xcdTA2MmFcIn0sd2Vlazp7ZG93OjAsZG95OjR9fSksZS5kZWZpbmVMb2NhbGUoXCJhci1rd1wiLHttb250aHM6XCJcXHUwNjRhXFx1MDY0NlxcdTA2MjdcXHUwNjRhXFx1MDYzMV9cXHUwNjQxXFx1MDYyOFxcdTA2MzFcXHUwNjI3XFx1MDY0YVxcdTA2MzFfXFx1MDY0NVxcdTA2MjdcXHUwNjMxXFx1MDYzM19cXHUwNjIzXFx1MDYyOFxcdTA2MzFcXHUwNjRhXFx1MDY0NF9cXHUwNjQ1XFx1MDYyN1xcdTA2NGFfXFx1MDY0YVxcdTA2NDhcXHUwNjQ2XFx1MDY0YVxcdTA2NDhfXFx1MDY0YVxcdTA2NDhcXHUwNjQ0XFx1MDY0YVxcdTA2NDhcXHUwNjMyX1xcdTA2M2FcXHUwNjM0XFx1MDYyYV9cXHUwNjM0XFx1MDYyYVxcdTA2NDZcXHUwNjI4XFx1MDYzMV9cXHUwNjIzXFx1MDY0M1xcdTA2MmFcXHUwNjQ4XFx1MDYyOFxcdTA2MzFfXFx1MDY0NlxcdTA2NDhcXHUwNjQ2XFx1MDYyOFxcdTA2MzFfXFx1MDYyZlxcdTA2MmNcXHUwNjQ2XFx1MDYyOFxcdTA2MzFcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJcXHUwNjRhXFx1MDY0NlxcdTA2MjdcXHUwNjRhXFx1MDYzMV9cXHUwNjQxXFx1MDYyOFxcdTA2MzFcXHUwNjI3XFx1MDY0YVxcdTA2MzFfXFx1MDY0NVxcdTA2MjdcXHUwNjMxXFx1MDYzM19cXHUwNjIzXFx1MDYyOFxcdTA2MzFcXHUwNjRhXFx1MDY0NF9cXHUwNjQ1XFx1MDYyN1xcdTA2NGFfXFx1MDY0YVxcdTA2NDhcXHUwNjQ2XFx1MDY0YVxcdTA2NDhfXFx1MDY0YVxcdTA2NDhcXHUwNjQ0XFx1MDY0YVxcdTA2NDhcXHUwNjMyX1xcdTA2M2FcXHUwNjM0XFx1MDYyYV9cXHUwNjM0XFx1MDYyYVxcdTA2NDZcXHUwNjI4XFx1MDYzMV9cXHUwNjIzXFx1MDY0M1xcdTA2MmFcXHUwNjQ4XFx1MDYyOFxcdTA2MzFfXFx1MDY0NlxcdTA2NDhcXHUwNjQ2XFx1MDYyOFxcdTA2MzFfXFx1MDYyZlxcdTA2MmNcXHUwNjQ2XFx1MDYyOFxcdTA2MzFcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJcXHUwNjI3XFx1MDY0NFxcdTA2MjNcXHUwNjJkXFx1MDYyZl9cXHUwNjI3XFx1MDY0NFxcdTA2MjVcXHUwNjJhXFx1MDY0NlxcdTA2NGFcXHUwNjQ2X1xcdTA2MjdcXHUwNjQ0XFx1MDYyYlxcdTA2NDRcXHUwNjI3XFx1MDYyYlxcdTA2MjdcXHUwNjIxX1xcdTA2MjdcXHUwNjQ0XFx1MDYyM1xcdTA2MzFcXHUwNjI4XFx1MDYzOVxcdTA2MjdcXHUwNjIxX1xcdTA2MjdcXHUwNjQ0XFx1MDYyZVxcdTA2NDVcXHUwNjRhXFx1MDYzM19cXHUwNjI3XFx1MDY0NFxcdTA2MmNcXHUwNjQ1XFx1MDYzOVxcdTA2MjlfXFx1MDYyN1xcdTA2NDRcXHUwNjMzXFx1MDYyOFxcdTA2MmFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlxcdTA2MjdcXHUwNjJkXFx1MDYyZl9cXHUwNjI3XFx1MDYyYVxcdTA2NDZcXHUwNjRhXFx1MDY0Nl9cXHUwNjJiXFx1MDY0NFxcdTA2MjdcXHUwNjJiXFx1MDYyN1xcdTA2MjFfXFx1MDYyN1xcdTA2MzFcXHUwNjI4XFx1MDYzOVxcdTA2MjdcXHUwNjIxX1xcdTA2MmVcXHUwNjQ1XFx1MDY0YVxcdTA2MzNfXFx1MDYyY1xcdTA2NDVcXHUwNjM5XFx1MDYyOV9cXHUwNjMzXFx1MDYyOFxcdTA2MmFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJcXHUwNjJkX1xcdTA2NDZfXFx1MDYyYl9cXHUwNjMxX1xcdTA2MmVfXFx1MDYyY19cXHUwNjMzXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCBEIE1NTU0gWVlZWSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltcXHUwNjI3XFx1MDY0NFxcdTA2NGFcXHUwNjQ4XFx1MDY0NSBcXHUwNjM5XFx1MDY0NFxcdTA2NDkgXFx1MDYyN1xcdTA2NDRcXHUwNjMzXFx1MDYyN1xcdTA2MzlcXHUwNjI5XSBMVFwiLG5leHREYXk6XCJbXFx1MDYzYVxcdTA2MmZcXHUwNjI3IFxcdTA2MzlcXHUwNjQ0XFx1MDY0OSBcXHUwNjI3XFx1MDY0NFxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MjldIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtcXHUwNjM5XFx1MDY0NFxcdTA2NDkgXFx1MDYyN1xcdTA2NDRcXHUwNjMzXFx1MDYyN1xcdTA2MzlcXHUwNjI5XSBMVFwiLGxhc3REYXk6XCJbXFx1MDYyM1xcdTA2NDVcXHUwNjMzIFxcdTA2MzlcXHUwNjQ0XFx1MDY0OSBcXHUwNjI3XFx1MDY0NFxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MjldIExUXCIsbGFzdFdlZWs6XCJkZGRkIFtcXHUwNjM5XFx1MDY0NFxcdTA2NDkgXFx1MDYyN1xcdTA2NDRcXHUwNjMzXFx1MDYyN1xcdTA2MzlcXHUwNjI5XSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIlxcdTA2NDFcXHUwNjRhICVzXCIscGFzdDpcIlxcdTA2NDVcXHUwNjQ2XFx1MDYzMCAlc1wiLHM6XCJcXHUwNjJiXFx1MDY0OFxcdTA2MjdcXHUwNjQ2XCIsc3M6XCIlZCBcXHUwNjJiXFx1MDYyN1xcdTA2NDZcXHUwNjRhXFx1MDYyOVwiLG06XCJcXHUwNjJmXFx1MDY0MlxcdTA2NGFcXHUwNjQyXFx1MDYyOVwiLG1tOlwiJWQgXFx1MDYyZlxcdTA2NDJcXHUwNjI3XFx1MDYyNlxcdTA2NDJcIixoOlwiXFx1MDYzM1xcdTA2MjdcXHUwNjM5XFx1MDYyOVwiLGhoOlwiJWQgXFx1MDYzM1xcdTA2MjdcXHUwNjM5XFx1MDYyN1xcdTA2MmFcIixkOlwiXFx1MDY0YVxcdTA2NDhcXHUwNjQ1XCIsZGQ6XCIlZCBcXHUwNjIzXFx1MDY0YVxcdTA2MjdcXHUwNjQ1XCIsTTpcIlxcdTA2MzRcXHUwNjQ3XFx1MDYzMVwiLE1NOlwiJWQgXFx1MDYyM1xcdTA2MzRcXHUwNjQ3XFx1MDYzMVwiLHk6XCJcXHUwNjMzXFx1MDY0NlxcdTA2MjlcIix5eTpcIiVkIFxcdTA2MzNcXHUwNjQ2XFx1MDY0OFxcdTA2MjdcXHUwNjJhXCJ9LHdlZWs6e2RvdzowLGRveToxMn19KTt2YXIgYT17MTpcIjFcIiwyOlwiMlwiLDM6XCIzXCIsNDpcIjRcIiw1OlwiNVwiLDY6XCI2XCIsNzpcIjdcIiw4OlwiOFwiLDk6XCI5XCIsMDpcIjBcIn0sXz1mdW5jdGlvbihlKXtyZXR1cm4gMD09PWU/MDoxPT09ZT8xOjI9PT1lPzI6ZSUxMDA+PTMmJmUlMTAwPD0xMD8zOmUlMTAwPj0xMT80OjV9LHM9e3M6W1wiXFx1MDYyM1xcdTA2NDJcXHUwNjQ0IFxcdTA2NDVcXHUwNjQ2IFxcdTA2MmJcXHUwNjI3XFx1MDY0NlxcdTA2NGFcXHUwNjI5XCIsXCJcXHUwNjJiXFx1MDYyN1xcdTA2NDZcXHUwNjRhXFx1MDYyOSBcXHUwNjQ4XFx1MDYyN1xcdTA2MmRcXHUwNjJmXFx1MDYyOVwiLFtcIlxcdTA2MmJcXHUwNjI3XFx1MDY0NlxcdTA2NGFcXHUwNjJhXFx1MDYyN1xcdTA2NDZcIixcIlxcdTA2MmJcXHUwNjI3XFx1MDY0NlxcdTA2NGFcXHUwNjJhXFx1MDY0YVxcdTA2NDZcIl0sXCIlZCBcXHUwNjJiXFx1MDY0OFxcdTA2MjdcXHUwNjQ2XCIsXCIlZCBcXHUwNjJiXFx1MDYyN1xcdTA2NDZcXHUwNjRhXFx1MDYyOVwiLFwiJWQgXFx1MDYyYlxcdTA2MjdcXHUwNjQ2XFx1MDY0YVxcdTA2MjlcIl0sbTpbXCJcXHUwNjIzXFx1MDY0MlxcdTA2NDQgXFx1MDY0NVxcdTA2NDYgXFx1MDYyZlxcdTA2NDJcXHUwNjRhXFx1MDY0MlxcdTA2MjlcIixcIlxcdTA2MmZcXHUwNjQyXFx1MDY0YVxcdTA2NDJcXHUwNjI5IFxcdTA2NDhcXHUwNjI3XFx1MDYyZFxcdTA2MmZcXHUwNjI5XCIsW1wiXFx1MDYyZlxcdTA2NDJcXHUwNjRhXFx1MDY0MlxcdTA2MmFcXHUwNjI3XFx1MDY0NlwiLFwiXFx1MDYyZlxcdTA2NDJcXHUwNjRhXFx1MDY0MlxcdTA2MmFcXHUwNjRhXFx1MDY0NlwiXSxcIiVkIFxcdTA2MmZcXHUwNjQyXFx1MDYyN1xcdTA2MjZcXHUwNjQyXCIsXCIlZCBcXHUwNjJmXFx1MDY0MlxcdTA2NGFcXHUwNjQyXFx1MDYyOVwiLFwiJWQgXFx1MDYyZlxcdTA2NDJcXHUwNjRhXFx1MDY0MlxcdTA2MjlcIl0saDpbXCJcXHUwNjIzXFx1MDY0MlxcdTA2NDQgXFx1MDY0NVxcdTA2NDYgXFx1MDYzM1xcdTA2MjdcXHUwNjM5XFx1MDYyOVwiLFwiXFx1MDYzM1xcdTA2MjdcXHUwNjM5XFx1MDYyOSBcXHUwNjQ4XFx1MDYyN1xcdTA2MmRcXHUwNjJmXFx1MDYyOVwiLFtcIlxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MmFcXHUwNjI3XFx1MDY0NlwiLFwiXFx1MDYzM1xcdTA2MjdcXHUwNjM5XFx1MDYyYVxcdTA2NGFcXHUwNjQ2XCJdLFwiJWQgXFx1MDYzM1xcdTA2MjdcXHUwNjM5XFx1MDYyN1xcdTA2MmFcIixcIiVkIFxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MjlcIixcIiVkIFxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MjlcIl0sZDpbXCJcXHUwNjIzXFx1MDY0MlxcdTA2NDQgXFx1MDY0NVxcdTA2NDYgXFx1MDY0YVxcdTA2NDhcXHUwNjQ1XCIsXCJcXHUwNjRhXFx1MDY0OFxcdTA2NDUgXFx1MDY0OFxcdTA2MjdcXHUwNjJkXFx1MDYyZlwiLFtcIlxcdTA2NGFcXHUwNjQ4XFx1MDY0NVxcdTA2MjdcXHUwNjQ2XCIsXCJcXHUwNjRhXFx1MDY0OFxcdTA2NDVcXHUwNjRhXFx1MDY0NlwiXSxcIiVkIFxcdTA2MjNcXHUwNjRhXFx1MDYyN1xcdTA2NDVcIixcIiVkIFxcdTA2NGFcXHUwNjQ4XFx1MDY0NVxcdTA2NGJcXHUwNjI3XCIsXCIlZCBcXHUwNjRhXFx1MDY0OFxcdTA2NDVcIl0sTTpbXCJcXHUwNjIzXFx1MDY0MlxcdTA2NDQgXFx1MDY0NVxcdTA2NDYgXFx1MDYzNFxcdTA2NDdcXHUwNjMxXCIsXCJcXHUwNjM0XFx1MDY0N1xcdTA2MzEgXFx1MDY0OFxcdTA2MjdcXHUwNjJkXFx1MDYyZlwiLFtcIlxcdTA2MzRcXHUwNjQ3XFx1MDYzMVxcdTA2MjdcXHUwNjQ2XCIsXCJcXHUwNjM0XFx1MDY0N1xcdTA2MzFcXHUwNjRhXFx1MDY0NlwiXSxcIiVkIFxcdTA2MjNcXHUwNjM0XFx1MDY0N1xcdTA2MzFcIixcIiVkIFxcdTA2MzRcXHUwNjQ3XFx1MDYzMVxcdTA2MjdcIixcIiVkIFxcdTA2MzRcXHUwNjQ3XFx1MDYzMVwiXSx5OltcIlxcdTA2MjNcXHUwNjQyXFx1MDY0NCBcXHUwNjQ1XFx1MDY0NiBcXHUwNjM5XFx1MDYyN1xcdTA2NDVcIixcIlxcdTA2MzlcXHUwNjI3XFx1MDY0NSBcXHUwNjQ4XFx1MDYyN1xcdTA2MmRcXHUwNjJmXCIsW1wiXFx1MDYzOVxcdTA2MjdcXHUwNjQ1XFx1MDYyN1xcdTA2NDZcIixcIlxcdTA2MzlcXHUwNjI3XFx1MDY0NVxcdTA2NGFcXHUwNjQ2XCJdLFwiJWQgXFx1MDYyM1xcdTA2MzlcXHUwNjQ4XFx1MDYyN1xcdTA2NDVcIixcIiVkIFxcdTA2MzlcXHUwNjI3XFx1MDY0NVxcdTA2NGJcXHUwNjI3XCIsXCIlZCBcXHUwNjM5XFx1MDYyN1xcdTA2NDVcIl19LGQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKGEsZCx0LG4pe3ZhciByPV8oYSksaT1zW2VdW18oYSldO3JldHVybiAyPT09ciYmKGk9aVtkPzA6MV0pLGkucmVwbGFjZSgvJWQvaSxhKX19LHQ9W1wiXFx1MDY0YVxcdTA2NDZcXHUwNjI3XFx1MDY0YVxcdTA2MzFcIixcIlxcdTA2NDFcXHUwNjI4XFx1MDYzMVxcdTA2MjdcXHUwNjRhXFx1MDYzMVwiLFwiXFx1MDY0NVxcdTA2MjdcXHUwNjMxXFx1MDYzM1wiLFwiXFx1MDYyM1xcdTA2MjhcXHUwNjMxXFx1MDY0YVxcdTA2NDRcIixcIlxcdTA2NDVcXHUwNjI3XFx1MDY0YVxcdTA2NDhcIixcIlxcdTA2NGFcXHUwNjQ4XFx1MDY0NlxcdTA2NGFcXHUwNjQ4XCIsXCJcXHUwNjRhXFx1MDY0OFxcdTA2NDRcXHUwNjRhXFx1MDY0OFwiLFwiXFx1MDYyM1xcdTA2M2FcXHUwNjMzXFx1MDYzN1xcdTA2MzNcIixcIlxcdTA2MzNcXHUwNjI4XFx1MDYyYVxcdTA2NDVcXHUwNjI4XFx1MDYzMVwiLFwiXFx1MDYyM1xcdTA2NDNcXHUwNjJhXFx1MDY0OFxcdTA2MjhcXHUwNjMxXCIsXCJcXHUwNjQ2XFx1MDY0OFxcdTA2NDFcXHUwNjQ1XFx1MDYyOFxcdTA2MzFcIixcIlxcdTA2MmZcXHUwNjRhXFx1MDYzM1xcdTA2NDVcXHUwNjI4XFx1MDYzMVwiXTtlLmRlZmluZUxvY2FsZShcImFyLWx5XCIse21vbnRoczp0LG1vbnRoc1Nob3J0OnQsd2Vla2RheXM6XCJcXHUwNjI3XFx1MDY0NFxcdTA2MjNcXHUwNjJkXFx1MDYyZl9cXHUwNjI3XFx1MDY0NFxcdTA2MjVcXHUwNjJiXFx1MDY0NlxcdTA2NGFcXHUwNjQ2X1xcdTA2MjdcXHUwNjQ0XFx1MDYyYlxcdTA2NDRcXHUwNjI3XFx1MDYyYlxcdTA2MjdcXHUwNjIxX1xcdTA2MjdcXHUwNjQ0XFx1MDYyM1xcdTA2MzFcXHUwNjI4XFx1MDYzOVxcdTA2MjdcXHUwNjIxX1xcdTA2MjdcXHUwNjQ0XFx1MDYyZVxcdTA2NDVcXHUwNjRhXFx1MDYzM19cXHUwNjI3XFx1MDY0NFxcdTA2MmNcXHUwNjQ1XFx1MDYzOVxcdTA2MjlfXFx1MDYyN1xcdTA2NDRcXHUwNjMzXFx1MDYyOFxcdTA2MmFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlxcdTA2MjNcXHUwNjJkXFx1MDYyZl9cXHUwNjI1XFx1MDYyYlxcdTA2NDZcXHUwNjRhXFx1MDY0Nl9cXHUwNjJiXFx1MDY0NFxcdTA2MjdcXHUwNjJiXFx1MDYyN1xcdTA2MjFfXFx1MDYyM1xcdTA2MzFcXHUwNjI4XFx1MDYzOVxcdTA2MjdcXHUwNjIxX1xcdTA2MmVcXHUwNjQ1XFx1MDY0YVxcdTA2MzNfXFx1MDYyY1xcdTA2NDVcXHUwNjM5XFx1MDYyOV9cXHUwNjMzXFx1MDYyOFxcdTA2MmFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJcXHUwNjJkX1xcdTA2NDZfXFx1MDYyYl9cXHUwNjMxX1xcdTA2MmVfXFx1MDYyY19cXHUwNjMzXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkQvXFx1MjAwZk0vXFx1MjAwZllZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCBEIE1NTU0gWVlZWSBISDptbVwifSxtZXJpZGllbVBhcnNlOi9cXHUwNjM1fFxcdTA2NDUvLGlzUE06ZnVuY3Rpb24oZSl7cmV0dXJuXCJcXHUwNjQ1XCI9PT1lfSxtZXJpZGllbTpmdW5jdGlvbihlLGEsXyl7cmV0dXJuIGU8MTI/XCJcXHUwNjM1XCI6XCJcXHUwNjQ1XCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTA2MjdcXHUwNjQ0XFx1MDY0YVxcdTA2NDhcXHUwNjQ1IFxcdTA2MzlcXHUwNjQ2XFx1MDYyZiBcXHUwNjI3XFx1MDY0NFxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MjldIExUXCIsbmV4dERheTpcIltcXHUwNjNhXFx1MDYyZlxcdTA2NGJcXHUwNjI3IFxcdTA2MzlcXHUwNjQ2XFx1MDYyZiBcXHUwNjI3XFx1MDY0NFxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MjldIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtcXHUwNjM5XFx1MDY0NlxcdTA2MmYgXFx1MDYyN1xcdTA2NDRcXHUwNjMzXFx1MDYyN1xcdTA2MzlcXHUwNjI5XSBMVFwiLGxhc3REYXk6XCJbXFx1MDYyM1xcdTA2NDVcXHUwNjMzIFxcdTA2MzlcXHUwNjQ2XFx1MDYyZiBcXHUwNjI3XFx1MDY0NFxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MjldIExUXCIsbGFzdFdlZWs6XCJkZGRkIFtcXHUwNjM5XFx1MDY0NlxcdTA2MmYgXFx1MDYyN1xcdTA2NDRcXHUwNjMzXFx1MDYyN1xcdTA2MzlcXHUwNjI5XSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIlxcdTA2MjhcXHUwNjM5XFx1MDYyZiAlc1wiLHBhc3Q6XCJcXHUwNjQ1XFx1MDY0NlxcdTA2MzAgJXNcIixzOmQoXCJzXCIpLHNzOmQoXCJzXCIpLG06ZChcIm1cIiksbW06ZChcIm1cIiksaDpkKFwiaFwiKSxoaDpkKFwiaFwiKSxkOmQoXCJkXCIpLGRkOmQoXCJkXCIpLE06ZChcIk1cIiksTU06ZChcIk1cIikseTpkKFwieVwiKSx5eTpkKFwieVwiKX0scHJlcGFyc2U6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvXFx1MDYwYy9nLFwiLFwiKX0scG9zdGZvcm1hdDpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9cXGQvZyxmdW5jdGlvbihlKXtyZXR1cm4gYVtlXX0pLnJlcGxhY2UoLywvZyxcIlxcdTA2MGNcIil9LHdlZWs6e2Rvdzo2LGRveToxMn19KSxlLmRlZmluZUxvY2FsZShcImFyLW1hXCIse21vbnRoczpcIlxcdTA2NGFcXHUwNjQ2XFx1MDYyN1xcdTA2NGFcXHUwNjMxX1xcdTA2NDFcXHUwNjI4XFx1MDYzMVxcdTA2MjdcXHUwNjRhXFx1MDYzMV9cXHUwNjQ1XFx1MDYyN1xcdTA2MzFcXHUwNjMzX1xcdTA2MjNcXHUwNjI4XFx1MDYzMVxcdTA2NGFcXHUwNjQ0X1xcdTA2NDVcXHUwNjI3XFx1MDY0YV9cXHUwNjRhXFx1MDY0OFxcdTA2NDZcXHUwNjRhXFx1MDY0OF9cXHUwNjRhXFx1MDY0OFxcdTA2NDRcXHUwNjRhXFx1MDY0OFxcdTA2MzJfXFx1MDYzYVxcdTA2MzRcXHUwNjJhX1xcdTA2MzRcXHUwNjJhXFx1MDY0NlxcdTA2MjhcXHUwNjMxX1xcdTA2MjNcXHUwNjQzXFx1MDYyYVxcdTA2NDhcXHUwNjI4XFx1MDYzMV9cXHUwNjQ2XFx1MDY0OFxcdTA2NDZcXHUwNjI4XFx1MDYzMV9cXHUwNjJmXFx1MDYyY1xcdTA2NDZcXHUwNjI4XFx1MDYzMVwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIlxcdTA2NGFcXHUwNjQ2XFx1MDYyN1xcdTA2NGFcXHUwNjMxX1xcdTA2NDFcXHUwNjI4XFx1MDYzMVxcdTA2MjdcXHUwNjRhXFx1MDYzMV9cXHUwNjQ1XFx1MDYyN1xcdTA2MzFcXHUwNjMzX1xcdTA2MjNcXHUwNjI4XFx1MDYzMVxcdTA2NGFcXHUwNjQ0X1xcdTA2NDVcXHUwNjI3XFx1MDY0YV9cXHUwNjRhXFx1MDY0OFxcdTA2NDZcXHUwNjRhXFx1MDY0OF9cXHUwNjRhXFx1MDY0OFxcdTA2NDRcXHUwNjRhXFx1MDY0OFxcdTA2MzJfXFx1MDYzYVxcdTA2MzRcXHUwNjJhX1xcdTA2MzRcXHUwNjJhXFx1MDY0NlxcdTA2MjhcXHUwNjMxX1xcdTA2MjNcXHUwNjQzXFx1MDYyYVxcdTA2NDhcXHUwNjI4XFx1MDYzMV9cXHUwNjQ2XFx1MDY0OFxcdTA2NDZcXHUwNjI4XFx1MDYzMV9cXHUwNjJmXFx1MDYyY1xcdTA2NDZcXHUwNjI4XFx1MDYzMVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIlxcdTA2MjdcXHUwNjQ0XFx1MDYyM1xcdTA2MmRcXHUwNjJmX1xcdTA2MjdcXHUwNjQ0XFx1MDYyNVxcdTA2MmFcXHUwNjQ2XFx1MDY0YVxcdTA2NDZfXFx1MDYyN1xcdTA2NDRcXHUwNjJiXFx1MDY0NFxcdTA2MjdcXHUwNjJiXFx1MDYyN1xcdTA2MjFfXFx1MDYyN1xcdTA2NDRcXHUwNjIzXFx1MDYzMVxcdTA2MjhcXHUwNjM5XFx1MDYyN1xcdTA2MjFfXFx1MDYyN1xcdTA2NDRcXHUwNjJlXFx1MDY0NVxcdTA2NGFcXHUwNjMzX1xcdTA2MjdcXHUwNjQ0XFx1MDYyY1xcdTA2NDVcXHUwNjM5XFx1MDYyOV9cXHUwNjI3XFx1MDY0NFxcdTA2MzNcXHUwNjI4XFx1MDYyYVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiXFx1MDYyN1xcdTA2MmRcXHUwNjJmX1xcdTA2MjdcXHUwNjJhXFx1MDY0NlxcdTA2NGFcXHUwNjQ2X1xcdTA2MmJcXHUwNjQ0XFx1MDYyN1xcdTA2MmJcXHUwNjI3XFx1MDYyMV9cXHUwNjI3XFx1MDYzMVxcdTA2MjhcXHUwNjM5XFx1MDYyN1xcdTA2MjFfXFx1MDYyZVxcdTA2NDVcXHUwNjRhXFx1MDYzM19cXHUwNjJjXFx1MDY0NVxcdTA2MzlcXHUwNjI5X1xcdTA2MzNcXHUwNjI4XFx1MDYyYVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIlxcdTA2MmRfXFx1MDY0Nl9cXHUwNjJiX1xcdTA2MzFfXFx1MDYyZV9cXHUwNjJjX1xcdTA2MzNcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTA2MjdcXHUwNjQ0XFx1MDY0YVxcdTA2NDhcXHUwNjQ1IFxcdTA2MzlcXHUwNjQ0XFx1MDY0OSBcXHUwNjI3XFx1MDY0NFxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MjldIExUXCIsbmV4dERheTpcIltcXHUwNjNhXFx1MDYyZlxcdTA2MjcgXFx1MDYzOVxcdTA2NDRcXHUwNjQ5IFxcdTA2MjdcXHUwNjQ0XFx1MDYzM1xcdTA2MjdcXHUwNjM5XFx1MDYyOV0gTFRcIixuZXh0V2VlazpcImRkZGQgW1xcdTA2MzlcXHUwNjQ0XFx1MDY0OSBcXHUwNjI3XFx1MDY0NFxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MjldIExUXCIsbGFzdERheTpcIltcXHUwNjIzXFx1MDY0NVxcdTA2MzMgXFx1MDYzOVxcdTA2NDRcXHUwNjQ5IFxcdTA2MjdcXHUwNjQ0XFx1MDYzM1xcdTA2MjdcXHUwNjM5XFx1MDYyOV0gTFRcIixsYXN0V2VlazpcImRkZGQgW1xcdTA2MzlcXHUwNjQ0XFx1MDY0OSBcXHUwNjI3XFx1MDY0NFxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MjldIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiXFx1MDY0MVxcdTA2NGEgJXNcIixwYXN0OlwiXFx1MDY0NVxcdTA2NDZcXHUwNjMwICVzXCIsczpcIlxcdTA2MmJcXHUwNjQ4XFx1MDYyN1xcdTA2NDZcIixzczpcIiVkIFxcdTA2MmJcXHUwNjI3XFx1MDY0NlxcdTA2NGFcXHUwNjI5XCIsbTpcIlxcdTA2MmZcXHUwNjQyXFx1MDY0YVxcdTA2NDJcXHUwNjI5XCIsbW06XCIlZCBcXHUwNjJmXFx1MDY0MlxcdTA2MjdcXHUwNjI2XFx1MDY0MlwiLGg6XCJcXHUwNjMzXFx1MDYyN1xcdTA2MzlcXHUwNjI5XCIsaGg6XCIlZCBcXHUwNjMzXFx1MDYyN1xcdTA2MzlcXHUwNjI3XFx1MDYyYVwiLGQ6XCJcXHUwNjRhXFx1MDY0OFxcdTA2NDVcIixkZDpcIiVkIFxcdTA2MjNcXHUwNjRhXFx1MDYyN1xcdTA2NDVcIixNOlwiXFx1MDYzNFxcdTA2NDdcXHUwNjMxXCIsTU06XCIlZCBcXHUwNjIzXFx1MDYzNFxcdTA2NDdcXHUwNjMxXCIseTpcIlxcdTA2MzNcXHUwNjQ2XFx1MDYyOVwiLHl5OlwiJWQgXFx1MDYzM1xcdTA2NDZcXHUwNjQ4XFx1MDYyN1xcdTA2MmFcIn0sd2Vlazp7ZG93OjYsZG95OjEyfX0pO3ZhciBuPXsxOlwiXFx1MDY2MVwiLDI6XCJcXHUwNjYyXCIsMzpcIlxcdTA2NjNcIiw0OlwiXFx1MDY2NFwiLDU6XCJcXHUwNjY1XCIsNjpcIlxcdTA2NjZcIiw3OlwiXFx1MDY2N1wiLDg6XCJcXHUwNjY4XCIsOTpcIlxcdTA2NjlcIiwwOlwiXFx1MDY2MFwifSxyPXtcIlxcdTA2NjFcIjpcIjFcIixcIlxcdTA2NjJcIjpcIjJcIixcIlxcdTA2NjNcIjpcIjNcIixcIlxcdTA2NjRcIjpcIjRcIixcIlxcdTA2NjVcIjpcIjVcIixcIlxcdTA2NjZcIjpcIjZcIixcIlxcdTA2NjdcIjpcIjdcIixcIlxcdTA2NjhcIjpcIjhcIixcIlxcdTA2NjlcIjpcIjlcIixcIlxcdTA2NjBcIjpcIjBcIn07ZS5kZWZpbmVMb2NhbGUoXCJhci1zYVwiLHttb250aHM6XCJcXHUwNjRhXFx1MDY0NlxcdTA2MjdcXHUwNjRhXFx1MDYzMV9cXHUwNjQxXFx1MDYyOFxcdTA2MzFcXHUwNjI3XFx1MDY0YVxcdTA2MzFfXFx1MDY0NVxcdTA2MjdcXHUwNjMxXFx1MDYzM19cXHUwNjIzXFx1MDYyOFxcdTA2MzFcXHUwNjRhXFx1MDY0NF9cXHUwNjQ1XFx1MDYyN1xcdTA2NGFcXHUwNjQ4X1xcdTA2NGFcXHUwNjQ4XFx1MDY0NlxcdTA2NGFcXHUwNjQ4X1xcdTA2NGFcXHUwNjQ4XFx1MDY0NFxcdTA2NGFcXHUwNjQ4X1xcdTA2MjNcXHUwNjNhXFx1MDYzM1xcdTA2MzdcXHUwNjMzX1xcdTA2MzNcXHUwNjI4XFx1MDYyYVxcdTA2NDVcXHUwNjI4XFx1MDYzMV9cXHUwNjIzXFx1MDY0M1xcdTA2MmFcXHUwNjQ4XFx1MDYyOFxcdTA2MzFfXFx1MDY0NlxcdTA2NDhcXHUwNjQxXFx1MDY0NVxcdTA2MjhcXHUwNjMxX1xcdTA2MmZcXHUwNjRhXFx1MDYzM1xcdTA2NDVcXHUwNjI4XFx1MDYzMVwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIlxcdTA2NGFcXHUwNjQ2XFx1MDYyN1xcdTA2NGFcXHUwNjMxX1xcdTA2NDFcXHUwNjI4XFx1MDYzMVxcdTA2MjdcXHUwNjRhXFx1MDYzMV9cXHUwNjQ1XFx1MDYyN1xcdTA2MzFcXHUwNjMzX1xcdTA2MjNcXHUwNjI4XFx1MDYzMVxcdTA2NGFcXHUwNjQ0X1xcdTA2NDVcXHUwNjI3XFx1MDY0YVxcdTA2NDhfXFx1MDY0YVxcdTA2NDhcXHUwNjQ2XFx1MDY0YVxcdTA2NDhfXFx1MDY0YVxcdTA2NDhcXHUwNjQ0XFx1MDY0YVxcdTA2NDhfXFx1MDYyM1xcdTA2M2FcXHUwNjMzXFx1MDYzN1xcdTA2MzNfXFx1MDYzM1xcdTA2MjhcXHUwNjJhXFx1MDY0NVxcdTA2MjhcXHUwNjMxX1xcdTA2MjNcXHUwNjQzXFx1MDYyYVxcdTA2NDhcXHUwNjI4XFx1MDYzMV9cXHUwNjQ2XFx1MDY0OFxcdTA2NDFcXHUwNjQ1XFx1MDYyOFxcdTA2MzFfXFx1MDYyZlxcdTA2NGFcXHUwNjMzXFx1MDY0NVxcdTA2MjhcXHUwNjMxXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiXFx1MDYyN1xcdTA2NDRcXHUwNjIzXFx1MDYyZFxcdTA2MmZfXFx1MDYyN1xcdTA2NDRcXHUwNjI1XFx1MDYyYlxcdTA2NDZcXHUwNjRhXFx1MDY0Nl9cXHUwNjI3XFx1MDY0NFxcdTA2MmJcXHUwNjQ0XFx1MDYyN1xcdTA2MmJcXHUwNjI3XFx1MDYyMV9cXHUwNjI3XFx1MDY0NFxcdTA2MjNcXHUwNjMxXFx1MDYyOFxcdTA2MzlcXHUwNjI3XFx1MDYyMV9cXHUwNjI3XFx1MDY0NFxcdTA2MmVcXHUwNjQ1XFx1MDY0YVxcdTA2MzNfXFx1MDYyN1xcdTA2NDRcXHUwNjJjXFx1MDY0NVxcdTA2MzlcXHUwNjI5X1xcdTA2MjdcXHUwNjQ0XFx1MDYzM1xcdTA2MjhcXHUwNjJhXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJcXHUwNjIzXFx1MDYyZFxcdTA2MmZfXFx1MDYyNVxcdTA2MmJcXHUwNjQ2XFx1MDY0YVxcdTA2NDZfXFx1MDYyYlxcdTA2NDRcXHUwNjI3XFx1MDYyYlxcdTA2MjdcXHUwNjIxX1xcdTA2MjNcXHUwNjMxXFx1MDYyOFxcdTA2MzlcXHUwNjI3XFx1MDYyMV9cXHUwNjJlXFx1MDY0NVxcdTA2NGFcXHUwNjMzX1xcdTA2MmNcXHUwNjQ1XFx1MDYzOVxcdTA2MjlfXFx1MDYzM1xcdTA2MjhcXHUwNjJhXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiXFx1MDYyZF9cXHUwNjQ2X1xcdTA2MmJfXFx1MDYzMV9cXHUwNjJlX1xcdTA2MmNfXFx1MDYzM1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQgRCBNTU1NIFlZWVkgSEg6bW1cIn0sbWVyaWRpZW1QYXJzZTovXFx1MDYzNXxcXHUwNjQ1Lyxpc1BNOmZ1bmN0aW9uKGUpe3JldHVyblwiXFx1MDY0NVwiPT09ZX0sbWVyaWRpZW06ZnVuY3Rpb24oZSxhLF8pe3JldHVybiBlPDEyP1wiXFx1MDYzNVwiOlwiXFx1MDY0NVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltcXHUwNjI3XFx1MDY0NFxcdTA2NGFcXHUwNjQ4XFx1MDY0NSBcXHUwNjM5XFx1MDY0NFxcdTA2NDkgXFx1MDYyN1xcdTA2NDRcXHUwNjMzXFx1MDYyN1xcdTA2MzlcXHUwNjI5XSBMVFwiLG5leHREYXk6XCJbXFx1MDYzYVxcdTA2MmZcXHUwNjI3IFxcdTA2MzlcXHUwNjQ0XFx1MDY0OSBcXHUwNjI3XFx1MDY0NFxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MjldIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtcXHUwNjM5XFx1MDY0NFxcdTA2NDkgXFx1MDYyN1xcdTA2NDRcXHUwNjMzXFx1MDYyN1xcdTA2MzlcXHUwNjI5XSBMVFwiLGxhc3REYXk6XCJbXFx1MDYyM1xcdTA2NDVcXHUwNjMzIFxcdTA2MzlcXHUwNjQ0XFx1MDY0OSBcXHUwNjI3XFx1MDY0NFxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MjldIExUXCIsbGFzdFdlZWs6XCJkZGRkIFtcXHUwNjM5XFx1MDY0NFxcdTA2NDkgXFx1MDYyN1xcdTA2NDRcXHUwNjMzXFx1MDYyN1xcdTA2MzlcXHUwNjI5XSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIlxcdTA2NDFcXHUwNjRhICVzXCIscGFzdDpcIlxcdTA2NDVcXHUwNjQ2XFx1MDYzMCAlc1wiLHM6XCJcXHUwNjJiXFx1MDY0OFxcdTA2MjdcXHUwNjQ2XCIsc3M6XCIlZCBcXHUwNjJiXFx1MDYyN1xcdTA2NDZcXHUwNjRhXFx1MDYyOVwiLG06XCJcXHUwNjJmXFx1MDY0MlxcdTA2NGFcXHUwNjQyXFx1MDYyOVwiLG1tOlwiJWQgXFx1MDYyZlxcdTA2NDJcXHUwNjI3XFx1MDYyNlxcdTA2NDJcIixoOlwiXFx1MDYzM1xcdTA2MjdcXHUwNjM5XFx1MDYyOVwiLGhoOlwiJWQgXFx1MDYzM1xcdTA2MjdcXHUwNjM5XFx1MDYyN1xcdTA2MmFcIixkOlwiXFx1MDY0YVxcdTA2NDhcXHUwNjQ1XCIsZGQ6XCIlZCBcXHUwNjIzXFx1MDY0YVxcdTA2MjdcXHUwNjQ1XCIsTTpcIlxcdTA2MzRcXHUwNjQ3XFx1MDYzMVwiLE1NOlwiJWQgXFx1MDYyM1xcdTA2MzRcXHUwNjQ3XFx1MDYzMVwiLHk6XCJcXHUwNjMzXFx1MDY0NlxcdTA2MjlcIix5eTpcIiVkIFxcdTA2MzNcXHUwNjQ2XFx1MDY0OFxcdTA2MjdcXHUwNjJhXCJ9LHByZXBhcnNlOmZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoL1tcXHUwNjYxXFx1MDY2MlxcdTA2NjNcXHUwNjY0XFx1MDY2NVxcdTA2NjZcXHUwNjY3XFx1MDY2OFxcdTA2NjlcXHUwNjYwXS9nLGZ1bmN0aW9uKGUpe3JldHVybiByW2VdfSkucmVwbGFjZSgvXFx1MDYwYy9nLFwiLFwiKX0scG9zdGZvcm1hdDpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9cXGQvZyxmdW5jdGlvbihlKXtyZXR1cm4gbltlXX0pLnJlcGxhY2UoLywvZyxcIlxcdTA2MGNcIil9LHdlZWs6e2RvdzowLGRveTo2fX0pLGUuZGVmaW5lTG9jYWxlKFwiYXItdG5cIix7bW9udGhzOlwiXFx1MDYyY1xcdTA2MjdcXHUwNjQ2XFx1MDY0MVxcdTA2NGFfXFx1MDY0MVxcdTA2NGFcXHUwNjQxXFx1MDYzMVxcdTA2NGFfXFx1MDY0NVxcdTA2MjdcXHUwNjMxXFx1MDYzM19cXHUwNjIzXFx1MDY0MVxcdTA2MzFcXHUwNjRhXFx1MDY0NF9cXHUwNjQ1XFx1MDYyN1xcdTA2NGFfXFx1MDYyY1xcdTA2NDhcXHUwNjI3XFx1MDY0Nl9cXHUwNjJjXFx1MDY0OFxcdTA2NGFcXHUwNjQ0XFx1MDY0YVxcdTA2MjlfXFx1MDYyM1xcdTA2NDhcXHUwNjJhX1xcdTA2MzNcXHUwNjI4XFx1MDYyYVxcdTA2NDVcXHUwNjI4XFx1MDYzMV9cXHUwNjIzXFx1MDY0M1xcdTA2MmFcXHUwNjQ4XFx1MDYyOFxcdTA2MzFfXFx1MDY0NlxcdTA2NDhcXHUwNjQxXFx1MDY0NVxcdTA2MjhcXHUwNjMxX1xcdTA2MmZcXHUwNjRhXFx1MDYzM1xcdTA2NDVcXHUwNjI4XFx1MDYzMVwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIlxcdTA2MmNcXHUwNjI3XFx1MDY0NlxcdTA2NDFcXHUwNjRhX1xcdTA2NDFcXHUwNjRhXFx1MDY0MVxcdTA2MzFcXHUwNjRhX1xcdTA2NDVcXHUwNjI3XFx1MDYzMVxcdTA2MzNfXFx1MDYyM1xcdTA2NDFcXHUwNjMxXFx1MDY0YVxcdTA2NDRfXFx1MDY0NVxcdTA2MjdcXHUwNjRhX1xcdTA2MmNcXHUwNjQ4XFx1MDYyN1xcdTA2NDZfXFx1MDYyY1xcdTA2NDhcXHUwNjRhXFx1MDY0NFxcdTA2NGFcXHUwNjI5X1xcdTA2MjNcXHUwNjQ4XFx1MDYyYV9cXHUwNjMzXFx1MDYyOFxcdTA2MmFcXHUwNjQ1XFx1MDYyOFxcdTA2MzFfXFx1MDYyM1xcdTA2NDNcXHUwNjJhXFx1MDY0OFxcdTA2MjhcXHUwNjMxX1xcdTA2NDZcXHUwNjQ4XFx1MDY0MVxcdTA2NDVcXHUwNjI4XFx1MDYzMV9cXHUwNjJmXFx1MDY0YVxcdTA2MzNcXHUwNjQ1XFx1MDYyOFxcdTA2MzFcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJcXHUwNjI3XFx1MDY0NFxcdTA2MjNcXHUwNjJkXFx1MDYyZl9cXHUwNjI3XFx1MDY0NFxcdTA2MjVcXHUwNjJiXFx1MDY0NlxcdTA2NGFcXHUwNjQ2X1xcdTA2MjdcXHUwNjQ0XFx1MDYyYlxcdTA2NDRcXHUwNjI3XFx1MDYyYlxcdTA2MjdcXHUwNjIxX1xcdTA2MjdcXHUwNjQ0XFx1MDYyM1xcdTA2MzFcXHUwNjI4XFx1MDYzOVxcdTA2MjdcXHUwNjIxX1xcdTA2MjdcXHUwNjQ0XFx1MDYyZVxcdTA2NDVcXHUwNjRhXFx1MDYzM19cXHUwNjI3XFx1MDY0NFxcdTA2MmNcXHUwNjQ1XFx1MDYzOVxcdTA2MjlfXFx1MDYyN1xcdTA2NDRcXHUwNjMzXFx1MDYyOFxcdTA2MmFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlxcdTA2MjNcXHUwNjJkXFx1MDYyZl9cXHUwNjI1XFx1MDYyYlxcdTA2NDZcXHUwNjRhXFx1MDY0Nl9cXHUwNjJiXFx1MDY0NFxcdTA2MjdcXHUwNjJiXFx1MDYyN1xcdTA2MjFfXFx1MDYyM1xcdTA2MzFcXHUwNjI4XFx1MDYzOVxcdTA2MjdcXHUwNjIxX1xcdTA2MmVcXHUwNjQ1XFx1MDY0YVxcdTA2MzNfXFx1MDYyY1xcdTA2NDVcXHUwNjM5XFx1MDYyOV9cXHUwNjMzXFx1MDYyOFxcdTA2MmFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJcXHUwNjJkX1xcdTA2NDZfXFx1MDYyYl9cXHUwNjMxX1xcdTA2MmVfXFx1MDYyY19cXHUwNjMzXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCBEIE1NTU0gWVlZWSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltcXHUwNjI3XFx1MDY0NFxcdTA2NGFcXHUwNjQ4XFx1MDY0NSBcXHUwNjM5XFx1MDY0NFxcdTA2NDkgXFx1MDYyN1xcdTA2NDRcXHUwNjMzXFx1MDYyN1xcdTA2MzlcXHUwNjI5XSBMVFwiLG5leHREYXk6XCJbXFx1MDYzYVxcdTA2MmZcXHUwNjI3IFxcdTA2MzlcXHUwNjQ0XFx1MDY0OSBcXHUwNjI3XFx1MDY0NFxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MjldIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtcXHUwNjM5XFx1MDY0NFxcdTA2NDkgXFx1MDYyN1xcdTA2NDRcXHUwNjMzXFx1MDYyN1xcdTA2MzlcXHUwNjI5XSBMVFwiLGxhc3REYXk6XCJbXFx1MDYyM1xcdTA2NDVcXHUwNjMzIFxcdTA2MzlcXHUwNjQ0XFx1MDY0OSBcXHUwNjI3XFx1MDY0NFxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MjldIExUXCIsbGFzdFdlZWs6XCJkZGRkIFtcXHUwNjM5XFx1MDY0NFxcdTA2NDkgXFx1MDYyN1xcdTA2NDRcXHUwNjMzXFx1MDYyN1xcdTA2MzlcXHUwNjI5XSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIlxcdTA2NDFcXHUwNjRhICVzXCIscGFzdDpcIlxcdTA2NDVcXHUwNjQ2XFx1MDYzMCAlc1wiLHM6XCJcXHUwNjJiXFx1MDY0OFxcdTA2MjdcXHUwNjQ2XCIsc3M6XCIlZCBcXHUwNjJiXFx1MDYyN1xcdTA2NDZcXHUwNjRhXFx1MDYyOVwiLG06XCJcXHUwNjJmXFx1MDY0MlxcdTA2NGFcXHUwNjQyXFx1MDYyOVwiLG1tOlwiJWQgXFx1MDYyZlxcdTA2NDJcXHUwNjI3XFx1MDYyNlxcdTA2NDJcIixoOlwiXFx1MDYzM1xcdTA2MjdcXHUwNjM5XFx1MDYyOVwiLGhoOlwiJWQgXFx1MDYzM1xcdTA2MjdcXHUwNjM5XFx1MDYyN1xcdTA2MmFcIixkOlwiXFx1MDY0YVxcdTA2NDhcXHUwNjQ1XCIsZGQ6XCIlZCBcXHUwNjIzXFx1MDY0YVxcdTA2MjdcXHUwNjQ1XCIsTTpcIlxcdTA2MzRcXHUwNjQ3XFx1MDYzMVwiLE1NOlwiJWQgXFx1MDYyM1xcdTA2MzRcXHUwNjQ3XFx1MDYzMVwiLHk6XCJcXHUwNjMzXFx1MDY0NlxcdTA2MjlcIix5eTpcIiVkIFxcdTA2MzNcXHUwNjQ2XFx1MDY0OFxcdTA2MjdcXHUwNjJhXCJ9LHdlZWs6e2RvdzoxLGRveTo0fX0pO3ZhciBpPXsxOlwiXFx1MDY2MVwiLDI6XCJcXHUwNjYyXCIsMzpcIlxcdTA2NjNcIiw0OlwiXFx1MDY2NFwiLDU6XCJcXHUwNjY1XCIsNjpcIlxcdTA2NjZcIiw3OlwiXFx1MDY2N1wiLDg6XCJcXHUwNjY4XCIsOTpcIlxcdTA2NjlcIiwwOlwiXFx1MDY2MFwifSxtPXtcIlxcdTA2NjFcIjpcIjFcIixcIlxcdTA2NjJcIjpcIjJcIixcIlxcdTA2NjNcIjpcIjNcIixcIlxcdTA2NjRcIjpcIjRcIixcIlxcdTA2NjVcIjpcIjVcIixcIlxcdTA2NjZcIjpcIjZcIixcIlxcdTA2NjdcIjpcIjdcIixcIlxcdTA2NjhcIjpcIjhcIixcIlxcdTA2NjlcIjpcIjlcIixcIlxcdTA2NjBcIjpcIjBcIn0sbz1mdW5jdGlvbihlKXtyZXR1cm4gMD09PWU/MDoxPT09ZT8xOjI9PT1lPzI6ZSUxMDA+PTMmJmUlMTAwPD0xMD8zOmUlMTAwPj0xMT80OjV9LHU9e3M6W1wiXFx1MDYyM1xcdTA2NDJcXHUwNjQ0IFxcdTA2NDVcXHUwNjQ2IFxcdTA2MmJcXHUwNjI3XFx1MDY0NlxcdTA2NGFcXHUwNjI5XCIsXCJcXHUwNjJiXFx1MDYyN1xcdTA2NDZcXHUwNjRhXFx1MDYyOSBcXHUwNjQ4XFx1MDYyN1xcdTA2MmRcXHUwNjJmXFx1MDYyOVwiLFtcIlxcdTA2MmJcXHUwNjI3XFx1MDY0NlxcdTA2NGFcXHUwNjJhXFx1MDYyN1xcdTA2NDZcIixcIlxcdTA2MmJcXHUwNjI3XFx1MDY0NlxcdTA2NGFcXHUwNjJhXFx1MDY0YVxcdTA2NDZcIl0sXCIlZCBcXHUwNjJiXFx1MDY0OFxcdTA2MjdcXHUwNjQ2XCIsXCIlZCBcXHUwNjJiXFx1MDYyN1xcdTA2NDZcXHUwNjRhXFx1MDYyOVwiLFwiJWQgXFx1MDYyYlxcdTA2MjdcXHUwNjQ2XFx1MDY0YVxcdTA2MjlcIl0sbTpbXCJcXHUwNjIzXFx1MDY0MlxcdTA2NDQgXFx1MDY0NVxcdTA2NDYgXFx1MDYyZlxcdTA2NDJcXHUwNjRhXFx1MDY0MlxcdTA2MjlcIixcIlxcdTA2MmZcXHUwNjQyXFx1MDY0YVxcdTA2NDJcXHUwNjI5IFxcdTA2NDhcXHUwNjI3XFx1MDYyZFxcdTA2MmZcXHUwNjI5XCIsW1wiXFx1MDYyZlxcdTA2NDJcXHUwNjRhXFx1MDY0MlxcdTA2MmFcXHUwNjI3XFx1MDY0NlwiLFwiXFx1MDYyZlxcdTA2NDJcXHUwNjRhXFx1MDY0MlxcdTA2MmFcXHUwNjRhXFx1MDY0NlwiXSxcIiVkIFxcdTA2MmZcXHUwNjQyXFx1MDYyN1xcdTA2MjZcXHUwNjQyXCIsXCIlZCBcXHUwNjJmXFx1MDY0MlxcdTA2NGFcXHUwNjQyXFx1MDYyOVwiLFwiJWQgXFx1MDYyZlxcdTA2NDJcXHUwNjRhXFx1MDY0MlxcdTA2MjlcIl0saDpbXCJcXHUwNjIzXFx1MDY0MlxcdTA2NDQgXFx1MDY0NVxcdTA2NDYgXFx1MDYzM1xcdTA2MjdcXHUwNjM5XFx1MDYyOVwiLFwiXFx1MDYzM1xcdTA2MjdcXHUwNjM5XFx1MDYyOSBcXHUwNjQ4XFx1MDYyN1xcdTA2MmRcXHUwNjJmXFx1MDYyOVwiLFtcIlxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MmFcXHUwNjI3XFx1MDY0NlwiLFwiXFx1MDYzM1xcdTA2MjdcXHUwNjM5XFx1MDYyYVxcdTA2NGFcXHUwNjQ2XCJdLFwiJWQgXFx1MDYzM1xcdTA2MjdcXHUwNjM5XFx1MDYyN1xcdTA2MmFcIixcIiVkIFxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MjlcIixcIiVkIFxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MjlcIl0sZDpbXCJcXHUwNjIzXFx1MDY0MlxcdTA2NDQgXFx1MDY0NVxcdTA2NDYgXFx1MDY0YVxcdTA2NDhcXHUwNjQ1XCIsXCJcXHUwNjRhXFx1MDY0OFxcdTA2NDUgXFx1MDY0OFxcdTA2MjdcXHUwNjJkXFx1MDYyZlwiLFtcIlxcdTA2NGFcXHUwNjQ4XFx1MDY0NVxcdTA2MjdcXHUwNjQ2XCIsXCJcXHUwNjRhXFx1MDY0OFxcdTA2NDVcXHUwNjRhXFx1MDY0NlwiXSxcIiVkIFxcdTA2MjNcXHUwNjRhXFx1MDYyN1xcdTA2NDVcIixcIiVkIFxcdTA2NGFcXHUwNjQ4XFx1MDY0NVxcdTA2NGJcXHUwNjI3XCIsXCIlZCBcXHUwNjRhXFx1MDY0OFxcdTA2NDVcIl0sTTpbXCJcXHUwNjIzXFx1MDY0MlxcdTA2NDQgXFx1MDY0NVxcdTA2NDYgXFx1MDYzNFxcdTA2NDdcXHUwNjMxXCIsXCJcXHUwNjM0XFx1MDY0N1xcdTA2MzEgXFx1MDY0OFxcdTA2MjdcXHUwNjJkXFx1MDYyZlwiLFtcIlxcdTA2MzRcXHUwNjQ3XFx1MDYzMVxcdTA2MjdcXHUwNjQ2XCIsXCJcXHUwNjM0XFx1MDY0N1xcdTA2MzFcXHUwNjRhXFx1MDY0NlwiXSxcIiVkIFxcdTA2MjNcXHUwNjM0XFx1MDY0N1xcdTA2MzFcIixcIiVkIFxcdTA2MzRcXHUwNjQ3XFx1MDYzMVxcdTA2MjdcIixcIiVkIFxcdTA2MzRcXHUwNjQ3XFx1MDYzMVwiXSx5OltcIlxcdTA2MjNcXHUwNjQyXFx1MDY0NCBcXHUwNjQ1XFx1MDY0NiBcXHUwNjM5XFx1MDYyN1xcdTA2NDVcIixcIlxcdTA2MzlcXHUwNjI3XFx1MDY0NSBcXHUwNjQ4XFx1MDYyN1xcdTA2MmRcXHUwNjJmXCIsW1wiXFx1MDYzOVxcdTA2MjdcXHUwNjQ1XFx1MDYyN1xcdTA2NDZcIixcIlxcdTA2MzlcXHUwNjI3XFx1MDY0NVxcdTA2NGFcXHUwNjQ2XCJdLFwiJWQgXFx1MDYyM1xcdTA2MzlcXHUwNjQ4XFx1MDYyN1xcdTA2NDVcIixcIiVkIFxcdTA2MzlcXHUwNjI3XFx1MDY0NVxcdTA2NGJcXHUwNjI3XCIsXCIlZCBcXHUwNjM5XFx1MDYyN1xcdTA2NDVcIl19LGw9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKGEsXyxzLGQpe3ZhciB0PW8oYSksbj11W2VdW28oYSldO3JldHVybiAyPT09dCYmKG49bltfPzA6MV0pLG4ucmVwbGFjZSgvJWQvaSxhKX19LE09W1wiXFx1MDY0YVxcdTA2NDZcXHUwNjI3XFx1MDY0YVxcdTA2MzFcIixcIlxcdTA2NDFcXHUwNjI4XFx1MDYzMVxcdTA2MjdcXHUwNjRhXFx1MDYzMVwiLFwiXFx1MDY0NVxcdTA2MjdcXHUwNjMxXFx1MDYzM1wiLFwiXFx1MDYyM1xcdTA2MjhcXHUwNjMxXFx1MDY0YVxcdTA2NDRcIixcIlxcdTA2NDVcXHUwNjI3XFx1MDY0YVxcdTA2NDhcIixcIlxcdTA2NGFcXHUwNjQ4XFx1MDY0NlxcdTA2NGFcXHUwNjQ4XCIsXCJcXHUwNjRhXFx1MDY0OFxcdTA2NDRcXHUwNjRhXFx1MDY0OFwiLFwiXFx1MDYyM1xcdTA2M2FcXHUwNjMzXFx1MDYzN1xcdTA2MzNcIixcIlxcdTA2MzNcXHUwNjI4XFx1MDYyYVxcdTA2NDVcXHUwNjI4XFx1MDYzMVwiLFwiXFx1MDYyM1xcdTA2NDNcXHUwNjJhXFx1MDY0OFxcdTA2MjhcXHUwNjMxXCIsXCJcXHUwNjQ2XFx1MDY0OFxcdTA2NDFcXHUwNjQ1XFx1MDYyOFxcdTA2MzFcIixcIlxcdTA2MmZcXHUwNjRhXFx1MDYzM1xcdTA2NDVcXHUwNjI4XFx1MDYzMVwiXTtlLmRlZmluZUxvY2FsZShcImFyXCIse21vbnRoczpNLG1vbnRoc1Nob3J0Ok0sd2Vla2RheXM6XCJcXHUwNjI3XFx1MDY0NFxcdTA2MjNcXHUwNjJkXFx1MDYyZl9cXHUwNjI3XFx1MDY0NFxcdTA2MjVcXHUwNjJiXFx1MDY0NlxcdTA2NGFcXHUwNjQ2X1xcdTA2MjdcXHUwNjQ0XFx1MDYyYlxcdTA2NDRcXHUwNjI3XFx1MDYyYlxcdTA2MjdcXHUwNjIxX1xcdTA2MjdcXHUwNjQ0XFx1MDYyM1xcdTA2MzFcXHUwNjI4XFx1MDYzOVxcdTA2MjdcXHUwNjIxX1xcdTA2MjdcXHUwNjQ0XFx1MDYyZVxcdTA2NDVcXHUwNjRhXFx1MDYzM19cXHUwNjI3XFx1MDY0NFxcdTA2MmNcXHUwNjQ1XFx1MDYzOVxcdTA2MjlfXFx1MDYyN1xcdTA2NDRcXHUwNjMzXFx1MDYyOFxcdTA2MmFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlxcdTA2MjNcXHUwNjJkXFx1MDYyZl9cXHUwNjI1XFx1MDYyYlxcdTA2NDZcXHUwNjRhXFx1MDY0Nl9cXHUwNjJiXFx1MDY0NFxcdTA2MjdcXHUwNjJiXFx1MDYyN1xcdTA2MjFfXFx1MDYyM1xcdTA2MzFcXHUwNjI4XFx1MDYzOVxcdTA2MjdcXHUwNjIxX1xcdTA2MmVcXHUwNjQ1XFx1MDY0YVxcdTA2MzNfXFx1MDYyY1xcdTA2NDVcXHUwNjM5XFx1MDYyOV9cXHUwNjMzXFx1MDYyOFxcdTA2MmFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJcXHUwNjJkX1xcdTA2NDZfXFx1MDYyYl9cXHUwNjMxX1xcdTA2MmVfXFx1MDYyY19cXHUwNjMzXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkQvXFx1MjAwZk0vXFx1MjAwZllZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCBEIE1NTU0gWVlZWSBISDptbVwifSxtZXJpZGllbVBhcnNlOi9cXHUwNjM1fFxcdTA2NDUvLGlzUE06ZnVuY3Rpb24oZSl7cmV0dXJuXCJcXHUwNjQ1XCI9PT1lfSxtZXJpZGllbTpmdW5jdGlvbihlLGEsXyl7cmV0dXJuIGU8MTI/XCJcXHUwNjM1XCI6XCJcXHUwNjQ1XCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTA2MjdcXHUwNjQ0XFx1MDY0YVxcdTA2NDhcXHUwNjQ1IFxcdTA2MzlcXHUwNjQ2XFx1MDYyZiBcXHUwNjI3XFx1MDY0NFxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MjldIExUXCIsbmV4dERheTpcIltcXHUwNjNhXFx1MDYyZlxcdTA2NGJcXHUwNjI3IFxcdTA2MzlcXHUwNjQ2XFx1MDYyZiBcXHUwNjI3XFx1MDY0NFxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MjldIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtcXHUwNjM5XFx1MDY0NlxcdTA2MmYgXFx1MDYyN1xcdTA2NDRcXHUwNjMzXFx1MDYyN1xcdTA2MzlcXHUwNjI5XSBMVFwiLGxhc3REYXk6XCJbXFx1MDYyM1xcdTA2NDVcXHUwNjMzIFxcdTA2MzlcXHUwNjQ2XFx1MDYyZiBcXHUwNjI3XFx1MDY0NFxcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MjldIExUXCIsbGFzdFdlZWs6XCJkZGRkIFtcXHUwNjM5XFx1MDY0NlxcdTA2MmYgXFx1MDYyN1xcdTA2NDRcXHUwNjMzXFx1MDYyN1xcdTA2MzlcXHUwNjI5XSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIlxcdTA2MjhcXHUwNjM5XFx1MDYyZiAlc1wiLHBhc3Q6XCJcXHUwNjQ1XFx1MDY0NlxcdTA2MzAgJXNcIixzOmwoXCJzXCIpLHNzOmwoXCJzXCIpLG06bChcIm1cIiksbW06bChcIm1cIiksaDpsKFwiaFwiKSxoaDpsKFwiaFwiKSxkOmwoXCJkXCIpLGRkOmwoXCJkXCIpLE06bChcIk1cIiksTU06bChcIk1cIikseTpsKFwieVwiKSx5eTpsKFwieVwiKX0scHJlcGFyc2U6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvW1xcdTA2NjFcXHUwNjYyXFx1MDY2M1xcdTA2NjRcXHUwNjY1XFx1MDY2NlxcdTA2NjdcXHUwNjY4XFx1MDY2OVxcdTA2NjBdL2csZnVuY3Rpb24oZSl7cmV0dXJuIG1bZV19KS5yZXBsYWNlKC9cXHUwNjBjL2csXCIsXCIpfSxwb3N0Zm9ybWF0OmZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoL1xcZC9nLGZ1bmN0aW9uKGUpe3JldHVybiBpW2VdfSkucmVwbGFjZSgvLC9nLFwiXFx1MDYwY1wiKX0sd2Vlazp7ZG93OjYsZG95OjEyfX0pO3ZhciBMPXsxOlwiLWluY2lcIiw1OlwiLWluY2lcIiw4OlwiLWluY2lcIiw3MDpcIi1pbmNpXCIsODA6XCItaW5jaVwiLDI6XCItbmNpXCIsNzpcIi1uY2lcIiwyMDpcIi1uY2lcIiw1MDpcIi1uY2lcIiwzOlwiLVxceGZjbmNcXHhmY1wiLDQ6XCItXFx4ZmNuY1xceGZjXCIsMTAwOlwiLVxceGZjbmNcXHhmY1wiLDY6XCItbmNcXHUwMTMxXCIsOTpcIi11bmN1XCIsMTA6XCItdW5jdVwiLDMwOlwiLXVuY3VcIiw2MDpcIi1cXHUwMTMxbmNcXHUwMTMxXCIsOTA6XCItXFx1MDEzMW5jXFx1MDEzMVwifTtmdW5jdGlvbiBZKGUsYSxfKXt2YXIgcyxkO3JldHVyblwibVwiPT09Xz9hP1wiXFx1MDQ0NVxcdTA0MzJcXHUwNDU2XFx1MDQzYlxcdTA0NTZcXHUwNDNkXFx1MDQzMFwiOlwiXFx1MDQ0NVxcdTA0MzJcXHUwNDU2XFx1MDQzYlxcdTA0NTZcXHUwNDNkXFx1MDQ0M1wiOlwiaFwiPT09Xz9hP1wiXFx1MDQzM1xcdTA0MzBcXHUwNDM0XFx1MDQzN1xcdTA0NTZcXHUwNDNkXFx1MDQzMFwiOlwiXFx1MDQzM1xcdTA0MzBcXHUwNDM0XFx1MDQzN1xcdTA0NTZcXHUwNDNkXFx1MDQ0M1wiOmUrXCIgXCIrKHM9K2UsZD17c3M6YT9cIlxcdTA0NDFcXHUwNDM1XFx1MDQzYVxcdTA0NDNcXHUwNDNkXFx1MDQzNFxcdTA0MzBfXFx1MDQ0MVxcdTA0MzVcXHUwNDNhXFx1MDQ0M1xcdTA0M2RcXHUwNDM0XFx1MDQ0Yl9cXHUwNDQxXFx1MDQzNVxcdTA0M2FcXHUwNDQzXFx1MDQzZFxcdTA0MzRcIjpcIlxcdTA0NDFcXHUwNDM1XFx1MDQzYVxcdTA0NDNcXHUwNDNkXFx1MDQzNFxcdTA0NDNfXFx1MDQ0MVxcdTA0MzVcXHUwNDNhXFx1MDQ0M1xcdTA0M2RcXHUwNDM0XFx1MDQ0Yl9cXHUwNDQxXFx1MDQzNVxcdTA0M2FcXHUwNDQzXFx1MDQzZFxcdTA0MzRcIixtbTphP1wiXFx1MDQ0NVxcdTA0MzJcXHUwNDU2XFx1MDQzYlxcdTA0NTZcXHUwNDNkXFx1MDQzMF9cXHUwNDQ1XFx1MDQzMlxcdTA0NTZcXHUwNDNiXFx1MDQ1NlxcdTA0M2RcXHUwNDRiX1xcdTA0NDVcXHUwNDMyXFx1MDQ1NlxcdTA0M2JcXHUwNDU2XFx1MDQzZFwiOlwiXFx1MDQ0NVxcdTA0MzJcXHUwNDU2XFx1MDQzYlxcdTA0NTZcXHUwNDNkXFx1MDQ0M19cXHUwNDQ1XFx1MDQzMlxcdTA0NTZcXHUwNDNiXFx1MDQ1NlxcdTA0M2RcXHUwNDRiX1xcdTA0NDVcXHUwNDMyXFx1MDQ1NlxcdTA0M2JcXHUwNDU2XFx1MDQzZFwiLGhoOmE/XCJcXHUwNDMzXFx1MDQzMFxcdTA0MzRcXHUwNDM3XFx1MDQ1NlxcdTA0M2RcXHUwNDMwX1xcdTA0MzNcXHUwNDMwXFx1MDQzNFxcdTA0MzdcXHUwNDU2XFx1MDQzZFxcdTA0NGJfXFx1MDQzM1xcdTA0MzBcXHUwNDM0XFx1MDQzN1xcdTA0NTZcXHUwNDNkXCI6XCJcXHUwNDMzXFx1MDQzMFxcdTA0MzRcXHUwNDM3XFx1MDQ1NlxcdTA0M2RcXHUwNDQzX1xcdTA0MzNcXHUwNDMwXFx1MDQzNFxcdTA0MzdcXHUwNDU2XFx1MDQzZFxcdTA0NGJfXFx1MDQzM1xcdTA0MzBcXHUwNDM0XFx1MDQzN1xcdTA0NTZcXHUwNDNkXCIsZGQ6XCJcXHUwNDM0XFx1MDQzN1xcdTA0MzVcXHUwNDNkXFx1MDQ0Y19cXHUwNDM0XFx1MDQzZFxcdTA0NTZfXFx1MDQzNFxcdTA0MzdcXHUwNDUxXFx1MDQzZFwiLE1NOlwiXFx1MDQzY1xcdTA0MzVcXHUwNDQxXFx1MDQ0ZlxcdTA0NDZfXFx1MDQzY1xcdTA0MzVcXHUwNDQxXFx1MDQ0ZlxcdTA0NDZcXHUwNDRiX1xcdTA0M2NcXHUwNDM1XFx1MDQ0MVxcdTA0NGZcXHUwNDQ2XFx1MDQzMFxcdTA0NWVcIix5eTpcIlxcdTA0MzNcXHUwNDNlXFx1MDQzNF9cXHUwNDMzXFx1MDQzMFxcdTA0MzRcXHUwNDRiX1xcdTA0MzNcXHUwNDMwXFx1MDQzNFxcdTA0M2VcXHUwNDVlXCJ9W19dLnNwbGl0KFwiX1wiKSxzJTEwPT0xJiZzJTEwMCE9MTE/ZFswXTpzJTEwPj0yJiZzJTEwPD00JiYocyUxMDA8MTB8fHMlMTAwPj0yMCk/ZFsxXTpkWzJdKX1lLmRlZmluZUxvY2FsZShcImF6XCIse21vbnRoczpcInlhbnZhcl9mZXZyYWxfbWFydF9hcHJlbF9tYXlfaXl1bl9peXVsX2F2cXVzdF9zZW50eWFicl9va3R5YWJyX25veWFicl9kZWthYnJcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJ5YW5fZmV2X21hcl9hcHJfbWF5X2l5bl9peWxfYXZxX3Nlbl9va3Rfbm95X2Rla1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIkJhemFyX0JhemFyIGVydFxcdTAyNTlzaV9cXHhjN1xcdTAyNTlyXFx1MDE1ZlxcdTAyNTluYlxcdTAyNTkgYXhcXHUwMTVmYW1cXHUwMTMxX1xceGM3XFx1MDI1OXJcXHUwMTVmXFx1MDI1OW5iXFx1MDI1OV9DXFx4ZmNtXFx1MDI1OSBheFxcdTAxNWZhbVxcdTAxMzFfQ1xceGZjbVxcdTAyNTlfXFx1MDE1ZVxcdTAyNTluYlxcdTAyNTlcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIkJhel9CekVfXFx4YzdBeF9cXHhjN1xcdTAyNTlyX0NBeF9DXFx4ZmNtX1xcdTAxNWVcXHUwMjU5blwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIkJ6X0JFX1xceGM3QV9cXHhjN1xcdTAyNTlfQ0FfQ1xceGZjX1xcdTAxNWVcXHUwMjU5XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkRELk1NLllZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbYnVnXFx4ZmNuIHNhYXRdIExUXCIsbmV4dERheTpcIltzYWJhaCBzYWF0XSBMVFwiLG5leHRXZWVrOlwiW2dcXHUwMjU5bFxcdTAyNTluIGhcXHUwMjU5ZnRcXHUwMjU5XSBkZGRkIFtzYWF0XSBMVFwiLGxhc3REYXk6XCJbZFxceGZjblxcdTAyNTluXSBMVFwiLGxhc3RXZWVrOlwiW2tlXFx4ZTdcXHUwMjU5biBoXFx1MDI1OWZ0XFx1MDI1OV0gZGRkZCBbc2FhdF0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCIlcyBzb25yYVwiLHBhc3Q6XCIlcyBcXHUwMjU5dnZcXHUwMjU5bFwiLHM6XCJiaXJuZVxceGU3XFx1MDI1OSBzYW5peXlcXHUwMjU5XCIsc3M6XCIlZCBzYW5peVxcdTAyNTlcIixtOlwiYmlyIGRcXHUwMjU5cWlxXFx1MDI1OVwiLG1tOlwiJWQgZFxcdTAyNTlxaXFcXHUwMjU5XCIsaDpcImJpciBzYWF0XCIsaGg6XCIlZCBzYWF0XCIsZDpcImJpciBnXFx4ZmNuXCIsZGQ6XCIlZCBnXFx4ZmNuXCIsTTpcImJpciBheVwiLE1NOlwiJWQgYXlcIix5OlwiYmlyIGlsXCIseXk6XCIlZCBpbFwifSxtZXJpZGllbVBhcnNlOi9nZWNcXHUwMjU5fHNcXHUwMjU5aFxcdTAyNTlyfGdcXHhmY25kXFx4ZmN6fGF4XFx1MDE1ZmFtLyxpc1BNOmZ1bmN0aW9uKGUpe3JldHVybi9eKGdcXHhmY25kXFx4ZmN6fGF4XFx1MDE1ZmFtKSQvLnRlc3QoZSl9LG1lcmlkaWVtOmZ1bmN0aW9uKGUsYSxfKXtyZXR1cm4gZTw0P1wiZ2VjXFx1MDI1OVwiOmU8MTI/XCJzXFx1MDI1OWhcXHUwMjU5clwiOmU8MTc/XCJnXFx4ZmNuZFxceGZjelwiOlwiYXhcXHUwMTVmYW1cIn0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn0tKFxcdTAxMzFuY1xcdTAxMzF8aW5jaXxuY2l8XFx4ZmNuY1xceGZjfG5jXFx1MDEzMXx1bmN1KS8sb3JkaW5hbDpmdW5jdGlvbihlKXtpZigwPT09ZSlyZXR1cm4gZStcIi1cXHUwMTMxbmNcXHUwMTMxXCI7dmFyIGE9ZSUxMDtyZXR1cm4gZSsoTFthXXx8TFtlJTEwMC1hXXx8TFtlPj0xMDA/MTAwOm51bGxdKX0sd2Vlazp7ZG93OjEsZG95Ojd9fSksZS5kZWZpbmVMb2NhbGUoXCJiZVwiLHttb250aHM6e2Zvcm1hdDpcIlxcdTA0NDFcXHUwNDQyXFx1MDQ0M1xcdTA0MzRcXHUwNDM3XFx1MDQzNVxcdTA0M2RcXHUwNDRmX1xcdTA0M2JcXHUwNDRlXFx1MDQ0MlxcdTA0MzBcXHUwNDMzXFx1MDQzMF9cXHUwNDQxXFx1MDQzMFxcdTA0M2FcXHUwNDMwXFx1MDQzMlxcdTA0NTZcXHUwNDNhXFx1MDQzMF9cXHUwNDNhXFx1MDQ0MFxcdTA0MzBcXHUwNDQxXFx1MDQzMFxcdTA0MzJcXHUwNDU2XFx1MDQzYVxcdTA0MzBfXFx1MDQ0MlxcdTA0NDBcXHUwNDMwXFx1MDQ1ZVxcdTA0M2RcXHUwNDRmX1xcdTA0NDdcXHUwNDRkXFx1MDQ0MFxcdTA0MzJcXHUwNDM1XFx1MDQzZFxcdTA0NGZfXFx1MDQzYlxcdTA0NTZcXHUwNDNmXFx1MDQzNVxcdTA0M2RcXHUwNDRmX1xcdTA0MzZcXHUwNDNkXFx1MDQ1NlxcdTA0NWVcXHUwNDNkXFx1MDQ0Zl9cXHUwNDMyXFx1MDQzNVxcdTA0NDBcXHUwNDMwXFx1MDQ0MVxcdTA0M2RcXHUwNDRmX1xcdTA0M2FcXHUwNDMwXFx1MDQ0MVxcdTA0NDJcXHUwNDQwXFx1MDQ0YlxcdTA0NDdcXHUwNDNkXFx1MDQ1NlxcdTA0M2FcXHUwNDMwX1xcdTA0M2JcXHUwNDU2XFx1MDQ0MVxcdTA0NDJcXHUwNDMwXFx1MDQzZlxcdTA0MzBcXHUwNDM0XFx1MDQzMF9cXHUwNDQxXFx1MDQzZFxcdTA0MzVcXHUwNDM2XFx1MDQzZFxcdTA0NGZcIi5zcGxpdChcIl9cIiksc3RhbmRhbG9uZTpcIlxcdTA0NDFcXHUwNDQyXFx1MDQ0M1xcdTA0MzRcXHUwNDM3XFx1MDQzNVxcdTA0M2RcXHUwNDRjX1xcdTA0M2JcXHUwNDRlXFx1MDQ0MlxcdTA0NGJfXFx1MDQ0MVxcdTA0MzBcXHUwNDNhXFx1MDQzMFxcdTA0MzJcXHUwNDU2XFx1MDQzYV9cXHUwNDNhXFx1MDQ0MFxcdTA0MzBcXHUwNDQxXFx1MDQzMFxcdTA0MzJcXHUwNDU2XFx1MDQzYV9cXHUwNDQyXFx1MDQ0MFxcdTA0MzBcXHUwNDMyXFx1MDQzNVxcdTA0M2RcXHUwNDRjX1xcdTA0NDdcXHUwNDRkXFx1MDQ0MFxcdTA0MzJcXHUwNDM1XFx1MDQzZFxcdTA0NGNfXFx1MDQzYlxcdTA0NTZcXHUwNDNmXFx1MDQzNVxcdTA0M2RcXHUwNDRjX1xcdTA0MzZcXHUwNDNkXFx1MDQ1NlxcdTA0MzJcXHUwNDM1XFx1MDQzZFxcdTA0NGNfXFx1MDQzMlxcdTA0MzVcXHUwNDQwXFx1MDQzMFxcdTA0NDFcXHUwNDM1XFx1MDQzZFxcdTA0NGNfXFx1MDQzYVxcdTA0MzBcXHUwNDQxXFx1MDQ0MlxcdTA0NDBcXHUwNDRiXFx1MDQ0N1xcdTA0M2RcXHUwNDU2XFx1MDQzYV9cXHUwNDNiXFx1MDQ1NlxcdTA0NDFcXHUwNDQyXFx1MDQzMFxcdTA0M2ZcXHUwNDMwXFx1MDQzNF9cXHUwNDQxXFx1MDQzZFxcdTA0MzVcXHUwNDM2XFx1MDQzMFxcdTA0M2RcXHUwNDRjXCIuc3BsaXQoXCJfXCIpfSxtb250aHNTaG9ydDpcIlxcdTA0NDFcXHUwNDQyXFx1MDQ0M1xcdTA0MzRfXFx1MDQzYlxcdTA0NGVcXHUwNDQyX1xcdTA0NDFcXHUwNDMwXFx1MDQzYV9cXHUwNDNhXFx1MDQ0MFxcdTA0MzBcXHUwNDQxX1xcdTA0NDJcXHUwNDQwXFx1MDQzMFxcdTA0MzJfXFx1MDQ0N1xcdTA0NGRcXHUwNDQwXFx1MDQzMl9cXHUwNDNiXFx1MDQ1NlxcdTA0M2ZfXFx1MDQzNlxcdTA0M2RcXHUwNDU2XFx1MDQzMl9cXHUwNDMyXFx1MDQzNVxcdTA0NDBfXFx1MDQzYVxcdTA0MzBcXHUwNDQxXFx1MDQ0Ml9cXHUwNDNiXFx1MDQ1NlxcdTA0NDFcXHUwNDQyX1xcdTA0NDFcXHUwNDNkXFx1MDQzNVxcdTA0MzZcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6e2Zvcm1hdDpcIlxcdTA0M2RcXHUwNDRmXFx1MDQzNFxcdTA0MzdcXHUwNDM1XFx1MDQzYlxcdTA0NGVfXFx1MDQzZlxcdTA0MzBcXHUwNDNkXFx1MDQ0ZlxcdTA0MzRcXHUwNDM3XFx1MDQzNVxcdTA0M2JcXHUwNDMwXFx1MDQzYV9cXHUwNDMwXFx1MDQ1ZVxcdTA0NDJcXHUwNDNlXFx1MDQ0MFxcdTA0MzBcXHUwNDNhX1xcdTA0NDFcXHUwNDM1XFx1MDQ0MFxcdTA0MzBcXHUwNDM0XFx1MDQ0M19cXHUwNDQ3XFx1MDQzMFxcdTA0NDZcXHUwNDMyXFx1MDQzNVxcdTA0NDBfXFx1MDQzZlxcdTA0NGZcXHUwNDQyXFx1MDQzZFxcdTA0NTZcXHUwNDQ2XFx1MDQ0M19cXHUwNDQxXFx1MDQ0M1xcdTA0MzFcXHUwNDNlXFx1MDQ0MlxcdTA0NDNcIi5zcGxpdChcIl9cIiksc3RhbmRhbG9uZTpcIlxcdTA0M2RcXHUwNDRmXFx1MDQzNFxcdTA0MzdcXHUwNDM1XFx1MDQzYlxcdTA0NGZfXFx1MDQzZlxcdTA0MzBcXHUwNDNkXFx1MDQ0ZlxcdTA0MzRcXHUwNDM3XFx1MDQzNVxcdTA0M2JcXHUwNDMwXFx1MDQzYV9cXHUwNDMwXFx1MDQ1ZVxcdTA0NDJcXHUwNDNlXFx1MDQ0MFxcdTA0MzBcXHUwNDNhX1xcdTA0NDFcXHUwNDM1XFx1MDQ0MFxcdTA0MzBcXHUwNDM0XFx1MDQzMF9cXHUwNDQ3XFx1MDQzMFxcdTA0NDZcXHUwNDMyXFx1MDQzNVxcdTA0NDBfXFx1MDQzZlxcdTA0NGZcXHUwNDQyXFx1MDQzZFxcdTA0NTZcXHUwNDQ2XFx1MDQzMF9cXHUwNDQxXFx1MDQ0M1xcdTA0MzFcXHUwNDNlXFx1MDQ0MlxcdTA0MzBcIi5zcGxpdChcIl9cIiksaXNGb3JtYXQ6L1xcWyA/W1xcdTA0MTJcXHUwNDMyXSA/KD86XFx1MDQzY1xcdTA0NTZcXHUwNDNkXFx1MDQ0M1xcdTA0M2JcXHUwNDQzXFx1MDQ0ZXxcXHUwNDNkXFx1MDQzMFxcdTA0NDFcXHUwNDQyXFx1MDQ0M1xcdTA0M2ZcXHUwNDNkXFx1MDQ0M1xcdTA0NGUpPyA/XFxdID9kZGRkL30sd2Vla2RheXNTaG9ydDpcIlxcdTA0M2RcXHUwNDM0X1xcdTA0M2ZcXHUwNDNkX1xcdTA0MzBcXHUwNDQyX1xcdTA0NDFcXHUwNDQwX1xcdTA0NDdcXHUwNDQ2X1xcdTA0M2ZcXHUwNDQyX1xcdTA0NDFcXHUwNDMxXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiXFx1MDQzZFxcdTA0MzRfXFx1MDQzZlxcdTA0M2RfXFx1MDQzMFxcdTA0NDJfXFx1MDQ0MVxcdTA0NDBfXFx1MDQ0N1xcdTA0NDZfXFx1MDQzZlxcdTA0NDJfXFx1MDQ0MVxcdTA0MzFcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWSBcXHUwNDMzLlwiLExMTDpcIkQgTU1NTSBZWVlZIFxcdTA0MzMuLCBISDptbVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSBcXHUwNDMzLiwgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbXFx1MDQyMVxcdTA0NTFcXHUwNDNkXFx1MDQzZFxcdTA0NGYgXFx1MDQ1ZV0gTFRcIixuZXh0RGF5OlwiW1xcdTA0MTdcXHUwNDMwXFx1MDQ1ZVxcdTA0NDJcXHUwNDQwXFx1MDQzMCBcXHUwNDVlXSBMVFwiLGxhc3REYXk6XCJbXFx1MDQyM1xcdTA0NDdcXHUwNDNlXFx1MDQ0MFxcdTA0MzAgXFx1MDQ1ZV0gTFRcIixuZXh0V2VlazpmdW5jdGlvbigpe3JldHVyblwiW1xcdTA0MjNdIGRkZGQgW1xcdTA0NWVdIExUXCJ9LGxhc3RXZWVrOmZ1bmN0aW9uKCl7c3dpdGNoKHRoaXMuZGF5KCkpe2Nhc2UgMDpjYXNlIDM6Y2FzZSA1OmNhc2UgNjpyZXR1cm5cIltcXHUwNDIzIFxcdTA0M2NcXHUwNDU2XFx1MDQzZFxcdTA0NDNcXHUwNDNiXFx1MDQ0M1xcdTA0NGVdIGRkZGQgW1xcdTA0NWVdIExUXCI7Y2FzZSAxOmNhc2UgMjpjYXNlIDQ6cmV0dXJuXCJbXFx1MDQyMyBcXHUwNDNjXFx1MDQ1NlxcdTA0M2RcXHUwNDQzXFx1MDQzYlxcdTA0NGJdIGRkZGQgW1xcdTA0NWVdIExUXCJ9fSxzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJcXHUwNDNmXFx1MDQ0MFxcdTA0MzBcXHUwNDM3ICVzXCIscGFzdDpcIiVzIFxcdTA0NDJcXHUwNDMwXFx1MDQzY1xcdTA0NDNcIixzOlwiXFx1MDQzZFxcdTA0MzVcXHUwNDNhXFx1MDQzMFxcdTA0M2JcXHUwNDRjXFx1MDQzYVxcdTA0NTYgXFx1MDQ0MVxcdTA0MzVcXHUwNDNhXFx1MDQ0M1xcdTA0M2RcXHUwNDM0XCIsbTpZLG1tOlksaDpZLGhoOlksZDpcIlxcdTA0MzRcXHUwNDM3XFx1MDQzNVxcdTA0M2RcXHUwNDRjXCIsZGQ6WSxNOlwiXFx1MDQzY1xcdTA0MzVcXHUwNDQxXFx1MDQ0ZlxcdTA0NDZcIixNTTpZLHk6XCJcXHUwNDMzXFx1MDQzZVxcdTA0MzRcIix5eTpZfSxtZXJpZGllbVBhcnNlOi9cXHUwNDNkXFx1MDQzZVxcdTA0NDdcXHUwNDRifFxcdTA0NDBcXHUwNDMwXFx1MDQzZFxcdTA0NTZcXHUwNDQ2XFx1MDQ0YnxcXHUwNDM0XFx1MDQzZFxcdTA0NGZ8XFx1MDQzMlxcdTA0MzVcXHUwNDQ3XFx1MDQzMFxcdTA0NDBcXHUwNDMwLyxpc1BNOmZ1bmN0aW9uKGUpe3JldHVybi9eKFxcdTA0MzRcXHUwNDNkXFx1MDQ0ZnxcXHUwNDMyXFx1MDQzNVxcdTA0NDdcXHUwNDMwXFx1MDQ0MFxcdTA0MzApJC8udGVzdChlKX0sbWVyaWRpZW06ZnVuY3Rpb24oZSxhLF8pe3JldHVybiBlPDQ/XCJcXHUwNDNkXFx1MDQzZVxcdTA0NDdcXHUwNDRiXCI6ZTwxMj9cIlxcdTA0NDBcXHUwNDMwXFx1MDQzZFxcdTA0NTZcXHUwNDQ2XFx1MDQ0YlwiOmU8MTc/XCJcXHUwNDM0XFx1MDQzZFxcdTA0NGZcIjpcIlxcdTA0MzJcXHUwNDM1XFx1MDQ0N1xcdTA0MzBcXHUwNDQwXFx1MDQzMFwifSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfS0oXFx1MDQ1NnxcXHUwNDRifFxcdTA0MzNcXHUwNDMwKS8sb3JkaW5hbDpmdW5jdGlvbihlLGEpe3N3aXRjaChhKXtjYXNlXCJNXCI6Y2FzZVwiZFwiOmNhc2VcIkRERFwiOmNhc2VcIndcIjpjYXNlXCJXXCI6cmV0dXJuIGUlMTAhPTImJmUlMTAhPTN8fGUlMTAwPT0xMnx8ZSUxMDA9PTEzP2UrXCItXFx1MDQ0YlwiOmUrXCItXFx1MDQ1NlwiO2Nhc2VcIkRcIjpyZXR1cm4gZStcIi1cXHUwNDMzXFx1MDQzMFwiO2RlZmF1bHQ6cmV0dXJuIGV9fSx3ZWVrOntkb3c6MSxkb3k6N319KSxlLmRlZmluZUxvY2FsZShcImJnXCIse21vbnRoczpcIlxcdTA0NGZcXHUwNDNkXFx1MDQ0M1xcdTA0MzBcXHUwNDQwXFx1MDQzOF9cXHUwNDQ0XFx1MDQzNVxcdTA0MzJcXHUwNDQwXFx1MDQ0M1xcdTA0MzBcXHUwNDQwXFx1MDQzOF9cXHUwNDNjXFx1MDQzMFxcdTA0NDBcXHUwNDQyX1xcdTA0MzBcXHUwNDNmXFx1MDQ0MFxcdTA0MzhcXHUwNDNiX1xcdTA0M2NcXHUwNDMwXFx1MDQzOV9cXHUwNDRlXFx1MDQzZFxcdTA0MzhfXFx1MDQ0ZVxcdTA0M2JcXHUwNDM4X1xcdTA0MzBcXHUwNDMyXFx1MDQzM1xcdTA0NDNcXHUwNDQxXFx1MDQ0Ml9cXHUwNDQxXFx1MDQzNVxcdTA0M2ZcXHUwNDQyXFx1MDQzNVxcdTA0M2NcXHUwNDMyXFx1MDQ0MFxcdTA0MzhfXFx1MDQzZVxcdTA0M2FcXHUwNDQyXFx1MDQzZVxcdTA0M2NcXHUwNDMyXFx1MDQ0MFxcdTA0MzhfXFx1MDQzZFxcdTA0M2VcXHUwNDM1XFx1MDQzY1xcdTA0MzJcXHUwNDQwXFx1MDQzOF9cXHUwNDM0XFx1MDQzNVxcdTA0M2FcXHUwNDM1XFx1MDQzY1xcdTA0MzJcXHUwNDQwXFx1MDQzOFwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIlxcdTA0NGZcXHUwNDNkXFx1MDQ0MF9cXHUwNDQ0XFx1MDQzNVxcdTA0MzJfXFx1MDQzY1xcdTA0MzBcXHUwNDQwX1xcdTA0MzBcXHUwNDNmXFx1MDQ0MF9cXHUwNDNjXFx1MDQzMFxcdTA0MzlfXFx1MDQ0ZVxcdTA0M2RcXHUwNDM4X1xcdTA0NGVcXHUwNDNiXFx1MDQzOF9cXHUwNDMwXFx1MDQzMlxcdTA0MzNfXFx1MDQ0MVxcdTA0MzVcXHUwNDNmX1xcdTA0M2VcXHUwNDNhXFx1MDQ0Ml9cXHUwNDNkXFx1MDQzZVxcdTA0MzVfXFx1MDQzNFxcdTA0MzVcXHUwNDNhXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiXFx1MDQzZFxcdTA0MzVcXHUwNDM0XFx1MDQzNVxcdTA0M2JcXHUwNDRmX1xcdTA0M2ZcXHUwNDNlXFx1MDQzZFxcdTA0MzVcXHUwNDM0XFx1MDQzNVxcdTA0M2JcXHUwNDNkXFx1MDQzOFxcdTA0M2FfXFx1MDQzMlxcdTA0NDJcXHUwNDNlXFx1MDQ0MFxcdTA0M2RcXHUwNDM4XFx1MDQzYV9cXHUwNDQxXFx1MDQ0MFxcdTA0NGZcXHUwNDM0XFx1MDQzMF9cXHUwNDQ3XFx1MDQzNVxcdTA0NDJcXHUwNDMyXFx1MDQ0YVxcdTA0NDBcXHUwNDQyXFx1MDQ0YVxcdTA0M2FfXFx1MDQzZlxcdTA0MzVcXHUwNDQyXFx1MDQ0YVxcdTA0M2FfXFx1MDQ0MVxcdTA0NGFcXHUwNDMxXFx1MDQzZVxcdTA0NDJcXHUwNDMwXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJcXHUwNDNkXFx1MDQzNVxcdTA0MzRfXFx1MDQzZlxcdTA0M2VcXHUwNDNkX1xcdTA0MzJcXHUwNDQyXFx1MDQzZV9cXHUwNDQxXFx1MDQ0MFxcdTA0NGZfXFx1MDQ0N1xcdTA0MzVcXHUwNDQyX1xcdTA0M2ZcXHUwNDM1XFx1MDQ0Ml9cXHUwNDQxXFx1MDQ0YVxcdTA0MzFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJcXHUwNDNkXFx1MDQzNF9cXHUwNDNmXFx1MDQzZF9cXHUwNDMyXFx1MDQ0Ml9cXHUwNDQxXFx1MDQ0MF9cXHUwNDQ3XFx1MDQ0Ml9cXHUwNDNmXFx1MDQ0Ml9cXHUwNDQxXFx1MDQzMVwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJIOm1tXCIsTFRTOlwiSDptbTpzc1wiLEw6XCJELk1NLllZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSDptbVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSBIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTA0MTRcXHUwNDNkXFx1MDQzNVxcdTA0NDEgXFx1MDQzMl0gTFRcIixuZXh0RGF5OlwiW1xcdTA0MjNcXHUwNDQyXFx1MDQ0MFxcdTA0MzUgXFx1MDQzMl0gTFRcIixuZXh0V2VlazpcImRkZGQgW1xcdTA0MzJdIExUXCIsbGFzdERheTpcIltcXHUwNDEyXFx1MDQ0N1xcdTA0MzVcXHUwNDQwXFx1MDQzMCBcXHUwNDMyXSBMVFwiLGxhc3RXZWVrOmZ1bmN0aW9uKCl7c3dpdGNoKHRoaXMuZGF5KCkpe2Nhc2UgMDpjYXNlIDM6Y2FzZSA2OnJldHVyblwiW1xcdTA0MTIgXFx1MDQzOFxcdTA0MzdcXHUwNDNjXFx1MDQzOFxcdTA0M2RcXHUwNDMwXFx1MDQzYlxcdTA0MzBcXHUwNDQyXFx1MDQzMF0gZGRkZCBbXFx1MDQzMl0gTFRcIjtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpjYXNlIDU6cmV0dXJuXCJbXFx1MDQxMiBcXHUwNDM4XFx1MDQzN1xcdTA0M2NcXHUwNDM4XFx1MDQzZFxcdTA0MzBcXHUwNDNiXFx1MDQzOFxcdTA0NGZdIGRkZGQgW1xcdTA0MzJdIExUXCJ9fSxzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJcXHUwNDQxXFx1MDQzYlxcdTA0MzVcXHUwNDM0ICVzXCIscGFzdDpcIlxcdTA0M2ZcXHUwNDQwXFx1MDQzNVxcdTA0MzRcXHUwNDM4ICVzXCIsczpcIlxcdTA0M2RcXHUwNDRmXFx1MDQzYVxcdTA0M2VcXHUwNDNiXFx1MDQzYVxcdTA0M2UgXFx1MDQ0MVxcdTA0MzVcXHUwNDNhXFx1MDQ0M1xcdTA0M2RcXHUwNDM0XFx1MDQzOFwiLHNzOlwiJWQgXFx1MDQ0MVxcdTA0MzVcXHUwNDNhXFx1MDQ0M1xcdTA0M2RcXHUwNDM0XFx1MDQzOFwiLG06XCJcXHUwNDNjXFx1MDQzOFxcdTA0M2RcXHUwNDQzXFx1MDQ0MlxcdTA0MzBcIixtbTpcIiVkIFxcdTA0M2NcXHUwNDM4XFx1MDQzZFxcdTA0NDNcXHUwNDQyXFx1MDQzOFwiLGg6XCJcXHUwNDQ3XFx1MDQzMFxcdTA0NDFcIixoaDpcIiVkIFxcdTA0NDdcXHUwNDMwXFx1MDQ0MVxcdTA0MzBcIixkOlwiXFx1MDQzNFxcdTA0MzVcXHUwNDNkXCIsZGQ6XCIlZCBcXHUwNDM0XFx1MDQzZFxcdTA0MzhcIixNOlwiXFx1MDQzY1xcdTA0MzVcXHUwNDQxXFx1MDQzNVxcdTA0NDZcIixNTTpcIiVkIFxcdTA0M2NcXHUwNDM1XFx1MDQ0MVxcdTA0MzVcXHUwNDQ2XFx1MDQzMFwiLHk6XCJcXHUwNDMzXFx1MDQzZVxcdTA0MzRcXHUwNDM4XFx1MDQzZFxcdTA0MzBcIix5eTpcIiVkIFxcdTA0MzNcXHUwNDNlXFx1MDQzNFxcdTA0MzhcXHUwNDNkXFx1MDQzOFwifSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfS0oXFx1MDQzNVxcdTA0MzJ8XFx1MDQzNVxcdTA0M2R8XFx1MDQ0MlxcdTA0Mzh8XFx1MDQzMlxcdTA0Mzh8XFx1MDQ0MFxcdTA0Mzh8XFx1MDQzY1xcdTA0MzgpLyxvcmRpbmFsOmZ1bmN0aW9uKGUpe3ZhciBhPWUlMTAsXz1lJTEwMDtyZXR1cm4gMD09PWU/ZStcIi1cXHUwNDM1XFx1MDQzMlwiOjA9PT1fP2UrXCItXFx1MDQzNVxcdTA0M2RcIjpfPjEwJiZfPDIwP2UrXCItXFx1MDQ0MlxcdTA0MzhcIjoxPT09YT9lK1wiLVxcdTA0MzJcXHUwNDM4XCI6Mj09PWE/ZStcIi1cXHUwNDQwXFx1MDQzOFwiOjc9PT1hfHw4PT09YT9lK1wiLVxcdTA0M2NcXHUwNDM4XCI6ZStcIi1cXHUwNDQyXFx1MDQzOFwifSx3ZWVrOntkb3c6MSxkb3k6N319KSxlLmRlZmluZUxvY2FsZShcImJtXCIse21vbnRoczpcIlphbnd1eWVrYWxvX0Zld3VydXlla2Fsb19NYXJpc2lrYWxvX0F3aXJpbGlrYWxvX01cXHUwMjVia2Fsb19adXdcXHUwMjVibmthbG9fWnVsdXlla2Fsb19VdGlrYWxvX1NcXHUwMjVidGFuYnVydWthbG9fXFx1MDI1NGt1dFxcdTAyNTRidXJ1a2Fsb19Ob3dhbmJ1cnVrYWxvX0Rlc2FuYnVydWthbG9cIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJaYW5fRmV3X01hcl9Bd2lfTVxcdTAyNWJfWnV3X1p1bF9VdGlfU1xcdTAyNWJ0X1xcdTAyNTRrdV9Ob3dfRGVzXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiS2FyaV9OdFxcdTAyNWJuXFx1MDI1Ym5fVGFyYXRhX0FyYWJhX0FsYW1pc2FfSnVtYV9TaWJpcmlcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIkthcl9OdFxcdTAyNWJfVGFyX0FyYV9BbGFfSnVtX1NpYlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIkthX050X1RhX0FyX0FsX0p1X1NpXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiTU1NTSBbdGlsZV0gRCBbc2FuXSBZWVlZXCIsTExMOlwiTU1NTSBbdGlsZV0gRCBbc2FuXSBZWVlZIFtsXFx1MDI1YnJcXHUwMjViXSBISDptbVwiLExMTEw6XCJkZGRkIE1NTU0gW3RpbGVdIEQgW3Nhbl0gWVlZWSBbbFxcdTAyNWJyXFx1MDI1Yl0gSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbQmkgbFxcdTAyNWJyXFx1MDI1Yl0gTFRcIixuZXh0RGF5OlwiW1NpbmkgbFxcdTAyNWJyXFx1MDI1Yl0gTFRcIixuZXh0V2VlazpcImRkZGQgW2RvbiBsXFx1MDI1YnJcXHUwMjViXSBMVFwiLGxhc3REYXk6XCJbS3VudSBsXFx1MDI1YnJcXHUwMjViXSBMVFwiLGxhc3RXZWVrOlwiZGRkZCBbdFxcdTAyNWJtXFx1MDI1Ym5lbiBsXFx1MDI1YnJcXHUwMjViXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIiVzIGtcXHUwMjU0blxcdTAyNTRcIixwYXN0OlwiYSBiXFx1MDI1YiAlcyBiXFx1MDI1NFwiLHM6XCJzYW5nYSBkYW1hIGRhbWFcIixzczpcInNla29uZGkgJWRcIixtOlwibWluaXRpIGtlbGVuXCIsbW06XCJtaW5pdGkgJWRcIixoOlwibFxcdTAyNWJyXFx1MDI1YiBrZWxlblwiLGhoOlwibFxcdTAyNWJyXFx1MDI1YiAlZFwiLGQ6XCJ0aWxlIGtlbGVuXCIsZGQ6XCJ0aWxlICVkXCIsTTpcImthbG8ga2VsZW5cIixNTTpcImthbG8gJWRcIix5Olwic2FuIGtlbGVuXCIseXk6XCJzYW4gJWRcIn0sd2Vlazp7ZG93OjEsZG95OjR9fSk7dmFyIGg9ezE6XCJcXHUwOWU3XCIsMjpcIlxcdTA5ZThcIiwzOlwiXFx1MDllOVwiLDQ6XCJcXHUwOWVhXCIsNTpcIlxcdTA5ZWJcIiw2OlwiXFx1MDllY1wiLDc6XCJcXHUwOWVkXCIsODpcIlxcdTA5ZWVcIiw5OlwiXFx1MDllZlwiLDA6XCJcXHUwOWU2XCJ9LHk9e1wiXFx1MDllN1wiOlwiMVwiLFwiXFx1MDllOFwiOlwiMlwiLFwiXFx1MDllOVwiOlwiM1wiLFwiXFx1MDllYVwiOlwiNFwiLFwiXFx1MDllYlwiOlwiNVwiLFwiXFx1MDllY1wiOlwiNlwiLFwiXFx1MDllZFwiOlwiN1wiLFwiXFx1MDllZVwiOlwiOFwiLFwiXFx1MDllZlwiOlwiOVwiLFwiXFx1MDllNlwiOlwiMFwifTtlLmRlZmluZUxvY2FsZShcImJuXCIse21vbnRoczpcIlxcdTA5OWNcXHUwOWJlXFx1MDlhOFxcdTA5YzFcXHUwOWRmXFx1MDliZVxcdTA5YjBcXHUwOWMwX1xcdTA5YWJcXHUwOWM3XFx1MDlhY1xcdTA5Y2RcXHUwOWIwXFx1MDljMVxcdTA5ZGZcXHUwOWJlXFx1MDliMFxcdTA5YmZfXFx1MDlhZVxcdTA5YmVcXHUwOWIwXFx1MDljZFxcdTA5OWFfXFx1MDk4ZlxcdTA5YWFcXHUwOWNkXFx1MDliMFxcdTA5YmZcXHUwOWIyX1xcdTA5YWVcXHUwOWM3X1xcdTA5OWNcXHUwOWMxXFx1MDlhOF9cXHUwOTljXFx1MDljMVxcdTA5YjJcXHUwOWJlXFx1MDk4N19cXHUwOTg2XFx1MDk5N1xcdTA5YjhcXHUwOWNkXFx1MDk5Zl9cXHUwOWI4XFx1MDljN1xcdTA5YWFcXHUwOWNkXFx1MDk5ZlxcdTA5YzdcXHUwOWFlXFx1MDljZFxcdTA5YWNcXHUwOWIwX1xcdTA5ODVcXHUwOTk1XFx1MDljZFxcdTA5OWZcXHUwOWNiXFx1MDlhY1xcdTA5YjBfXFx1MDlhOFxcdTA5YWRcXHUwOWM3XFx1MDlhZVxcdTA5Y2RcXHUwOWFjXFx1MDliMF9cXHUwOWExXFx1MDliZlxcdTA5YjhcXHUwOWM3XFx1MDlhZVxcdTA5Y2RcXHUwOWFjXFx1MDliMFwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIlxcdTA5OWNcXHUwOWJlXFx1MDlhOFxcdTA5YzFfXFx1MDlhYlxcdTA5YzdcXHUwOWFjX1xcdTA5YWVcXHUwOWJlXFx1MDliMFxcdTA5Y2RcXHUwOTlhX1xcdTA5OGZcXHUwOWFhXFx1MDljZFxcdTA5YjBfXFx1MDlhZVxcdTA5YzdfXFx1MDk5Y1xcdTA5YzFcXHUwOWE4X1xcdTA5OWNcXHUwOWMxXFx1MDliMl9cXHUwOTg2XFx1MDk5N19cXHUwOWI4XFx1MDljN1xcdTA5YWFcXHUwOWNkXFx1MDk5Zl9cXHUwOTg1XFx1MDk5NVxcdTA5Y2RcXHUwOTlmXFx1MDljYl9cXHUwOWE4XFx1MDlhZFxcdTA5YzdfXFx1MDlhMVxcdTA5YmZcXHUwOWI4XFx1MDljN1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIlxcdTA5YjBcXHUwOWFjXFx1MDliZlxcdTA5YWNcXHUwOWJlXFx1MDliMF9cXHUwOWI4XFx1MDljYlxcdTA5YWVcXHUwOWFjXFx1MDliZVxcdTA5YjBfXFx1MDlhZVxcdTA5OTlcXHUwOWNkXFx1MDk5N1xcdTA5YjJcXHUwOWFjXFx1MDliZVxcdTA5YjBfXFx1MDlhY1xcdTA5YzFcXHUwOWE3XFx1MDlhY1xcdTA5YmVcXHUwOWIwX1xcdTA5YWNcXHUwOWMzXFx1MDliOVxcdTA5YjhcXHUwOWNkXFx1MDlhYVxcdTA5YTRcXHUwOWJmXFx1MDlhY1xcdTA5YmVcXHUwOWIwX1xcdTA5YjZcXHUwOWMxXFx1MDk5NVxcdTA5Y2RcXHUwOWIwXFx1MDlhY1xcdTA5YmVcXHUwOWIwX1xcdTA5YjZcXHUwOWE4XFx1MDliZlxcdTA5YWNcXHUwOWJlXFx1MDliMFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiXFx1MDliMFxcdTA5YWNcXHUwOWJmX1xcdTA5YjhcXHUwOWNiXFx1MDlhZV9cXHUwOWFlXFx1MDk5OVxcdTA5Y2RcXHUwOTk3XFx1MDliMl9cXHUwOWFjXFx1MDljMVxcdTA5YTdfXFx1MDlhY1xcdTA5YzNcXHUwOWI5XFx1MDliOFxcdTA5Y2RcXHUwOWFhXFx1MDlhNFxcdTA5YmZfXFx1MDliNlxcdTA5YzFcXHUwOTk1XFx1MDljZFxcdTA5YjBfXFx1MDliNlxcdTA5YThcXHUwOWJmXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiXFx1MDliMFxcdTA5YWNcXHUwOWJmX1xcdTA5YjhcXHUwOWNiXFx1MDlhZV9cXHUwOWFlXFx1MDk5OVxcdTA5Y2RcXHUwOTk3X1xcdTA5YWNcXHUwOWMxXFx1MDlhN19cXHUwOWFjXFx1MDljM1xcdTA5YjlcXHUwOTgzX1xcdTA5YjZcXHUwOWMxXFx1MDk5NVxcdTA5Y2RcXHUwOWIwX1xcdTA5YjZcXHUwOWE4XFx1MDliZlwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJBIGg6bW0gXFx1MDliOFxcdTA5YWVcXHUwOWRmXCIsTFRTOlwiQSBoOm1tOnNzIFxcdTA5YjhcXHUwOWFlXFx1MDlkZlwiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZLCBBIGg6bW0gXFx1MDliOFxcdTA5YWVcXHUwOWRmXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0gXFx1MDliOFxcdTA5YWVcXHUwOWRmXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTA5ODZcXHUwOTljXSBMVFwiLG5leHREYXk6XCJbXFx1MDk4NlxcdTA5OTdcXHUwOWJlXFx1MDlhZVxcdTA5YzBcXHUwOTk1XFx1MDliZVxcdTA5YjJdIExUXCIsbmV4dFdlZWs6XCJkZGRkLCBMVFwiLGxhc3REYXk6XCJbXFx1MDk5N1xcdTA5YTRcXHUwOTk1XFx1MDliZVxcdTA5YjJdIExUXCIsbGFzdFdlZWs6XCJbXFx1MDk5N1xcdTA5YTRdIGRkZGQsIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiJXMgXFx1MDlhYVxcdTA5YjBcXHUwOWM3XCIscGFzdDpcIiVzIFxcdTA5ODZcXHUwOTk3XFx1MDljN1wiLHM6XCJcXHUwOTk1XFx1MDlkZlxcdTA5YzdcXHUwOTk1IFxcdTA5YjhcXHUwOWM3XFx1MDk5NVxcdTA5YzdcXHUwOWE4XFx1MDljZFxcdTA5YTFcIixzczpcIiVkIFxcdTA5YjhcXHUwOWM3XFx1MDk5NVxcdTA5YzdcXHUwOWE4XFx1MDljZFxcdTA5YTFcIixtOlwiXFx1MDk4ZlxcdTA5OTUgXFx1MDlhZVxcdTA5YmZcXHUwOWE4XFx1MDliZlxcdTA5OWZcIixtbTpcIiVkIFxcdTA5YWVcXHUwOWJmXFx1MDlhOFxcdTA5YmZcXHUwOTlmXCIsaDpcIlxcdTA5OGZcXHUwOTk1IFxcdTA5OThcXHUwOWE4XFx1MDljZFxcdTA5OWZcXHUwOWJlXCIsaGg6XCIlZCBcXHUwOTk4XFx1MDlhOFxcdTA5Y2RcXHUwOTlmXFx1MDliZVwiLGQ6XCJcXHUwOThmXFx1MDk5NSBcXHUwOWE2XFx1MDliZlxcdTA5YThcIixkZDpcIiVkIFxcdTA5YTZcXHUwOWJmXFx1MDlhOFwiLE06XCJcXHUwOThmXFx1MDk5NSBcXHUwOWFlXFx1MDliZVxcdTA5YjhcIixNTTpcIiVkIFxcdTA5YWVcXHUwOWJlXFx1MDliOFwiLHk6XCJcXHUwOThmXFx1MDk5NSBcXHUwOWFjXFx1MDk5YlxcdTA5YjBcIix5eTpcIiVkIFxcdTA5YWNcXHUwOTliXFx1MDliMFwifSxwcmVwYXJzZTpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9bXFx1MDllN1xcdTA5ZThcXHUwOWU5XFx1MDllYVxcdTA5ZWJcXHUwOWVjXFx1MDllZFxcdTA5ZWVcXHUwOWVmXFx1MDllNl0vZyxmdW5jdGlvbihlKXtyZXR1cm4geVtlXX0pfSxwb3N0Zm9ybWF0OmZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoL1xcZC9nLGZ1bmN0aW9uKGUpe3JldHVybiBoW2VdfSl9LG1lcmlkaWVtUGFyc2U6L1xcdTA5YjBcXHUwOWJlXFx1MDlhNHxcXHUwOWI4XFx1MDk5NVxcdTA5YmVcXHUwOWIyfFxcdTA5YTZcXHUwOWMxXFx1MDlhYVxcdTA5YzFcXHUwOWIwfFxcdTA5YWNcXHUwOWJmXFx1MDk5NVxcdTA5YmVcXHUwOWIyfFxcdTA5YjBcXHUwOWJlXFx1MDlhNC8sbWVyaWRpZW1Ib3VyOmZ1bmN0aW9uKGUsYSl7cmV0dXJuIDEyPT09ZSYmKGU9MCksXCJcXHUwOWIwXFx1MDliZVxcdTA5YTRcIj09PWEmJmU+PTR8fFwiXFx1MDlhNlxcdTA5YzFcXHUwOWFhXFx1MDljMVxcdTA5YjBcIj09PWEmJmU8NXx8XCJcXHUwOWFjXFx1MDliZlxcdTA5OTVcXHUwOWJlXFx1MDliMlwiPT09YT9lKzEyOmV9LG1lcmlkaWVtOmZ1bmN0aW9uKGUsYSxfKXtyZXR1cm4gZTw0P1wiXFx1MDliMFxcdTA5YmVcXHUwOWE0XCI6ZTwxMD9cIlxcdTA5YjhcXHUwOTk1XFx1MDliZVxcdTA5YjJcIjplPDE3P1wiXFx1MDlhNlxcdTA5YzFcXHUwOWFhXFx1MDljMVxcdTA5YjBcIjplPDIwP1wiXFx1MDlhY1xcdTA5YmZcXHUwOTk1XFx1MDliZVxcdTA5YjJcIjpcIlxcdTA5YjBcXHUwOWJlXFx1MDlhNFwifSx3ZWVrOntkb3c6MCxkb3k6Nn19KTt2YXIgYz17MTpcIlxcdTBmMjFcIiwyOlwiXFx1MGYyMlwiLDM6XCJcXHUwZjIzXCIsNDpcIlxcdTBmMjRcIiw1OlwiXFx1MGYyNVwiLDY6XCJcXHUwZjI2XCIsNzpcIlxcdTBmMjdcIiw4OlwiXFx1MGYyOFwiLDk6XCJcXHUwZjI5XCIsMDpcIlxcdTBmMjBcIn0saz17XCJcXHUwZjIxXCI6XCIxXCIsXCJcXHUwZjIyXCI6XCIyXCIsXCJcXHUwZjIzXCI6XCIzXCIsXCJcXHUwZjI0XCI6XCI0XCIsXCJcXHUwZjI1XCI6XCI1XCIsXCJcXHUwZjI2XCI6XCI2XCIsXCJcXHUwZjI3XCI6XCI3XCIsXCJcXHUwZjI4XCI6XCI4XCIsXCJcXHUwZjI5XCI6XCI5XCIsXCJcXHUwZjIwXCI6XCIwXCJ9O2Z1bmN0aW9uIHAoZSxhLF8pe3JldHVybiBlK1wiIFwiK2Z1bmN0aW9uKGUsYSl7aWYoMj09PWEpcmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciBhPXttOlwidlwiLGI6XCJ2XCIsZDpcInpcIn07aWYodm9pZCAwPT09YVtlLmNoYXJBdCgwKV0pcmV0dXJuIGU7cmV0dXJuIGFbZS5jaGFyQXQoMCldK2Uuc3Vic3RyaW5nKDEpfShlKTtyZXR1cm4gZX0oe21tOlwibXVudXRlbm5cIixNTTpcIm1pelwiLGRkOlwiZGV2ZXpoXCJ9W19dLGUpfWZ1bmN0aW9uIEQoZSxhLF8pe3ZhciBzPWUrXCIgXCI7c3dpdGNoKF8pe2Nhc2VcInNzXCI6cmV0dXJuIHMrPTE9PT1lP1wic2VrdW5kYVwiOjI9PT1lfHwzPT09ZXx8ND09PWU/XCJzZWt1bmRlXCI6XCJzZWt1bmRpXCI7Y2FzZVwibVwiOnJldHVybiBhP1wiamVkbmEgbWludXRhXCI6XCJqZWRuZSBtaW51dGVcIjtjYXNlXCJtbVwiOnJldHVybiBzKz0xPT09ZT9cIm1pbnV0YVwiOjI9PT1lfHwzPT09ZXx8ND09PWU/XCJtaW51dGVcIjpcIm1pbnV0YVwiO2Nhc2VcImhcIjpyZXR1cm4gYT9cImplZGFuIHNhdFwiOlwiamVkbm9nIHNhdGFcIjtjYXNlXCJoaFwiOnJldHVybiBzKz0xPT09ZT9cInNhdFwiOjI9PT1lfHwzPT09ZXx8ND09PWU/XCJzYXRhXCI6XCJzYXRpXCI7Y2FzZVwiZGRcIjpyZXR1cm4gcys9MT09PWU/XCJkYW5cIjpcImRhbmFcIjtjYXNlXCJNTVwiOnJldHVybiBzKz0xPT09ZT9cIm1qZXNlY1wiOjI9PT1lfHwzPT09ZXx8ND09PWU/XCJtamVzZWNhXCI6XCJtamVzZWNpXCI7Y2FzZVwieXlcIjpyZXR1cm4gcys9MT09PWU/XCJnb2RpbmFcIjoyPT09ZXx8Mz09PWV8fDQ9PT1lP1wiZ29kaW5lXCI6XCJnb2RpbmFcIn19ZS5kZWZpbmVMb2NhbGUoXCJib1wiLHttb250aHM6XCJcXHUwZjVmXFx1MGZiM1xcdTBmMGJcXHUwZjU2XFx1MGYwYlxcdTBmNTFcXHUwZjQ0XFx1MGYwYlxcdTBmNTRcXHUwZjdjX1xcdTBmNWZcXHUwZmIzXFx1MGYwYlxcdTBmNTZcXHUwZjBiXFx1MGY0MlxcdTBmNDlcXHUwZjcyXFx1MGY2NlxcdTBmMGJcXHUwZjU0X1xcdTBmNWZcXHUwZmIzXFx1MGYwYlxcdTBmNTZcXHUwZjBiXFx1MGY0MlxcdTBmNjZcXHUwZjc0XFx1MGY1OFxcdTBmMGJcXHUwZjU0X1xcdTBmNWZcXHUwZmIzXFx1MGYwYlxcdTBmNTZcXHUwZjBiXFx1MGY1NlxcdTBmNWVcXHUwZjcyXFx1MGYwYlxcdTBmNTRfXFx1MGY1ZlxcdTBmYjNcXHUwZjBiXFx1MGY1NlxcdTBmMGJcXHUwZjYzXFx1MGY5NFxcdTBmMGJcXHUwZjU0X1xcdTBmNWZcXHUwZmIzXFx1MGYwYlxcdTBmNTZcXHUwZjBiXFx1MGY1MVxcdTBmYjJcXHUwZjc0XFx1MGY0MlxcdTBmMGJcXHUwZjU0X1xcdTBmNWZcXHUwZmIzXFx1MGYwYlxcdTBmNTZcXHUwZjBiXFx1MGY1NlxcdTBmNTFcXHUwZjc0XFx1MGY1M1xcdTBmMGJcXHUwZjU0X1xcdTBmNWZcXHUwZmIzXFx1MGYwYlxcdTBmNTZcXHUwZjBiXFx1MGY1NlxcdTBmNjJcXHUwZjkyXFx1MGZiMVxcdTBmNTFcXHUwZjBiXFx1MGY1NF9cXHUwZjVmXFx1MGZiM1xcdTBmMGJcXHUwZjU2XFx1MGYwYlxcdTBmNTFcXHUwZjQyXFx1MGY3NFxcdTBmMGJcXHUwZjU0X1xcdTBmNWZcXHUwZmIzXFx1MGYwYlxcdTBmNTZcXHUwZjBiXFx1MGY1NlxcdTBmNDVcXHUwZjc0XFx1MGYwYlxcdTBmNTRfXFx1MGY1ZlxcdTBmYjNcXHUwZjBiXFx1MGY1NlxcdTBmMGJcXHUwZjU2XFx1MGY0NVxcdTBmNzRcXHUwZjBiXFx1MGY0MlxcdTBmNDVcXHUwZjcyXFx1MGY0MlxcdTBmMGJcXHUwZjU0X1xcdTBmNWZcXHUwZmIzXFx1MGYwYlxcdTBmNTZcXHUwZjBiXFx1MGY1NlxcdTBmNDVcXHUwZjc0XFx1MGYwYlxcdTBmNDJcXHUwZjQ5XFx1MGY3MlxcdTBmNjZcXHUwZjBiXFx1MGY1NFwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIlxcdTBmNWZcXHUwZmIzXFx1MGYwYlxcdTBmNTZcXHUwZjBiXFx1MGY1MVxcdTBmNDRcXHUwZjBiXFx1MGY1NFxcdTBmN2NfXFx1MGY1ZlxcdTBmYjNcXHUwZjBiXFx1MGY1NlxcdTBmMGJcXHUwZjQyXFx1MGY0OVxcdTBmNzJcXHUwZjY2XFx1MGYwYlxcdTBmNTRfXFx1MGY1ZlxcdTBmYjNcXHUwZjBiXFx1MGY1NlxcdTBmMGJcXHUwZjQyXFx1MGY2NlxcdTBmNzRcXHUwZjU4XFx1MGYwYlxcdTBmNTRfXFx1MGY1ZlxcdTBmYjNcXHUwZjBiXFx1MGY1NlxcdTBmMGJcXHUwZjU2XFx1MGY1ZVxcdTBmNzJcXHUwZjBiXFx1MGY1NF9cXHUwZjVmXFx1MGZiM1xcdTBmMGJcXHUwZjU2XFx1MGYwYlxcdTBmNjNcXHUwZjk0XFx1MGYwYlxcdTBmNTRfXFx1MGY1ZlxcdTBmYjNcXHUwZjBiXFx1MGY1NlxcdTBmMGJcXHUwZjUxXFx1MGZiMlxcdTBmNzRcXHUwZjQyXFx1MGYwYlxcdTBmNTRfXFx1MGY1ZlxcdTBmYjNcXHUwZjBiXFx1MGY1NlxcdTBmMGJcXHUwZjU2XFx1MGY1MVxcdTBmNzRcXHUwZjUzXFx1MGYwYlxcdTBmNTRfXFx1MGY1ZlxcdTBmYjNcXHUwZjBiXFx1MGY1NlxcdTBmMGJcXHUwZjU2XFx1MGY2MlxcdTBmOTJcXHUwZmIxXFx1MGY1MVxcdTBmMGJcXHUwZjU0X1xcdTBmNWZcXHUwZmIzXFx1MGYwYlxcdTBmNTZcXHUwZjBiXFx1MGY1MVxcdTBmNDJcXHUwZjc0XFx1MGYwYlxcdTBmNTRfXFx1MGY1ZlxcdTBmYjNcXHUwZjBiXFx1MGY1NlxcdTBmMGJcXHUwZjU2XFx1MGY0NVxcdTBmNzRcXHUwZjBiXFx1MGY1NF9cXHUwZjVmXFx1MGZiM1xcdTBmMGJcXHUwZjU2XFx1MGYwYlxcdTBmNTZcXHUwZjQ1XFx1MGY3NFxcdTBmMGJcXHUwZjQyXFx1MGY0NVxcdTBmNzJcXHUwZjQyXFx1MGYwYlxcdTBmNTRfXFx1MGY1ZlxcdTBmYjNcXHUwZjBiXFx1MGY1NlxcdTBmMGJcXHUwZjU2XFx1MGY0NVxcdTBmNzRcXHUwZjBiXFx1MGY0MlxcdTBmNDlcXHUwZjcyXFx1MGY2NlxcdTBmMGJcXHUwZjU0XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiXFx1MGY0MlxcdTBmNWZcXHUwZjYwXFx1MGYwYlxcdTBmNDlcXHUwZjcyXFx1MGYwYlxcdTBmNThcXHUwZjBiX1xcdTBmNDJcXHUwZjVmXFx1MGY2MFxcdTBmMGJcXHUwZjVmXFx1MGZiM1xcdTBmMGJcXHUwZjU2XFx1MGYwYl9cXHUwZjQyXFx1MGY1ZlxcdTBmNjBcXHUwZjBiXFx1MGY1OFxcdTBmNzJcXHUwZjQyXFx1MGYwYlxcdTBmNTFcXHUwZjU4XFx1MGY2MlxcdTBmMGJfXFx1MGY0MlxcdTBmNWZcXHUwZjYwXFx1MGYwYlxcdTBmNjNcXHUwZmI3XFx1MGY0MlxcdTBmMGJcXHUwZjU0XFx1MGYwYl9cXHUwZjQyXFx1MGY1ZlxcdTBmNjBcXHUwZjBiXFx1MGY1NVxcdTBmNzRcXHUwZjYyXFx1MGYwYlxcdTBmNTZcXHUwZjc0X1xcdTBmNDJcXHUwZjVmXFx1MGY2MFxcdTBmMGJcXHUwZjU0XFx1MGYwYlxcdTBmNjZcXHUwZjQ0XFx1MGY2NlxcdTBmMGJfXFx1MGY0MlxcdTBmNWZcXHUwZjYwXFx1MGYwYlxcdTBmNjZcXHUwZmE0XFx1MGY3YVxcdTBmNTNcXHUwZjBiXFx1MGY1NFxcdTBmMGJcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlxcdTBmNDlcXHUwZjcyXFx1MGYwYlxcdTBmNThcXHUwZjBiX1xcdTBmNWZcXHUwZmIzXFx1MGYwYlxcdTBmNTZcXHUwZjBiX1xcdTBmNThcXHUwZjcyXFx1MGY0MlxcdTBmMGJcXHUwZjUxXFx1MGY1OFxcdTBmNjJcXHUwZjBiX1xcdTBmNjNcXHUwZmI3XFx1MGY0MlxcdTBmMGJcXHUwZjU0XFx1MGYwYl9cXHUwZjU1XFx1MGY3NFxcdTBmNjJcXHUwZjBiXFx1MGY1NlxcdTBmNzRfXFx1MGY1NFxcdTBmMGJcXHUwZjY2XFx1MGY0NFxcdTBmNjZcXHUwZjBiX1xcdTBmNjZcXHUwZmE0XFx1MGY3YVxcdTBmNTNcXHUwZjBiXFx1MGY1NFxcdTBmMGJcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJcXHUwZjQ5XFx1MGY3MlxcdTBmMGJcXHUwZjU4XFx1MGYwYl9cXHUwZjVmXFx1MGZiM1xcdTBmMGJcXHUwZjU2XFx1MGYwYl9cXHUwZjU4XFx1MGY3MlxcdTBmNDJcXHUwZjBiXFx1MGY1MVxcdTBmNThcXHUwZjYyXFx1MGYwYl9cXHUwZjYzXFx1MGZiN1xcdTBmNDJcXHUwZjBiXFx1MGY1NFxcdTBmMGJfXFx1MGY1NVxcdTBmNzRcXHUwZjYyXFx1MGYwYlxcdTBmNTZcXHUwZjc0X1xcdTBmNTRcXHUwZjBiXFx1MGY2NlxcdTBmNDRcXHUwZjY2XFx1MGYwYl9cXHUwZjY2XFx1MGZhNFxcdTBmN2FcXHUwZjUzXFx1MGYwYlxcdTBmNTRcXHUwZjBiXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkEgaDptbVwiLExUUzpcIkEgaDptbTpzc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZLCBBIGg6bW1cIixMTExMOlwiZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltcXHUwZjUxXFx1MGY3MlxcdTBmMGJcXHUwZjYyXFx1MGY3MlxcdTBmNDRdIExUXCIsbmV4dERheTpcIltcXHUwZjY2XFx1MGY0NFxcdTBmMGJcXHUwZjQ5XFx1MGY3MlxcdTBmNTNdIExUXCIsbmV4dFdlZWs6XCJbXFx1MGY1NlxcdTBmNTFcXHUwZjc0XFx1MGY1M1xcdTBmMGJcXHUwZjU1XFx1MGZiMlxcdTBmNDJcXHUwZjBiXFx1MGY2MlxcdTBmOTdcXHUwZjdhXFx1MGY2NlxcdTBmMGJcXHUwZjU4XSwgTFRcIixsYXN0RGF5OlwiW1xcdTBmNDFcXHUwZjBiXFx1MGY2NlxcdTBmNDRdIExUXCIsbGFzdFdlZWs6XCJbXFx1MGY1NlxcdTBmNTFcXHUwZjc0XFx1MGY1M1xcdTBmMGJcXHUwZjU1XFx1MGZiMlxcdTBmNDJcXHUwZjBiXFx1MGY1OFxcdTBmNTBcXHUwZjYwXFx1MGYwYlxcdTBmNThdIGRkZGQsIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiJXMgXFx1MGY2M1xcdTBmMGJcIixwYXN0OlwiJXMgXFx1MGY2NlxcdTBmOTRcXHUwZjUzXFx1MGYwYlxcdTBmNjNcIixzOlwiXFx1MGY2M1xcdTBmNThcXHUwZjBiXFx1MGY2NlxcdTBmNDRcIixzczpcIiVkIFxcdTBmNjZcXHUwZjkwXFx1MGY2MlxcdTBmMGJcXHUwZjQ2XFx1MGYwZFwiLG06XCJcXHUwZjY2XFx1MGY5MFxcdTBmNjJcXHUwZjBiXFx1MGY1OFxcdTBmMGJcXHUwZjQyXFx1MGY0NVxcdTBmNzJcXHUwZjQyXCIsbW06XCIlZCBcXHUwZjY2XFx1MGY5MFxcdTBmNjJcXHUwZjBiXFx1MGY1OFwiLGg6XCJcXHUwZjQ2XFx1MGY3NFxcdTBmMGJcXHUwZjVhXFx1MGY3Y1xcdTBmNTFcXHUwZjBiXFx1MGY0MlxcdTBmNDVcXHUwZjcyXFx1MGY0MlwiLGhoOlwiJWQgXFx1MGY0NlxcdTBmNzRcXHUwZjBiXFx1MGY1YVxcdTBmN2NcXHUwZjUxXCIsZDpcIlxcdTBmNDlcXHUwZjcyXFx1MGY1M1xcdTBmMGJcXHUwZjQyXFx1MGY0NVxcdTBmNzJcXHUwZjQyXCIsZGQ6XCIlZCBcXHUwZjQ5XFx1MGY3MlxcdTBmNTNcXHUwZjBiXCIsTTpcIlxcdTBmNWZcXHUwZmIzXFx1MGYwYlxcdTBmNTZcXHUwZjBiXFx1MGY0MlxcdTBmNDVcXHUwZjcyXFx1MGY0MlwiLE1NOlwiJWQgXFx1MGY1ZlxcdTBmYjNcXHUwZjBiXFx1MGY1NlwiLHk6XCJcXHUwZjYzXFx1MGY3Y1xcdTBmMGJcXHUwZjQyXFx1MGY0NVxcdTBmNzJcXHUwZjQyXCIseXk6XCIlZCBcXHUwZjYzXFx1MGY3Y1wifSxwcmVwYXJzZTpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9bXFx1MGYyMVxcdTBmMjJcXHUwZjIzXFx1MGYyNFxcdTBmMjVcXHUwZjI2XFx1MGYyN1xcdTBmMjhcXHUwZjI5XFx1MGYyMF0vZyxmdW5jdGlvbihlKXtyZXR1cm4ga1tlXX0pfSxwb3N0Zm9ybWF0OmZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoL1xcZC9nLGZ1bmN0aW9uKGUpe3JldHVybiBjW2VdfSl9LG1lcmlkaWVtUGFyc2U6L1xcdTBmNThcXHUwZjVhXFx1MGY1M1xcdTBmMGJcXHUwZjU4XFx1MGY3Y3xcXHUwZjVlXFx1MGY3Y1xcdTBmNDJcXHUwZjY2XFx1MGYwYlxcdTBmNDBcXHUwZjY2fFxcdTBmNDlcXHUwZjcyXFx1MGY1M1xcdTBmMGJcXHUwZjQyXFx1MGY3NFxcdTBmNDR8XFx1MGY1MVxcdTBmNDJcXHUwZjdjXFx1MGY0NFxcdTBmMGJcXHUwZjUxXFx1MGY0MnxcXHUwZjU4XFx1MGY1YVxcdTBmNTNcXHUwZjBiXFx1MGY1OFxcdTBmN2MvLG1lcmlkaWVtSG91cjpmdW5jdGlvbihlLGEpe3JldHVybiAxMj09PWUmJihlPTApLFwiXFx1MGY1OFxcdTBmNWFcXHUwZjUzXFx1MGYwYlxcdTBmNThcXHUwZjdjXCI9PT1hJiZlPj00fHxcIlxcdTBmNDlcXHUwZjcyXFx1MGY1M1xcdTBmMGJcXHUwZjQyXFx1MGY3NFxcdTBmNDRcIj09PWEmJmU8NXx8XCJcXHUwZjUxXFx1MGY0MlxcdTBmN2NcXHUwZjQ0XFx1MGYwYlxcdTBmNTFcXHUwZjQyXCI9PT1hP2UrMTI6ZX0sbWVyaWRpZW06ZnVuY3Rpb24oZSxhLF8pe3JldHVybiBlPDQ/XCJcXHUwZjU4XFx1MGY1YVxcdTBmNTNcXHUwZjBiXFx1MGY1OFxcdTBmN2NcIjplPDEwP1wiXFx1MGY1ZVxcdTBmN2NcXHUwZjQyXFx1MGY2NlxcdTBmMGJcXHUwZjQwXFx1MGY2NlwiOmU8MTc/XCJcXHUwZjQ5XFx1MGY3MlxcdTBmNTNcXHUwZjBiXFx1MGY0MlxcdTBmNzRcXHUwZjQ0XCI6ZTwyMD9cIlxcdTBmNTFcXHUwZjQyXFx1MGY3Y1xcdTBmNDRcXHUwZjBiXFx1MGY1MVxcdTBmNDJcIjpcIlxcdTBmNThcXHUwZjVhXFx1MGY1M1xcdTBmMGJcXHUwZjU4XFx1MGY3Y1wifSx3ZWVrOntkb3c6MCxkb3k6Nn19KSxlLmRlZmluZUxvY2FsZShcImJyXCIse21vbnRoczpcIkdlbnZlcl9DJ2h3ZXZyZXJfTWV1cnpoX0VicmVsX01hZV9NZXpoZXZlbl9Hb3VlcmVfRW9zdF9Hd2VuZ29sb19IZXJlX0R1X0tlcnp1XCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiR2VuX0MnaHdlX01ldV9FYnJfTWFlX0V2ZV9Hb3VfRW9zX0d3ZV9IZXJfRHVfS2VyXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiU3VsX0x1bl9NZXVyemhfTWVyYydoZXJfWWFvdV9Hd2VuZXJfU2Fkb3JuXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJTdWxfTHVuX01ldV9NZXJfWWFvX0d3ZV9TYWRcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJTdV9MdV9NZV9NZXJfWWFfR3dfU2FcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcImhbZV1tbSBBXCIsTFRTOlwiaFtlXW1tOnNzIEFcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBbYSB2aXpdIE1NTU0gWVlZWVwiLExMTDpcIkQgW2Egdml6XSBNTU1NIFlZWVkgaFtlXW1tIEFcIixMTExMOlwiZGRkZCwgRCBbYSB2aXpdIE1NTU0gWVlZWSBoW2VdbW0gQVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltIaXppdiBkYV0gTFRcIixuZXh0RGF5OlwiW1dhcmMnaG9hemggZGFdIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtkYV0gTFRcIixsYXN0RGF5OlwiW0RlYydoIGRhXSBMVFwiLGxhc3RXZWVrOlwiZGRkZCBbcGFzZXQgZGFdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiYS1iZW5uICVzXCIscGFzdDpcIiVzICd6b1wiLHM6XCJ1biBuZWJldWQgc2Vnb25kZW5ub1xceGY5XCIsc3M6XCIlZCBlaWxlbm5cIixtOlwidXIgdnVudXRlbm5cIixtbTpwLGg6XCJ1biBldXJcIixoaDpcIiVkIGV1clwiLGQ6XCJ1biBkZXZlemhcIixkZDpwLE06XCJ1ciBtaXpcIixNTTpwLHk6XCJ1ciBibG9helwiLHl5OmZ1bmN0aW9uKGUpe3N3aXRjaChmdW5jdGlvbiBlKGEpe3JldHVybiBhPjk/ZShhJTEwKTphfShlKSl7Y2FzZSAxOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmNhc2UgOTpyZXR1cm4gZStcIiBibG9helwiO2RlZmF1bHQ6cmV0dXJuIGUrXCIgdmxvYXpcIn19fSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfShhXFx4ZjF8dmV0KS8sb3JkaW5hbDpmdW5jdGlvbihlKXtyZXR1cm4gZSsoMT09PWU/XCJhXFx4ZjFcIjpcInZldFwiKX0sd2Vlazp7ZG93OjEsZG95OjR9fSksZS5kZWZpbmVMb2NhbGUoXCJic1wiLHttb250aHM6XCJqYW51YXJfZmVicnVhcl9tYXJ0X2FwcmlsX21hal9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJhcl9va3RvYmFyX25vdmVtYmFyX2RlY2VtYmFyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiamFuLl9mZWIuX21hci5fYXByLl9tYWouX2p1bi5fanVsLl9hdWcuX3NlcC5fb2t0Ll9ub3YuX2RlYy5cIi5zcGxpdChcIl9cIiksbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czpcIm5lZGplbGphX3BvbmVkamVsamFrX3V0b3Jha19zcmlqZWRhX1xcdTAxMGRldHZydGFrX3BldGFrX3N1Ym90YVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwibmVkLl9wb24uX3V0by5fc3JpLl9cXHUwMTBkZXQuX3BldC5fc3ViLlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIm5lX3BvX3V0X3NyX1xcdTAxMGRlX3BlX3N1XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJIOm1tXCIsTFRTOlwiSDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJELiBNTU1NIFlZWVlcIixMTEw6XCJELiBNTU1NIFlZWVkgSDptbVwiLExMTEw6XCJkZGRkLCBELiBNTU1NIFlZWVkgSDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltkYW5hcyB1XSBMVFwiLG5leHREYXk6XCJbc3V0cmEgdV0gTFRcIixuZXh0V2VlazpmdW5jdGlvbigpe3N3aXRjaCh0aGlzLmRheSgpKXtjYXNlIDA6cmV0dXJuXCJbdV0gW25lZGplbGp1XSBbdV0gTFRcIjtjYXNlIDM6cmV0dXJuXCJbdV0gW3NyaWplZHVdIFt1XSBMVFwiO2Nhc2UgNjpyZXR1cm5cIlt1XSBbc3Vib3R1XSBbdV0gTFRcIjtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpjYXNlIDU6cmV0dXJuXCJbdV0gZGRkZCBbdV0gTFRcIn19LGxhc3REYXk6XCJbanVcXHUwMTBkZXIgdV0gTFRcIixsYXN0V2VlazpmdW5jdGlvbigpe3N3aXRjaCh0aGlzLmRheSgpKXtjYXNlIDA6Y2FzZSAzOnJldHVyblwiW3Byb1xcdTAxNjFsdV0gZGRkZCBbdV0gTFRcIjtjYXNlIDY6cmV0dXJuXCJbcHJvXFx1MDE2MWxlXSBbc3Vib3RlXSBbdV0gTFRcIjtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpjYXNlIDU6cmV0dXJuXCJbcHJvXFx1MDE2MWxpXSBkZGRkIFt1XSBMVFwifX0sc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiemEgJXNcIixwYXN0OlwicHJpamUgJXNcIixzOlwicGFyIHNla3VuZGlcIixzczpELG06RCxtbTpELGg6RCxoaDpELGQ6XCJkYW5cIixkZDpELE06XCJtamVzZWNcIixNTTpELHk6XCJnb2RpbnVcIix5eTpEfSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLGRveTo3fX0pLGUuZGVmaW5lTG9jYWxlKFwiY2FcIix7bW9udGhzOntzdGFuZGFsb25lOlwiZ2VuZXJfZmVicmVyX21hclxceGU3X2FicmlsX21haWdfanVueV9qdWxpb2xfYWdvc3Rfc2V0ZW1icmVfb2N0dWJyZV9ub3ZlbWJyZV9kZXNlbWJyZVwiLnNwbGl0KFwiX1wiKSxmb3JtYXQ6XCJkZSBnZW5lcl9kZSBmZWJyZXJfZGUgbWFyXFx4ZTdfZCdhYnJpbF9kZSBtYWlnX2RlIGp1bnlfZGUganVsaW9sX2QnYWdvc3RfZGUgc2V0ZW1icmVfZCdvY3R1YnJlX2RlIG5vdmVtYnJlX2RlIGRlc2VtYnJlXCIuc3BsaXQoXCJfXCIpLGlzRm9ybWF0Oi9EW29EXT8oXFxzKStNTU1NL30sbW9udGhzU2hvcnQ6XCJnZW4uX2ZlYnIuX21hclxceGU3X2Fici5fbWFpZ19qdW55X2p1bC5fYWcuX3NldC5fb2N0Ll9ub3YuX2Rlcy5cIi5zcGxpdChcIl9cIiksbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czpcImRpdW1lbmdlX2RpbGx1bnNfZGltYXJ0c19kaW1lY3Jlc19kaWpvdXNfZGl2ZW5kcmVzX2Rpc3NhYnRlXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJkZy5fZGwuX2R0Ll9kYy5fZGouX2R2Ll9kcy5cIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJkZ19kbF9kdF9kY19kal9kdl9kc1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSDptbVwiLExUUzpcIkg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFtkZV0gWVlZWVwiLGxsOlwiRCBNTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBbZGVdIFlZWVkgW2EgbGVzXSBIOm1tXCIsbGxsOlwiRCBNTU0gWVlZWSwgSDptbVwiLExMTEw6XCJkZGRkIEQgTU1NTSBbZGVdIFlZWVkgW2EgbGVzXSBIOm1tXCIsbGxsbDpcImRkZCBEIE1NTSBZWVlZLCBIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OmZ1bmN0aW9uKCl7cmV0dXJuXCJbYXZ1aSBhIFwiKygxIT09dGhpcy5ob3VycygpP1wibGVzXCI6XCJsYVwiKStcIl0gTFRcIn0sbmV4dERheTpmdW5jdGlvbigpe3JldHVyblwiW2RlbVxceGUwIGEgXCIrKDEhPT10aGlzLmhvdXJzKCk/XCJsZXNcIjpcImxhXCIpK1wiXSBMVFwifSxuZXh0V2VlazpmdW5jdGlvbigpe3JldHVyblwiZGRkZCBbYSBcIisoMSE9PXRoaXMuaG91cnMoKT9cImxlc1wiOlwibGFcIikrXCJdIExUXCJ9LGxhc3REYXk6ZnVuY3Rpb24oKXtyZXR1cm5cIlthaGlyIGEgXCIrKDEhPT10aGlzLmhvdXJzKCk/XCJsZXNcIjpcImxhXCIpK1wiXSBMVFwifSxsYXN0V2VlazpmdW5jdGlvbigpe3JldHVyblwiW2VsXSBkZGRkIFtwYXNzYXQgYSBcIisoMSE9PXRoaXMuaG91cnMoKT9cImxlc1wiOlwibGFcIikrXCJdIExUXCJ9LHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcImQnYXF1XFx4ZWQgJXNcIixwYXN0OlwiZmEgJXNcIixzOlwidW5zIHNlZ29uc1wiLHNzOlwiJWQgc2Vnb25zXCIsbTpcInVuIG1pbnV0XCIsbW06XCIlZCBtaW51dHNcIixoOlwidW5hIGhvcmFcIixoaDpcIiVkIGhvcmVzXCIsZDpcInVuIGRpYVwiLGRkOlwiJWQgZGllc1wiLE06XCJ1biBtZXNcIixNTTpcIiVkIG1lc29zXCIseTpcInVuIGFueVwiLHl5OlwiJWQgYW55c1wifSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfShyfG58dHxcXHhlOHxhKS8sb3JkaW5hbDpmdW5jdGlvbihlLGEpe3ZhciBfPTE9PT1lP1wiclwiOjI9PT1lP1wiblwiOjM9PT1lP1wiclwiOjQ9PT1lP1widFwiOlwiXFx4ZThcIjtyZXR1cm5cIndcIiE9PWEmJlwiV1wiIT09YXx8KF89XCJhXCIpLGUrX30sd2Vlazp7ZG93OjEsZG95OjR9fSk7dmFyIFQ9XCJsZWRlbl9cXHhmYW5vcl9iXFx1MDE1OWV6ZW5fZHViZW5fa3ZcXHUwMTFidGVuX1xcdTAxMGRlcnZlbl9cXHUwMTBkZXJ2ZW5lY19zcnBlbl96XFx4ZTFcXHUwMTU5XFx4ZWRfXFx1MDE1OVxceGVkamVuX2xpc3RvcGFkX3Byb3NpbmVjXCIuc3BsaXQoXCJfXCIpLGY9XCJsZWRfXFx4ZmFub19iXFx1MDE1OWVfZHViX2t2XFx1MDExYl9cXHUwMTBkdm5fXFx1MDEwZHZjX3NycF96XFx4ZTFcXHUwMTU5X1xcdTAxNTlcXHhlZGpfbGlzX3Byb1wiLnNwbGl0KFwiX1wiKTtmdW5jdGlvbiB3KGUpe3JldHVybiBlPjEmJmU8NSYmMSE9fn4oZS8xMCl9ZnVuY3Rpb24gZyhlLGEsXyxzKXt2YXIgZD1lK1wiIFwiO3N3aXRjaChfKXtjYXNlXCJzXCI6cmV0dXJuIGF8fHM/XCJwXFx4ZTFyIHNla3VuZFwiOlwicFxceGUxciBzZWt1bmRhbWlcIjtjYXNlXCJzc1wiOnJldHVybiBhfHxzP2QrKHcoZSk/XCJzZWt1bmR5XCI6XCJzZWt1bmRcIik6ZCtcInNla3VuZGFtaVwiO2JyZWFrO2Nhc2VcIm1cIjpyZXR1cm4gYT9cIm1pbnV0YVwiOnM/XCJtaW51dHVcIjpcIm1pbnV0b3VcIjtjYXNlXCJtbVwiOnJldHVybiBhfHxzP2QrKHcoZSk/XCJtaW51dHlcIjpcIm1pbnV0XCIpOmQrXCJtaW51dGFtaVwiO2JyZWFrO2Nhc2VcImhcIjpyZXR1cm4gYT9cImhvZGluYVwiOnM/XCJob2RpbnVcIjpcImhvZGlub3VcIjtjYXNlXCJoaFwiOnJldHVybiBhfHxzP2QrKHcoZSk/XCJob2RpbnlcIjpcImhvZGluXCIpOmQrXCJob2RpbmFtaVwiO2JyZWFrO2Nhc2VcImRcIjpyZXR1cm4gYXx8cz9cImRlblwiOlwiZG5lbVwiO2Nhc2VcImRkXCI6cmV0dXJuIGF8fHM/ZCsodyhlKT9cImRueVwiOlwiZG5cXHhlZFwiKTpkK1wiZG55XCI7YnJlYWs7Y2FzZVwiTVwiOnJldHVybiBhfHxzP1wibVxcdTAxMWJzXFx4ZWRjXCI6XCJtXFx1MDExYnNcXHhlZGNlbVwiO2Nhc2VcIk1NXCI6cmV0dXJuIGF8fHM/ZCsodyhlKT9cIm1cXHUwMTFic1xceGVkY2VcIjpcIm1cXHUwMTFic1xceGVkY1xcdTAxNmZcIik6ZCtcIm1cXHUwMTFic1xceGVkY2lcIjticmVhaztjYXNlXCJ5XCI6cmV0dXJuIGF8fHM/XCJyb2tcIjpcInJva2VtXCI7Y2FzZVwieXlcIjpyZXR1cm4gYXx8cz9kKyh3KGUpP1wicm9reVwiOlwibGV0XCIpOmQrXCJsZXR5XCI7YnJlYWt9fWZ1bmN0aW9uIEgoZSxhLF8scyl7dmFyIGQ9e206W1wiZWluZSBNaW51dGVcIixcImVpbmVyIE1pbnV0ZVwiXSxoOltcImVpbmUgU3R1bmRlXCIsXCJlaW5lciBTdHVuZGVcIl0sZDpbXCJlaW4gVGFnXCIsXCJlaW5lbSBUYWdcIl0sZGQ6W2UrXCIgVGFnZVwiLGUrXCIgVGFnZW5cIl0sTTpbXCJlaW4gTW9uYXRcIixcImVpbmVtIE1vbmF0XCJdLE1NOltlK1wiIE1vbmF0ZVwiLGUrXCIgTW9uYXRlblwiXSx5OltcImVpbiBKYWhyXCIsXCJlaW5lbSBKYWhyXCJdLHl5OltlK1wiIEphaHJlXCIsZStcIiBKYWhyZW5cIl19O3JldHVybiBhP2RbX11bMF06ZFtfXVsxXX1mdW5jdGlvbiBiKGUsYSxfLHMpe3ZhciBkPXttOltcImVpbmUgTWludXRlXCIsXCJlaW5lciBNaW51dGVcIl0saDpbXCJlaW5lIFN0dW5kZVwiLFwiZWluZXIgU3R1bmRlXCJdLGQ6W1wiZWluIFRhZ1wiLFwiZWluZW0gVGFnXCJdLGRkOltlK1wiIFRhZ2VcIixlK1wiIFRhZ2VuXCJdLE06W1wiZWluIE1vbmF0XCIsXCJlaW5lbSBNb25hdFwiXSxNTTpbZStcIiBNb25hdGVcIixlK1wiIE1vbmF0ZW5cIl0seTpbXCJlaW4gSmFoclwiLFwiZWluZW0gSmFoclwiXSx5eTpbZStcIiBKYWhyZVwiLGUrXCIgSmFocmVuXCJdfTtyZXR1cm4gYT9kW19dWzBdOmRbX11bMV19ZnVuY3Rpb24gUyhlLGEsXyxzKXt2YXIgZD17bTpbXCJlaW5lIE1pbnV0ZVwiLFwiZWluZXIgTWludXRlXCJdLGg6W1wiZWluZSBTdHVuZGVcIixcImVpbmVyIFN0dW5kZVwiXSxkOltcImVpbiBUYWdcIixcImVpbmVtIFRhZ1wiXSxkZDpbZStcIiBUYWdlXCIsZStcIiBUYWdlblwiXSxNOltcImVpbiBNb25hdFwiLFwiZWluZW0gTW9uYXRcIl0sTU06W2UrXCIgTW9uYXRlXCIsZStcIiBNb25hdGVuXCJdLHk6W1wiZWluIEphaHJcIixcImVpbmVtIEphaHJcIl0seXk6W2UrXCIgSmFocmVcIixlK1wiIEphaHJlblwiXX07cmV0dXJuIGE/ZFtfXVswXTpkW19dWzFdfWUuZGVmaW5lTG9jYWxlKFwiY3NcIix7bW9udGhzOlQsbW9udGhzU2hvcnQ6Zixtb250aHNQYXJzZTpmdW5jdGlvbihlLGEpe3ZhciBfLHM9W107Zm9yKF89MDtfPDEyO18rKylzW19dPW5ldyBSZWdFeHAoXCJeXCIrZVtfXStcIiR8XlwiK2FbX10rXCIkXCIsXCJpXCIpO3JldHVybiBzfShULGYpLHNob3J0TW9udGhzUGFyc2U6ZnVuY3Rpb24oZSl7dmFyIGEsXz1bXTtmb3IoYT0wO2E8MTI7YSsrKV9bYV09bmV3IFJlZ0V4cChcIl5cIitlW2FdK1wiJFwiLFwiaVwiKTtyZXR1cm4gX30oZiksbG9uZ01vbnRoc1BhcnNlOmZ1bmN0aW9uKGUpe3ZhciBhLF89W107Zm9yKGE9MDthPDEyO2ErKylfW2FdPW5ldyBSZWdFeHAoXCJeXCIrZVthXStcIiRcIixcImlcIik7cmV0dXJuIF99KFQpLHdlZWtkYXlzOlwibmVkXFx1MDExYmxlX3BvbmRcXHUwMTFibFxceGVkX1xceGZhdGVyXFx4ZmRfc3RcXHUwMTU5ZWRhX1xcdTAxMGR0dnJ0ZWtfcFxceGUxdGVrX3NvYm90YVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwibmVfcG9fXFx4ZmF0X3N0X1xcdTAxMGR0X3BcXHhlMV9zb1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIm5lX3BvX1xceGZhdF9zdF9cXHUwMTBkdF9wXFx4ZTFfc29cIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSDptbVwiLExUUzpcIkg6bW06c3NcIixMOlwiREQuTU0uWVlZWVwiLExMOlwiRC4gTU1NTSBZWVlZXCIsTExMOlwiRC4gTU1NTSBZWVlZIEg6bW1cIixMTExMOlwiZGRkZCBELiBNTU1NIFlZWVkgSDptbVwiLGw6XCJELiBNLiBZWVlZXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW2RuZXMgdl0gTFRcIixuZXh0RGF5OlwiW3pcXHhlZHRyYSB2XSBMVFwiLG5leHRXZWVrOmZ1bmN0aW9uKCl7c3dpdGNoKHRoaXMuZGF5KCkpe2Nhc2UgMDpyZXR1cm5cIlt2IG5lZFxcdTAxMWJsaSB2XSBMVFwiO2Nhc2UgMTpjYXNlIDI6cmV0dXJuXCJbdl0gZGRkZCBbdl0gTFRcIjtjYXNlIDM6cmV0dXJuXCJbdmUgc3RcXHUwMTU5ZWR1IHZdIExUXCI7Y2FzZSA0OnJldHVyblwiW3ZlIFxcdTAxMGR0dnJ0ZWsgdl0gTFRcIjtjYXNlIDU6cmV0dXJuXCJbdiBwXFx4ZTF0ZWsgdl0gTFRcIjtjYXNlIDY6cmV0dXJuXCJbdiBzb2JvdHUgdl0gTFRcIn19LGxhc3REYXk6XCJbdlxcdTAxMGRlcmEgdl0gTFRcIixsYXN0V2VlazpmdW5jdGlvbigpe3N3aXRjaCh0aGlzLmRheSgpKXtjYXNlIDA6cmV0dXJuXCJbbWludWxvdSBuZWRcXHUwMTFibGkgdl0gTFRcIjtjYXNlIDE6Y2FzZSAyOnJldHVyblwiW21pbnVsXFx4ZTldIGRkZGQgW3ZdIExUXCI7Y2FzZSAzOnJldHVyblwiW21pbnVsb3Ugc3RcXHUwMTU5ZWR1IHZdIExUXCI7Y2FzZSA0OmNhc2UgNTpyZXR1cm5cIlttaW51bFxceGZkXSBkZGRkIFt2XSBMVFwiO2Nhc2UgNjpyZXR1cm5cIlttaW51bG91IHNvYm90dSB2XSBMVFwifX0sc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiemEgJXNcIixwYXN0OlwicFxcdTAxNTllZCAlc1wiLHM6ZyxzczpnLG06ZyxtbTpnLGg6ZyxoaDpnLGQ6ZyxkZDpnLE06ZyxNTTpnLHk6Zyx5eTpnfSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLGRveTo0fX0pLGUuZGVmaW5lTG9jYWxlKFwiY3ZcIix7bW9udGhzOlwiXFx1MDQzYVxcdTA0ZDFcXHUwNDQwXFx1MDQzYlxcdTA0MzBcXHUwNDQ3X1xcdTA0M2RcXHUwNDMwXFx1MDQ0MFxcdTA0ZDFcXHUwNDQxX1xcdTA0M2ZcXHUwNDQzXFx1MDQ0OF9cXHUwNDMwXFx1MDQzYVxcdTA0MzBfXFx1MDQzY1xcdTA0MzBcXHUwNDM5X1xcdTA0YWJcXHUwNGQ3XFx1MDQ0MFxcdTA0NDJcXHUwNDNjXFx1MDQzNV9cXHUwNDQzXFx1MDQ0MlxcdTA0ZDFfXFx1MDRhYlxcdTA0NDNcXHUwNDQwXFx1MDQzYlxcdTA0MzBfXFx1MDQzMFxcdTA0MzJcXHUwNGQxXFx1MDQzZF9cXHUwNDRlXFx1MDQzZlxcdTA0MzBfXFx1MDQ0N1xcdTA0ZjNcXHUwNDNhX1xcdTA0NDBcXHUwNDMwXFx1MDQ0OFxcdTA0NDJcXHUwNDMwXFx1MDQzMlwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIlxcdTA0M2FcXHUwNGQxXFx1MDQ0MF9cXHUwNDNkXFx1MDQzMFxcdTA0NDBfXFx1MDQzZlxcdTA0NDNcXHUwNDQ4X1xcdTA0MzBcXHUwNDNhXFx1MDQzMF9cXHUwNDNjXFx1MDQzMFxcdTA0MzlfXFx1MDRhYlxcdTA0ZDdcXHUwNDQwX1xcdTA0NDNcXHUwNDQyXFx1MDRkMV9cXHUwNGFiXFx1MDQ0M1xcdTA0NDBfXFx1MDQzMFxcdTA0MzJcXHUwNDNkX1xcdTA0NGVcXHUwNDNmXFx1MDQzMF9cXHUwNDQ3XFx1MDRmM1xcdTA0M2FfXFx1MDQ0MFxcdTA0MzBcXHUwNDQ4XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiXFx1MDQzMlxcdTA0NGJcXHUwNDQwXFx1MDQ0MVxcdTA0MzBcXHUwNDQwXFx1MDQzZFxcdTA0MzhcXHUwNDNhXFx1MDQ0M1xcdTA0M2RfXFx1MDQ0MlxcdTA0NDNcXHUwNDNkXFx1MDQ0MlxcdTA0MzhcXHUwNDNhXFx1MDQ0M1xcdTA0M2RfXFx1MDQ0YlxcdTA0NDJcXHUwNDNiXFx1MDQzMFxcdTA0NDBcXHUwNDM4XFx1MDQzYVxcdTA0NDNcXHUwNDNkX1xcdTA0NGVcXHUwNDNkXFx1MDQzYVxcdTA0NDNcXHUwNDNkX1xcdTA0M2FcXHUwNGQ3XFx1MDRhYlxcdTA0M2RcXHUwNDM1XFx1MDQ0MFxcdTA0M2RcXHUwNDM4XFx1MDQzYVxcdTA0NDNcXHUwNDNkX1xcdTA0NGRcXHUwNDQwXFx1MDQzZFxcdTA0MzVcXHUwNDNhXFx1MDQ0M1xcdTA0M2RfXFx1MDQ0OFxcdTA0ZDFcXHUwNDNjXFx1MDQzMFxcdTA0NDJcXHUwNDNhXFx1MDQ0M1xcdTA0M2RcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlxcdTA0MzJcXHUwNDRiXFx1MDQ0MF9cXHUwNDQyXFx1MDQ0M1xcdTA0M2RfXFx1MDQ0YlxcdTA0NDJcXHUwNDNiX1xcdTA0NGVcXHUwNDNkX1xcdTA0M2FcXHUwNGQ3XFx1MDRhYl9cXHUwNDRkXFx1MDQ0MFxcdTA0M2RfXFx1MDQ0OFxcdTA0ZDFcXHUwNDNjXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiXFx1MDQzMlxcdTA0NDBfXFx1MDQ0MlxcdTA0M2RfXFx1MDQ0YlxcdTA0NDJfXFx1MDQ0ZVxcdTA0M2RfXFx1MDQzYVxcdTA0YWJfXFx1MDQ0ZFxcdTA0NDBfXFx1MDQ0OFxcdTA0M2NcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC1NTS1ZWVlZXCIsTEw6XCJZWVlZIFtcXHUwNGFiXFx1MDQ0M1xcdTA0M2JcXHUwNDQ1XFx1MDQzOF0gTU1NTSBbXFx1MDQ0M1xcdTA0MzlcXHUwNGQxXFx1MDQ0NVxcdTA0ZDdcXHUwNDNkXSBEWy1cXHUwNDNjXFx1MDRkN1xcdTA0NDhcXHUwNGQ3XVwiLExMTDpcIllZWVkgW1xcdTA0YWJcXHUwNDQzXFx1MDQzYlxcdTA0NDVcXHUwNDM4XSBNTU1NIFtcXHUwNDQzXFx1MDQzOVxcdTA0ZDFcXHUwNDQ1XFx1MDRkN1xcdTA0M2RdIERbLVxcdTA0M2NcXHUwNGQ3XFx1MDQ0OFxcdTA0ZDddLCBISDptbVwiLExMTEw6XCJkZGRkLCBZWVlZIFtcXHUwNGFiXFx1MDQ0M1xcdTA0M2JcXHUwNDQ1XFx1MDQzOF0gTU1NTSBbXFx1MDQ0M1xcdTA0MzlcXHUwNGQxXFx1MDQ0NVxcdTA0ZDdcXHUwNDNkXSBEWy1cXHUwNDNjXFx1MDRkN1xcdTA0NDhcXHUwNGQ3XSwgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbXFx1MDQxZlxcdTA0MzBcXHUwNDRmXFx1MDQzZF0gTFQgW1xcdTA0NDFcXHUwNDM1XFx1MDQ0NVxcdTA0MzVcXHUwNDQyXFx1MDQ0MFxcdTA0MzVdXCIsbmV4dERheTpcIltcXHUwNDJiXFx1MDQ0MFxcdTA0MzBcXHUwNDNkXSBMVCBbXFx1MDQ0MVxcdTA0MzVcXHUwNDQ1XFx1MDQzNVxcdTA0NDJcXHUwNDQwXFx1MDQzNV1cIixsYXN0RGF5OlwiW1xcdTA0ZDZcXHUwNDNkXFx1MDQzNVxcdTA0NDBdIExUIFtcXHUwNDQxXFx1MDQzNVxcdTA0NDVcXHUwNDM1XFx1MDQ0MlxcdTA0NDBcXHUwNDM1XVwiLG5leHRXZWVrOlwiW1xcdTA0YWFcXHUwNDM4XFx1MDQ0MlxcdTA0MzVcXHUwNDQxXSBkZGRkIExUIFtcXHUwNDQxXFx1MDQzNVxcdTA0NDVcXHUwNDM1XFx1MDQ0MlxcdTA0NDBcXHUwNDM1XVwiLGxhc3RXZWVrOlwiW1xcdTA0MThcXHUwNDQwXFx1MDQ0MlxcdTA0M2RcXHUwNGQ3XSBkZGRkIExUIFtcXHUwNDQxXFx1MDQzNVxcdTA0NDVcXHUwNDM1XFx1MDQ0MlxcdTA0NDBcXHUwNDM1XVwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpmdW5jdGlvbihlKXtyZXR1cm4gZSsoL1xcdTA0NDFcXHUwNDM1XFx1MDQ0NVxcdTA0MzVcXHUwNDQyJC9pLmV4ZWMoZSk/XCJcXHUwNDQwXFx1MDQzNVxcdTA0M2RcIjovXFx1MDRhYlxcdTA0NDNcXHUwNDNiJC9pLmV4ZWMoZSk/XCJcXHUwNDQyXFx1MDQzMFxcdTA0M2RcIjpcIlxcdTA0NDBcXHUwNDMwXFx1MDQzZFwiKX0scGFzdDpcIiVzIFxcdTA0M2FcXHUwNDMwXFx1MDQ0ZlxcdTA0M2JcXHUwNDNiXFx1MDQzMFwiLHM6XCJcXHUwNDNmXFx1MDRkN1xcdTA0NDAtXFx1MDQzOFxcdTA0M2EgXFx1MDRhYlxcdTA0MzVcXHUwNDNhXFx1MDQzYVxcdTA0NDNcXHUwNDNkXFx1MDQ0MlwiLHNzOlwiJWQgXFx1MDRhYlxcdTA0MzVcXHUwNDNhXFx1MDQzYVxcdTA0NDNcXHUwNDNkXFx1MDQ0MlwiLG06XCJcXHUwNDNmXFx1MDRkN1xcdTA0NDAgXFx1MDQzY1xcdTA0MzhcXHUwNDNkXFx1MDQ0M1xcdTA0NDJcIixtbTpcIiVkIFxcdTA0M2NcXHUwNDM4XFx1MDQzZFxcdTA0NDNcXHUwNDQyXCIsaDpcIlxcdTA0M2ZcXHUwNGQ3XFx1MDQ0MCBcXHUwNDQxXFx1MDQzNVxcdTA0NDVcXHUwNDM1XFx1MDQ0MlwiLGhoOlwiJWQgXFx1MDQ0MVxcdTA0MzVcXHUwNDQ1XFx1MDQzNVxcdTA0NDJcIixkOlwiXFx1MDQzZlxcdTA0ZDdcXHUwNDQwIFxcdTA0M2FcXHUwNDQzXFx1MDQzZFwiLGRkOlwiJWQgXFx1MDQzYVxcdTA0NDNcXHUwNDNkXCIsTTpcIlxcdTA0M2ZcXHUwNGQ3XFx1MDQ0MCBcXHUwNDQzXFx1MDQzOVxcdTA0ZDFcXHUwNDQ1XCIsTU06XCIlZCBcXHUwNDQzXFx1MDQzOVxcdTA0ZDFcXHUwNDQ1XCIseTpcIlxcdTA0M2ZcXHUwNGQ3XFx1MDQ0MCBcXHUwNGFiXFx1MDQ0M1xcdTA0M2JcIix5eTpcIiVkIFxcdTA0YWJcXHUwNDQzXFx1MDQzYlwifSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfS1cXHUwNDNjXFx1MDRkN1xcdTA0NDgvLG9yZGluYWw6XCIlZC1cXHUwNDNjXFx1MDRkN1xcdTA0NDhcIix3ZWVrOntkb3c6MSxkb3k6N319KSxlLmRlZmluZUxvY2FsZShcImN5XCIse21vbnRoczpcIklvbmF3cl9DaHdlZnJvcl9NYXdydGhfRWJyaWxsX01haV9NZWhlZmluX0dvcmZmZW5uYWZfQXdzdF9NZWRpX0h5ZHJlZl9UYWNod2VkZF9SaGFnZnlyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiSW9uX0Nod2VfTWF3X0Vicl9NYWlfTWVoX0dvcl9Bd3NfTWVkX0h5ZF9UYWNoX1JoYWdcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJEeWRkIFN1bF9EeWRkIExsdW5fRHlkZCBNYXdydGhfRHlkZCBNZXJjaGVyX0R5ZGQgSWF1X0R5ZGQgR3dlbmVyX0R5ZGQgU2Fkd3JuXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJTdWxfTGx1bl9NYXdfTWVyX0lhdV9Hd2VfU2FkXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiU3VfTGxfTWFfTWVfSWFfR3dfU2FcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltIZWRkaXcgYW1dIExUXCIsbmV4dERheTpcIltZZm9yeSBhbV0gTFRcIixuZXh0V2VlazpcImRkZGQgW2FtXSBMVFwiLGxhc3REYXk6XCJbRGRvZSBhbV0gTFRcIixsYXN0V2VlazpcImRkZGQgW2Rpd2V0aGFmIGFtXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIm1ld24gJXNcIixwYXN0OlwiJXMgeW4gXFx4ZjRsXCIsczpcInljaHlkaWcgZWlsaWFkYXVcIixzczpcIiVkIGVpbGlhZFwiLG06XCJtdW51ZFwiLG1tOlwiJWQgbXVudWRcIixoOlwiYXdyXCIsaGg6XCIlZCBhd3JcIixkOlwiZGl3cm5vZFwiLGRkOlwiJWQgZGl3cm5vZFwiLE06XCJtaXNcIixNTTpcIiVkIG1pc1wiLHk6XCJibHd5ZGR5blwiLHl5OlwiJWQgZmx5bmVkZFwifSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfShmZWR8YWlufGFmfGlsfHlkZHxlZHxlZykvLG9yZGluYWw6ZnVuY3Rpb24oZSl7dmFyIGE9XCJcIjtyZXR1cm4gZT4yMD9hPTQwPT09ZXx8NTA9PT1lfHw2MD09PWV8fDgwPT09ZXx8MTAwPT09ZT9cImZlZFwiOlwiYWluXCI6ZT4wJiYoYT1bXCJcIixcImFmXCIsXCJpbFwiLFwieWRkXCIsXCJ5ZGRcIixcImVkXCIsXCJlZFwiLFwiZWRcIixcImZlZFwiLFwiZmVkXCIsXCJmZWRcIixcImVnXCIsXCJmZWRcIixcImVnXCIsXCJlZ1wiLFwiZmVkXCIsXCJlZ1wiLFwiZWdcIixcImZlZFwiLFwiZWdcIixcImZlZFwiXVtlXSksZSthfSx3ZWVrOntkb3c6MSxkb3k6NH19KSxlLmRlZmluZUxvY2FsZShcImRhXCIse21vbnRoczpcImphbnVhcl9mZWJydWFyX21hcnRzX2FwcmlsX21hal9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiamFuX2ZlYl9tYXJfYXByX21hal9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZWNcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJzXFx4ZjhuZGFnX21hbmRhZ190aXJzZGFnX29uc2RhZ190b3JzZGFnX2ZyZWRhZ19sXFx4ZjhyZGFnXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJzXFx4ZjhuX21hbl90aXJfb25zX3Rvcl9mcmVfbFxceGY4clwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcInNcXHhmOF9tYV90aV9vbl90b19mcl9sXFx4ZjhcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJELiBNTU1NIFlZWVlcIixMTEw6XCJELiBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCBbZC5dIEQuIE1NTU0gWVlZWSBba2wuXSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltpIGRhZyBrbC5dIExUXCIsbmV4dERheTpcIltpIG1vcmdlbiBrbC5dIExUXCIsbmV4dFdlZWs6XCJwXFx4ZTUgZGRkZCBba2wuXSBMVFwiLGxhc3REYXk6XCJbaSBnXFx4ZTVyIGtsLl0gTFRcIixsYXN0V2VlazpcIltpXSBkZGRkW3Mga2wuXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIm9tICVzXCIscGFzdDpcIiVzIHNpZGVuXCIsczpcImZcXHhlNSBzZWt1bmRlclwiLHNzOlwiJWQgc2VrdW5kZXJcIixtOlwiZXQgbWludXRcIixtbTpcIiVkIG1pbnV0dGVyXCIsaDpcImVuIHRpbWVcIixoaDpcIiVkIHRpbWVyXCIsZDpcImVuIGRhZ1wiLGRkOlwiJWQgZGFnZVwiLE06XCJlbiBtXFx4ZTVuZWRcIixNTTpcIiVkIG1cXHhlNW5lZGVyXCIseTpcImV0IFxceGU1clwiLHl5OlwiJWQgXFx4ZTVyXCJ9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9XFwuLyxvcmRpbmFsOlwiJWQuXCIsd2Vlazp7ZG93OjEsZG95OjR9fSksZS5kZWZpbmVMb2NhbGUoXCJkZS1hdFwiLHttb250aHM6XCJKXFx4ZTRubmVyX0ZlYnJ1YXJfTVxceGU0cnpfQXByaWxfTWFpX0p1bmlfSnVsaV9BdWd1c3RfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGV6ZW1iZXJcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJKXFx4ZTRuLl9GZWIuX01cXHhlNHJ6X0Fwci5fTWFpX0p1bmlfSnVsaV9BdWcuX1NlcC5fT2t0Ll9Ob3YuX0Rlei5cIi5zcGxpdChcIl9cIiksbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czpcIlNvbm50YWdfTW9udGFnX0RpZW5zdGFnX01pdHR3b2NoX0Rvbm5lcnN0YWdfRnJlaXRhZ19TYW1zdGFnXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJTby5fTW8uX0RpLl9NaS5fRG8uX0ZyLl9TYS5cIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJTb19Nb19EaV9NaV9Eb19Gcl9TYVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJELiBNTU1NIFlZWVlcIixMTEw6XCJELiBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCwgRC4gTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW2hldXRlIHVtXSBMVCBbVWhyXVwiLHNhbWVFbHNlOlwiTFwiLG5leHREYXk6XCJbbW9yZ2VuIHVtXSBMVCBbVWhyXVwiLG5leHRXZWVrOlwiZGRkZCBbdW1dIExUIFtVaHJdXCIsbGFzdERheTpcIltnZXN0ZXJuIHVtXSBMVCBbVWhyXVwiLGxhc3RXZWVrOlwiW2xldHp0ZW5dIGRkZGQgW3VtXSBMVCBbVWhyXVwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcImluICVzXCIscGFzdDpcInZvciAlc1wiLHM6XCJlaW4gcGFhciBTZWt1bmRlblwiLHNzOlwiJWQgU2VrdW5kZW5cIixtOkgsbW06XCIlZCBNaW51dGVuXCIsaDpILGhoOlwiJWQgU3R1bmRlblwiLGQ6SCxkZDpILE06SCxNTTpILHk6SCx5eTpIfSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLGRveTo0fX0pLGUuZGVmaW5lTG9jYWxlKFwiZGUtY2hcIix7bW9udGhzOlwiSmFudWFyX0ZlYnJ1YXJfTVxceGU0cnpfQXByaWxfTWFpX0p1bmlfSnVsaV9BdWd1c3RfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGV6ZW1iZXJcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJKYW4uX0ZlYi5fTVxceGU0cnpfQXByLl9NYWlfSnVuaV9KdWxpX0F1Zy5fU2VwLl9Pa3QuX05vdi5fRGV6LlwiLnNwbGl0KFwiX1wiKSxtb250aHNQYXJzZUV4YWN0OiEwLHdlZWtkYXlzOlwiU29ubnRhZ19Nb250YWdfRGllbnN0YWdfTWl0dHdvY2hfRG9ubmVyc3RhZ19GcmVpdGFnX1NhbXN0YWdcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlNvX01vX0RpX01pX0RvX0ZyX1NhXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiU29fTW9fRGlfTWlfRG9fRnJfU2FcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQuTU0uWVlZWVwiLExMOlwiRC4gTU1NTSBZWVlZXCIsTExMOlwiRC4gTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQsIEQuIE1NTU0gWVlZWSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltoZXV0ZSB1bV0gTFQgW1Vocl1cIixzYW1lRWxzZTpcIkxcIixuZXh0RGF5OlwiW21vcmdlbiB1bV0gTFQgW1Vocl1cIixuZXh0V2VlazpcImRkZGQgW3VtXSBMVCBbVWhyXVwiLGxhc3REYXk6XCJbZ2VzdGVybiB1bV0gTFQgW1Vocl1cIixsYXN0V2VlazpcIltsZXR6dGVuXSBkZGRkIFt1bV0gTFQgW1Vocl1cIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJpbiAlc1wiLHBhc3Q6XCJ2b3IgJXNcIixzOlwiZWluIHBhYXIgU2VrdW5kZW5cIixzczpcIiVkIFNla3VuZGVuXCIsbTpiLG1tOlwiJWQgTWludXRlblwiLGg6YixoaDpcIiVkIFN0dW5kZW5cIixkOmIsZGQ6YixNOmIsTU06Yix5OmIseXk6Yn0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn1cXC4vLG9yZGluYWw6XCIlZC5cIix3ZWVrOntkb3c6MSxkb3k6NH19KSxlLmRlZmluZUxvY2FsZShcImRlXCIse21vbnRoczpcIkphbnVhcl9GZWJydWFyX01cXHhlNHJ6X0FwcmlsX01haV9KdW5pX0p1bGlfQXVndXN0X1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0RlemVtYmVyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiSmFuLl9GZWIuX01cXHhlNHJ6X0Fwci5fTWFpX0p1bmlfSnVsaV9BdWcuX1NlcC5fT2t0Ll9Ob3YuX0Rlei5cIi5zcGxpdChcIl9cIiksbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czpcIlNvbm50YWdfTW9udGFnX0RpZW5zdGFnX01pdHR3b2NoX0Rvbm5lcnN0YWdfRnJlaXRhZ19TYW1zdGFnXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJTby5fTW8uX0RpLl9NaS5fRG8uX0ZyLl9TYS5cIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJTb19Nb19EaV9NaV9Eb19Gcl9TYVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJELiBNTU1NIFlZWVlcIixMTEw6XCJELiBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCwgRC4gTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW2hldXRlIHVtXSBMVCBbVWhyXVwiLHNhbWVFbHNlOlwiTFwiLG5leHREYXk6XCJbbW9yZ2VuIHVtXSBMVCBbVWhyXVwiLG5leHRXZWVrOlwiZGRkZCBbdW1dIExUIFtVaHJdXCIsbGFzdERheTpcIltnZXN0ZXJuIHVtXSBMVCBbVWhyXVwiLGxhc3RXZWVrOlwiW2xldHp0ZW5dIGRkZGQgW3VtXSBMVCBbVWhyXVwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcImluICVzXCIscGFzdDpcInZvciAlc1wiLHM6XCJlaW4gcGFhciBTZWt1bmRlblwiLHNzOlwiJWQgU2VrdW5kZW5cIixtOlMsbW06XCIlZCBNaW51dGVuXCIsaDpTLGhoOlwiJWQgU3R1bmRlblwiLGQ6UyxkZDpTLE06UyxNTTpTLHk6Uyx5eTpTfSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLGRveTo0fX0pO3ZhciB2PVtcIlxcdTA3OTZcXHUwN2FjXFx1MDc4MlxcdTA3YWFcXHUwNzg3XFx1MDdhNlxcdTA3ODNcXHUwN2E5XCIsXCJcXHUwNzhhXFx1MDdhY1xcdTA3ODRcXHUwN2IwXFx1MDc4M1xcdTA3YWFcXHUwNzg3XFx1MDdhNlxcdTA3ODNcXHUwN2E5XCIsXCJcXHUwNzg5XFx1MDdhN1xcdTA3ODNcXHUwN2E4XFx1MDc5N1xcdTA3YWFcIixcIlxcdTA3ODdcXHUwN2FkXFx1MDc5NVxcdTA3YjBcXHUwNzgzXFx1MDdhOVxcdTA3OGRcXHUwN2FhXCIsXCJcXHUwNzg5XFx1MDdhZFwiLFwiXFx1MDc5NlxcdTA3YWJcXHUwNzgyXFx1MDdiMFwiLFwiXFx1MDc5NlxcdTA3YWFcXHUwNzhkXFx1MDdhNlxcdTA3ODdcXHUwN2E4XCIsXCJcXHUwNzg3XFx1MDdhZlxcdTA3OGVcXHUwN2E2XFx1MDc5MFxcdTA3YjBcXHUwNzkzXFx1MDdhYVwiLFwiXFx1MDc5MFxcdTA3YWNcXHUwNzk1XFx1MDdiMFxcdTA3OTNcXHUwN2FjXFx1MDc4OVxcdTA3YjBcXHUwNzg0XFx1MDdhNlxcdTA3ODNcXHUwN2FhXCIsXCJcXHUwNzg3XFx1MDdhZVxcdTA3ODZcXHUwN2IwXFx1MDc5M1xcdTA3YWZcXHUwNzg0XFx1MDdhNlxcdTA3ODNcXHUwN2FhXCIsXCJcXHUwNzgyXFx1MDdhZVxcdTA3ODhcXHUwN2FjXFx1MDc4OVxcdTA3YjBcXHUwNzg0XFx1MDdhNlxcdTA3ODNcXHUwN2FhXCIsXCJcXHUwNzkxXFx1MDdhOFxcdTA3OTBcXHUwN2FjXFx1MDc4OVxcdTA3YjBcXHUwNzg0XFx1MDdhNlxcdTA3ODNcXHUwN2FhXCJdLGo9W1wiXFx1MDc4N1xcdTA3YTdcXHUwNzhiXFx1MDdhOFxcdTA3ODdcXHUwN2IwXFx1MDc4Y1xcdTA3YTZcIixcIlxcdTA3ODBcXHUwN2FmXFx1MDc4OVxcdTA3YTZcIixcIlxcdTA3ODdcXHUwN2E2XFx1MDc4MlxcdTA3YjBcXHUwNzhlXFx1MDdhN1xcdTA3ODNcXHUwN2E2XCIsXCJcXHUwNzg0XFx1MDdhYVxcdTA3OGJcXHUwN2E2XCIsXCJcXHUwNzg0XFx1MDdhYVxcdTA3ODNcXHUwN2E3XFx1MDc5MFxcdTA3YjBcXHUwNzhhXFx1MDdhNlxcdTA3OGNcXHUwN2E4XCIsXCJcXHUwNzgwXFx1MDdhYVxcdTA3ODZcXHUwN2FhXFx1MDc4M1xcdTA3YWFcIixcIlxcdTA3ODBcXHUwN2FlXFx1MDc4MlxcdTA3YThcXHUwNzgwXFx1MDdhOFxcdTA3ODNcXHUwN2FhXCJdO2UuZGVmaW5lTG9jYWxlKFwiZHZcIix7bW9udGhzOnYsbW9udGhzU2hvcnQ6dix3ZWVrZGF5czpqLHdlZWtkYXlzU2hvcnQ6aix3ZWVrZGF5c01pbjpcIlxcdTA3ODdcXHUwN2E3XFx1MDc4YlxcdTA3YThfXFx1MDc4MFxcdTA3YWZcXHUwNzg5XFx1MDdhNl9cXHUwNzg3XFx1MDdhNlxcdTA3ODJcXHUwN2IwX1xcdTA3ODRcXHUwN2FhXFx1MDc4YlxcdTA3YTZfXFx1MDc4NFxcdTA3YWFcXHUwNzgzXFx1MDdhN19cXHUwNzgwXFx1MDdhYVxcdTA3ODZcXHUwN2FhX1xcdTA3ODBcXHUwN2FlXFx1MDc4MlxcdTA3YThcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJEL00vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LG1lcmlkaWVtUGFyc2U6L1xcdTA3ODlcXHUwNzg2fFxcdTA3ODlcXHUwNzhhLyxpc1BNOmZ1bmN0aW9uKGUpe3JldHVyblwiXFx1MDc4OVxcdTA3OGFcIj09PWV9LG1lcmlkaWVtOmZ1bmN0aW9uKGUsYSxfKXtyZXR1cm4gZTwxMj9cIlxcdTA3ODlcXHUwNzg2XCI6XCJcXHUwNzg5XFx1MDc4YVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltcXHUwNzg5XFx1MDdhOFxcdTA3ODdcXHUwN2E2XFx1MDc4YlxcdTA3YWFdIExUXCIsbmV4dERheTpcIltcXHUwNzg5XFx1MDdhN1xcdTA3OGJcXHUwN2E2XFx1MDc4OVxcdTA3YTddIExUXCIsbmV4dFdlZWs6XCJkZGRkIExUXCIsbGFzdERheTpcIltcXHUwNzg3XFx1MDdhOFxcdTA3ODdcXHUwN2IwXFx1MDc5NFxcdTA3YWNdIExUXCIsbGFzdFdlZWs6XCJbXFx1MDc4YVxcdTA3YTdcXHUwNzg3XFx1MDdhOFxcdTA3OGNcXHUwN2FhXFx1MDc4OFxcdTA3YThdIGRkZGQgTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJcXHUwNzhjXFx1MDdhY1xcdTA3ODNcXHUwN2FkXFx1MDc4ZVxcdTA3YTZcXHUwNzg3XFx1MDdhOCAlc1wiLHBhc3Q6XCJcXHUwNzg2XFx1MDdhYVxcdTA3ODNcXHUwN2E4XFx1MDc4MlxcdTA3YjAgJXNcIixzOlwiXFx1MDc5MFxcdTA3YThcXHUwNzg2XFx1MDdhYVxcdTA3ODJcXHUwN2IwXFx1MDc4Y1xcdTA3YWFcXHUwNzg2XFx1MDdhZVxcdTA3ODVcXHUwN2FjXFx1MDc4N1xcdTA3YjBcIixzczpcImQlIFxcdTA3OTBcXHUwN2E4XFx1MDc4NlxcdTA3YWFcXHUwNzgyXFx1MDdiMFxcdTA3OGNcXHUwN2FhXCIsbTpcIlxcdTA3ODlcXHUwN2E4XFx1MDc4MlxcdTA3YThcXHUwNzkzXFx1MDdhY1xcdTA3ODdcXHUwN2IwXCIsbW06XCJcXHUwNzg5XFx1MDdhOFxcdTA3ODJcXHUwN2E4XFx1MDc5M1xcdTA3YWEgJWRcIixoOlwiXFx1MDc4ZVxcdTA3YTZcXHUwNzkxXFx1MDdhOFxcdTA3ODdcXHUwN2E4XFx1MDc4M1xcdTA3YWNcXHUwNzg3XFx1MDdiMFwiLGhoOlwiXFx1MDc4ZVxcdTA3YTZcXHUwNzkxXFx1MDdhOFxcdTA3ODdcXHUwN2E4XFx1MDc4M1xcdTA3YWEgJWRcIixkOlwiXFx1MDc4YlxcdTA3YWFcXHUwNzg4XFx1MDdhNlxcdTA3ODBcXHUwN2FjXFx1MDc4N1xcdTA3YjBcIixkZDpcIlxcdTA3OGJcXHUwN2FhXFx1MDc4OFxcdTA3YTZcXHUwNzkwXFx1MDdiMCAlZFwiLE06XCJcXHUwNzg5XFx1MDdhNlxcdTA3ODBcXHUwN2FjXFx1MDc4N1xcdTA3YjBcIixNTTpcIlxcdTA3ODlcXHUwN2E2XFx1MDc5MFxcdTA3YjAgJWRcIix5OlwiXFx1MDc4N1xcdTA3YTZcXHUwNzgwXFx1MDdhNlxcdTA3ODNcXHUwN2FjXFx1MDc4N1xcdTA3YjBcIix5eTpcIlxcdTA3ODdcXHUwN2E2XFx1MDc4MFxcdTA3YTZcXHUwNzgzXFx1MDdhYSAlZFwifSxwcmVwYXJzZTpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9cXHUwNjBjL2csXCIsXCIpfSxwb3N0Zm9ybWF0OmZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoLywvZyxcIlxcdTA2MGNcIil9LHdlZWs6e2Rvdzo3LGRveToxMn19KSxlLmRlZmluZUxvY2FsZShcImVsXCIse21vbnRoc05vbWluYXRpdmVFbDpcIlxcdTAzOTlcXHUwM2IxXFx1MDNiZFxcdTAzYmZcXHUwM2M1XFx1MDNhY1xcdTAzYzFcXHUwM2I5XFx1MDNiZlxcdTAzYzJfXFx1MDNhNlxcdTAzYjVcXHUwM2IyXFx1MDNjMVxcdTAzYmZcXHUwM2M1XFx1MDNhY1xcdTAzYzFcXHUwM2I5XFx1MDNiZlxcdTAzYzJfXFx1MDM5Y1xcdTAzYWNcXHUwM2MxXFx1MDNjNFxcdTAzYjlcXHUwM2JmXFx1MDNjMl9cXHUwMzkxXFx1MDNjMFxcdTAzYzFcXHUwM2FmXFx1MDNiYlxcdTAzYjlcXHUwM2JmXFx1MDNjMl9cXHUwMzljXFx1MDNhY1xcdTAzYjlcXHUwM2JmXFx1MDNjMl9cXHUwMzk5XFx1MDNiZlxcdTAzY2RcXHUwM2JkXFx1MDNiOVxcdTAzYmZcXHUwM2MyX1xcdTAzOTlcXHUwM2JmXFx1MDNjZFxcdTAzYmJcXHUwM2I5XFx1MDNiZlxcdTAzYzJfXFx1MDM5MVxcdTAzY2RcXHUwM2IzXFx1MDNiZlxcdTAzYzVcXHUwM2MzXFx1MDNjNFxcdTAzYmZcXHUwM2MyX1xcdTAzYTNcXHUwM2I1XFx1MDNjMFxcdTAzYzRcXHUwM2FkXFx1MDNiY1xcdTAzYjJcXHUwM2MxXFx1MDNiOVxcdTAzYmZcXHUwM2MyX1xcdTAzOWZcXHUwM2JhXFx1MDNjNFxcdTAzY2VcXHUwM2IyXFx1MDNjMVxcdTAzYjlcXHUwM2JmXFx1MDNjMl9cXHUwMzlkXFx1MDNiZlxcdTAzYWRcXHUwM2JjXFx1MDNiMlxcdTAzYzFcXHUwM2I5XFx1MDNiZlxcdTAzYzJfXFx1MDM5NFxcdTAzYjVcXHUwM2JhXFx1MDNhZFxcdTAzYmNcXHUwM2IyXFx1MDNjMVxcdTAzYjlcXHUwM2JmXFx1MDNjMlwiLnNwbGl0KFwiX1wiKSxtb250aHNHZW5pdGl2ZUVsOlwiXFx1MDM5OVxcdTAzYjFcXHUwM2JkXFx1MDNiZlxcdTAzYzVcXHUwM2IxXFx1MDNjMVxcdTAzYWZcXHUwM2JmXFx1MDNjNV9cXHUwM2E2XFx1MDNiNVxcdTAzYjJcXHUwM2MxXFx1MDNiZlxcdTAzYzVcXHUwM2IxXFx1MDNjMVxcdTAzYWZcXHUwM2JmXFx1MDNjNV9cXHUwMzljXFx1MDNiMVxcdTAzYzFcXHUwM2M0XFx1MDNhZlxcdTAzYmZcXHUwM2M1X1xcdTAzOTFcXHUwM2MwXFx1MDNjMVxcdTAzYjlcXHUwM2JiXFx1MDNhZlxcdTAzYmZcXHUwM2M1X1xcdTAzOWNcXHUwM2IxXFx1MDM5MFxcdTAzYmZcXHUwM2M1X1xcdTAzOTlcXHUwM2JmXFx1MDNjNVxcdTAzYmRcXHUwM2FmXFx1MDNiZlxcdTAzYzVfXFx1MDM5OVxcdTAzYmZcXHUwM2M1XFx1MDNiYlxcdTAzYWZcXHUwM2JmXFx1MDNjNV9cXHUwMzkxXFx1MDNjNVxcdTAzYjNcXHUwM2JmXFx1MDNjZFxcdTAzYzNcXHUwM2M0XFx1MDNiZlxcdTAzYzVfXFx1MDNhM1xcdTAzYjVcXHUwM2MwXFx1MDNjNFxcdTAzYjVcXHUwM2JjXFx1MDNiMlxcdTAzYzFcXHUwM2FmXFx1MDNiZlxcdTAzYzVfXFx1MDM5ZlxcdTAzYmFcXHUwM2M0XFx1MDNjOVxcdTAzYjJcXHUwM2MxXFx1MDNhZlxcdTAzYmZcXHUwM2M1X1xcdTAzOWRcXHUwM2JmXFx1MDNiNVxcdTAzYmNcXHUwM2IyXFx1MDNjMVxcdTAzYWZcXHUwM2JmXFx1MDNjNV9cXHUwMzk0XFx1MDNiNVxcdTAzYmFcXHUwM2I1XFx1MDNiY1xcdTAzYjJcXHUwM2MxXFx1MDNhZlxcdTAzYmZcXHUwM2M1XCIuc3BsaXQoXCJfXCIpLG1vbnRoczpmdW5jdGlvbihlLGEpe3JldHVybiBlP1wic3RyaW5nXCI9PXR5cGVvZiBhJiYvRC8udGVzdChhLnN1YnN0cmluZygwLGEuaW5kZXhPZihcIk1NTU1cIikpKT90aGlzLl9tb250aHNHZW5pdGl2ZUVsW2UubW9udGgoKV06dGhpcy5fbW9udGhzTm9taW5hdGl2ZUVsW2UubW9udGgoKV06dGhpcy5fbW9udGhzTm9taW5hdGl2ZUVsfSxtb250aHNTaG9ydDpcIlxcdTAzOTlcXHUwM2IxXFx1MDNiZF9cXHUwM2E2XFx1MDNiNVxcdTAzYjJfXFx1MDM5Y1xcdTAzYjFcXHUwM2MxX1xcdTAzOTFcXHUwM2MwXFx1MDNjMV9cXHUwMzljXFx1MDNiMVxcdTAzY2FfXFx1MDM5OVxcdTAzYmZcXHUwM2M1XFx1MDNiZF9cXHUwMzk5XFx1MDNiZlxcdTAzYzVcXHUwM2JiX1xcdTAzOTFcXHUwM2M1XFx1MDNiM19cXHUwM2EzXFx1MDNiNVxcdTAzYzBfXFx1MDM5ZlxcdTAzYmFcXHUwM2M0X1xcdTAzOWRcXHUwM2JmXFx1MDNiNV9cXHUwMzk0XFx1MDNiNVxcdTAzYmFcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJcXHUwMzlhXFx1MDNjNVxcdTAzYzFcXHUwM2I5XFx1MDNiMVxcdTAzYmFcXHUwM2FlX1xcdTAzOTRcXHUwM2I1XFx1MDNjNVxcdTAzYzRcXHUwM2FkXFx1MDNjMVxcdTAzYjFfXFx1MDNhNFxcdTAzYzFcXHUwM2FmXFx1MDNjNFxcdTAzYjdfXFx1MDNhNFxcdTAzYjVcXHUwM2M0XFx1MDNhY1xcdTAzYzFcXHUwM2M0XFx1MDNiN19cXHUwM2EwXFx1MDNhZFxcdTAzYmNcXHUwM2MwXFx1MDNjNFxcdTAzYjdfXFx1MDNhMFxcdTAzYjFcXHUwM2MxXFx1MDNiMVxcdTAzYzNcXHUwM2JhXFx1MDNiNVxcdTAzYzVcXHUwM2FlX1xcdTAzYTNcXHUwM2FjXFx1MDNiMlxcdTAzYjJcXHUwM2IxXFx1MDNjNFxcdTAzYmZcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlxcdTAzOWFcXHUwM2M1XFx1MDNjMV9cXHUwMzk0XFx1MDNiNVxcdTAzYzVfXFx1MDNhNFxcdTAzYzFcXHUwM2I5X1xcdTAzYTRcXHUwM2I1XFx1MDNjNF9cXHUwM2EwXFx1MDNiNVxcdTAzYmNfXFx1MDNhMFxcdTAzYjFcXHUwM2MxX1xcdTAzYTNcXHUwM2IxXFx1MDNiMlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIlxcdTAzOWFcXHUwM2M1X1xcdTAzOTRcXHUwM2I1X1xcdTAzYTRcXHUwM2MxX1xcdTAzYTRcXHUwM2I1X1xcdTAzYTBcXHUwM2I1X1xcdTAzYTBcXHUwM2IxX1xcdTAzYTNcXHUwM2IxXCIuc3BsaXQoXCJfXCIpLG1lcmlkaWVtOmZ1bmN0aW9uKGUsYSxfKXtyZXR1cm4gZT4xMT9fP1wiXFx1MDNiY1xcdTAzYmNcIjpcIlxcdTAzOWNcXHUwMzljXCI6Xz9cIlxcdTAzYzBcXHUwM2JjXCI6XCJcXHUwM2EwXFx1MDM5Y1wifSxpc1BNOmZ1bmN0aW9uKGUpe3JldHVyblwiXFx1MDNiY1wiPT09KGUrXCJcIikudG9Mb3dlckNhc2UoKVswXX0sbWVyaWRpZW1QYXJzZTovW1xcdTAzYTBcXHUwMzljXVxcLj9cXHUwMzljP1xcLj8vaSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJoOm1tIEFcIixMVFM6XCJoOm1tOnNzIEFcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBoOm1tIEFcIixMTExMOlwiZGRkZCwgRCBNTU1NIFlZWVkgaDptbSBBXCJ9LGNhbGVuZGFyRWw6e3NhbWVEYXk6XCJbXFx1MDNhM1xcdTAzYWVcXHUwM2JjXFx1MDNiNVxcdTAzYzFcXHUwM2IxIHt9XSBMVFwiLG5leHREYXk6XCJbXFx1MDM5MVxcdTAzY2RcXHUwM2MxXFx1MDNiOVxcdTAzYmYge31dIExUXCIsbmV4dFdlZWs6XCJkZGRkIFt7fV0gTFRcIixsYXN0RGF5OlwiW1xcdTAzYTdcXHUwM2I4XFx1MDNiNVxcdTAzYzIge31dIExUXCIsbGFzdFdlZWs6ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5kYXkoKSl7Y2FzZSA2OnJldHVyblwiW1xcdTAzYzRcXHUwM2JmIFxcdTAzYzBcXHUwM2MxXFx1MDNiZlxcdTAzYjdcXHUwM2IzXFx1MDNiZlxcdTAzY2RcXHUwM2JjXFx1MDNiNVxcdTAzYmRcXHUwM2JmXSBkZGRkIFt7fV0gTFRcIjtkZWZhdWx0OnJldHVyblwiW1xcdTAzYzRcXHUwM2I3XFx1MDNiZCBcXHUwM2MwXFx1MDNjMVxcdTAzYmZcXHUwM2I3XFx1MDNiM1xcdTAzYmZcXHUwM2NkXFx1MDNiY1xcdTAzYjVcXHUwM2JkXFx1MDNiN10gZGRkZCBbe31dIExUXCJ9fSxzYW1lRWxzZTpcIkxcIn0sY2FsZW5kYXI6ZnVuY3Rpb24oZSxhKXt2YXIgXyxzPXRoaXMuX2NhbGVuZGFyRWxbZV0sZD1hJiZhLmhvdXJzKCk7cmV0dXJuKChfPXMpaW5zdGFuY2VvZiBGdW5jdGlvbnx8XCJbb2JqZWN0IEZ1bmN0aW9uXVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKF8pKSYmKHM9cy5hcHBseShhKSkscy5yZXBsYWNlKFwie31cIixkJTEyPT0xP1wiXFx1MDNjM1xcdTAzYzRcXHUwM2I3XCI6XCJcXHUwM2MzXFx1MDNjNFxcdTAzYjlcXHUwM2MyXCIpfSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIlxcdTAzYzNcXHUwM2I1ICVzXCIscGFzdDpcIiVzIFxcdTAzYzBcXHUwM2MxXFx1MDNiOVxcdTAzYmRcIixzOlwiXFx1MDNiYlxcdTAzYWZcXHUwM2IzXFx1MDNiMSBcXHUwM2I0XFx1MDNiNVxcdTAzYzVcXHUwM2M0XFx1MDNiNVxcdTAzYzFcXHUwM2NjXFx1MDNiYlxcdTAzYjVcXHUwM2MwXFx1MDNjNFxcdTAzYjFcIixzczpcIiVkIFxcdTAzYjRcXHUwM2I1XFx1MDNjNVxcdTAzYzRcXHUwM2I1XFx1MDNjMVxcdTAzY2NcXHUwM2JiXFx1MDNiNVxcdTAzYzBcXHUwM2M0XFx1MDNiMVwiLG06XCJcXHUwM2FkXFx1MDNiZFxcdTAzYjEgXFx1MDNiYlxcdTAzYjVcXHUwM2MwXFx1MDNjNFxcdTAzY2NcIixtbTpcIiVkIFxcdTAzYmJcXHUwM2I1XFx1MDNjMFxcdTAzYzRcXHUwM2FjXCIsaDpcIlxcdTAzYmNcXHUwM2FmXFx1MDNiMSBcXHUwM2NlXFx1MDNjMVxcdTAzYjFcIixoaDpcIiVkIFxcdTAzY2VcXHUwM2MxXFx1MDNiNVxcdTAzYzJcIixkOlwiXFx1MDNiY1xcdTAzYWZcXHUwM2IxIFxcdTAzYmNcXHUwM2FkXFx1MDNjMVxcdTAzYjFcIixkZDpcIiVkIFxcdTAzYmNcXHUwM2FkXFx1MDNjMVxcdTAzYjVcXHUwM2MyXCIsTTpcIlxcdTAzYWRcXHUwM2JkXFx1MDNiMVxcdTAzYzIgXFx1MDNiY1xcdTAzYWVcXHUwM2JkXFx1MDNiMVxcdTAzYzJcIixNTTpcIiVkIFxcdTAzYmNcXHUwM2FlXFx1MDNiZFxcdTAzYjVcXHUwM2MyXCIseTpcIlxcdTAzYWRcXHUwM2JkXFx1MDNiMVxcdTAzYzIgXFx1MDNjN1xcdTAzYzFcXHUwM2NjXFx1MDNiZFxcdTAzYmZcXHUwM2MyXCIseXk6XCIlZCBcXHUwM2M3XFx1MDNjMVxcdTAzY2NcXHUwM2JkXFx1MDNiOVxcdTAzYjFcIn0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn1cXHUwM2I3LyxvcmRpbmFsOlwiJWRcXHUwM2I3XCIsd2Vlazp7ZG93OjEsZG95OjR9fSksZS5kZWZpbmVMb2NhbGUoXCJlbi1hdVwiLHttb250aHM6XCJKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWNcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiU3VfTW9fVHVfV2VfVGhfRnJfU2FcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiaDptbSBBXCIsTFRTOlwiaDptbTpzcyBBXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgaDptbSBBXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltUb2RheSBhdF0gTFRcIixuZXh0RGF5OlwiW1RvbW9ycm93IGF0XSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbYXRdIExUXCIsbGFzdERheTpcIltZZXN0ZXJkYXkgYXRdIExUXCIsbGFzdFdlZWs6XCJbTGFzdF0gZGRkZCBbYXRdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiaW4gJXNcIixwYXN0OlwiJXMgYWdvXCIsczpcImEgZmV3IHNlY29uZHNcIixzczpcIiVkIHNlY29uZHNcIixtOlwiYSBtaW51dGVcIixtbTpcIiVkIG1pbnV0ZXNcIixoOlwiYW4gaG91clwiLGhoOlwiJWQgaG91cnNcIixkOlwiYSBkYXlcIixkZDpcIiVkIGRheXNcIixNOlwiYSBtb250aFwiLE1NOlwiJWQgbW9udGhzXCIseTpcImEgeWVhclwiLHl5OlwiJWQgeWVhcnNcIn0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxvcmRpbmFsOmZ1bmN0aW9uKGUpe3ZhciBhPWUlMTA7cmV0dXJuIGUrKDE9PX5+KGUlMTAwLzEwKT9cInRoXCI6MT09PWE/XCJzdFwiOjI9PT1hP1wibmRcIjozPT09YT9cInJkXCI6XCJ0aFwiKX0sd2Vlazp7ZG93OjEsZG95OjR9fSksZS5kZWZpbmVMb2NhbGUoXCJlbi1jYVwiLHttb250aHM6XCJKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWNcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiU3VfTW9fVHVfV2VfVGhfRnJfU2FcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiaDptbSBBXCIsTFRTOlwiaDptbTpzcyBBXCIsTDpcIllZWVktTU0tRERcIixMTDpcIk1NTU0gRCwgWVlZWVwiLExMTDpcIk1NTU0gRCwgWVlZWSBoOm1tIEFcIixMTExMOlwiZGRkZCwgTU1NTSBELCBZWVlZIGg6bW0gQVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltUb2RheSBhdF0gTFRcIixuZXh0RGF5OlwiW1RvbW9ycm93IGF0XSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbYXRdIExUXCIsbGFzdERheTpcIltZZXN0ZXJkYXkgYXRdIExUXCIsbGFzdFdlZWs6XCJbTGFzdF0gZGRkZCBbYXRdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiaW4gJXNcIixwYXN0OlwiJXMgYWdvXCIsczpcImEgZmV3IHNlY29uZHNcIixzczpcIiVkIHNlY29uZHNcIixtOlwiYSBtaW51dGVcIixtbTpcIiVkIG1pbnV0ZXNcIixoOlwiYW4gaG91clwiLGhoOlwiJWQgaG91cnNcIixkOlwiYSBkYXlcIixkZDpcIiVkIGRheXNcIixNOlwiYSBtb250aFwiLE1NOlwiJWQgbW9udGhzXCIseTpcImEgeWVhclwiLHl5OlwiJWQgeWVhcnNcIn0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxvcmRpbmFsOmZ1bmN0aW9uKGUpe3ZhciBhPWUlMTA7cmV0dXJuIGUrKDE9PX5+KGUlMTAwLzEwKT9cInRoXCI6MT09PWE/XCJzdFwiOjI9PT1hP1wibmRcIjozPT09YT9cInJkXCI6XCJ0aFwiKX19KSxlLmRlZmluZUxvY2FsZShcImVuLWdiXCIse21vbnRoczpcIkphbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXJcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlY1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIlN1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXRcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJTdV9Nb19UdV9XZV9UaF9Gcl9TYVwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbVG9kYXkgYXRdIExUXCIsbmV4dERheTpcIltUb21vcnJvdyBhdF0gTFRcIixuZXh0V2VlazpcImRkZGQgW2F0XSBMVFwiLGxhc3REYXk6XCJbWWVzdGVyZGF5IGF0XSBMVFwiLGxhc3RXZWVrOlwiW0xhc3RdIGRkZGQgW2F0XSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcImluICVzXCIscGFzdDpcIiVzIGFnb1wiLHM6XCJhIGZldyBzZWNvbmRzXCIsc3M6XCIlZCBzZWNvbmRzXCIsbTpcImEgbWludXRlXCIsbW06XCIlZCBtaW51dGVzXCIsaDpcImFuIGhvdXJcIixoaDpcIiVkIGhvdXJzXCIsZDpcImEgZGF5XCIsZGQ6XCIlZCBkYXlzXCIsTTpcImEgbW9udGhcIixNTTpcIiVkIG1vbnRoc1wiLHk6XCJhIHllYXJcIix5eTpcIiVkIHllYXJzXCJ9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sb3JkaW5hbDpmdW5jdGlvbihlKXt2YXIgYT1lJTEwO3JldHVybiBlKygxPT1+fihlJTEwMC8xMCk/XCJ0aFwiOjE9PT1hP1wic3RcIjoyPT09YT9cIm5kXCI6Mz09PWE/XCJyZFwiOlwidGhcIil9LHdlZWs6e2RvdzoxLGRveTo0fX0pLGUuZGVmaW5lTG9jYWxlKFwiZW4taWVcIix7bW9udGhzOlwiSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlclwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIkphbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXlcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlN1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIlN1X01vX1R1X1dlX1RoX0ZyX1NhXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQtTU0tWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1RvZGF5IGF0XSBMVFwiLG5leHREYXk6XCJbVG9tb3Jyb3cgYXRdIExUXCIsbmV4dFdlZWs6XCJkZGRkIFthdF0gTFRcIixsYXN0RGF5OlwiW1llc3RlcmRheSBhdF0gTFRcIixsYXN0V2VlazpcIltMYXN0XSBkZGRkIFthdF0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJpbiAlc1wiLHBhc3Q6XCIlcyBhZ29cIixzOlwiYSBmZXcgc2Vjb25kc1wiLHNzOlwiJWQgc2Vjb25kc1wiLG06XCJhIG1pbnV0ZVwiLG1tOlwiJWQgbWludXRlc1wiLGg6XCJhbiBob3VyXCIsaGg6XCIlZCBob3Vyc1wiLGQ6XCJhIGRheVwiLGRkOlwiJWQgZGF5c1wiLE06XCJhIG1vbnRoXCIsTU06XCIlZCBtb250aHNcIix5OlwiYSB5ZWFyXCIseXk6XCIlZCB5ZWFyc1wifSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLG9yZGluYWw6ZnVuY3Rpb24oZSl7dmFyIGE9ZSUxMDtyZXR1cm4gZSsoMT09fn4oZSUxMDAvMTApP1widGhcIjoxPT09YT9cInN0XCI6Mj09PWE/XCJuZFwiOjM9PT1hP1wicmRcIjpcInRoXCIpfSx3ZWVrOntkb3c6MSxkb3k6NH19KSxlLmRlZmluZUxvY2FsZShcImVuLWlsXCIse21vbnRoczpcIkphbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXJcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlY1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIlN1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXRcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJTdV9Nb19UdV9XZV9UaF9Gcl9TYVwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbVG9kYXkgYXRdIExUXCIsbmV4dERheTpcIltUb21vcnJvdyBhdF0gTFRcIixuZXh0V2VlazpcImRkZGQgW2F0XSBMVFwiLGxhc3REYXk6XCJbWWVzdGVyZGF5IGF0XSBMVFwiLGxhc3RXZWVrOlwiW0xhc3RdIGRkZGQgW2F0XSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcImluICVzXCIscGFzdDpcIiVzIGFnb1wiLHM6XCJhIGZldyBzZWNvbmRzXCIsbTpcImEgbWludXRlXCIsbW06XCIlZCBtaW51dGVzXCIsaDpcImFuIGhvdXJcIixoaDpcIiVkIGhvdXJzXCIsZDpcImEgZGF5XCIsZGQ6XCIlZCBkYXlzXCIsTTpcImEgbW9udGhcIixNTTpcIiVkIG1vbnRoc1wiLHk6XCJhIHllYXJcIix5eTpcIiVkIHllYXJzXCJ9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sb3JkaW5hbDpmdW5jdGlvbihlKXt2YXIgYT1lJTEwO3JldHVybiBlKygxPT1+fihlJTEwMC8xMCk/XCJ0aFwiOjE9PT1hP1wic3RcIjoyPT09YT9cIm5kXCI6Mz09PWE/XCJyZFwiOlwidGhcIil9fSksZS5kZWZpbmVMb2NhbGUoXCJlbi1uelwiLHttb250aHM6XCJKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWNcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiU3VfTW9fVHVfV2VfVGhfRnJfU2FcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiaDptbSBBXCIsTFRTOlwiaDptbTpzcyBBXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgaDptbSBBXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltUb2RheSBhdF0gTFRcIixuZXh0RGF5OlwiW1RvbW9ycm93IGF0XSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbYXRdIExUXCIsbGFzdERheTpcIltZZXN0ZXJkYXkgYXRdIExUXCIsbGFzdFdlZWs6XCJbTGFzdF0gZGRkZCBbYXRdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiaW4gJXNcIixwYXN0OlwiJXMgYWdvXCIsczpcImEgZmV3IHNlY29uZHNcIixzczpcIiVkIHNlY29uZHNcIixtOlwiYSBtaW51dGVcIixtbTpcIiVkIG1pbnV0ZXNcIixoOlwiYW4gaG91clwiLGhoOlwiJWQgaG91cnNcIixkOlwiYSBkYXlcIixkZDpcIiVkIGRheXNcIixNOlwiYSBtb250aFwiLE1NOlwiJWQgbW9udGhzXCIseTpcImEgeWVhclwiLHl5OlwiJWQgeWVhcnNcIn0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxvcmRpbmFsOmZ1bmN0aW9uKGUpe3ZhciBhPWUlMTA7cmV0dXJuIGUrKDE9PX5+KGUlMTAwLzEwKT9cInRoXCI6MT09PWE/XCJzdFwiOjI9PT1hP1wibmRcIjozPT09YT9cInJkXCI6XCJ0aFwiKX0sd2Vlazp7ZG93OjEsZG95OjR9fSksZS5kZWZpbmVMb2NhbGUoXCJlb1wiLHttb250aHM6XCJqYW51YXJvX2ZlYnJ1YXJvX21hcnRvX2Fwcmlsb19tYWpvX2p1bmlvX2p1bGlvX2FcXHUwMTZkZ3VzdG9fc2VwdGVtYnJvX29rdG9icm9fbm92ZW1icm9fZGVjZW1icm9cIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJqYW5fZmViX21hcl9hcHJfbWFqX2p1bl9qdWxfYVxcdTAxNmRnX3NlcF9va3Rfbm92X2RlY1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcImRpbWFuXFx1MDEwOW9fbHVuZG9fbWFyZG9fbWVya3JlZG9fXFx1MDEzNWFcXHUwMTZkZG9fdmVuZHJlZG9fc2FiYXRvXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJkaW1fbHVuX21hcmRfbWVya19cXHUwMTM1YVxcdTAxNmRfdmVuX3NhYlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcImRpX2x1X21hX21lX1xcdTAxMzVhX3ZlX3NhXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiWVlZWS1NTS1ERFwiLExMOlwiRFstYSBkZV0gTU1NTSwgWVlZWVwiLExMTDpcIkRbLWEgZGVdIE1NTU0sIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCwgW2xhXSBEWy1hIGRlXSBNTU1NLCBZWVlZIEhIOm1tXCJ9LG1lcmlkaWVtUGFyc2U6L1thcF1cXC50XFwubS9pLGlzUE06ZnVuY3Rpb24oZSl7cmV0dXJuXCJwXCI9PT1lLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpfSxtZXJpZGllbTpmdW5jdGlvbihlLGEsXyl7cmV0dXJuIGU+MTE/Xz9cInAudC5tLlwiOlwiUC5ULk0uXCI6Xz9cImEudC5tLlwiOlwiQS5ULk0uXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW0hvZGlhXFx1MDE2ZCBqZV0gTFRcIixuZXh0RGF5OlwiW01vcmdhXFx1MDE2ZCBqZV0gTFRcIixuZXh0V2VlazpcImRkZGQgW2plXSBMVFwiLGxhc3REYXk6XCJbSGllcmFcXHUwMTZkIGplXSBMVFwiLGxhc3RXZWVrOlwiW3Bhc2ludGFdIGRkZGQgW2plXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcInBvc3QgJXNcIixwYXN0OlwiYW50YVxcdTAxNmQgJXNcIixzOlwic2VrdW5kb2pcIixzczpcIiVkIHNla3VuZG9qXCIsbTpcIm1pbnV0b1wiLG1tOlwiJWQgbWludXRvalwiLGg6XCJob3JvXCIsaGg6XCIlZCBob3JvalwiLGQ6XCJ0YWdvXCIsZGQ6XCIlZCB0YWdvalwiLE06XCJtb25hdG9cIixNTTpcIiVkIG1vbmF0b2pcIix5OlwiamFyb1wiLHl5OlwiJWQgamFyb2pcIn0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn1hLyxvcmRpbmFsOlwiJWRhXCIsd2Vlazp7ZG93OjEsZG95Ojd9fSk7dmFyIHg9XCJlbmUuX2ZlYi5fbWFyLl9hYnIuX21heS5fanVuLl9qdWwuX2Fnby5fc2VwLl9vY3QuX25vdi5fZGljLlwiLnNwbGl0KFwiX1wiKSxQPVwiZW5lX2ZlYl9tYXJfYWJyX21heV9qdW5fanVsX2Fnb19zZXBfb2N0X25vdl9kaWNcIi5zcGxpdChcIl9cIiksVz1bL15lbmUvaSwvXmZlYi9pLC9ebWFyL2ksL15hYnIvaSwvXm1heS9pLC9eanVuL2ksL15qdWwvaSwvXmFnby9pLC9ec2VwL2ksL15vY3QvaSwvXm5vdi9pLC9eZGljL2ldLEE9L14oZW5lcm98ZmVicmVyb3xtYXJ6b3xhYnJpbHxtYXlvfGp1bmlvfGp1bGlvfGFnb3N0b3xzZXB0aWVtYnJlfG9jdHVicmV8bm92aWVtYnJlfGRpY2llbWJyZXxlbmVcXC4/fGZlYlxcLj98bWFyXFwuP3xhYnJcXC4/fG1heVxcLj98anVuXFwuP3xqdWxcXC4/fGFnb1xcLj98c2VwXFwuP3xvY3RcXC4/fG5vdlxcLj98ZGljXFwuPykvaTtlLmRlZmluZUxvY2FsZShcImVzLWRvXCIse21vbnRoczpcImVuZXJvX2ZlYnJlcm9fbWFyem9fYWJyaWxfbWF5b19qdW5pb19qdWxpb19hZ29zdG9fc2VwdGllbWJyZV9vY3R1YnJlX25vdmllbWJyZV9kaWNpZW1icmVcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6ZnVuY3Rpb24oZSxhKXtyZXR1cm4gZT8vLU1NTS0vLnRlc3QoYSk/UFtlLm1vbnRoKCldOnhbZS5tb250aCgpXTp4fSxtb250aHNSZWdleDpBLG1vbnRoc1Nob3J0UmVnZXg6QSxtb250aHNTdHJpY3RSZWdleDovXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlKS9pLG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6L14oZW5lXFwuP3xmZWJcXC4/fG1hclxcLj98YWJyXFwuP3xtYXlcXC4/fGp1blxcLj98anVsXFwuP3xhZ29cXC4/fHNlcFxcLj98b2N0XFwuP3xub3ZcXC4/fGRpY1xcLj8pL2ksbW9udGhzUGFyc2U6Vyxsb25nTW9udGhzUGFyc2U6VyxzaG9ydE1vbnRoc1BhcnNlOlcsd2Vla2RheXM6XCJkb21pbmdvX2x1bmVzX21hcnRlc19taVxceGU5cmNvbGVzX2p1ZXZlc192aWVybmVzX3NcXHhlMWJhZG9cIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcImRvbS5fbHVuLl9tYXIuX21pXFx4ZTkuX2p1ZS5fdmllLl9zXFx4ZTFiLlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcImRvX2x1X21hX21pX2p1X3ZpX3NcXHhlMVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiaDptbSBBXCIsTFRTOlwiaDptbTpzcyBBXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgW2RlXSBNTU1NIFtkZV0gWVlZWVwiLExMTDpcIkQgW2RlXSBNTU1NIFtkZV0gWVlZWSBoOm1tIEFcIixMTExMOlwiZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIGg6bW0gQVwifSxjYWxlbmRhcjp7c2FtZURheTpmdW5jdGlvbigpe3JldHVyblwiW2hveSBhIGxhXCIrKDEhPT10aGlzLmhvdXJzKCk/XCJzXCI6XCJcIikrXCJdIExUXCJ9LG5leHREYXk6ZnVuY3Rpb24oKXtyZXR1cm5cIlttYVxceGYxYW5hIGEgbGFcIisoMSE9PXRoaXMuaG91cnMoKT9cInNcIjpcIlwiKStcIl0gTFRcIn0sbmV4dFdlZWs6ZnVuY3Rpb24oKXtyZXR1cm5cImRkZGQgW2EgbGFcIisoMSE9PXRoaXMuaG91cnMoKT9cInNcIjpcIlwiKStcIl0gTFRcIn0sbGFzdERheTpmdW5jdGlvbigpe3JldHVyblwiW2F5ZXIgYSBsYVwiKygxIT09dGhpcy5ob3VycygpP1wic1wiOlwiXCIpK1wiXSBMVFwifSxsYXN0V2VlazpmdW5jdGlvbigpe3JldHVyblwiW2VsXSBkZGRkIFtwYXNhZG8gYSBsYVwiKygxIT09dGhpcy5ob3VycygpP1wic1wiOlwiXCIpK1wiXSBMVFwifSxzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJlbiAlc1wiLHBhc3Q6XCJoYWNlICVzXCIsczpcInVub3Mgc2VndW5kb3NcIixzczpcIiVkIHNlZ3VuZG9zXCIsbTpcInVuIG1pbnV0b1wiLG1tOlwiJWQgbWludXRvc1wiLGg6XCJ1bmEgaG9yYVwiLGhoOlwiJWQgaG9yYXNcIixkOlwidW4gZFxceGVkYVwiLGRkOlwiJWQgZFxceGVkYXNcIixNOlwidW4gbWVzXCIsTU06XCIlZCBtZXNlc1wiLHk6XCJ1biBhXFx4ZjFvXCIseXk6XCIlZCBhXFx4ZjFvc1wifSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxceGJhLyxvcmRpbmFsOlwiJWRcXHhiYVwiLHdlZWs6e2RvdzoxLGRveTo0fX0pO3ZhciBFPVwiZW5lLl9mZWIuX21hci5fYWJyLl9tYXkuX2p1bi5fanVsLl9hZ28uX3NlcC5fb2N0Ll9ub3YuX2RpYy5cIi5zcGxpdChcIl9cIiksTz1cImVuZV9mZWJfbWFyX2Ficl9tYXlfanVuX2p1bF9hZ29fc2VwX29jdF9ub3ZfZGljXCIuc3BsaXQoXCJfXCIpO2UuZGVmaW5lTG9jYWxlKFwiZXMtdXNcIix7bW9udGhzOlwiZW5lcm9fZmVicmVyb19tYXJ6b19hYnJpbF9tYXlvX2p1bmlvX2p1bGlvX2Fnb3N0b19zZXB0aWVtYnJlX29jdHVicmVfbm92aWVtYnJlX2RpY2llbWJyZVwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpmdW5jdGlvbihlLGEpe3JldHVybiBlPy8tTU1NLS8udGVzdChhKT9PW2UubW9udGgoKV06RVtlLm1vbnRoKCldOkV9LG1vbnRoc1BhcnNlRXhhY3Q6ITAsd2Vla2RheXM6XCJkb21pbmdvX2x1bmVzX21hcnRlc19taVxceGU5cmNvbGVzX2p1ZXZlc192aWVybmVzX3NcXHhlMWJhZG9cIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcImRvbS5fbHVuLl9tYXIuX21pXFx4ZTkuX2p1ZS5fdmllLl9zXFx4ZTFiLlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcImRvX2x1X21hX21pX2p1X3ZpX3NcXHhlMVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiaDptbSBBXCIsTFRTOlwiaDptbTpzcyBBXCIsTDpcIk1NL0REL1lZWVlcIixMTDpcIk1NTU0gW2RlXSBEIFtkZV0gWVlZWVwiLExMTDpcIk1NTU0gW2RlXSBEIFtkZV0gWVlZWSBoOm1tIEFcIixMTExMOlwiZGRkZCwgTU1NTSBbZGVdIEQgW2RlXSBZWVlZIGg6bW0gQVwifSxjYWxlbmRhcjp7c2FtZURheTpmdW5jdGlvbigpe3JldHVyblwiW2hveSBhIGxhXCIrKDEhPT10aGlzLmhvdXJzKCk/XCJzXCI6XCJcIikrXCJdIExUXCJ9LG5leHREYXk6ZnVuY3Rpb24oKXtyZXR1cm5cIlttYVxceGYxYW5hIGEgbGFcIisoMSE9PXRoaXMuaG91cnMoKT9cInNcIjpcIlwiKStcIl0gTFRcIn0sbmV4dFdlZWs6ZnVuY3Rpb24oKXtyZXR1cm5cImRkZGQgW2EgbGFcIisoMSE9PXRoaXMuaG91cnMoKT9cInNcIjpcIlwiKStcIl0gTFRcIn0sbGFzdERheTpmdW5jdGlvbigpe3JldHVyblwiW2F5ZXIgYSBsYVwiKygxIT09dGhpcy5ob3VycygpP1wic1wiOlwiXCIpK1wiXSBMVFwifSxsYXN0V2VlazpmdW5jdGlvbigpe3JldHVyblwiW2VsXSBkZGRkIFtwYXNhZG8gYSBsYVwiKygxIT09dGhpcy5ob3VycygpP1wic1wiOlwiXCIpK1wiXSBMVFwifSxzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJlbiAlc1wiLHBhc3Q6XCJoYWNlICVzXCIsczpcInVub3Mgc2VndW5kb3NcIixzczpcIiVkIHNlZ3VuZG9zXCIsbTpcInVuIG1pbnV0b1wiLG1tOlwiJWQgbWludXRvc1wiLGg6XCJ1bmEgaG9yYVwiLGhoOlwiJWQgaG9yYXNcIixkOlwidW4gZFxceGVkYVwiLGRkOlwiJWQgZFxceGVkYXNcIixNOlwidW4gbWVzXCIsTU06XCIlZCBtZXNlc1wiLHk6XCJ1biBhXFx4ZjFvXCIseXk6XCIlZCBhXFx4ZjFvc1wifSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxceGJhLyxvcmRpbmFsOlwiJWRcXHhiYVwiLHdlZWs6e2RvdzowLGRveTo2fX0pO3ZhciBGPVwiZW5lLl9mZWIuX21hci5fYWJyLl9tYXkuX2p1bi5fanVsLl9hZ28uX3NlcC5fb2N0Ll9ub3YuX2RpYy5cIi5zcGxpdChcIl9cIiksej1cImVuZV9mZWJfbWFyX2Ficl9tYXlfanVuX2p1bF9hZ29fc2VwX29jdF9ub3ZfZGljXCIuc3BsaXQoXCJfXCIpLEo9Wy9eZW5lL2ksL15mZWIvaSwvXm1hci9pLC9eYWJyL2ksL15tYXkvaSwvXmp1bi9pLC9eanVsL2ksL15hZ28vaSwvXnNlcC9pLC9eb2N0L2ksL15ub3YvaSwvXmRpYy9pXSxJPS9eKGVuZXJvfGZlYnJlcm98bWFyem98YWJyaWx8bWF5b3xqdW5pb3xqdWxpb3xhZ29zdG98c2VwdGllbWJyZXxvY3R1YnJlfG5vdmllbWJyZXxkaWNpZW1icmV8ZW5lXFwuP3xmZWJcXC4/fG1hclxcLj98YWJyXFwuP3xtYXlcXC4/fGp1blxcLj98anVsXFwuP3xhZ29cXC4/fHNlcFxcLj98b2N0XFwuP3xub3ZcXC4/fGRpY1xcLj8pL2k7ZnVuY3Rpb24gTihlLGEsXyxzKXt2YXIgZD17czpbXCJtXFx4ZjVuZSBzZWt1bmRpXCIsXCJtXFx4ZjVuaSBzZWt1bmRcIixcInBhYXIgc2VrdW5kaXRcIl0sc3M6W2UrXCJzZWt1bmRpXCIsZStcInNla3VuZGl0XCJdLG06W1wiXFx4ZmNoZSBtaW51dGlcIixcIlxceGZja3MgbWludXRcIl0sbW06W2UrXCIgbWludXRpXCIsZStcIiBtaW51dGl0XCJdLGg6W1wiXFx4ZmNoZSB0dW5uaVwiLFwidHVuZCBhZWdhXCIsXCJcXHhmY2tzIHR1bmRcIl0saGg6W2UrXCIgdHVubmlcIixlK1wiIHR1bmRpXCJdLGQ6W1wiXFx4ZmNoZSBwXFx4ZTRldmFcIixcIlxceGZja3MgcFxceGU0ZXZcIl0sTTpbXCJrdXUgYWphXCIsXCJrdXUgYWVnYVwiLFwiXFx4ZmNrcyBrdXVcIl0sTU06W2UrXCIga3V1XCIsZStcIiBrdXVkXCJdLHk6W1wiXFx4ZmNoZSBhYXN0YVwiLFwiYWFzdGFcIixcIlxceGZja3MgYWFzdGFcIl0seXk6W2UrXCIgYWFzdGFcIixlK1wiIGFhc3RhdFwiXX07cmV0dXJuIGE/ZFtfXVsyXT9kW19dWzJdOmRbX11bMV06cz9kW19dWzBdOmRbX11bMV19ZS5kZWZpbmVMb2NhbGUoXCJlc1wiLHttb250aHM6XCJlbmVyb19mZWJyZXJvX21hcnpvX2FicmlsX21heW9fanVuaW9fanVsaW9fYWdvc3RvX3NlcHRpZW1icmVfb2N0dWJyZV9ub3ZpZW1icmVfZGljaWVtYnJlXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OmZ1bmN0aW9uKGUsYSl7cmV0dXJuIGU/Ly1NTU0tLy50ZXN0KGEpP3pbZS5tb250aCgpXTpGW2UubW9udGgoKV06Rn0sbW9udGhzUmVnZXg6SSxtb250aHNTaG9ydFJlZ2V4OkksbW9udGhzU3RyaWN0UmVnZXg6L14oZW5lcm98ZmVicmVyb3xtYXJ6b3xhYnJpbHxtYXlvfGp1bmlvfGp1bGlvfGFnb3N0b3xzZXB0aWVtYnJlfG9jdHVicmV8bm92aWVtYnJlfGRpY2llbWJyZSkvaSxtb250aHNTaG9ydFN0cmljdFJlZ2V4Oi9eKGVuZVxcLj98ZmViXFwuP3xtYXJcXC4/fGFiclxcLj98bWF5XFwuP3xqdW5cXC4/fGp1bFxcLj98YWdvXFwuP3xzZXBcXC4/fG9jdFxcLj98bm92XFwuP3xkaWNcXC4/KS9pLG1vbnRoc1BhcnNlOkosbG9uZ01vbnRoc1BhcnNlOkosc2hvcnRNb250aHNQYXJzZTpKLHdlZWtkYXlzOlwiZG9taW5nb19sdW5lc19tYXJ0ZXNfbWlcXHhlOXJjb2xlc19qdWV2ZXNfdmllcm5lc19zXFx4ZTFiYWRvXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJkb20uX2x1bi5fbWFyLl9taVxceGU5Ll9qdWUuX3ZpZS5fc1xceGUxYi5cIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJkb19sdV9tYV9taV9qdV92aV9zXFx4ZTFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkg6bW1cIixMVFM6XCJIOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgW2RlXSBNTU1NIFtkZV0gWVlZWVwiLExMTDpcIkQgW2RlXSBNTU1NIFtkZV0gWVlZWSBIOm1tXCIsTExMTDpcImRkZGQsIEQgW2RlXSBNTU1NIFtkZV0gWVlZWSBIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OmZ1bmN0aW9uKCl7cmV0dXJuXCJbaG95IGEgbGFcIisoMSE9PXRoaXMuaG91cnMoKT9cInNcIjpcIlwiKStcIl0gTFRcIn0sbmV4dERheTpmdW5jdGlvbigpe3JldHVyblwiW21hXFx4ZjFhbmEgYSBsYVwiKygxIT09dGhpcy5ob3VycygpP1wic1wiOlwiXCIpK1wiXSBMVFwifSxuZXh0V2VlazpmdW5jdGlvbigpe3JldHVyblwiZGRkZCBbYSBsYVwiKygxIT09dGhpcy5ob3VycygpP1wic1wiOlwiXCIpK1wiXSBMVFwifSxsYXN0RGF5OmZ1bmN0aW9uKCl7cmV0dXJuXCJbYXllciBhIGxhXCIrKDEhPT10aGlzLmhvdXJzKCk/XCJzXCI6XCJcIikrXCJdIExUXCJ9LGxhc3RXZWVrOmZ1bmN0aW9uKCl7cmV0dXJuXCJbZWxdIGRkZGQgW3Bhc2FkbyBhIGxhXCIrKDEhPT10aGlzLmhvdXJzKCk/XCJzXCI6XCJcIikrXCJdIExUXCJ9LHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcImVuICVzXCIscGFzdDpcImhhY2UgJXNcIixzOlwidW5vcyBzZWd1bmRvc1wiLHNzOlwiJWQgc2VndW5kb3NcIixtOlwidW4gbWludXRvXCIsbW06XCIlZCBtaW51dG9zXCIsaDpcInVuYSBob3JhXCIsaGg6XCIlZCBob3Jhc1wiLGQ6XCJ1biBkXFx4ZWRhXCIsZGQ6XCIlZCBkXFx4ZWRhc1wiLE06XCJ1biBtZXNcIixNTTpcIiVkIG1lc2VzXCIseTpcInVuIGFcXHhmMW9cIix5eTpcIiVkIGFcXHhmMW9zXCJ9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9XFx4YmEvLG9yZGluYWw6XCIlZFxceGJhXCIsd2Vlazp7ZG93OjEsZG95OjR9fSksZS5kZWZpbmVMb2NhbGUoXCJldFwiLHttb250aHM6XCJqYWFudWFyX3ZlZWJydWFyX21cXHhlNHJ0c19hcHJpbGxfbWFpX2p1dW5pX2p1dWxpX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0b29iZXJfbm92ZW1iZXJfZGV0c2VtYmVyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiamFhbl92ZWVicl9tXFx4ZTRydHNfYXByX21haV9qdXVuaV9qdXVsaV9hdWdfc2VwdF9va3Rfbm92X2RldHNcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJwXFx4ZmNoYXBcXHhlNGV2X2VzbWFzcFxceGU0ZXZfdGVpc2lwXFx4ZTRldl9rb2xtYXBcXHhlNGV2X25lbGphcFxceGU0ZXZfcmVlZGVfbGF1cFxceGU0ZXZcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlBfRV9UX0tfTl9SX0xcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJQX0VfVF9LX05fUl9MXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkg6bW1cIixMVFM6XCJIOm1tOnNzXCIsTDpcIkRELk1NLllZWVlcIixMTDpcIkQuIE1NTU0gWVlZWVwiLExMTDpcIkQuIE1NTU0gWVlZWSBIOm1tXCIsTExMTDpcImRkZGQsIEQuIE1NTU0gWVlZWSBIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1RcXHhlNG5hLF0gTFRcIixuZXh0RGF5OlwiW0hvbW1lLF0gTFRcIixuZXh0V2VlazpcIltKXFx4ZTRyZ21pbmVdIGRkZGQgTFRcIixsYXN0RGF5OlwiW0VpbGUsXSBMVFwiLGxhc3RXZWVrOlwiW0VlbG1pbmVdIGRkZGQgTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCIlcyBwXFx4ZTRyYXN0XCIscGFzdDpcIiVzIHRhZ2FzaVwiLHM6TixzczpOLG06TixtbTpOLGg6TixoaDpOLGQ6TixkZDpcIiVkIHBcXHhlNGV2YVwiLE06TixNTTpOLHk6Tix5eTpOfSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLGRveTo0fX0pLGUuZGVmaW5lTG9jYWxlKFwiZXVcIix7bW9udGhzOlwidXJ0YXJyaWxhX290c2FpbGFfbWFydHhvYV9hcGlyaWxhX21haWF0emFfZWthaW5hX3V6dGFpbGFfYWJ1enR1YV9pcmFpbGFfdXJyaWFfYXphcm9hX2FiZW5kdWFcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJ1cnQuX290cy5fbWFyLl9hcGkuX21haS5fZWthLl91enQuX2FidS5faXJhLl91cnIuX2F6YS5fYWJlLlwiLnNwbGl0KFwiX1wiKSxtb250aHNQYXJzZUV4YWN0OiEwLHdlZWtkYXlzOlwiaWdhbmRlYV9hc3RlbGVoZW5hX2FzdGVhcnRlYV9hc3RlYXprZW5hX29zdGVndW5hX29zdGlyYWxhX2xhcnVuYmF0YVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiaWcuX2FsLl9hci5fYXouX29nLl9vbC5fbHIuXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiaWdfYWxfYXJfYXpfb2dfb2xfbHJcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiWVlZWS1NTS1ERFwiLExMOlwiWVlZWVtrb10gTU1NTVtyZW5dIERbYV1cIixMTEw6XCJZWVlZW2tvXSBNTU1NW3Jlbl0gRFthXSBISDptbVwiLExMTEw6XCJkZGRkLCBZWVlZW2tvXSBNTU1NW3Jlbl0gRFthXSBISDptbVwiLGw6XCJZWVlZLU0tRFwiLGxsOlwiWVlZWVtrb10gTU1NIERbYV1cIixsbGw6XCJZWVlZW2tvXSBNTU0gRFthXSBISDptbVwiLGxsbGw6XCJkZGQsIFlZWVlba29dIE1NTSBEW2FdIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW2dhdXJdIExUW2V0YW5dXCIsbmV4dERheTpcIltiaWhhcl0gTFRbZXRhbl1cIixuZXh0V2VlazpcImRkZGQgTFRbZXRhbl1cIixsYXN0RGF5OlwiW2F0em9dIExUW2V0YW5dXCIsbGFzdFdlZWs6XCJbYXVycmVrb10gZGRkZCBMVFtldGFuXVwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIiVzIGJhcnJ1XCIscGFzdDpcImR1ZWxhICVzXCIsczpcInNlZ3VuZG8gYmF0enVrXCIsc3M6XCIlZCBzZWd1bmRvXCIsbTpcIm1pbnV0dSBiYXRcIixtbTpcIiVkIG1pbnV0dVwiLGg6XCJvcmR1IGJhdFwiLGhoOlwiJWQgb3JkdVwiLGQ6XCJlZ3VuIGJhdFwiLGRkOlwiJWQgZWd1blwiLE06XCJoaWxhYmV0ZSBiYXRcIixNTTpcIiVkIGhpbGFiZXRlXCIseTpcInVydGUgYmF0XCIseXk6XCIlZCB1cnRlXCJ9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9XFwuLyxvcmRpbmFsOlwiJWQuXCIsd2Vlazp7ZG93OjEsZG95Ojd9fSk7dmFyIFI9ezE6XCJcXHUwNmYxXCIsMjpcIlxcdTA2ZjJcIiwzOlwiXFx1MDZmM1wiLDQ6XCJcXHUwNmY0XCIsNTpcIlxcdTA2ZjVcIiw2OlwiXFx1MDZmNlwiLDc6XCJcXHUwNmY3XCIsODpcIlxcdTA2ZjhcIiw5OlwiXFx1MDZmOVwiLDA6XCJcXHUwNmYwXCJ9LEs9e1wiXFx1MDZmMVwiOlwiMVwiLFwiXFx1MDZmMlwiOlwiMlwiLFwiXFx1MDZmM1wiOlwiM1wiLFwiXFx1MDZmNFwiOlwiNFwiLFwiXFx1MDZmNVwiOlwiNVwiLFwiXFx1MDZmNlwiOlwiNlwiLFwiXFx1MDZmN1wiOlwiN1wiLFwiXFx1MDZmOFwiOlwiOFwiLFwiXFx1MDZmOVwiOlwiOVwiLFwiXFx1MDZmMFwiOlwiMFwifTtlLmRlZmluZUxvY2FsZShcImZhXCIse21vbnRoczpcIlxcdTA2OThcXHUwNjI3XFx1MDY0NlxcdTA2NDhcXHUwNmNjXFx1MDY0N19cXHUwNjQxXFx1MDY0OFxcdTA2MzFcXHUwNmNjXFx1MDY0N19cXHUwNjQ1XFx1MDYyN1xcdTA2MzFcXHUwNjMzX1xcdTA2MjJcXHUwNjQ4XFx1MDYzMVxcdTA2Y2NcXHUwNjQ0X1xcdTA2NDVcXHUwNjQ3X1xcdTA2OThcXHUwNjQ4XFx1MDYyNlxcdTA2NDZfXFx1MDY5OFxcdTA2NDhcXHUwNjI2XFx1MDZjY1xcdTA2NDdfXFx1MDYyN1xcdTA2NDhcXHUwNjJhX1xcdTA2MzNcXHUwNjdlXFx1MDYyYVxcdTA2MjdcXHUwNjQ1XFx1MDYyOFxcdTA2MzFfXFx1MDYyN1xcdTA2YTlcXHUwNjJhXFx1MDYyOFxcdTA2MzFfXFx1MDY0NlxcdTA2NDhcXHUwNjI3XFx1MDY0NVxcdTA2MjhcXHUwNjMxX1xcdTA2MmZcXHUwNjMzXFx1MDYyN1xcdTA2NDVcXHUwNjI4XFx1MDYzMVwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIlxcdTA2OThcXHUwNjI3XFx1MDY0NlxcdTA2NDhcXHUwNmNjXFx1MDY0N19cXHUwNjQxXFx1MDY0OFxcdTA2MzFcXHUwNmNjXFx1MDY0N19cXHUwNjQ1XFx1MDYyN1xcdTA2MzFcXHUwNjMzX1xcdTA2MjJcXHUwNjQ4XFx1MDYzMVxcdTA2Y2NcXHUwNjQ0X1xcdTA2NDVcXHUwNjQ3X1xcdTA2OThcXHUwNjQ4XFx1MDYyNlxcdTA2NDZfXFx1MDY5OFxcdTA2NDhcXHUwNjI2XFx1MDZjY1xcdTA2NDdfXFx1MDYyN1xcdTA2NDhcXHUwNjJhX1xcdTA2MzNcXHUwNjdlXFx1MDYyYVxcdTA2MjdcXHUwNjQ1XFx1MDYyOFxcdTA2MzFfXFx1MDYyN1xcdTA2YTlcXHUwNjJhXFx1MDYyOFxcdTA2MzFfXFx1MDY0NlxcdTA2NDhcXHUwNjI3XFx1MDY0NVxcdTA2MjhcXHUwNjMxX1xcdTA2MmZcXHUwNjMzXFx1MDYyN1xcdTA2NDVcXHUwNjI4XFx1MDYzMVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIlxcdTA2Y2NcXHUwNmE5XFx1MjAwY1xcdTA2MzRcXHUwNjQ2XFx1MDYyOFxcdTA2NDdfXFx1MDYyZlxcdTA2NDhcXHUwNjM0XFx1MDY0NlxcdTA2MjhcXHUwNjQ3X1xcdTA2MzNcXHUwNjQ3XFx1MjAwY1xcdTA2MzRcXHUwNjQ2XFx1MDYyOFxcdTA2NDdfXFx1MDY4NlxcdTA2NDdcXHUwNjI3XFx1MDYzMVxcdTA2MzRcXHUwNjQ2XFx1MDYyOFxcdTA2NDdfXFx1MDY3ZVxcdTA2NDZcXHUwNjJjXFx1MjAwY1xcdTA2MzRcXHUwNjQ2XFx1MDYyOFxcdTA2NDdfXFx1MDYyY1xcdTA2NDVcXHUwNjM5XFx1MDY0N19cXHUwNjM0XFx1MDY0NlxcdTA2MjhcXHUwNjQ3XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJcXHUwNmNjXFx1MDZhOVxcdTIwMGNcXHUwNjM0XFx1MDY0NlxcdTA2MjhcXHUwNjQ3X1xcdTA2MmZcXHUwNjQ4XFx1MDYzNFxcdTA2NDZcXHUwNjI4XFx1MDY0N19cXHUwNjMzXFx1MDY0N1xcdTIwMGNcXHUwNjM0XFx1MDY0NlxcdTA2MjhcXHUwNjQ3X1xcdTA2ODZcXHUwNjQ3XFx1MDYyN1xcdTA2MzFcXHUwNjM0XFx1MDY0NlxcdTA2MjhcXHUwNjQ3X1xcdTA2N2VcXHUwNjQ2XFx1MDYyY1xcdTIwMGNcXHUwNjM0XFx1MDY0NlxcdTA2MjhcXHUwNjQ3X1xcdTA2MmNcXHUwNjQ1XFx1MDYzOVxcdTA2NDdfXFx1MDYzNFxcdTA2NDZcXHUwNjI4XFx1MDY0N1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIlxcdTA2Y2NfXFx1MDYyZl9cXHUwNjMzX1xcdTA2ODZfXFx1MDY3ZV9cXHUwNjJjX1xcdTA2MzRcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSBISDptbVwifSxtZXJpZGllbVBhcnNlOi9cXHUwNjQyXFx1MDYyOFxcdTA2NDQgXFx1MDYyN1xcdTA2MzIgXFx1MDYzOFxcdTA2NDdcXHUwNjMxfFxcdTA2MjhcXHUwNjM5XFx1MDYyZiBcXHUwNjI3XFx1MDYzMiBcXHUwNjM4XFx1MDY0N1xcdTA2MzEvLGlzUE06ZnVuY3Rpb24oZSl7cmV0dXJuL1xcdTA2MjhcXHUwNjM5XFx1MDYyZiBcXHUwNjI3XFx1MDYzMiBcXHUwNjM4XFx1MDY0N1xcdTA2MzEvLnRlc3QoZSl9LG1lcmlkaWVtOmZ1bmN0aW9uKGUsYSxfKXtyZXR1cm4gZTwxMj9cIlxcdTA2NDJcXHUwNjI4XFx1MDY0NCBcXHUwNjI3XFx1MDYzMiBcXHUwNjM4XFx1MDY0N1xcdTA2MzFcIjpcIlxcdTA2MjhcXHUwNjM5XFx1MDYyZiBcXHUwNjI3XFx1MDYzMiBcXHUwNjM4XFx1MDY0N1xcdTA2MzFcIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbXFx1MDYyN1xcdTA2NDVcXHUwNjMxXFx1MDY0OFxcdTA2MzIgXFx1MDYzM1xcdTA2MjdcXHUwNjM5XFx1MDYyYV0gTFRcIixuZXh0RGF5OlwiW1xcdTA2NDFcXHUwNjMxXFx1MDYyZlxcdTA2MjcgXFx1MDYzM1xcdTA2MjdcXHUwNjM5XFx1MDYyYV0gTFRcIixuZXh0V2VlazpcImRkZGQgW1xcdTA2MzNcXHUwNjI3XFx1MDYzOVxcdTA2MmFdIExUXCIsbGFzdERheTpcIltcXHUwNjJmXFx1MDZjY1xcdTA2MzFcXHUwNjQ4XFx1MDYzMiBcXHUwNjMzXFx1MDYyN1xcdTA2MzlcXHUwNjJhXSBMVFwiLGxhc3RXZWVrOlwiZGRkZCBbXFx1MDY3ZVxcdTA2Y2NcXHUwNjM0XSBbXFx1MDYzM1xcdTA2MjdcXHUwNjM5XFx1MDYyYV0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJcXHUwNjJmXFx1MDYzMSAlc1wiLHBhc3Q6XCIlcyBcXHUwNjdlXFx1MDZjY1xcdTA2MzRcIixzOlwiXFx1MDY4NlxcdTA2NDZcXHUwNjJmIFxcdTA2MmJcXHUwNjI3XFx1MDY0NlxcdTA2Y2NcXHUwNjQ3XCIsc3M6XCJcXHUwNjJiXFx1MDYyN1xcdTA2NDZcXHUwNmNjXFx1MDY0NyBkJVwiLG06XCJcXHUwNmNjXFx1MDZhOSBcXHUwNjJmXFx1MDY0MlxcdTA2Y2NcXHUwNjQyXFx1MDY0N1wiLG1tOlwiJWQgXFx1MDYyZlxcdTA2NDJcXHUwNmNjXFx1MDY0MlxcdTA2NDdcIixoOlwiXFx1MDZjY1xcdTA2YTkgXFx1MDYzM1xcdTA2MjdcXHUwNjM5XFx1MDYyYVwiLGhoOlwiJWQgXFx1MDYzM1xcdTA2MjdcXHUwNjM5XFx1MDYyYVwiLGQ6XCJcXHUwNmNjXFx1MDZhOSBcXHUwNjMxXFx1MDY0OFxcdTA2MzJcIixkZDpcIiVkIFxcdTA2MzFcXHUwNjQ4XFx1MDYzMlwiLE06XCJcXHUwNmNjXFx1MDZhOSBcXHUwNjQ1XFx1MDYyN1xcdTA2NDdcIixNTTpcIiVkIFxcdTA2NDVcXHUwNjI3XFx1MDY0N1wiLHk6XCJcXHUwNmNjXFx1MDZhOSBcXHUwNjMzXFx1MDYyN1xcdTA2NDRcIix5eTpcIiVkIFxcdTA2MzNcXHUwNjI3XFx1MDY0NFwifSxwcmVwYXJzZTpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9bXFx1MDZmMC1cXHUwNmY5XS9nLGZ1bmN0aW9uKGUpe3JldHVybiBLW2VdfSkucmVwbGFjZSgvXFx1MDYwYy9nLFwiLFwiKX0scG9zdGZvcm1hdDpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9cXGQvZyxmdW5jdGlvbihlKXtyZXR1cm4gUltlXX0pLnJlcGxhY2UoLywvZyxcIlxcdTA2MGNcIil9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9XFx1MDY0NS8sb3JkaW5hbDpcIiVkXFx1MDY0NVwiLHdlZWs6e2Rvdzo2LGRveToxMn19KTt2YXIgQz1cIm5vbGxhIHlrc2kga2Frc2kga29sbWUgbmVsalxceGU0IHZpaXNpIGt1dXNpIHNlaXRzZW1cXHhlNG4ga2FoZGVrc2FuIHloZGVrc1xceGU0blwiLnNwbGl0KFwiIFwiKSxHPVtcIm5vbGxhXCIsXCJ5aGRlblwiLFwia2FoZGVuXCIsXCJrb2xtZW5cIixcIm5lbGpcXHhlNG5cIixcInZpaWRlblwiLFwia3V1ZGVuXCIsQ1s3XSxDWzhdLENbOV1dO2Z1bmN0aW9uIEIoZSxhLF8scyl7dmFyIGQsdCxuPVwiXCI7c3dpdGNoKF8pe2Nhc2VcInNcIjpyZXR1cm4gcz9cIm11dXRhbWFuIHNla3VubmluXCI6XCJtdXV0YW1hIHNla3VudGlcIjtjYXNlXCJzc1wiOnJldHVybiBzP1wic2VrdW5uaW5cIjpcInNla3VudGlhXCI7Y2FzZVwibVwiOnJldHVybiBzP1wibWludXV0aW5cIjpcIm1pbnV1dHRpXCI7Y2FzZVwibW1cIjpuPXM/XCJtaW51dXRpblwiOlwibWludXV0dGlhXCI7YnJlYWs7Y2FzZVwiaFwiOnJldHVybiBzP1widHVubmluXCI6XCJ0dW50aVwiO2Nhc2VcImhoXCI6bj1zP1widHVubmluXCI6XCJ0dW50aWFcIjticmVhaztjYXNlXCJkXCI6cmV0dXJuIHM/XCJwXFx4ZTRpdlxceGU0blwiOlwicFxceGU0aXZcXHhlNFwiO2Nhc2VcImRkXCI6bj1zP1wicFxceGU0aXZcXHhlNG5cIjpcInBcXHhlNGl2XFx4ZTRcXHhlNFwiO2JyZWFrO2Nhc2VcIk1cIjpyZXR1cm4gcz9cImt1dWthdWRlblwiOlwia3V1a2F1c2lcIjtjYXNlXCJNTVwiOm49cz9cImt1dWthdWRlblwiOlwia3V1a2F1dHRhXCI7YnJlYWs7Y2FzZVwieVwiOnJldHVybiBzP1widnVvZGVuXCI6XCJ2dW9zaVwiO2Nhc2VcInl5XCI6bj1zP1widnVvZGVuXCI6XCJ2dW90dGFcIjticmVha31yZXR1cm4gdD1zLG49KChkPWUpPDEwP3Q/R1tkXTpDW2RdOmQpK1wiIFwiK259ZS5kZWZpbmVMb2NhbGUoXCJmaVwiLHttb250aHM6XCJ0YW1taWt1dV9oZWxtaWt1dV9tYWFsaXNrdXVfaHVodGlrdXVfdG91a29rdXVfa2VzXFx4ZTRrdXVfaGVpblxceGU0a3V1X2Vsb2t1dV9zeXlza3V1X2xva2FrdXVfbWFycmFza3V1X2pvdWx1a3V1XCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwidGFtbWlfaGVsbWlfbWFhbGlzX2h1aHRpX3RvdWtvX2tlc1xceGU0X2hlaW5cXHhlNF9lbG9fc3l5c19sb2thX21hcnJhc19qb3VsdVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcInN1bm51bnRhaV9tYWFuYW50YWlfdGlpc3RhaV9rZXNraXZpaWtrb190b3JzdGFpX3BlcmphbnRhaV9sYXVhbnRhaVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0Olwic3VfbWFfdGlfa2VfdG9fcGVfbGFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJzdV9tYV90aV9rZV90b19wZV9sYVwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISC5tbVwiLExUUzpcIkhILm1tLnNzXCIsTDpcIkRELk1NLllZWVlcIixMTDpcIkRvIE1NTU1bdGFdIFlZWVlcIixMTEw6XCJEbyBNTU1NW3RhXSBZWVlZLCBba2xvXSBISC5tbVwiLExMTEw6XCJkZGRkLCBEbyBNTU1NW3RhXSBZWVlZLCBba2xvXSBISC5tbVwiLGw6XCJELk0uWVlZWVwiLGxsOlwiRG8gTU1NIFlZWVlcIixsbGw6XCJEbyBNTU0gWVlZWSwgW2tsb10gSEgubW1cIixsbGxsOlwiZGRkLCBEbyBNTU0gWVlZWSwgW2tsb10gSEgubW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbdFxceGU0blxceGU0XFx4ZTRuXSBba2xvXSBMVFwiLG5leHREYXk6XCJbaHVvbWVubmFdIFtrbG9dIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtrbG9dIExUXCIsbGFzdERheTpcIltlaWxlbl0gW2tsb10gTFRcIixsYXN0V2VlazpcIlt2aWltZV0gZGRkZFtuYV0gW2tsb10gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCIlcyBwXFx4ZTRcXHhlNHN0XFx4ZTRcIixwYXN0OlwiJXMgc2l0dGVuXCIsczpCLHNzOkIsbTpCLG1tOkIsaDpCLGhoOkIsZDpCLGRkOkIsTTpCLE1NOkIseTpCLHl5OkJ9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9XFwuLyxvcmRpbmFsOlwiJWQuXCIsd2Vlazp7ZG93OjEsZG95OjR9fSksZS5kZWZpbmVMb2NhbGUoXCJmb1wiLHttb250aHM6XCJqYW51YXJfZmVicnVhcl9tYXJzX2FwclxceGVkbF9tYWlfanVuaV9qdWxpX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZXNlbWJlclwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcImphbl9mZWJfbWFyX2Fwcl9tYWlfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVzXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwic3VubnVkYWd1cl9tXFx4ZTFuYWRhZ3VyX3RcXHhmZHNkYWd1cl9taWt1ZGFndXJfaFxceGYzc2RhZ3VyX2ZyXFx4ZWRnZ2phZGFndXJfbGV5Z2FyZGFndXJcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcInN1bl9tXFx4ZTFuX3RcXHhmZHNfbWlrX2hcXHhmM3NfZnJcXHhlZF9sZXlcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJzdV9tXFx4ZTFfdFxceGZkX21pX2hcXHhmM19mcl9sZVwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCBELiBNTU1NLCBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xceGNkIGRhZyBrbC5dIExUXCIsbmV4dERheTpcIltcXHhjZCBtb3JnaW4ga2wuXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBba2wuXSBMVFwiLGxhc3REYXk6XCJbXFx4Y2QgZ2pcXHhlMXIga2wuXSBMVFwiLGxhc3RXZWVrOlwiW3NcXHhlZFxceGYwc3R1XSBkZGRkIFtrbF0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJ1bSAlc1wiLHBhc3Q6XCIlcyBzXFx4ZWRcXHhmMGFuaVwiLHM6XCJmXFx4ZTEgc2VrdW5kXCIsc3M6XCIlZCBzZWt1bmRpclwiLG06XCJlaW4gbWludXR0XCIsbW06XCIlZCBtaW51dHRpclwiLGg6XCJlaW4gdFxceGVkbWlcIixoaDpcIiVkIHRcXHhlZG1hclwiLGQ6XCJlaW4gZGFndXJcIixkZDpcIiVkIGRhZ2FyXCIsTTpcImVpbiBtXFx4ZTFuYVxceGYwaVwiLE1NOlwiJWQgbVxceGUxbmFcXHhmMGlyXCIseTpcImVpdHQgXFx4ZTFyXCIseXk6XCIlZCBcXHhlMXJcIn0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn1cXC4vLG9yZGluYWw6XCIlZC5cIix3ZWVrOntkb3c6MSxkb3k6NH19KSxlLmRlZmluZUxvY2FsZShcImZyLWNhXCIse21vbnRoczpcImphbnZpZXJfZlxceGU5dnJpZXJfbWFyc19hdnJpbF9tYWlfanVpbl9qdWlsbGV0X2FvXFx4ZmJ0X3NlcHRlbWJyZV9vY3RvYnJlX25vdmVtYnJlX2RcXHhlOWNlbWJyZVwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcImphbnYuX2ZcXHhlOXZyLl9tYXJzX2F2ci5fbWFpX2p1aW5fanVpbC5fYW9cXHhmYnRfc2VwdC5fb2N0Ll9ub3YuX2RcXHhlOWMuXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1BhcnNlRXhhY3Q6ITAsd2Vla2RheXM6XCJkaW1hbmNoZV9sdW5kaV9tYXJkaV9tZXJjcmVkaV9qZXVkaV92ZW5kcmVkaV9zYW1lZGlcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcImRpbS5fbHVuLl9tYXIuX21lci5famV1Ll92ZW4uX3NhbS5cIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJkaV9sdV9tYV9tZV9qZV92ZV9zYVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJZWVlZLU1NLUREXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQgRCBNTU1NIFlZWVkgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbQXVqb3VyZFxcdTIwMTlodWkgXFx4ZTBdIExUXCIsbmV4dERheTpcIltEZW1haW4gXFx4ZTBdIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtcXHhlMF0gTFRcIixsYXN0RGF5OlwiW0hpZXIgXFx4ZTBdIExUXCIsbGFzdFdlZWs6XCJkZGRkIFtkZXJuaWVyIFxceGUwXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcImRhbnMgJXNcIixwYXN0OlwiaWwgeSBhICVzXCIsczpcInF1ZWxxdWVzIHNlY29uZGVzXCIsc3M6XCIlZCBzZWNvbmRlc1wiLG06XCJ1bmUgbWludXRlXCIsbW06XCIlZCBtaW51dGVzXCIsaDpcInVuZSBoZXVyZVwiLGhoOlwiJWQgaGV1cmVzXCIsZDpcInVuIGpvdXJcIixkZDpcIiVkIGpvdXJzXCIsTTpcInVuIG1vaXNcIixNTTpcIiVkIG1vaXNcIix5OlwidW4gYW5cIix5eTpcIiVkIGFuc1wifSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfShlcnxlKS8sb3JkaW5hbDpmdW5jdGlvbihlLGEpe3N3aXRjaChhKXtkZWZhdWx0OmNhc2VcIk1cIjpjYXNlXCJRXCI6Y2FzZVwiRFwiOmNhc2VcIkRERFwiOmNhc2VcImRcIjpyZXR1cm4gZSsoMT09PWU/XCJlclwiOlwiZVwiKTtjYXNlXCJ3XCI6Y2FzZVwiV1wiOnJldHVybiBlKygxPT09ZT9cInJlXCI6XCJlXCIpfX19KSxlLmRlZmluZUxvY2FsZShcImZyLWNoXCIse21vbnRoczpcImphbnZpZXJfZlxceGU5dnJpZXJfbWFyc19hdnJpbF9tYWlfanVpbl9qdWlsbGV0X2FvXFx4ZmJ0X3NlcHRlbWJyZV9vY3RvYnJlX25vdmVtYnJlX2RcXHhlOWNlbWJyZVwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcImphbnYuX2ZcXHhlOXZyLl9tYXJzX2F2ci5fbWFpX2p1aW5fanVpbC5fYW9cXHhmYnRfc2VwdC5fb2N0Ll9ub3YuX2RcXHhlOWMuXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1BhcnNlRXhhY3Q6ITAsd2Vla2RheXM6XCJkaW1hbmNoZV9sdW5kaV9tYXJkaV9tZXJjcmVkaV9qZXVkaV92ZW5kcmVkaV9zYW1lZGlcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcImRpbS5fbHVuLl9tYXIuX21lci5famV1Ll92ZW4uX3NhbS5cIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJkaV9sdV9tYV9tZV9qZV92ZV9zYVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQgRCBNTU1NIFlZWVkgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbQXVqb3VyZFxcdTIwMTlodWkgXFx4ZTBdIExUXCIsbmV4dERheTpcIltEZW1haW4gXFx4ZTBdIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtcXHhlMF0gTFRcIixsYXN0RGF5OlwiW0hpZXIgXFx4ZTBdIExUXCIsbGFzdFdlZWs6XCJkZGRkIFtkZXJuaWVyIFxceGUwXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcImRhbnMgJXNcIixwYXN0OlwiaWwgeSBhICVzXCIsczpcInF1ZWxxdWVzIHNlY29uZGVzXCIsc3M6XCIlZCBzZWNvbmRlc1wiLG06XCJ1bmUgbWludXRlXCIsbW06XCIlZCBtaW51dGVzXCIsaDpcInVuZSBoZXVyZVwiLGhoOlwiJWQgaGV1cmVzXCIsZDpcInVuIGpvdXJcIixkZDpcIiVkIGpvdXJzXCIsTTpcInVuIG1vaXNcIixNTTpcIiVkIG1vaXNcIix5OlwidW4gYW5cIix5eTpcIiVkIGFuc1wifSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfShlcnxlKS8sb3JkaW5hbDpmdW5jdGlvbihlLGEpe3N3aXRjaChhKXtkZWZhdWx0OmNhc2VcIk1cIjpjYXNlXCJRXCI6Y2FzZVwiRFwiOmNhc2VcIkRERFwiOmNhc2VcImRcIjpyZXR1cm4gZSsoMT09PWU/XCJlclwiOlwiZVwiKTtjYXNlXCJ3XCI6Y2FzZVwiV1wiOnJldHVybiBlKygxPT09ZT9cInJlXCI6XCJlXCIpfX0sd2Vlazp7ZG93OjEsZG95OjR9fSksZS5kZWZpbmVMb2NhbGUoXCJmclwiLHttb250aHM6XCJqYW52aWVyX2ZcXHhlOXZyaWVyX21hcnNfYXZyaWxfbWFpX2p1aW5fanVpbGxldF9hb1xceGZidF9zZXB0ZW1icmVfb2N0b2JyZV9ub3ZlbWJyZV9kXFx4ZTljZW1icmVcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJqYW52Ll9mXFx4ZTl2ci5fbWFyc19hdnIuX21haV9qdWluX2p1aWwuX2FvXFx4ZmJ0X3NlcHQuX29jdC5fbm92Ll9kXFx4ZTljLlwiLnNwbGl0KFwiX1wiKSxtb250aHNQYXJzZUV4YWN0OiEwLHdlZWtkYXlzOlwiZGltYW5jaGVfbHVuZGlfbWFyZGlfbWVyY3JlZGlfamV1ZGlfdmVuZHJlZGlfc2FtZWRpXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJkaW0uX2x1bi5fbWFyLl9tZXIuX2pldS5fdmVuLl9zYW0uXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiZGlfbHVfbWFfbWVfamVfdmVfc2FcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW0F1am91cmRcXHUyMDE5aHVpIFxceGUwXSBMVFwiLG5leHREYXk6XCJbRGVtYWluIFxceGUwXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbXFx4ZTBdIExUXCIsbGFzdERheTpcIltIaWVyIFxceGUwXSBMVFwiLGxhc3RXZWVrOlwiZGRkZCBbZGVybmllciBcXHhlMF0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJkYW5zICVzXCIscGFzdDpcImlsIHkgYSAlc1wiLHM6XCJxdWVscXVlcyBzZWNvbmRlc1wiLHNzOlwiJWQgc2Vjb25kZXNcIixtOlwidW5lIG1pbnV0ZVwiLG1tOlwiJWQgbWludXRlc1wiLGg6XCJ1bmUgaGV1cmVcIixoaDpcIiVkIGhldXJlc1wiLGQ6XCJ1biBqb3VyXCIsZGQ6XCIlZCBqb3Vyc1wiLE06XCJ1biBtb2lzXCIsTU06XCIlZCBtb2lzXCIseTpcInVuIGFuXCIseXk6XCIlZCBhbnNcIn0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn0oZXJ8KS8sb3JkaW5hbDpmdW5jdGlvbihlLGEpe3N3aXRjaChhKXtjYXNlXCJEXCI6cmV0dXJuIGUrKDE9PT1lP1wiZXJcIjpcIlwiKTtkZWZhdWx0OmNhc2VcIk1cIjpjYXNlXCJRXCI6Y2FzZVwiREREXCI6Y2FzZVwiZFwiOnJldHVybiBlKygxPT09ZT9cImVyXCI6XCJlXCIpO2Nhc2VcIndcIjpjYXNlXCJXXCI6cmV0dXJuIGUrKDE9PT1lP1wicmVcIjpcImVcIil9fSx3ZWVrOntkb3c6MSxkb3k6NH19KTt2YXIgcT1cImphbi5fZmViLl9tcnQuX2Fwci5fbWFpX2p1bi5fanVsLl9hdWcuX3NlcC5fb2t0Ll9ub3YuX2Rlcy5cIi5zcGxpdChcIl9cIiksJD1cImphbl9mZWJfbXJ0X2Fwcl9tYWlfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVzXCIuc3BsaXQoXCJfXCIpO2UuZGVmaW5lTG9jYWxlKFwiZnlcIix7bW9udGhzOlwiamFubmV3YXJpc19mZWJyZXdhcmlzX21hYXJ0X2FwcmlsX21hYWllX2p1bnlfanVseV9hdWd1c3R1c19zZXB0aW1iZXJfb2t0b2Jlcl9ub3ZpbWJlcl9kZXNpbWJlclwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpmdW5jdGlvbihlLGEpe3JldHVybiBlPy8tTU1NLS8udGVzdChhKT8kW2UubW9udGgoKV06cVtlLm1vbnRoKCldOnF9LG1vbnRoc1BhcnNlRXhhY3Q6ITAsd2Vla2RheXM6XCJzbmVpbl9tb2FuZGVpX3RpaXNkZWlfd29hbnNkZWlfdG9uZ2Vyc2RlaV9mcmVlZF9zbmVvblwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0Olwic2kuX21vLl90aS5fd28uX3RvLl9mci5fc28uXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiU2lfTW9fVGlfV29fVG9fRnJfU29cIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQtTU0tWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW2hqb2VkIG9tXSBMVFwiLG5leHREYXk6XCJbbW9hcm4gb21dIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtvbV0gTFRcIixsYXN0RGF5OlwiW2p1c3RlciBvbV0gTFRcIixsYXN0V2VlazpcIltcXHhmNGZyXFx4ZmJuZV0gZGRkZCBbb21dIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwib2VyICVzXCIscGFzdDpcIiVzIGx5blwiLHM6XCJpbiBwZWFyIHNla29uZGVuXCIsc3M6XCIlZCBzZWtvbmRlblwiLG06XCJpZW4gbWluXFx4ZmF0XCIsbW06XCIlZCBtaW51dGVuXCIsaDpcImllbiBvZXJlXCIsaGg6XCIlZCBvZXJlblwiLGQ6XCJpZW4gZGVpXCIsZGQ6XCIlZCBkYWdlblwiLE06XCJpZW4gbW9hbm5lXCIsTU06XCIlZCBtb2FubmVuXCIseTpcImllbiBqaWVyXCIseXk6XCIlZCBqaWVycmVuXCJ9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9KHN0ZXxkZSkvLG9yZGluYWw6ZnVuY3Rpb24oZSl7cmV0dXJuIGUrKDE9PT1lfHw4PT09ZXx8ZT49MjA/XCJzdGVcIjpcImRlXCIpfSx3ZWVrOntkb3c6MSxkb3k6NH19KTtmdW5jdGlvbiBVKGUsYSxfLHMpe3ZhciBkPXtzOltcInRob2RkZSBzZWNvbmRhbmltXCIsXCJ0aG9kZGUgc2Vjb25kXCJdLHNzOltlK1wiIHNlY29uZGFuaW1cIixlK1wiIHNlY29uZFwiXSxtOltcImVrYSBtaW50YW5cIixcImVrIG1pbnV0ZVwiXSxtbTpbZStcIiBtaW50YW5pbVwiLGUrXCIgbWludGFtXCJdLGg6W1wiZWthIGhvcmFuXCIsXCJlayBob3JcIl0saGg6W2UrXCIgaG9yYW5pbVwiLGUrXCIgaG9yXCJdLGQ6W1wiZWthIGRpc2FuXCIsXCJlayBkaXNcIl0sZGQ6W2UrXCIgZGlzYW5pbVwiLGUrXCIgZGlzXCJdLE06W1wiZWthIG1ob2luZWFuXCIsXCJlayBtaG9pbm9cIl0sTU06W2UrXCIgbWhvaW5lYW5pbVwiLGUrXCIgbWhvaW5lXCJdLHk6W1wiZWthIHZvcnNhblwiLFwiZWsgdm9yb3NcIl0seXk6W2UrXCIgdm9yc2FuaW1cIixlK1wiIHZvcnNhbVwiXX07cmV0dXJuIGE/ZFtfXVswXTpkW19dWzFdfWUuZGVmaW5lTG9jYWxlKFwiZ2RcIix7bW9udGhzOltcIkFtIEZhb2lsbGVhY2hcIixcIkFuIEdlYXJyYW5cIixcIkFtIE1cXHhlMHJ0XCIsXCJBbiBHaWJsZWFuXCIsXCJBbiBDXFx4ZThpdGVhblwiLFwiQW4gdC1cXHhkMmdtaGlvc1wiLFwiQW4gdC1JdWNoYXJcIixcIkFuIExcXHhmOW5hc3RhbFwiLFwiQW4gdC1TdWx0YWluXCIsXCJBbiBEXFx4ZTBtaGFpclwiLFwiQW4gdC1TYW1oYWluXCIsXCJBbiBEXFx4ZjliaGxhY2hkXCJdLG1vbnRoc1Nob3J0OltcIkZhb2lcIixcIkdlYXJcIixcIk1cXHhlMHJ0XCIsXCJHaWJsXCIsXCJDXFx4ZThpdFwiLFwiXFx4ZDJnbWhcIixcIkl1Y2hcIixcIkxcXHhmOW5cIixcIlN1bHRcIixcIkRcXHhlMG1oXCIsXCJTYW1oXCIsXCJEXFx4ZjliaFwiXSxtb250aHNQYXJzZUV4YWN0OiEwLHdlZWtkYXlzOltcIkRpZFxceGYybWhuYWljaFwiLFwiRGlsdWFpblwiLFwiRGltXFx4ZTBpcnRcIixcIkRpY2lhZGFpblwiLFwiRGlhcmRhb2luXCIsXCJEaWhhb2luZVwiLFwiRGlzYXRoYWlybmVcIl0sd2Vla2RheXNTaG9ydDpbXCJEaWRcIixcIkRpbFwiLFwiRGltXCIsXCJEaWNcIixcIkRpYVwiLFwiRGloXCIsXCJEaXNcIl0sd2Vla2RheXNNaW46W1wiRFxceGYyXCIsXCJMdVwiLFwiTVxceGUwXCIsXCJDaVwiLFwiQXJcIixcIkhhXCIsXCJTYVwiXSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbQW4tZGl1Z2ggYWlnXSBMVFwiLG5leHREYXk6XCJbQS1tXFx4ZTBpcmVhY2ggYWlnXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbYWlnXSBMVFwiLGxhc3REYXk6XCJbQW4tZFxceGU4IGFpZ10gTFRcIixsYXN0V2VlazpcImRkZGQgW3NlbyBjaGFpZGhdIFthaWddIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiYW5uIGFuICVzXCIscGFzdDpcImJobyBjaGlvbm4gJXNcIixzOlwiYmVhZ2FuIGRpb2dhblwiLHNzOlwiJWQgZGlvZ2FuXCIsbTpcIm1pb25haWRcIixtbTpcIiVkIG1pb25haWRlYW5cIixoOlwidWFpclwiLGhoOlwiJWQgdWFpcmVhblwiLGQ6XCJsYXRoYVwiLGRkOlwiJWQgbGF0aGFcIixNOlwibVxceGVjb3NcIixNTTpcIiVkIG1cXHhlY29zYW5cIix5OlwiYmxpYWRobmFcIix5eTpcIiVkIGJsaWFkaG5hXCJ9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9KGR8bmF8bWgpLyxvcmRpbmFsOmZ1bmN0aW9uKGUpe3JldHVybiBlKygxPT09ZT9cImRcIjplJTEwPT0yP1wibmFcIjpcIm1oXCIpfSx3ZWVrOntkb3c6MSxkb3k6NH19KSxlLmRlZmluZUxvY2FsZShcImdsXCIse21vbnRoczpcInhhbmVpcm9fZmVicmVpcm9fbWFyem9fYWJyaWxfbWFpb194dVxceGYxb194dWxsb19hZ29zdG9fc2V0ZW1icm9fb3V0dWJyb19ub3ZlbWJyb19kZWNlbWJyb1wiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcInhhbi5fZmViLl9tYXIuX2Fici5fbWFpLl94dVxceGYxLl94dWwuX2Fnby5fc2V0Ll9vdXQuX25vdi5fZGVjLlwiLnNwbGl0KFwiX1wiKSxtb250aHNQYXJzZUV4YWN0OiEwLHdlZWtkYXlzOlwiZG9taW5nb19sdW5zX21hcnRlc19tXFx4ZTlyY29yZXNfeG92ZXNfdmVucmVzX3NcXHhlMWJhZG9cIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcImRvbS5fbHVuLl9tYXIuX21cXHhlOXIuX3hvdi5fdmVuLl9zXFx4ZTFiLlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcImRvX2x1X21hX21cXHhlOV94b192ZV9zXFx4ZTFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkg6bW1cIixMVFM6XCJIOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgW2RlXSBNTU1NIFtkZV0gWVlZWVwiLExMTDpcIkQgW2RlXSBNTU1NIFtkZV0gWVlZWSBIOm1tXCIsTExMTDpcImRkZGQsIEQgW2RlXSBNTU1NIFtkZV0gWVlZWSBIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OmZ1bmN0aW9uKCl7cmV0dXJuXCJbaG94ZSBcIisoMSE9PXRoaXMuaG91cnMoKT9cIlxceGUxc1wiOlwiXFx4ZTFcIikrXCJdIExUXCJ9LG5leHREYXk6ZnVuY3Rpb24oKXtyZXR1cm5cIlttYVxceGYxXFx4ZTEgXCIrKDEhPT10aGlzLmhvdXJzKCk/XCJcXHhlMXNcIjpcIlxceGUxXCIpK1wiXSBMVFwifSxuZXh0V2VlazpmdW5jdGlvbigpe3JldHVyblwiZGRkZCBbXCIrKDEhPT10aGlzLmhvdXJzKCk/XCJcXHhlMXNcIjpcImFcIikrXCJdIExUXCJ9LGxhc3REYXk6ZnVuY3Rpb24oKXtyZXR1cm5cIltvbnRlIFwiKygxIT09dGhpcy5ob3VycygpP1wiXFx4ZTFcIjpcImFcIikrXCJdIExUXCJ9LGxhc3RXZWVrOmZ1bmN0aW9uKCl7cmV0dXJuXCJbb10gZGRkZCBbcGFzYWRvIFwiKygxIT09dGhpcy5ob3VycygpP1wiXFx4ZTFzXCI6XCJhXCIpK1wiXSBMVFwifSxzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6ZnVuY3Rpb24oZSl7cmV0dXJuIDA9PT1lLmluZGV4T2YoXCJ1blwiKT9cIm5cIitlOlwiZW4gXCIrZX0scGFzdDpcImhhaSAlc1wiLHM6XCJ1bnMgc2VndW5kb3NcIixzczpcIiVkIHNlZ3VuZG9zXCIsbTpcInVuIG1pbnV0b1wiLG1tOlwiJWQgbWludXRvc1wiLGg6XCJ1bmhhIGhvcmFcIixoaDpcIiVkIGhvcmFzXCIsZDpcInVuIGRcXHhlZGFcIixkZDpcIiVkIGRcXHhlZGFzXCIsTTpcInVuIG1lc1wiLE1NOlwiJWQgbWVzZXNcIix5OlwidW4gYW5vXCIseXk6XCIlZCBhbm9zXCJ9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9XFx4YmEvLG9yZGluYWw6XCIlZFxceGJhXCIsd2Vlazp7ZG93OjEsZG95OjR9fSksZS5kZWZpbmVMb2NhbGUoXCJnb20tbGF0blwiLHttb250aHM6XCJKYW5lcl9GZWJyZXJfTWFyc19BYnJpbF9NYWlfSnVuX0p1bGFpX0Fnb3N0X1NldGVtYnJfT3R1YnJfTm92ZW1icl9EZXplbWJyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiSmFuLl9GZWIuX01hcnNfQWJyLl9NYWlfSnVuX0p1bC5fQWdvLl9TZXQuX090dS5fTm92Ll9EZXouXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1BhcnNlRXhhY3Q6ITAsd2Vla2RheXM6XCJBaXRhcl9Tb21hcl9Nb25nbGxhcl9CdWR2YXJfQnJlc3Rhcl9TdWtyYXJfU29uJ3ZhclwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiQWl0Ll9Tb20uX01vbi5fQnVkLl9CcmUuX1N1ay5fU29uLlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIkFpX1NtX01vX0J1X0JyX1N1X1NuXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJBIGg6bW0gW3ZhenRhXVwiLExUUzpcIkEgaDptbTpzcyBbdmF6dGFdXCIsTDpcIkRELU1NLVlZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgQSBoOm1tIFt2YXp0YV1cIixMTExMOlwiZGRkZCwgTU1NTVthY2hlYV0gRG8sIFlZWVksIEEgaDptbSBbdmF6dGFdXCIsbGxsbDpcImRkZCwgRCBNTU0gWVlZWSwgQSBoOm1tIFt2YXp0YV1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbQWl6XSBMVFwiLG5leHREYXk6XCJbRmFsZWFtXSBMVFwiLG5leHRXZWVrOlwiW0lldGEgdG9dIGRkZGRbLF0gTFRcIixsYXN0RGF5OlwiW0thbF0gTFRcIixsYXN0V2VlazpcIltGYXRsb10gZGRkZFssXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIiVzXCIscGFzdDpcIiVzIGFkaW1cIixzOlUsc3M6VSxtOlUsbW06VSxoOlUsaGg6VSxkOlUsZGQ6VSxNOlUsTU06VSx5OlUseXk6VX0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn0oZXIpLyxvcmRpbmFsOmZ1bmN0aW9uKGUsYSl7c3dpdGNoKGEpe2Nhc2VcIkRcIjpyZXR1cm4gZStcImVyXCI7ZGVmYXVsdDpjYXNlXCJNXCI6Y2FzZVwiUVwiOmNhc2VcIkRERFwiOmNhc2VcImRcIjpjYXNlXCJ3XCI6Y2FzZVwiV1wiOnJldHVybiBlfX0sd2Vlazp7ZG93OjEsZG95OjR9LG1lcmlkaWVtUGFyc2U6L3JhdGl8c29rYWxsaXxkb25wYXJhbXxzYW5qZS8sbWVyaWRpZW1Ib3VyOmZ1bmN0aW9uKGUsYSl7cmV0dXJuIDEyPT09ZSYmKGU9MCksXCJyYXRpXCI9PT1hP2U8ND9lOmUrMTI6XCJzb2thbGxpXCI9PT1hP2U6XCJkb25wYXJhbVwiPT09YT9lPjEyP2U6ZSsxMjpcInNhbmplXCI9PT1hP2UrMTI6dm9pZCAwfSxtZXJpZGllbTpmdW5jdGlvbihlLGEsXyl7cmV0dXJuIGU8ND9cInJhdGlcIjplPDEyP1wic29rYWxsaVwiOmU8MTY/XCJkb25wYXJhbVwiOmU8MjA/XCJzYW5qZVwiOlwicmF0aVwifX0pO3ZhciBRPXsxOlwiXFx1MGFlN1wiLDI6XCJcXHUwYWU4XCIsMzpcIlxcdTBhZTlcIiw0OlwiXFx1MGFlYVwiLDU6XCJcXHUwYWViXCIsNjpcIlxcdTBhZWNcIiw3OlwiXFx1MGFlZFwiLDg6XCJcXHUwYWVlXCIsOTpcIlxcdTBhZWZcIiwwOlwiXFx1MGFlNlwifSxWPXtcIlxcdTBhZTdcIjpcIjFcIixcIlxcdTBhZThcIjpcIjJcIixcIlxcdTBhZTlcIjpcIjNcIixcIlxcdTBhZWFcIjpcIjRcIixcIlxcdTBhZWJcIjpcIjVcIixcIlxcdTBhZWNcIjpcIjZcIixcIlxcdTBhZWRcIjpcIjdcIixcIlxcdTBhZWVcIjpcIjhcIixcIlxcdTBhZWZcIjpcIjlcIixcIlxcdTBhZTZcIjpcIjBcIn07ZS5kZWZpbmVMb2NhbGUoXCJndVwiLHttb250aHM6XCJcXHUwYTljXFx1MGFiZVxcdTBhYThcXHUwYWNkXFx1MGFhZlxcdTBhYzFcXHUwYTg2XFx1MGFiMFxcdTBhYzBfXFx1MGFhYlxcdTBhYzdcXHUwYWFjXFx1MGFjZFxcdTBhYjBcXHUwYWMxXFx1MGE4NlxcdTBhYjBcXHUwYWMwX1xcdTBhYWVcXHUwYWJlXFx1MGFiMFxcdTBhY2RcXHUwYTlhX1xcdTBhOGZcXHUwYWFhXFx1MGFjZFxcdTBhYjBcXHUwYWJmXFx1MGFiMl9cXHUwYWFlXFx1MGFjN19cXHUwYTljXFx1MGFjMlxcdTBhYThfXFx1MGE5Y1xcdTBhYzFcXHUwYWIyXFx1MGFiZVxcdTBhODhfXFx1MGE5MVxcdTBhOTdcXHUwYWI4XFx1MGFjZFxcdTBhOWZfXFx1MGFiOFxcdTBhYWFcXHUwYWNkXFx1MGE5ZlxcdTBhYzdcXHUwYWFlXFx1MGFjZFxcdTBhYWNcXHUwYWIwX1xcdTBhOTFcXHUwYTk1XFx1MGFjZFxcdTBhOWZcXHUwYWNkXFx1MGFhY1xcdTBhYjBfXFx1MGFhOFxcdTBhYjVcXHUwYWM3XFx1MGFhZVxcdTBhY2RcXHUwYWFjXFx1MGFiMF9cXHUwYWExXFx1MGFiZlxcdTBhYjhcXHUwYWM3XFx1MGFhZVxcdTBhY2RcXHUwYWFjXFx1MGFiMFwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIlxcdTBhOWNcXHUwYWJlXFx1MGFhOFxcdTBhY2RcXHUwYWFmXFx1MGFjMS5fXFx1MGFhYlxcdTBhYzdcXHUwYWFjXFx1MGFjZFxcdTBhYjBcXHUwYWMxLl9cXHUwYWFlXFx1MGFiZVxcdTBhYjBcXHUwYWNkXFx1MGE5YV9cXHUwYThmXFx1MGFhYVxcdTBhY2RcXHUwYWIwXFx1MGFiZi5fXFx1MGFhZVxcdTBhYzdfXFx1MGE5Y1xcdTBhYzJcXHUwYWE4X1xcdTBhOWNcXHUwYWMxXFx1MGFiMlxcdTBhYmUuX1xcdTBhOTFcXHUwYTk3Ll9cXHUwYWI4XFx1MGFhYVxcdTBhY2RcXHUwYTlmXFx1MGFjNy5fXFx1MGE5MVxcdTBhOTVcXHUwYWNkXFx1MGE5ZlxcdTBhY2QuX1xcdTBhYThcXHUwYWI1XFx1MGFjNy5fXFx1MGFhMVxcdTBhYmZcXHUwYWI4XFx1MGFjNy5cIi5zcGxpdChcIl9cIiksbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czpcIlxcdTBhYjBcXHUwYWI1XFx1MGFiZlxcdTBhYjVcXHUwYWJlXFx1MGFiMF9cXHUwYWI4XFx1MGFjYlxcdTBhYWVcXHUwYWI1XFx1MGFiZVxcdTBhYjBfXFx1MGFhZVxcdTBhODJcXHUwYTk3XFx1MGFiM1xcdTBhYjVcXHUwYWJlXFx1MGFiMF9cXHUwYWFjXFx1MGFjMVxcdTBhYTdcXHUwYWNkXFx1MGFiNVxcdTBhYmVcXHUwYWIwX1xcdTBhOTdcXHUwYWMxXFx1MGFiMFxcdTBhYzFcXHUwYWI1XFx1MGFiZVxcdTBhYjBfXFx1MGFiNlxcdTBhYzFcXHUwYTk1XFx1MGFjZFxcdTBhYjBcXHUwYWI1XFx1MGFiZVxcdTBhYjBfXFx1MGFiNlxcdTBhYThcXHUwYWJmXFx1MGFiNVxcdTBhYmVcXHUwYWIwXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJcXHUwYWIwXFx1MGFiNVxcdTBhYmZfXFx1MGFiOFxcdTBhY2JcXHUwYWFlX1xcdTBhYWVcXHUwYTgyXFx1MGE5N1xcdTBhYjNfXFx1MGFhY1xcdTBhYzFcXHUwYWE3XFx1MGFjZF9cXHUwYTk3XFx1MGFjMVxcdTBhYjBcXHUwYWMxX1xcdTBhYjZcXHUwYWMxXFx1MGE5NVxcdTBhY2RcXHUwYWIwX1xcdTBhYjZcXHUwYWE4XFx1MGFiZlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIlxcdTBhYjBfXFx1MGFiOFxcdTBhY2JfXFx1MGFhZVxcdTBhODJfXFx1MGFhY1xcdTBhYzFfXFx1MGE5N1xcdTBhYzFfXFx1MGFiNlxcdTBhYzFfXFx1MGFiNlwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJBIGg6bW0gXFx1MGFiNVxcdTBhYmVcXHUwYTk3XFx1MGFjZFxcdTBhYWZcXHUwYWM3XCIsTFRTOlwiQSBoOm1tOnNzIFxcdTBhYjVcXHUwYWJlXFx1MGE5N1xcdTBhY2RcXHUwYWFmXFx1MGFjN1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZLCBBIGg6bW0gXFx1MGFiNVxcdTBhYmVcXHUwYTk3XFx1MGFjZFxcdTBhYWZcXHUwYWM3XCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0gXFx1MGFiNVxcdTBhYmVcXHUwYTk3XFx1MGFjZFxcdTBhYWZcXHUwYWM3XCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTBhODZcXHUwYTljXSBMVFwiLG5leHREYXk6XCJbXFx1MGE5NVxcdTBhYmVcXHUwYWIyXFx1MGFjN10gTFRcIixuZXh0V2VlazpcImRkZGQsIExUXCIsbGFzdERheTpcIltcXHUwYTk3XFx1MGE4N1xcdTBhOTVcXHUwYWJlXFx1MGFiMlxcdTBhYzddIExUXCIsbGFzdFdlZWs6XCJbXFx1MGFhYVxcdTBhYmVcXHUwYTliXFx1MGFiMlxcdTBhYmVdIGRkZGQsIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiJXMgXFx1MGFhZVxcdTBhYmVcIixwYXN0OlwiJXMgXFx1MGFhYVxcdTBhYzdcXHUwYWI5XFx1MGFiMlxcdTBhYmVcIixzOlwiXFx1MGE4NVxcdTBhYWVcXHUwYWMxXFx1MGE5NSBcXHUwYWFhXFx1MGFiM1xcdTBhY2JcIixzczpcIiVkIFxcdTBhYjhcXHUwYWM3XFx1MGE5NVxcdTBhODJcXHUwYWExXCIsbTpcIlxcdTBhOGZcXHUwYTk1IFxcdTBhYWVcXHUwYWJmXFx1MGFhOFxcdTBhYmZcXHUwYTlmXCIsbW06XCIlZCBcXHUwYWFlXFx1MGFiZlxcdTBhYThcXHUwYWJmXFx1MGE5ZlwiLGg6XCJcXHUwYThmXFx1MGE5NSBcXHUwYTk1XFx1MGFiMlxcdTBhYmVcXHUwYTk1XCIsaGg6XCIlZCBcXHUwYTk1XFx1MGFiMlxcdTBhYmVcXHUwYTk1XCIsZDpcIlxcdTBhOGZcXHUwYTk1IFxcdTBhYTZcXHUwYWJmXFx1MGFiNVxcdTBhYjhcIixkZDpcIiVkIFxcdTBhYTZcXHUwYWJmXFx1MGFiNVxcdTBhYjhcIixNOlwiXFx1MGE4ZlxcdTBhOTUgXFx1MGFhZVxcdTBhYjlcXHUwYWJmXFx1MGFhOFxcdTBhY2JcIixNTTpcIiVkIFxcdTBhYWVcXHUwYWI5XFx1MGFiZlxcdTBhYThcXHUwYWNiXCIseTpcIlxcdTBhOGZcXHUwYTk1IFxcdTBhYjVcXHUwYWIwXFx1MGFjZFxcdTBhYjdcIix5eTpcIiVkIFxcdTBhYjVcXHUwYWIwXFx1MGFjZFxcdTBhYjdcIn0scHJlcGFyc2U6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvW1xcdTBhZTdcXHUwYWU4XFx1MGFlOVxcdTBhZWFcXHUwYWViXFx1MGFlY1xcdTBhZWRcXHUwYWVlXFx1MGFlZlxcdTBhZTZdL2csZnVuY3Rpb24oZSl7cmV0dXJuIFZbZV19KX0scG9zdGZvcm1hdDpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9cXGQvZyxmdW5jdGlvbihlKXtyZXR1cm4gUVtlXX0pfSxtZXJpZGllbVBhcnNlOi9cXHUwYWIwXFx1MGFiZVxcdTBhYTR8XFx1MGFhY1xcdTBhYWFcXHUwYWNiXFx1MGFiMHxcXHUwYWI4XFx1MGFiNVxcdTBhYmVcXHUwYWIwfFxcdTBhYjhcXHUwYWJlXFx1MGE4MlxcdTBhOWMvLG1lcmlkaWVtSG91cjpmdW5jdGlvbihlLGEpe3JldHVybiAxMj09PWUmJihlPTApLFwiXFx1MGFiMFxcdTBhYmVcXHUwYWE0XCI9PT1hP2U8ND9lOmUrMTI6XCJcXHUwYWI4XFx1MGFiNVxcdTBhYmVcXHUwYWIwXCI9PT1hP2U6XCJcXHUwYWFjXFx1MGFhYVxcdTBhY2JcXHUwYWIwXCI9PT1hP2U+PTEwP2U6ZSsxMjpcIlxcdTBhYjhcXHUwYWJlXFx1MGE4MlxcdTBhOWNcIj09PWE/ZSsxMjp2b2lkIDB9LG1lcmlkaWVtOmZ1bmN0aW9uKGUsYSxfKXtyZXR1cm4gZTw0P1wiXFx1MGFiMFxcdTBhYmVcXHUwYWE0XCI6ZTwxMD9cIlxcdTBhYjhcXHUwYWI1XFx1MGFiZVxcdTBhYjBcIjplPDE3P1wiXFx1MGFhY1xcdTBhYWFcXHUwYWNiXFx1MGFiMFwiOmU8MjA/XCJcXHUwYWI4XFx1MGFiZVxcdTBhODJcXHUwYTljXCI6XCJcXHUwYWIwXFx1MGFiZVxcdTBhYTRcIn0sd2Vlazp7ZG93OjAsZG95OjZ9fSksZS5kZWZpbmVMb2NhbGUoXCJoZVwiLHttb250aHM6XCJcXHUwNWQ5XFx1MDVlMFxcdTA1ZDVcXHUwNWQwXFx1MDVlOF9cXHUwNWU0XFx1MDVkMVxcdTA1ZThcXHUwNWQ1XFx1MDVkMFxcdTA1ZThfXFx1MDVkZVxcdTA1ZThcXHUwNWU1X1xcdTA1ZDBcXHUwNWU0XFx1MDVlOFxcdTA1ZDlcXHUwNWRjX1xcdTA1ZGVcXHUwNWQwXFx1MDVkOV9cXHUwNWQ5XFx1MDVkNVxcdTA1ZTBcXHUwNWQ5X1xcdTA1ZDlcXHUwNWQ1XFx1MDVkY1xcdTA1ZDlfXFx1MDVkMFxcdTA1ZDVcXHUwNWQyXFx1MDVkNVxcdTA1ZTFcXHUwNWQ4X1xcdTA1ZTFcXHUwNWU0XFx1MDVkOFxcdTA1ZGVcXHUwNWQxXFx1MDVlOF9cXHUwNWQwXFx1MDVkNVxcdTA1ZTdcXHUwNWQ4XFx1MDVkNVxcdTA1ZDFcXHUwNWU4X1xcdTA1ZTBcXHUwNWQ1XFx1MDVkMVxcdTA1ZGVcXHUwNWQxXFx1MDVlOF9cXHUwNWQzXFx1MDVlNlxcdTA1ZGVcXHUwNWQxXFx1MDVlOFwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIlxcdTA1ZDlcXHUwNWUwXFx1MDVkNVxcdTA1ZjNfXFx1MDVlNFxcdTA1ZDFcXHUwNWU4XFx1MDVmM19cXHUwNWRlXFx1MDVlOFxcdTA1ZTVfXFx1MDVkMFxcdTA1ZTRcXHUwNWU4XFx1MDVmM19cXHUwNWRlXFx1MDVkMFxcdTA1ZDlfXFx1MDVkOVxcdTA1ZDVcXHUwNWUwXFx1MDVkOV9cXHUwNWQ5XFx1MDVkNVxcdTA1ZGNcXHUwNWQ5X1xcdTA1ZDBcXHUwNWQ1XFx1MDVkMlxcdTA1ZjNfXFx1MDVlMVxcdTA1ZTRcXHUwNWQ4XFx1MDVmM19cXHUwNWQwXFx1MDVkNVxcdTA1ZTdcXHUwNWYzX1xcdTA1ZTBcXHUwNWQ1XFx1MDVkMVxcdTA1ZjNfXFx1MDVkM1xcdTA1ZTZcXHUwNWRlXFx1MDVmM1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIlxcdTA1ZThcXHUwNWQwXFx1MDVlOVxcdTA1ZDVcXHUwNWRmX1xcdTA1ZTlcXHUwNWUwXFx1MDVkOV9cXHUwNWU5XFx1MDVkY1xcdTA1ZDlcXHUwNWU5XFx1MDVkOV9cXHUwNWU4XFx1MDVkMVxcdTA1ZDlcXHUwNWUyXFx1MDVkOV9cXHUwNWQ3XFx1MDVkZVxcdTA1ZDlcXHUwNWU5XFx1MDVkOV9cXHUwNWU5XFx1MDVkOVxcdTA1ZTlcXHUwNWQ5X1xcdTA1ZTlcXHUwNWQxXFx1MDVlYVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiXFx1MDVkMFxcdTA1ZjNfXFx1MDVkMVxcdTA1ZjNfXFx1MDVkMlxcdTA1ZjNfXFx1MDVkM1xcdTA1ZjNfXFx1MDVkNFxcdTA1ZjNfXFx1MDVkNVxcdTA1ZjNfXFx1MDVlOVxcdTA1ZjNcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJcXHUwNWQwX1xcdTA1ZDFfXFx1MDVkMl9cXHUwNWQzX1xcdTA1ZDRfXFx1MDVkNV9cXHUwNWU5XCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBbXFx1MDVkMV1NTU1NIFlZWVlcIixMTEw6XCJEIFtcXHUwNWQxXU1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkLCBEIFtcXHUwNWQxXU1NTU0gWVlZWSBISDptbVwiLGw6XCJEL00vWVlZWVwiLGxsOlwiRCBNTU0gWVlZWVwiLGxsbDpcIkQgTU1NIFlZWVkgSEg6bW1cIixsbGxsOlwiZGRkLCBEIE1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTA1ZDRcXHUwNWQ5XFx1MDVkNVxcdTA1ZGQgXFx1MDVkMVxcdTA1YmVdTFRcIixuZXh0RGF5OlwiW1xcdTA1ZGVcXHUwNWQ3XFx1MDVlOCBcXHUwNWQxXFx1MDViZV1MVFwiLG5leHRXZWVrOlwiZGRkZCBbXFx1MDVkMVxcdTA1ZTlcXHUwNWUyXFx1MDVkNF0gTFRcIixsYXN0RGF5OlwiW1xcdTA1ZDBcXHUwNWVhXFx1MDVkZVxcdTA1ZDVcXHUwNWRjIFxcdTA1ZDFcXHUwNWJlXUxUXCIsbGFzdFdlZWs6XCJbXFx1MDVkMVxcdTA1ZDlcXHUwNWQ1XFx1MDVkZF0gZGRkZCBbXFx1MDVkNFxcdTA1ZDBcXHUwNWQ3XFx1MDVlOFxcdTA1ZDVcXHUwNWRmIFxcdTA1ZDFcXHUwNWU5XFx1MDVlMlxcdTA1ZDRdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiXFx1MDVkMVxcdTA1ZTJcXHUwNWQ1XFx1MDVkMyAlc1wiLHBhc3Q6XCJcXHUwNWRjXFx1MDVlNFxcdTA1ZTBcXHUwNWQ5ICVzXCIsczpcIlxcdTA1ZGVcXHUwNWUxXFx1MDVlNFxcdTA1ZTggXFx1MDVlOVxcdTA1ZTBcXHUwNWQ5XFx1MDVkNVxcdTA1ZWFcIixzczpcIiVkIFxcdTA1ZTlcXHUwNWUwXFx1MDVkOVxcdTA1ZDVcXHUwNWVhXCIsbTpcIlxcdTA1ZDNcXHUwNWU3XFx1MDVkNFwiLG1tOlwiJWQgXFx1MDVkM1xcdTA1ZTdcXHUwNWQ1XFx1MDVlYVwiLGg6XCJcXHUwNWU5XFx1MDVlMlxcdTA1ZDRcIixoaDpmdW5jdGlvbihlKXtyZXR1cm4gMj09PWU/XCJcXHUwNWU5XFx1MDVlMlxcdTA1ZWFcXHUwNWQ5XFx1MDVkOVxcdTA1ZGRcIjplK1wiIFxcdTA1ZTlcXHUwNWUyXFx1MDVkNVxcdTA1ZWFcIn0sZDpcIlxcdTA1ZDlcXHUwNWQ1XFx1MDVkZFwiLGRkOmZ1bmN0aW9uKGUpe3JldHVybiAyPT09ZT9cIlxcdTA1ZDlcXHUwNWQ1XFx1MDVkZVxcdTA1ZDlcXHUwNWQ5XFx1MDVkZFwiOmUrXCIgXFx1MDVkOVxcdTA1ZGVcXHUwNWQ5XFx1MDVkZFwifSxNOlwiXFx1MDVkN1xcdTA1ZDVcXHUwNWQzXFx1MDVlOVwiLE1NOmZ1bmN0aW9uKGUpe3JldHVybiAyPT09ZT9cIlxcdTA1ZDdcXHUwNWQ1XFx1MDVkM1xcdTA1ZTlcXHUwNWQ5XFx1MDVkOVxcdTA1ZGRcIjplK1wiIFxcdTA1ZDdcXHUwNWQ1XFx1MDVkM1xcdTA1ZTlcXHUwNWQ5XFx1MDVkZFwifSx5OlwiXFx1MDVlOVxcdTA1ZTBcXHUwNWQ0XCIseXk6ZnVuY3Rpb24oZSl7cmV0dXJuIDI9PT1lP1wiXFx1MDVlOVxcdTA1ZTBcXHUwNWVhXFx1MDVkOVxcdTA1ZDlcXHUwNWRkXCI6ZSUxMD09MCYmMTAhPT1lP2UrXCIgXFx1MDVlOVxcdTA1ZTBcXHUwNWQ0XCI6ZStcIiBcXHUwNWU5XFx1MDVlMFxcdTA1ZDlcXHUwNWRkXCJ9fSxtZXJpZGllbVBhcnNlOi9cXHUwNWQwXFx1MDVkN1xcdTA1ZDRcIlxcdTA1ZTZ8XFx1MDVkY1xcdTA1ZTRcXHUwNWUwXFx1MDVkNFwiXFx1MDVlNnxcXHUwNWQwXFx1MDVkN1xcdTA1ZThcXHUwNWQ5IFxcdTA1ZDRcXHUwNWU2XFx1MDVkNFxcdTA1ZThcXHUwNWQ5XFx1MDVkOVxcdTA1ZGR8XFx1MDVkY1xcdTA1ZTRcXHUwNWUwXFx1MDVkOSBcXHUwNWQ0XFx1MDVlNlxcdTA1ZDRcXHUwNWU4XFx1MDVkOVxcdTA1ZDlcXHUwNWRkfFxcdTA1ZGNcXHUwNWU0XFx1MDVlMFxcdTA1ZDVcXHUwNWVhIFxcdTA1ZDFcXHUwNWQ1XFx1MDVlN1xcdTA1ZTh8XFx1MDVkMVxcdTA1ZDFcXHUwNWQ1XFx1MDVlN1xcdTA1ZTh8XFx1MDVkMVxcdTA1ZTJcXHUwNWU4XFx1MDVkMS9pLGlzUE06ZnVuY3Rpb24oZSl7cmV0dXJuL14oXFx1MDVkMFxcdTA1ZDdcXHUwNWQ0XCJcXHUwNWU2fFxcdTA1ZDBcXHUwNWQ3XFx1MDVlOFxcdTA1ZDkgXFx1MDVkNFxcdTA1ZTZcXHUwNWQ0XFx1MDVlOFxcdTA1ZDlcXHUwNWQ5XFx1MDVkZHxcXHUwNWQxXFx1MDVlMlxcdTA1ZThcXHUwNWQxKSQvLnRlc3QoZSl9LG1lcmlkaWVtOmZ1bmN0aW9uKGUsYSxfKXtyZXR1cm4gZTw1P1wiXFx1MDVkY1xcdTA1ZTRcXHUwNWUwXFx1MDVkNVxcdTA1ZWEgXFx1MDVkMVxcdTA1ZDVcXHUwNWU3XFx1MDVlOFwiOmU8MTA/XCJcXHUwNWQxXFx1MDVkMVxcdTA1ZDVcXHUwNWU3XFx1MDVlOFwiOmU8MTI/Xz8nXFx1MDVkY1xcdTA1ZTRcXHUwNWUwXFx1MDVkNFwiXFx1MDVlNic6XCJcXHUwNWRjXFx1MDVlNFxcdTA1ZTBcXHUwNWQ5IFxcdTA1ZDRcXHUwNWU2XFx1MDVkNFxcdTA1ZThcXHUwNWQ5XFx1MDVkOVxcdTA1ZGRcIjplPDE4P18/J1xcdTA1ZDBcXHUwNWQ3XFx1MDVkNFwiXFx1MDVlNic6XCJcXHUwNWQwXFx1MDVkN1xcdTA1ZThcXHUwNWQ5IFxcdTA1ZDRcXHUwNWU2XFx1MDVkNFxcdTA1ZThcXHUwNWQ5XFx1MDVkOVxcdTA1ZGRcIjpcIlxcdTA1ZDFcXHUwNWUyXFx1MDVlOFxcdTA1ZDFcIn19KTt2YXIgWj17MTpcIlxcdTA5NjdcIiwyOlwiXFx1MDk2OFwiLDM6XCJcXHUwOTY5XCIsNDpcIlxcdTA5NmFcIiw1OlwiXFx1MDk2YlwiLDY6XCJcXHUwOTZjXCIsNzpcIlxcdTA5NmRcIiw4OlwiXFx1MDk2ZVwiLDk6XCJcXHUwOTZmXCIsMDpcIlxcdTA5NjZcIn0sWD17XCJcXHUwOTY3XCI6XCIxXCIsXCJcXHUwOTY4XCI6XCIyXCIsXCJcXHUwOTY5XCI6XCIzXCIsXCJcXHUwOTZhXCI6XCI0XCIsXCJcXHUwOTZiXCI6XCI1XCIsXCJcXHUwOTZjXCI6XCI2XCIsXCJcXHUwOTZkXCI6XCI3XCIsXCJcXHUwOTZlXCI6XCI4XCIsXCJcXHUwOTZmXCI6XCI5XCIsXCJcXHUwOTY2XCI6XCIwXCJ9O2Z1bmN0aW9uIGVlKGUsYSxfKXt2YXIgcz1lK1wiIFwiO3N3aXRjaChfKXtjYXNlXCJzc1wiOnJldHVybiBzKz0xPT09ZT9cInNla3VuZGFcIjoyPT09ZXx8Mz09PWV8fDQ9PT1lP1wic2VrdW5kZVwiOlwic2VrdW5kaVwiO2Nhc2VcIm1cIjpyZXR1cm4gYT9cImplZG5hIG1pbnV0YVwiOlwiamVkbmUgbWludXRlXCI7Y2FzZVwibW1cIjpyZXR1cm4gcys9MT09PWU/XCJtaW51dGFcIjoyPT09ZXx8Mz09PWV8fDQ9PT1lP1wibWludXRlXCI6XCJtaW51dGFcIjtjYXNlXCJoXCI6cmV0dXJuIGE/XCJqZWRhbiBzYXRcIjpcImplZG5vZyBzYXRhXCI7Y2FzZVwiaGhcIjpyZXR1cm4gcys9MT09PWU/XCJzYXRcIjoyPT09ZXx8Mz09PWV8fDQ9PT1lP1wic2F0YVwiOlwic2F0aVwiO2Nhc2VcImRkXCI6cmV0dXJuIHMrPTE9PT1lP1wiZGFuXCI6XCJkYW5hXCI7Y2FzZVwiTU1cIjpyZXR1cm4gcys9MT09PWU/XCJtamVzZWNcIjoyPT09ZXx8Mz09PWV8fDQ9PT1lP1wibWplc2VjYVwiOlwibWplc2VjaVwiO2Nhc2VcInl5XCI6cmV0dXJuIHMrPTE9PT1lP1wiZ29kaW5hXCI6Mj09PWV8fDM9PT1lfHw0PT09ZT9cImdvZGluZVwiOlwiZ29kaW5hXCJ9fWUuZGVmaW5lTG9jYWxlKFwiaGlcIix7bW9udGhzOlwiXFx1MDkxY1xcdTA5MjhcXHUwOTM1XFx1MDkzMFxcdTA5NDBfXFx1MDkyYlxcdTA5M2NcXHUwOTMwXFx1MDkzNVxcdTA5MzBcXHUwOTQwX1xcdTA5MmVcXHUwOTNlXFx1MDkzMFxcdTA5NGRcXHUwOTFhX1xcdTA5MDVcXHUwOTJhXFx1MDk0ZFxcdTA5MzBcXHUwOTQ4XFx1MDkzMl9cXHUwOTJlXFx1MDkwOF9cXHUwOTFjXFx1MDk0MlxcdTA5MjhfXFx1MDkxY1xcdTA5NDFcXHUwOTMyXFx1MDkzZVxcdTA5MDhfXFx1MDkwNVxcdTA5MTdcXHUwOTM4XFx1MDk0ZFxcdTA5MjRfXFx1MDkzOFxcdTA5M2ZcXHUwOTI0XFx1MDkyZVxcdTA5NGRcXHUwOTJjXFx1MDkzMF9cXHUwOTA1XFx1MDkxNVxcdTA5NGRcXHUwOTFmXFx1MDk0MlxcdTA5MmNcXHUwOTMwX1xcdTA5MjhcXHUwOTM1XFx1MDkyZVxcdTA5NGRcXHUwOTJjXFx1MDkzMF9cXHUwOTI2XFx1MDkzZlxcdTA5MzhcXHUwOTJlXFx1MDk0ZFxcdTA5MmNcXHUwOTMwXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiXFx1MDkxY1xcdTA5MjguX1xcdTA5MmJcXHUwOTNjXFx1MDkzMC5fXFx1MDkyZVxcdTA5M2VcXHUwOTMwXFx1MDk0ZFxcdTA5MWFfXFx1MDkwNVxcdTA5MmFcXHUwOTRkXFx1MDkzMFxcdTA5NDguX1xcdTA5MmVcXHUwOTA4X1xcdTA5MWNcXHUwOTQyXFx1MDkyOF9cXHUwOTFjXFx1MDk0MVxcdTA5MzIuX1xcdTA5MDVcXHUwOTE3Ll9cXHUwOTM4XFx1MDkzZlxcdTA5MjQuX1xcdTA5MDVcXHUwOTE1XFx1MDk0ZFxcdTA5MWZcXHUwOTQyLl9cXHUwOTI4XFx1MDkzNS5fXFx1MDkyNlxcdTA5M2ZcXHUwOTM4LlwiLnNwbGl0KFwiX1wiKSxtb250aHNQYXJzZUV4YWN0OiEwLHdlZWtkYXlzOlwiXFx1MDkzMFxcdTA5MzVcXHUwOTNmXFx1MDkzNVxcdTA5M2VcXHUwOTMwX1xcdTA5MzhcXHUwOTRiXFx1MDkyZVxcdTA5MzVcXHUwOTNlXFx1MDkzMF9cXHUwOTJlXFx1MDkwMlxcdTA5MTdcXHUwOTMyXFx1MDkzNVxcdTA5M2VcXHUwOTMwX1xcdTA5MmNcXHUwOTQxXFx1MDkyN1xcdTA5MzVcXHUwOTNlXFx1MDkzMF9cXHUwOTE3XFx1MDk0MVxcdTA5MzBcXHUwOTQyXFx1MDkzNVxcdTA5M2VcXHUwOTMwX1xcdTA5MzZcXHUwOTQxXFx1MDkxNVxcdTA5NGRcXHUwOTMwXFx1MDkzNVxcdTA5M2VcXHUwOTMwX1xcdTA5MzZcXHUwOTI4XFx1MDkzZlxcdTA5MzVcXHUwOTNlXFx1MDkzMFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiXFx1MDkzMFxcdTA5MzVcXHUwOTNmX1xcdTA5MzhcXHUwOTRiXFx1MDkyZV9cXHUwOTJlXFx1MDkwMlxcdTA5MTdcXHUwOTMyX1xcdTA5MmNcXHUwOTQxXFx1MDkyN19cXHUwOTE3XFx1MDk0MVxcdTA5MzBcXHUwOTQyX1xcdTA5MzZcXHUwOTQxXFx1MDkxNVxcdTA5NGRcXHUwOTMwX1xcdTA5MzZcXHUwOTI4XFx1MDkzZlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIlxcdTA5MzBfXFx1MDkzOFxcdTA5NGJfXFx1MDkyZVxcdTA5MDJfXFx1MDkyY1xcdTA5NDFfXFx1MDkxN1xcdTA5NDFfXFx1MDkzNlxcdTA5NDFfXFx1MDkzNlwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJBIGg6bW0gXFx1MDkyY1xcdTA5MWNcXHUwOTQ3XCIsTFRTOlwiQSBoOm1tOnNzIFxcdTA5MmNcXHUwOTFjXFx1MDk0N1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZLCBBIGg6bW0gXFx1MDkyY1xcdTA5MWNcXHUwOTQ3XCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0gXFx1MDkyY1xcdTA5MWNcXHUwOTQ3XCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTA5MDZcXHUwOTFjXSBMVFwiLG5leHREYXk6XCJbXFx1MDkxNVxcdTA5MzJdIExUXCIsbmV4dFdlZWs6XCJkZGRkLCBMVFwiLGxhc3REYXk6XCJbXFx1MDkxNVxcdTA5MzJdIExUXCIsbGFzdFdlZWs6XCJbXFx1MDkyYVxcdTA5M2ZcXHUwOTFiXFx1MDkzMlxcdTA5NDddIGRkZGQsIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiJXMgXFx1MDkyZVxcdTA5NDdcXHUwOTAyXCIscGFzdDpcIiVzIFxcdTA5MmFcXHUwOTM5XFx1MDkzMlxcdTA5NDdcIixzOlwiXFx1MDkxNVxcdTA5NDFcXHUwOTFiIFxcdTA5MzlcXHUwOTQwIFxcdTA5MTVcXHUwOTRkXFx1MDkzN1xcdTA5MjNcIixzczpcIiVkIFxcdTA5MzhcXHUwOTQ3XFx1MDkxNVxcdTA5MDJcXHUwOTIxXCIsbTpcIlxcdTA5MGZcXHUwOTE1IFxcdTA5MmVcXHUwOTNmXFx1MDkyOFxcdTA5MWZcIixtbTpcIiVkIFxcdTA5MmVcXHUwOTNmXFx1MDkyOFxcdTA5MWZcIixoOlwiXFx1MDkwZlxcdTA5MTUgXFx1MDkxOFxcdTA5MDJcXHUwOTFmXFx1MDkzZVwiLGhoOlwiJWQgXFx1MDkxOFxcdTA5MDJcXHUwOTFmXFx1MDk0N1wiLGQ6XCJcXHUwOTBmXFx1MDkxNSBcXHUwOTI2XFx1MDkzZlxcdTA5MjhcIixkZDpcIiVkIFxcdTA5MjZcXHUwOTNmXFx1MDkyOFwiLE06XCJcXHUwOTBmXFx1MDkxNSBcXHUwOTJlXFx1MDkzOVxcdTA5NDBcXHUwOTI4XFx1MDk0N1wiLE1NOlwiJWQgXFx1MDkyZVxcdTA5MzlcXHUwOTQwXFx1MDkyOFxcdTA5NDdcIix5OlwiXFx1MDkwZlxcdTA5MTUgXFx1MDkzNVxcdTA5MzBcXHUwOTRkXFx1MDkzN1wiLHl5OlwiJWQgXFx1MDkzNVxcdTA5MzBcXHUwOTRkXFx1MDkzN1wifSxwcmVwYXJzZTpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9bXFx1MDk2N1xcdTA5NjhcXHUwOTY5XFx1MDk2YVxcdTA5NmJcXHUwOTZjXFx1MDk2ZFxcdTA5NmVcXHUwOTZmXFx1MDk2Nl0vZyxmdW5jdGlvbihlKXtyZXR1cm4gWFtlXX0pfSxwb3N0Zm9ybWF0OmZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoL1xcZC9nLGZ1bmN0aW9uKGUpe3JldHVybiBaW2VdfSl9LG1lcmlkaWVtUGFyc2U6L1xcdTA5MzBcXHUwOTNlXFx1MDkyNHxcXHUwOTM4XFx1MDk0MVxcdTA5MmNcXHUwOTM5fFxcdTA5MjZcXHUwOTRiXFx1MDkyYVxcdTA5MzlcXHUwOTMwfFxcdTA5MzZcXHUwOTNlXFx1MDkyZS8sbWVyaWRpZW1Ib3VyOmZ1bmN0aW9uKGUsYSl7cmV0dXJuIDEyPT09ZSYmKGU9MCksXCJcXHUwOTMwXFx1MDkzZVxcdTA5MjRcIj09PWE/ZTw0P2U6ZSsxMjpcIlxcdTA5MzhcXHUwOTQxXFx1MDkyY1xcdTA5MzlcIj09PWE/ZTpcIlxcdTA5MjZcXHUwOTRiXFx1MDkyYVxcdTA5MzlcXHUwOTMwXCI9PT1hP2U+PTEwP2U6ZSsxMjpcIlxcdTA5MzZcXHUwOTNlXFx1MDkyZVwiPT09YT9lKzEyOnZvaWQgMH0sbWVyaWRpZW06ZnVuY3Rpb24oZSxhLF8pe3JldHVybiBlPDQ/XCJcXHUwOTMwXFx1MDkzZVxcdTA5MjRcIjplPDEwP1wiXFx1MDkzOFxcdTA5NDFcXHUwOTJjXFx1MDkzOVwiOmU8MTc/XCJcXHUwOTI2XFx1MDk0YlxcdTA5MmFcXHUwOTM5XFx1MDkzMFwiOmU8MjA/XCJcXHUwOTM2XFx1MDkzZVxcdTA5MmVcIjpcIlxcdTA5MzBcXHUwOTNlXFx1MDkyNFwifSx3ZWVrOntkb3c6MCxkb3k6Nn19KSxlLmRlZmluZUxvY2FsZShcImhyXCIse21vbnRoczp7Zm9ybWF0Olwic2lqZVxcdTAxMGRuamFfdmVsamFcXHUwMTBkZV9vXFx1MDE3ZXVqa2FfdHJhdm5qYV9zdmlibmphX2xpcG5qYV9zcnBuamFfa29sb3ZvemFfcnVqbmFfbGlzdG9wYWRhX3N0dWRlbm9nYV9wcm9zaW5jYVwiLnNwbGl0KFwiX1wiKSxzdGFuZGFsb25lOlwic2lqZVxcdTAxMGRhbmpfdmVsamFcXHUwMTBkYV9vXFx1MDE3ZXVqYWtfdHJhdmFual9zdmliYW5qX2xpcGFual9zcnBhbmpfa29sb3Zvel9ydWphbl9saXN0b3BhZF9zdHVkZW5pX3Byb3NpbmFjXCIuc3BsaXQoXCJfXCIpfSxtb250aHNTaG9ydDpcInNpai5fdmVsai5fb1xcdTAxN2V1Ll90cmEuX3N2aS5fbGlwLl9zcnAuX2tvbC5fcnVqLl9saXMuX3N0dS5fcHJvLlwiLnNwbGl0KFwiX1wiKSxtb250aHNQYXJzZUV4YWN0OiEwLHdlZWtkYXlzOlwibmVkamVsamFfcG9uZWRqZWxqYWtfdXRvcmFrX3NyaWplZGFfXFx1MDEwZGV0dnJ0YWtfcGV0YWtfc3Vib3RhXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJuZWQuX3Bvbi5fdXRvLl9zcmkuX1xcdTAxMGRldC5fcGV0Ll9zdWIuXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwibmVfcG9fdXRfc3JfXFx1MDEwZGVfcGVfc3VcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkg6bW1cIixMVFM6XCJIOm1tOnNzXCIsTDpcIkRELk1NLllZWVlcIixMTDpcIkQuIE1NTU0gWVlZWVwiLExMTDpcIkQuIE1NTU0gWVlZWSBIOm1tXCIsTExMTDpcImRkZGQsIEQuIE1NTU0gWVlZWSBIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW2RhbmFzIHVdIExUXCIsbmV4dERheTpcIltzdXRyYSB1XSBMVFwiLG5leHRXZWVrOmZ1bmN0aW9uKCl7c3dpdGNoKHRoaXMuZGF5KCkpe2Nhc2UgMDpyZXR1cm5cIlt1XSBbbmVkamVsanVdIFt1XSBMVFwiO2Nhc2UgMzpyZXR1cm5cIlt1XSBbc3JpamVkdV0gW3VdIExUXCI7Y2FzZSA2OnJldHVyblwiW3VdIFtzdWJvdHVdIFt1XSBMVFwiO2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OmNhc2UgNTpyZXR1cm5cIlt1XSBkZGRkIFt1XSBMVFwifX0sbGFzdERheTpcIltqdVxcdTAxMGRlciB1XSBMVFwiLGxhc3RXZWVrOmZ1bmN0aW9uKCl7c3dpdGNoKHRoaXMuZGF5KCkpe2Nhc2UgMDpjYXNlIDM6cmV0dXJuXCJbcHJvXFx1MDE2MWx1XSBkZGRkIFt1XSBMVFwiO2Nhc2UgNjpyZXR1cm5cIltwcm9cXHUwMTYxbGVdIFtzdWJvdGVdIFt1XSBMVFwiO2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OmNhc2UgNTpyZXR1cm5cIltwcm9cXHUwMTYxbGldIGRkZGQgW3VdIExUXCJ9fSxzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJ6YSAlc1wiLHBhc3Q6XCJwcmlqZSAlc1wiLHM6XCJwYXIgc2VrdW5kaVwiLHNzOmVlLG06ZWUsbW06ZWUsaDplZSxoaDplZSxkOlwiZGFuXCIsZGQ6ZWUsTTpcIm1qZXNlY1wiLE1NOmVlLHk6XCJnb2RpbnVcIix5eTplZX0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn1cXC4vLG9yZGluYWw6XCIlZC5cIix3ZWVrOntkb3c6MSxkb3k6N319KTt2YXIgYWU9XCJ2YXNcXHhlMXJuYXAgaFxceGU5dGZcXHUwMTUxbiBrZWRkZW4gc3plcmRcXHhlMW4gY3NcXHhmY3RcXHhmNnJ0XFx4ZjZrXFx4ZjZuIHBcXHhlOW50ZWtlbiBzem9tYmF0b25cIi5zcGxpdChcIiBcIik7ZnVuY3Rpb24gX2UoZSxhLF8scyl7dmFyIGQ9ZTtzd2l0Y2goXyl7Y2FzZVwic1wiOnJldHVybiBzfHxhP1wiblxceGU5aFxceGUxbnkgbVxceGUxc29kcGVyY1wiOlwiblxceGU5aFxceGUxbnkgbVxceGUxc29kcGVyY2VcIjtjYXNlXCJzc1wiOnJldHVybiBkKyhzfHxhKT9cIiBtXFx4ZTFzb2RwZXJjXCI6XCIgbVxceGUxc29kcGVyY2VcIjtjYXNlXCJtXCI6cmV0dXJuXCJlZ3lcIisoc3x8YT9cIiBwZXJjXCI6XCIgcGVyY2VcIik7Y2FzZVwibW1cIjpyZXR1cm4gZCsoc3x8YT9cIiBwZXJjXCI6XCIgcGVyY2VcIik7Y2FzZVwiaFwiOnJldHVyblwiZWd5XCIrKHN8fGE/XCIgXFx4ZjNyYVwiOlwiIFxceGYzclxceGUxamFcIik7Y2FzZVwiaGhcIjpyZXR1cm4gZCsoc3x8YT9cIiBcXHhmM3JhXCI6XCIgXFx4ZjNyXFx4ZTFqYVwiKTtjYXNlXCJkXCI6cmV0dXJuXCJlZ3lcIisoc3x8YT9cIiBuYXBcIjpcIiBuYXBqYVwiKTtjYXNlXCJkZFwiOnJldHVybiBkKyhzfHxhP1wiIG5hcFwiOlwiIG5hcGphXCIpO2Nhc2VcIk1cIjpyZXR1cm5cImVneVwiKyhzfHxhP1wiIGhcXHhmM25hcFwiOlwiIGhcXHhmM25hcGphXCIpO2Nhc2VcIk1NXCI6cmV0dXJuIGQrKHN8fGE/XCIgaFxceGYzbmFwXCI6XCIgaFxceGYzbmFwamFcIik7Y2FzZVwieVwiOnJldHVyblwiZWd5XCIrKHN8fGE/XCIgXFx4ZTl2XCI6XCIgXFx4ZTl2ZVwiKTtjYXNlXCJ5eVwiOnJldHVybiBkKyhzfHxhP1wiIFxceGU5dlwiOlwiIFxceGU5dmVcIil9cmV0dXJuXCJcIn1mdW5jdGlvbiBzZShlKXtyZXR1cm4oZT9cIlwiOlwiW21cXHhmYWx0XSBcIikrXCJbXCIrYWVbdGhpcy5kYXkoKV0rXCJdIExUWy1rb3JdXCJ9ZnVuY3Rpb24gZGUoZSl7cmV0dXJuIGUlMTAwPT0xMXx8ZSUxMCE9MX1mdW5jdGlvbiB0ZShlLGEsXyxzKXt2YXIgZD1lK1wiIFwiO3N3aXRjaChfKXtjYXNlXCJzXCI6cmV0dXJuIGF8fHM/XCJub2trcmFyIHNla1xceGZhbmR1clwiOlwibm9ra3J1bSBzZWtcXHhmYW5kdW1cIjtjYXNlXCJzc1wiOnJldHVybiBkZShlKT9kKyhhfHxzP1wic2VrXFx4ZmFuZHVyXCI6XCJzZWtcXHhmYW5kdW1cIik6ZCtcInNla1xceGZhbmRhXCI7Y2FzZVwibVwiOnJldHVybiBhP1wibVxceGVkblxceGZhdGFcIjpcIm1cXHhlZG5cXHhmYXR1XCI7Y2FzZVwibW1cIjpyZXR1cm4gZGUoZSk/ZCsoYXx8cz9cIm1cXHhlZG5cXHhmYXR1clwiOlwibVxceGVkblxceGZhdHVtXCIpOmE/ZCtcIm1cXHhlZG5cXHhmYXRhXCI6ZCtcIm1cXHhlZG5cXHhmYXR1XCI7Y2FzZVwiaGhcIjpyZXR1cm4gZGUoZSk/ZCsoYXx8cz9cImtsdWtrdXN0dW5kaXJcIjpcImtsdWtrdXN0dW5kdW1cIik6ZCtcImtsdWtrdXN0dW5kXCI7Y2FzZVwiZFwiOnJldHVybiBhP1wiZGFndXJcIjpzP1wiZGFnXCI6XCJkZWdpXCI7Y2FzZVwiZGRcIjpyZXR1cm4gZGUoZSk/YT9kK1wiZGFnYXJcIjpkKyhzP1wiZGFnYVwiOlwiZFxceGY2Z3VtXCIpOmE/ZCtcImRhZ3VyXCI6ZCsocz9cImRhZ1wiOlwiZGVnaVwiKTtjYXNlXCJNXCI6cmV0dXJuIGE/XCJtXFx4ZTFudVxceGYwdXJcIjpzP1wibVxceGUxbnVcXHhmMFwiOlwibVxceGUxbnVcXHhmMGlcIjtjYXNlXCJNTVwiOnJldHVybiBkZShlKT9hP2QrXCJtXFx4ZTFudVxceGYwaXJcIjpkKyhzP1wibVxceGUxbnVcXHhmMGlcIjpcIm1cXHhlMW51XFx4ZjB1bVwiKTphP2QrXCJtXFx4ZTFudVxceGYwdXJcIjpkKyhzP1wibVxceGUxbnVcXHhmMFwiOlwibVxceGUxbnVcXHhmMGlcIik7Y2FzZVwieVwiOnJldHVybiBhfHxzP1wiXFx4ZTFyXCI6XCJcXHhlMXJpXCI7Y2FzZVwieXlcIjpyZXR1cm4gZGUoZSk/ZCsoYXx8cz9cIlxceGUxclwiOlwiXFx4ZTFydW1cIik6ZCsoYXx8cz9cIlxceGUxclwiOlwiXFx4ZTFyaVwiKX19ZS5kZWZpbmVMb2NhbGUoXCJodVwiLHttb250aHM6XCJqYW51XFx4ZTFyX2ZlYnJ1XFx4ZTFyX21cXHhlMXJjaXVzX1xceGUxcHJpbGlzX21cXHhlMWp1c19qXFx4ZmFuaXVzX2pcXHhmYWxpdXNfYXVndXN6dHVzX3N6ZXB0ZW1iZXJfb2t0XFx4ZjNiZXJfbm92ZW1iZXJfZGVjZW1iZXJcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJqYW5fZmViX21cXHhlMXJjX1xceGUxcHJfbVxceGUxal9qXFx4ZmFuX2pcXHhmYWxfYXVnX3N6ZXB0X29rdF9ub3ZfZGVjXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwidmFzXFx4ZTFybmFwX2hcXHhlOXRmXFx1MDE1MV9rZWRkX3N6ZXJkYV9jc1xceGZjdFxceGY2cnRcXHhmNmtfcFxceGU5bnRla19zem9tYmF0XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJ2YXNfaFxceGU5dF9rZWRkX3N6ZV9jc1xceGZjdF9wXFx4ZTluX3N6b1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcInZfaF9rX3N6ZV9jc19wX3N6b1wiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJIOm1tXCIsTFRTOlwiSDptbTpzc1wiLEw6XCJZWVlZLk1NLkRELlwiLExMOlwiWVlZWS4gTU1NTSBELlwiLExMTDpcIllZWVkuIE1NTU0gRC4gSDptbVwiLExMTEw6XCJZWVlZLiBNTU1NIEQuLCBkZGRkIEg6bW1cIn0sbWVyaWRpZW1QYXJzZTovZGV8ZHUvaSxpc1BNOmZ1bmN0aW9uKGUpe3JldHVyblwidVwiPT09ZS5jaGFyQXQoMSkudG9Mb3dlckNhc2UoKX0sbWVyaWRpZW06ZnVuY3Rpb24oZSxhLF8pe3JldHVybiBlPDEyPyEwPT09Xz9cImRlXCI6XCJERVwiOiEwPT09Xz9cImR1XCI6XCJEVVwifSxjYWxlbmRhcjp7c2FtZURheTpcIlttYV0gTFRbLWtvcl1cIixuZXh0RGF5OlwiW2hvbG5hcF0gTFRbLWtvcl1cIixuZXh0V2VlazpmdW5jdGlvbigpe3JldHVybiBzZS5jYWxsKHRoaXMsITApfSxsYXN0RGF5OlwiW3RlZ25hcF0gTFRbLWtvcl1cIixsYXN0V2VlazpmdW5jdGlvbigpe3JldHVybiBzZS5jYWxsKHRoaXMsITEpfSxzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCIlcyBtXFx4ZmFsdmFcIixwYXN0OlwiJXNcIixzOl9lLHNzOl9lLG06X2UsbW06X2UsaDpfZSxoaDpfZSxkOl9lLGRkOl9lLE06X2UsTU06X2UseTpfZSx5eTpfZX0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn1cXC4vLG9yZGluYWw6XCIlZC5cIix3ZWVrOntkb3c6MSxkb3k6NH19KSxlLmRlZmluZUxvY2FsZShcImh5LWFtXCIse21vbnRoczp7Zm9ybWF0OlwiXFx1MDU3MFxcdTA1NzhcXHUwNTgyXFx1MDU3NlxcdTA1N2VcXHUwNTYxXFx1MDU4MFxcdTA1NmJfXFx1MDU4M1xcdTA1NjVcXHUwNTdmXFx1MDU4MFxcdTA1N2VcXHUwNTYxXFx1MDU4MFxcdTA1NmJfXFx1MDU3NFxcdTA1NjFcXHUwNTgwXFx1MDU3ZlxcdTA1NmJfXFx1MDU2MVxcdTA1N2FcXHUwNTgwXFx1MDU2YlxcdTA1NmNcXHUwNTZiX1xcdTA1NzRcXHUwNTYxXFx1MDU3NVxcdTA1NmJcXHUwNTdkXFx1MDU2Yl9cXHUwNTcwXFx1MDU3OFxcdTA1ODJcXHUwNTc2XFx1MDU2YlxcdTA1N2RcXHUwNTZiX1xcdTA1NzBcXHUwNTc4XFx1MDU4MlxcdTA1NmNcXHUwNTZiXFx1MDU3ZFxcdTA1NmJfXFx1MDU4NVxcdTA1NjNcXHUwNTc4XFx1MDU3ZFxcdTA1N2ZcXHUwNTc4XFx1MDU3ZFxcdTA1NmJfXFx1MDU3ZFxcdTA1NjVcXHUwNTdhXFx1MDU3ZlxcdTA1NjVcXHUwNTc0XFx1MDU2MlxcdTA1NjVcXHUwNTgwXFx1MDU2Yl9cXHUwNTcwXFx1MDU3OFxcdTA1NmZcXHUwNTdmXFx1MDU2NVxcdTA1NzRcXHUwNTYyXFx1MDU2NVxcdTA1ODBcXHUwNTZiX1xcdTA1NzZcXHUwNTc4XFx1MDU3NVxcdTA1NjVcXHUwNTc0XFx1MDU2MlxcdTA1NjVcXHUwNTgwXFx1MDU2Yl9cXHUwNTY0XFx1MDU2NVxcdTA1NmZcXHUwNTdmXFx1MDU2NVxcdTA1NzRcXHUwNTYyXFx1MDU2NVxcdTA1ODBcXHUwNTZiXCIuc3BsaXQoXCJfXCIpLHN0YW5kYWxvbmU6XCJcXHUwNTcwXFx1MDU3OFxcdTA1ODJcXHUwNTc2XFx1MDU3ZVxcdTA1NjFcXHUwNTgwX1xcdTA1ODNcXHUwNTY1XFx1MDU3ZlxcdTA1ODBcXHUwNTdlXFx1MDU2MVxcdTA1ODBfXFx1MDU3NFxcdTA1NjFcXHUwNTgwXFx1MDU3Zl9cXHUwNTYxXFx1MDU3YVxcdTA1ODBcXHUwNTZiXFx1MDU2Y19cXHUwNTc0XFx1MDU2MVxcdTA1NzVcXHUwNTZiXFx1MDU3ZF9cXHUwNTcwXFx1MDU3OFxcdTA1ODJcXHUwNTc2XFx1MDU2YlxcdTA1N2RfXFx1MDU3MFxcdTA1NzhcXHUwNTgyXFx1MDU2Y1xcdTA1NmJcXHUwNTdkX1xcdTA1ODVcXHUwNTYzXFx1MDU3OFxcdTA1N2RcXHUwNTdmXFx1MDU3OFxcdTA1N2RfXFx1MDU3ZFxcdTA1NjVcXHUwNTdhXFx1MDU3ZlxcdTA1NjVcXHUwNTc0XFx1MDU2MlxcdTA1NjVcXHUwNTgwX1xcdTA1NzBcXHUwNTc4XFx1MDU2ZlxcdTA1N2ZcXHUwNTY1XFx1MDU3NFxcdTA1NjJcXHUwNTY1XFx1MDU4MF9cXHUwNTc2XFx1MDU3OFxcdTA1NzVcXHUwNTY1XFx1MDU3NFxcdTA1NjJcXHUwNTY1XFx1MDU4MF9cXHUwNTY0XFx1MDU2NVxcdTA1NmZcXHUwNTdmXFx1MDU2NVxcdTA1NzRcXHUwNTYyXFx1MDU2NVxcdTA1ODBcIi5zcGxpdChcIl9cIil9LG1vbnRoc1Nob3J0OlwiXFx1MDU3MFxcdTA1NzZcXHUwNTdlX1xcdTA1ODNcXHUwNTdmXFx1MDU4MF9cXHUwNTc0XFx1MDU4MFxcdTA1N2ZfXFx1MDU2MVxcdTA1N2FcXHUwNTgwX1xcdTA1NzRcXHUwNTc1XFx1MDU3ZF9cXHUwNTcwXFx1MDU3NlxcdTA1N2RfXFx1MDU3MFxcdTA1NmNcXHUwNTdkX1xcdTA1ODVcXHUwNTYzXFx1MDU3ZF9cXHUwNTdkXFx1MDU3YVxcdTA1N2ZfXFx1MDU3MFxcdTA1NmZcXHUwNTdmX1xcdTA1NzZcXHUwNTc0XFx1MDU2Ml9cXHUwNTY0XFx1MDU2ZlxcdTA1N2ZcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJcXHUwNTZmXFx1MDU2YlxcdTA1ODBcXHUwNTYxXFx1MDU2ZlxcdTA1NmJfXFx1MDU2NVxcdTA1ODBcXHUwNTZmXFx1MDU3OFxcdTA1ODJcXHUwNTc3XFx1MDU2MVxcdTA1NjJcXHUwNTY5XFx1MDU2Yl9cXHUwNTY1XFx1MDU4MFxcdTA1NjVcXHUwNTg0XFx1MDU3N1xcdTA1NjFcXHUwNTYyXFx1MDU2OVxcdTA1NmJfXFx1MDU3OVxcdTA1NzhcXHUwNTgwXFx1MDU2NVxcdTA1ODRcXHUwNTc3XFx1MDU2MVxcdTA1NjJcXHUwNTY5XFx1MDU2Yl9cXHUwNTcwXFx1MDU2YlxcdTA1NzZcXHUwNTYzXFx1MDU3N1xcdTA1NjFcXHUwNTYyXFx1MDU2OVxcdTA1NmJfXFx1MDU3OFxcdTA1ODJcXHUwNTgwXFx1MDU2MlxcdTA1NjFcXHUwNTY5X1xcdTA1NzdcXHUwNTYxXFx1MDU2MlxcdTA1NjFcXHUwNTY5XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJcXHUwNTZmXFx1MDU4MFxcdTA1NmZfXFx1MDU2NVxcdTA1ODBcXHUwNTZmX1xcdTA1NjVcXHUwNTgwXFx1MDU4NF9cXHUwNTc5XFx1MDU4MFxcdTA1ODRfXFx1MDU3MFxcdTA1NzZcXHUwNTYzX1xcdTA1NzhcXHUwNTgyXFx1MDU4MFxcdTA1NjJfXFx1MDU3N1xcdTA1NjJcXHUwNTY5XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiXFx1MDU2ZlxcdTA1ODBcXHUwNTZmX1xcdTA1NjVcXHUwNTgwXFx1MDU2Zl9cXHUwNTY1XFx1MDU4MFxcdTA1ODRfXFx1MDU3OVxcdTA1ODBcXHUwNTg0X1xcdTA1NzBcXHUwNTc2XFx1MDU2M19cXHUwNTc4XFx1MDU4MlxcdTA1ODBcXHUwNTYyX1xcdTA1NzdcXHUwNTYyXFx1MDU2OVwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkRELk1NLllZWVlcIixMTDpcIkQgTU1NTSBZWVlZIFxcdTA1NjkuXCIsTExMOlwiRCBNTU1NIFlZWVkgXFx1MDU2OS4sIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIFxcdTA1NjkuLCBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltcXHUwNTYxXFx1MDU3NVxcdTA1N2RcXHUwNTg1XFx1MDU4MF0gTFRcIixuZXh0RGF5OlwiW1xcdTA1N2VcXHUwNTYxXFx1MDU3MlxcdTA1NjhdIExUXCIsbGFzdERheTpcIltcXHUwNTY1XFx1MDU4MFxcdTA1NjVcXHUwNTZmXSBMVFwiLG5leHRXZWVrOmZ1bmN0aW9uKCl7cmV0dXJuXCJkZGRkIFtcXHUwNTg1XFx1MDU4MFxcdTA1NjggXFx1MDU2YVxcdTA1NjFcXHUwNTc0XFx1MDU2OF0gTFRcIn0sbGFzdFdlZWs6ZnVuY3Rpb24oKXtyZXR1cm5cIltcXHUwNTYxXFx1MDU3NlxcdTA1ODFcXHUwNTYxXFx1MDU2ZV0gZGRkZCBbXFx1MDU4NVxcdTA1ODBcXHUwNTY4IFxcdTA1NmFcXHUwNTYxXFx1MDU3NFxcdTA1NjhdIExUXCJ9LHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIiVzIFxcdTA1NzBcXHUwNTY1XFx1MDU3ZlxcdTA1NzhcIixwYXN0OlwiJXMgXFx1MDU2MVxcdTA1N2NcXHUwNTYxXFx1MDU3YlwiLHM6XCJcXHUwNTc0XFx1MDU2YiBcXHUwNTg0XFx1MDU2MVxcdTA1NzZcXHUwNTZiIFxcdTA1N2VcXHUwNTYxXFx1MDU3NVxcdTA1ODBcXHUwNTZmXFx1MDU3NVxcdTA1NjFcXHUwNTc2XCIsc3M6XCIlZCBcXHUwNTdlXFx1MDU2MVxcdTA1NzVcXHUwNTgwXFx1MDU2ZlxcdTA1NzVcXHUwNTYxXFx1MDU3NlwiLG06XCJcXHUwNTgwXFx1MDU3OFxcdTA1N2FcXHUwNTY1XCIsbW06XCIlZCBcXHUwNTgwXFx1MDU3OFxcdTA1N2FcXHUwNTY1XCIsaDpcIlxcdTA1NmFcXHUwNTYxXFx1MDU3NFwiLGhoOlwiJWQgXFx1MDU2YVxcdTA1NjFcXHUwNTc0XCIsZDpcIlxcdTA1ODVcXHUwNTgwXCIsZGQ6XCIlZCBcXHUwNTg1XFx1MDU4MFwiLE06XCJcXHUwNTYxXFx1MDU3NFxcdTA1NmJcXHUwNTdkXCIsTU06XCIlZCBcXHUwNTYxXFx1MDU3NFxcdTA1NmJcXHUwNTdkXCIseTpcIlxcdTA1N2ZcXHUwNTYxXFx1MDU4MFxcdTA1NmJcIix5eTpcIiVkIFxcdTA1N2ZcXHUwNTYxXFx1MDU4MFxcdTA1NmJcIn0sbWVyaWRpZW1QYXJzZTovXFx1MDU2M1xcdTA1NmJcXHUwNTc3XFx1MDU2NVxcdTA1ODBcXHUwNTdlXFx1MDU2MXxcXHUwNTYxXFx1MDU3Y1xcdTA1NjFcXHUwNTdlXFx1MDU3OFxcdTA1N2ZcXHUwNTdlXFx1MDU2MXxcXHUwNTgxXFx1MDU2NVxcdTA1ODBcXHUwNTY1XFx1MDU2ZlxcdTA1N2VcXHUwNTYxfFxcdTA1NjVcXHUwNTgwXFx1MDU2NVxcdTA1NmZcXHUwNTc4XFx1MDU3NVxcdTA1NjFcXHUwNTc2Lyxpc1BNOmZ1bmN0aW9uKGUpe3JldHVybi9eKFxcdTA1ODFcXHUwNTY1XFx1MDU4MFxcdTA1NjVcXHUwNTZmXFx1MDU3ZVxcdTA1NjF8XFx1MDU2NVxcdTA1ODBcXHUwNTY1XFx1MDU2ZlxcdTA1NzhcXHUwNTc1XFx1MDU2MVxcdTA1NzYpJC8udGVzdChlKX0sbWVyaWRpZW06ZnVuY3Rpb24oZSl7cmV0dXJuIGU8ND9cIlxcdTA1NjNcXHUwNTZiXFx1MDU3N1xcdTA1NjVcXHUwNTgwXFx1MDU3ZVxcdTA1NjFcIjplPDEyP1wiXFx1MDU2MVxcdTA1N2NcXHUwNTYxXFx1MDU3ZVxcdTA1NzhcXHUwNTdmXFx1MDU3ZVxcdTA1NjFcIjplPDE3P1wiXFx1MDU4MVxcdTA1NjVcXHUwNTgwXFx1MDU2NVxcdTA1NmZcXHUwNTdlXFx1MDU2MVwiOlwiXFx1MDU2NVxcdTA1ODBcXHUwNTY1XFx1MDU2ZlxcdTA1NzhcXHUwNTc1XFx1MDU2MVxcdTA1NzZcIn0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn18XFxkezEsMn0tKFxcdTA1NmJcXHUwNTc2fFxcdTA1ODBcXHUwNTY0KS8sb3JkaW5hbDpmdW5jdGlvbihlLGEpe3N3aXRjaChhKXtjYXNlXCJERERcIjpjYXNlXCJ3XCI6Y2FzZVwiV1wiOmNhc2VcIkRERG9cIjpyZXR1cm4gMT09PWU/ZStcIi1cXHUwNTZiXFx1MDU3NlwiOmUrXCItXFx1MDU4MFxcdTA1NjRcIjtkZWZhdWx0OnJldHVybiBlfX0sd2Vlazp7ZG93OjEsZG95Ojd9fSksZS5kZWZpbmVMb2NhbGUoXCJpZFwiLHttb250aHM6XCJKYW51YXJpX0ZlYnJ1YXJpX01hcmV0X0FwcmlsX01laV9KdW5pX0p1bGlfQWd1c3R1c19TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXNlbWJlclwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIkphbl9GZWJfTWFyX0Fwcl9NZWlfSnVuX0p1bF9BZ3RfU2VwX09rdF9Ob3ZfRGVzXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiTWluZ2d1X1NlbmluX1NlbGFzYV9SYWJ1X0thbWlzX0p1bWF0X1NhYnR1XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJNaW5fU2VuX1NlbF9SYWJfS2FtX0p1bV9TYWJcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJNZ19Tbl9TbF9SYl9LbV9KbV9TYlwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISC5tbVwiLExUUzpcIkhILm1tLnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tXCJ9LG1lcmlkaWVtUGFyc2U6L3BhZ2l8c2lhbmd8c29yZXxtYWxhbS8sbWVyaWRpZW1Ib3VyOmZ1bmN0aW9uKGUsYSl7cmV0dXJuIDEyPT09ZSYmKGU9MCksXCJwYWdpXCI9PT1hP2U6XCJzaWFuZ1wiPT09YT9lPj0xMT9lOmUrMTI6XCJzb3JlXCI9PT1hfHxcIm1hbGFtXCI9PT1hP2UrMTI6dm9pZCAwfSxtZXJpZGllbTpmdW5jdGlvbihlLGEsXyl7cmV0dXJuIGU8MTE/XCJwYWdpXCI6ZTwxNT9cInNpYW5nXCI6ZTwxOT9cInNvcmVcIjpcIm1hbGFtXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW0hhcmkgaW5pIHB1a3VsXSBMVFwiLG5leHREYXk6XCJbQmVzb2sgcHVrdWxdIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtwdWt1bF0gTFRcIixsYXN0RGF5OlwiW0tlbWFyaW4gcHVrdWxdIExUXCIsbGFzdFdlZWs6XCJkZGRkIFtsYWx1IHB1a3VsXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcImRhbGFtICVzXCIscGFzdDpcIiVzIHlhbmcgbGFsdVwiLHM6XCJiZWJlcmFwYSBkZXRpa1wiLHNzOlwiJWQgZGV0aWtcIixtOlwic2VtZW5pdFwiLG1tOlwiJWQgbWVuaXRcIixoOlwic2VqYW1cIixoaDpcIiVkIGphbVwiLGQ6XCJzZWhhcmlcIixkZDpcIiVkIGhhcmlcIixNOlwic2VidWxhblwiLE1NOlwiJWQgYnVsYW5cIix5Olwic2V0YWh1blwiLHl5OlwiJWQgdGFodW5cIn0sd2Vlazp7ZG93OjEsZG95Ojd9fSksZS5kZWZpbmVMb2NhbGUoXCJpc1wiLHttb250aHM6XCJqYW5cXHhmYWFyX2ZlYnJcXHhmYWFyX21hcnNfYXByXFx4ZWRsX21hXFx4ZWRfalxceGZhblxceGVkX2pcXHhmYWxcXHhlZF9cXHhlMWdcXHhmYXN0X3NlcHRlbWJlcl9va3RcXHhmM2Jlcl9uXFx4ZjN2ZW1iZXJfZGVzZW1iZXJcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJqYW5fZmViX21hcl9hcHJfbWFcXHhlZF9qXFx4ZmFuX2pcXHhmYWxfXFx4ZTFnXFx4ZmFfc2VwX29rdF9uXFx4ZjN2X2Rlc1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcInN1bm51ZGFndXJfbVxceGUxbnVkYWd1cl9cXHhmZXJpXFx4ZjBqdWRhZ3VyX21pXFx4ZjB2aWt1ZGFndXJfZmltbXR1ZGFndXJfZlxceGY2c3R1ZGFndXJfbGF1Z2FyZGFndXJcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcInN1bl9tXFx4ZTFuX1xceGZlcmlfbWlcXHhmMF9maW1fZlxceGY2c19sYXVcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJTdV9NXFx4ZTFfXFx4ZGVyX01pX0ZpX0ZcXHhmNl9MYVwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJIOm1tXCIsTFRTOlwiSDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJELiBNTU1NIFlZWVlcIixMTEw6XCJELiBNTU1NIFlZWVkgW2tsLl0gSDptbVwiLExMTEw6XCJkZGRkLCBELiBNTU1NIFlZWVkgW2tsLl0gSDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltcXHhlZCBkYWcga2wuXSBMVFwiLG5leHREYXk6XCJbXFx4ZTEgbW9yZ3VuIGtsLl0gTFRcIixuZXh0V2VlazpcImRkZGQgW2tsLl0gTFRcIixsYXN0RGF5OlwiW1xceGVkIGdcXHhlNnIga2wuXSBMVFwiLGxhc3RXZWVrOlwiW3NcXHhlZFxceGYwYXN0YV0gZGRkZCBba2wuXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcImVmdGlyICVzXCIscGFzdDpcImZ5cmlyICVzIHNcXHhlZFxceGYwYW5cIixzOnRlLHNzOnRlLG06dGUsbW06dGUsaDpcImtsdWtrdXN0dW5kXCIsaGg6dGUsZDp0ZSxkZDp0ZSxNOnRlLE1NOnRlLHk6dGUseXk6dGV9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9XFwuLyxvcmRpbmFsOlwiJWQuXCIsd2Vlazp7ZG93OjEsZG95OjR9fSksZS5kZWZpbmVMb2NhbGUoXCJpdFwiLHttb250aHM6XCJnZW5uYWlvX2ZlYmJyYWlvX21hcnpvX2FwcmlsZV9tYWdnaW9fZ2l1Z25vX2x1Z2xpb19hZ29zdG9fc2V0dGVtYnJlX290dG9icmVfbm92ZW1icmVfZGljZW1icmVcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJnZW5fZmViX21hcl9hcHJfbWFnX2dpdV9sdWdfYWdvX3NldF9vdHRfbm92X2RpY1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcImRvbWVuaWNhX2x1bmVkXFx4ZWNfbWFydGVkXFx4ZWNfbWVyY29sZWRcXHhlY19naW92ZWRcXHhlY192ZW5lcmRcXHhlY19zYWJhdG9cIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcImRvbV9sdW5fbWFyX21lcl9naW9fdmVuX3NhYlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcImRvX2x1X21hX21lX2dpX3ZlX3NhXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW09nZ2kgYWxsZV0gTFRcIixuZXh0RGF5OlwiW0RvbWFuaSBhbGxlXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbYWxsZV0gTFRcIixsYXN0RGF5OlwiW0llcmkgYWxsZV0gTFRcIixsYXN0V2VlazpmdW5jdGlvbigpe3N3aXRjaCh0aGlzLmRheSgpKXtjYXNlIDA6cmV0dXJuXCJbbGEgc2NvcnNhXSBkZGRkIFthbGxlXSBMVFwiO2RlZmF1bHQ6cmV0dXJuXCJbbG8gc2NvcnNvXSBkZGRkIFthbGxlXSBMVFwifX0sc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOmZ1bmN0aW9uKGUpe3JldHVybigvXlswLTldLiskLy50ZXN0KGUpP1widHJhXCI6XCJpblwiKStcIiBcIitlfSxwYXN0OlwiJXMgZmFcIixzOlwiYWxjdW5pIHNlY29uZGlcIixzczpcIiVkIHNlY29uZGlcIixtOlwidW4gbWludXRvXCIsbW06XCIlZCBtaW51dGlcIixoOlwidW4nb3JhXCIsaGg6XCIlZCBvcmVcIixkOlwidW4gZ2lvcm5vXCIsZGQ6XCIlZCBnaW9ybmlcIixNOlwidW4gbWVzZVwiLE1NOlwiJWQgbWVzaVwiLHk6XCJ1biBhbm5vXCIseXk6XCIlZCBhbm5pXCJ9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9XFx4YmEvLG9yZGluYWw6XCIlZFxceGJhXCIsd2Vlazp7ZG93OjEsZG95OjR9fSksZS5kZWZpbmVMb2NhbGUoXCJqYVwiLHttb250aHM6XCIxXFx1NjcwOF8yXFx1NjcwOF8zXFx1NjcwOF80XFx1NjcwOF81XFx1NjcwOF82XFx1NjcwOF83XFx1NjcwOF84XFx1NjcwOF85XFx1NjcwOF8xMFxcdTY3MDhfMTFcXHU2NzA4XzEyXFx1NjcwOFwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIjFcXHU2NzA4XzJcXHU2NzA4XzNcXHU2NzA4XzRcXHU2NzA4XzVcXHU2NzA4XzZcXHU2NzA4XzdcXHU2NzA4XzhcXHU2NzA4XzlcXHU2NzA4XzEwXFx1NjcwOF8xMVxcdTY3MDhfMTJcXHU2NzA4XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiXFx1NjVlNVxcdTY2ZGNcXHU2NWU1X1xcdTY3MDhcXHU2NmRjXFx1NjVlNV9cXHU3MDZiXFx1NjZkY1xcdTY1ZTVfXFx1NmMzNFxcdTY2ZGNcXHU2NWU1X1xcdTY3MjhcXHU2NmRjXFx1NjVlNV9cXHU5MWQxXFx1NjZkY1xcdTY1ZTVfXFx1NTcxZlxcdTY2ZGNcXHU2NWU1XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJcXHU2NWU1X1xcdTY3MDhfXFx1NzA2Yl9cXHU2YzM0X1xcdTY3MjhfXFx1OTFkMV9cXHU1NzFmXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiXFx1NjVlNV9cXHU2NzA4X1xcdTcwNmJfXFx1NmMzNF9cXHU2NzI4X1xcdTkxZDFfXFx1NTcxZlwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIllZWVkvTU0vRERcIixMTDpcIllZWVlcXHU1ZTc0TVxcdTY3MDhEXFx1NjVlNVwiLExMTDpcIllZWVlcXHU1ZTc0TVxcdTY3MDhEXFx1NjVlNSBISDptbVwiLExMTEw6XCJZWVlZXFx1NWU3NE1cXHU2NzA4RFxcdTY1ZTUgSEg6bW0gZGRkZFwiLGw6XCJZWVlZL01NL0REXCIsbGw6XCJZWVlZXFx1NWU3NE1cXHU2NzA4RFxcdTY1ZTVcIixsbGw6XCJZWVlZXFx1NWU3NE1cXHU2NzA4RFxcdTY1ZTUgSEg6bW1cIixsbGxsOlwiWVlZWVxcdTVlNzRNXFx1NjcwOERcXHU2NWU1IEhIOm1tIGRkZGRcIn0sbWVyaWRpZW1QYXJzZTovXFx1NTM0OFxcdTUyNGR8XFx1NTM0OFxcdTVmOGMvaSxpc1BNOmZ1bmN0aW9uKGUpe3JldHVyblwiXFx1NTM0OFxcdTVmOGNcIj09PWV9LG1lcmlkaWVtOmZ1bmN0aW9uKGUsYSxfKXtyZXR1cm4gZTwxMj9cIlxcdTUzNDhcXHU1MjRkXCI6XCJcXHU1MzQ4XFx1NWY4Y1wifSxjYWxlbmRhcjp7c2FtZURheTpcIltcXHU0ZWNhXFx1NjVlNV0gTFRcIixuZXh0RGF5OlwiW1xcdTY2MGVcXHU2NWU1XSBMVFwiLG5leHRXZWVrOlwiW1xcdTY3NjVcXHU5MDMxXWRkZGQgTFRcIixsYXN0RGF5OlwiW1xcdTY2MjhcXHU2NWU1XSBMVFwiLGxhc3RXZWVrOlwiW1xcdTUyNGRcXHU5MDMxXWRkZGQgTFRcIixzYW1lRWxzZTpcIkxcIn0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn1cXHU2NWU1LyxvcmRpbmFsOmZ1bmN0aW9uKGUsYSl7c3dpdGNoKGEpe2Nhc2VcImRcIjpjYXNlXCJEXCI6Y2FzZVwiREREXCI6cmV0dXJuIGUrXCJcXHU2NWU1XCI7ZGVmYXVsdDpyZXR1cm4gZX19LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiJXNcXHU1ZjhjXCIscGFzdDpcIiVzXFx1NTI0ZFwiLHM6XCJcXHU2NTcwXFx1NzlkMlwiLHNzOlwiJWRcXHU3OWQyXCIsbTpcIjFcXHU1MjA2XCIsbW06XCIlZFxcdTUyMDZcIixoOlwiMVxcdTY2NDJcXHU5NTkzXCIsaGg6XCIlZFxcdTY2NDJcXHU5NTkzXCIsZDpcIjFcXHU2NWU1XCIsZGQ6XCIlZFxcdTY1ZTVcIixNOlwiMVxcdTMwZjZcXHU2NzA4XCIsTU06XCIlZFxcdTMwZjZcXHU2NzA4XCIseTpcIjFcXHU1ZTc0XCIseXk6XCIlZFxcdTVlNzRcIn19KSxlLmRlZmluZUxvY2FsZShcImp2XCIse21vbnRoczpcIkphbnVhcmlfRmVicnVhcmlfTWFyZXRfQXByaWxfTWVpX0p1bmlfSnVsaV9BZ3VzdHVzX1NlcHRlbWJlcl9Pa3RvYmVyX05vcGVtYmVyX0Rlc2VtYmVyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiSmFuX0ZlYl9NYXJfQXByX01laV9KdW5fSnVsX0Fnc19TZXBfT2t0X05vcF9EZXNcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJNaW5nZ3VfU2VuZW5fU2Vsb3NvX1JlYnVfS2VtaXNfSmVtdXdhaF9TZXB0dVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiTWluX1Nlbl9TZWxfUmViX0tlbV9KZW1fU2VwXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiTWdfU25fU2xfUmJfS21fSm1fU3BcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEgubW1cIixMVFM6XCJISC5tbS5zc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW1cIixMTExMOlwiZGRkZCwgRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbVwifSxtZXJpZGllbVBhcnNlOi9lbmppbmd8c2l5YW5nfHNvbnRlbnxuZGFsdS8sbWVyaWRpZW1Ib3VyOmZ1bmN0aW9uKGUsYSl7cmV0dXJuIDEyPT09ZSYmKGU9MCksXCJlbmppbmdcIj09PWE/ZTpcInNpeWFuZ1wiPT09YT9lPj0xMT9lOmUrMTI6XCJzb250ZW5cIj09PWF8fFwibmRhbHVcIj09PWE/ZSsxMjp2b2lkIDB9LG1lcmlkaWVtOmZ1bmN0aW9uKGUsYSxfKXtyZXR1cm4gZTwxMT9cImVuamluZ1wiOmU8MTU/XCJzaXlhbmdcIjplPDE5P1wic29udGVuXCI6XCJuZGFsdVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltEaW50ZW4gcHVuaWtvIHB1a3VsXSBMVFwiLG5leHREYXk6XCJbTWJlbmphbmcgcHVrdWxdIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtwdWt1bF0gTFRcIixsYXN0RGF5OlwiW0thbGEgd2luZ2kgcHVrdWxdIExUXCIsbGFzdFdlZWs6XCJkZGRkIFtrZXBlbmdrZXIgcHVrdWxdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwid29udGVuIGluZyAlc1wiLHBhc3Q6XCIlcyBpbmdrYW5nIGtlcGVuZ2tlclwiLHM6XCJzYXdldGF3aXMgZGV0aWtcIixzczpcIiVkIGRldGlrXCIsbTpcInNldHVuZ2dhbCBtZW5pdFwiLG1tOlwiJWQgbWVuaXRcIixoOlwic2V0dW5nZ2FsIGphbVwiLGhoOlwiJWQgamFtXCIsZDpcInNlZGludGVuXCIsZGQ6XCIlZCBkaW50ZW5cIixNOlwic2V3dWxhblwiLE1NOlwiJWQgd3VsYW5cIix5Olwic2V0YXVuXCIseXk6XCIlZCB0YXVuXCJ9LHdlZWs6e2RvdzoxLGRveTo3fX0pLGUuZGVmaW5lTG9jYWxlKFwia2FcIix7bW9udGhzOntzdGFuZGFsb25lOlwiXFx1MTBkOFxcdTEwZDBcXHUxMGRjXFx1MTBkNVxcdTEwZDBcXHUxMGUwXFx1MTBkOF9cXHUxMGQ3XFx1MTBkNFxcdTEwZDFcXHUxMGQ0XFx1MTBlMFxcdTEwZDVcXHUxMGQwXFx1MTBkYVxcdTEwZDhfXFx1MTBkYlxcdTEwZDBcXHUxMGUwXFx1MTBlMlxcdTEwZDhfXFx1MTBkMFxcdTEwZGVcXHUxMGUwXFx1MTBkOFxcdTEwZGFcXHUxMGQ4X1xcdTEwZGJcXHUxMGQwXFx1MTBkOFxcdTEwZTFcXHUxMGQ4X1xcdTEwZDhcXHUxMGQ1XFx1MTBkY1xcdTEwZDhcXHUxMGUxXFx1MTBkOF9cXHUxMGQ4XFx1MTBkNVxcdTEwZGFcXHUxMGQ4XFx1MTBlMVxcdTEwZDhfXFx1MTBkMFxcdTEwZDJcXHUxMGQ1XFx1MTBkOFxcdTEwZTFcXHUxMGUyXFx1MTBkZF9cXHUxMGUxXFx1MTBkNFxcdTEwZTVcXHUxMGUyXFx1MTBkNFxcdTEwZGJcXHUxMGQxXFx1MTBkNFxcdTEwZTBcXHUxMGQ4X1xcdTEwZGRcXHUxMGU1XFx1MTBlMlxcdTEwZGRcXHUxMGRiXFx1MTBkMVxcdTEwZDRcXHUxMGUwXFx1MTBkOF9cXHUxMGRjXFx1MTBkZFxcdTEwZDRcXHUxMGRiXFx1MTBkMVxcdTEwZDRcXHUxMGUwXFx1MTBkOF9cXHUxMGQzXFx1MTBkNFxcdTEwZDlcXHUxMGQ0XFx1MTBkYlxcdTEwZDFcXHUxMGQ0XFx1MTBlMFxcdTEwZDhcIi5zcGxpdChcIl9cIiksZm9ybWF0OlwiXFx1MTBkOFxcdTEwZDBcXHUxMGRjXFx1MTBkNVxcdTEwZDBcXHUxMGUwXFx1MTBlMV9cXHUxMGQ3XFx1MTBkNFxcdTEwZDFcXHUxMGQ0XFx1MTBlMFxcdTEwZDVcXHUxMGQwXFx1MTBkYVxcdTEwZTFfXFx1MTBkYlxcdTEwZDBcXHUxMGUwXFx1MTBlMlxcdTEwZTFfXFx1MTBkMFxcdTEwZGVcXHUxMGUwXFx1MTBkOFxcdTEwZGFcXHUxMGQ4XFx1MTBlMV9cXHUxMGRiXFx1MTBkMFxcdTEwZDhcXHUxMGUxXFx1MTBlMV9cXHUxMGQ4XFx1MTBkNVxcdTEwZGNcXHUxMGQ4XFx1MTBlMVxcdTEwZTFfXFx1MTBkOFxcdTEwZDVcXHUxMGRhXFx1MTBkOFxcdTEwZTFcXHUxMGUxX1xcdTEwZDBcXHUxMGQyXFx1MTBkNVxcdTEwZDhcXHUxMGUxXFx1MTBlMlxcdTEwZTFfXFx1MTBlMVxcdTEwZDRcXHUxMGU1XFx1MTBlMlxcdTEwZDRcXHUxMGRiXFx1MTBkMVxcdTEwZDRcXHUxMGUwXFx1MTBlMV9cXHUxMGRkXFx1MTBlNVxcdTEwZTJcXHUxMGRkXFx1MTBkYlxcdTEwZDFcXHUxMGQ0XFx1MTBlMFxcdTEwZTFfXFx1MTBkY1xcdTEwZGRcXHUxMGQ0XFx1MTBkYlxcdTEwZDFcXHUxMGQ0XFx1MTBlMFxcdTEwZTFfXFx1MTBkM1xcdTEwZDRcXHUxMGQ5XFx1MTBkNFxcdTEwZGJcXHUxMGQxXFx1MTBkNFxcdTEwZTBcXHUxMGUxXCIuc3BsaXQoXCJfXCIpfSxtb250aHNTaG9ydDpcIlxcdTEwZDhcXHUxMGQwXFx1MTBkY19cXHUxMGQ3XFx1MTBkNFxcdTEwZDFfXFx1MTBkYlxcdTEwZDBcXHUxMGUwX1xcdTEwZDBcXHUxMGRlXFx1MTBlMF9cXHUxMGRiXFx1MTBkMFxcdTEwZDhfXFx1MTBkOFxcdTEwZDVcXHUxMGRjX1xcdTEwZDhcXHUxMGQ1XFx1MTBkYV9cXHUxMGQwXFx1MTBkMlxcdTEwZDVfXFx1MTBlMVxcdTEwZDRcXHUxMGU1X1xcdTEwZGRcXHUxMGU1XFx1MTBlMl9cXHUxMGRjXFx1MTBkZFxcdTEwZDRfXFx1MTBkM1xcdTEwZDRcXHUxMGQ5XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOntzdGFuZGFsb25lOlwiXFx1MTBkOVxcdTEwZDVcXHUxMGQ4XFx1MTBlMFxcdTEwZDBfXFx1MTBkZFxcdTEwZTBcXHUxMGU4XFx1MTBkMFxcdTEwZDFcXHUxMGQwXFx1MTBkN1xcdTEwZDhfXFx1MTBlMVxcdTEwZDBcXHUxMGRiXFx1MTBlOFxcdTEwZDBcXHUxMGQxXFx1MTBkMFxcdTEwZDdcXHUxMGQ4X1xcdTEwZGRcXHUxMGQ3XFx1MTBlZVxcdTEwZThcXHUxMGQwXFx1MTBkMVxcdTEwZDBcXHUxMGQ3XFx1MTBkOF9cXHUxMGVlXFx1MTBlM1xcdTEwZDdcXHUxMGU4XFx1MTBkMFxcdTEwZDFcXHUxMGQwXFx1MTBkN1xcdTEwZDhfXFx1MTBkZVxcdTEwZDBcXHUxMGUwXFx1MTBkMFxcdTEwZTFcXHUxMGQ5XFx1MTBkNFxcdTEwZDVcXHUxMGQ4X1xcdTEwZThcXHUxMGQwXFx1MTBkMVxcdTEwZDBcXHUxMGQ3XFx1MTBkOFwiLnNwbGl0KFwiX1wiKSxmb3JtYXQ6XCJcXHUxMGQ5XFx1MTBkNVxcdTEwZDhcXHUxMGUwXFx1MTBkMFxcdTEwZTFfXFx1MTBkZFxcdTEwZTBcXHUxMGU4XFx1MTBkMFxcdTEwZDFcXHUxMGQwXFx1MTBkN1xcdTEwZTFfXFx1MTBlMVxcdTEwZDBcXHUxMGRiXFx1MTBlOFxcdTEwZDBcXHUxMGQxXFx1MTBkMFxcdTEwZDdcXHUxMGUxX1xcdTEwZGRcXHUxMGQ3XFx1MTBlZVxcdTEwZThcXHUxMGQwXFx1MTBkMVxcdTEwZDBcXHUxMGQ3XFx1MTBlMV9cXHUxMGVlXFx1MTBlM1xcdTEwZDdcXHUxMGU4XFx1MTBkMFxcdTEwZDFcXHUxMGQwXFx1MTBkN1xcdTEwZTFfXFx1MTBkZVxcdTEwZDBcXHUxMGUwXFx1MTBkMFxcdTEwZTFcXHUxMGQ5XFx1MTBkNFxcdTEwZDVcXHUxMGUxX1xcdTEwZThcXHUxMGQwXFx1MTBkMVxcdTEwZDBcXHUxMGQ3XFx1MTBlMVwiLnNwbGl0KFwiX1wiKSxpc0Zvcm1hdDovKFxcdTEwZWNcXHUxMGQ4XFx1MTBkY1xcdTEwZDB8XFx1MTBlOFxcdTEwZDRcXHUxMGRiXFx1MTBkM1xcdTEwZDRcXHUxMGQyKS99LHdlZWtkYXlzU2hvcnQ6XCJcXHUxMGQ5XFx1MTBkNVxcdTEwZDhfXFx1MTBkZFxcdTEwZTBcXHUxMGU4X1xcdTEwZTFcXHUxMGQwXFx1MTBkYl9cXHUxMGRkXFx1MTBkN1xcdTEwZWVfXFx1MTBlZVxcdTEwZTNcXHUxMGQ3X1xcdTEwZGVcXHUxMGQwXFx1MTBlMF9cXHUxMGU4XFx1MTBkMFxcdTEwZDFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJcXHUxMGQ5XFx1MTBkNV9cXHUxMGRkXFx1MTBlMF9cXHUxMGUxXFx1MTBkMF9cXHUxMGRkXFx1MTBkN19cXHUxMGVlXFx1MTBlM19cXHUxMGRlXFx1MTBkMF9cXHUxMGU4XFx1MTBkMFwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJoOm1tIEFcIixMVFM6XCJoOm1tOnNzIEFcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBoOm1tIEFcIixMTExMOlwiZGRkZCwgRCBNTU1NIFlZWVkgaDptbSBBXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTEwZDNcXHUxMGU2XFx1MTBkNFxcdTEwZTFdIExUWy1cXHUxMGQ2XFx1MTBkNF1cIixuZXh0RGF5OlwiW1xcdTEwZWVcXHUxMGQ1XFx1MTBkMFxcdTEwZGFdIExUWy1cXHUxMGQ2XFx1MTBkNF1cIixsYXN0RGF5OlwiW1xcdTEwZDJcXHUxMGUzXFx1MTBlOFxcdTEwZDhcXHUxMGRjXSBMVFstXFx1MTBkNlxcdTEwZDRdXCIsbmV4dFdlZWs6XCJbXFx1MTBlOFxcdTEwZDRcXHUxMGRiXFx1MTBkM1xcdTEwZDRcXHUxMGQyXSBkZGRkIExUWy1cXHUxMGQ2XFx1MTBkNF1cIixsYXN0V2VlazpcIltcXHUxMGVjXFx1MTBkOFxcdTEwZGNcXHUxMGQwXSBkZGRkIExULVxcdTEwZDZcXHUxMGQ0XCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOmZ1bmN0aW9uKGUpe3JldHVybi8oXFx1MTBlY1xcdTEwZDBcXHUxMGRiXFx1MTBkOHxcXHUxMGVjXFx1MTBlM1xcdTEwZDdcXHUxMGQ4fFxcdTEwZTFcXHUxMGQwXFx1MTBkMFxcdTEwZDdcXHUxMGQ4fFxcdTEwZWNcXHUxMGQ0XFx1MTBkYVxcdTEwZDgpLy50ZXN0KGUpP2UucmVwbGFjZSgvXFx1MTBkOCQvLFwiXFx1MTBlOFxcdTEwZDhcIik6ZStcIlxcdTEwZThcXHUxMGQ4XCJ9LHBhc3Q6ZnVuY3Rpb24oZSl7cmV0dXJuLyhcXHUxMGVjXFx1MTBkMFxcdTEwZGJcXHUxMGQ4fFxcdTEwZWNcXHUxMGUzXFx1MTBkN1xcdTEwZDh8XFx1MTBlMVxcdTEwZDBcXHUxMGQwXFx1MTBkN1xcdTEwZDh8XFx1MTBkM1xcdTEwZTZcXHUxMGQ0fFxcdTEwZDdcXHUxMGQ1XFx1MTBkNCkvLnRlc3QoZSk/ZS5yZXBsYWNlKC8oXFx1MTBkOHxcXHUxMGQ0KSQvLFwiXFx1MTBkOFxcdTEwZTEgXFx1MTBlM1xcdTEwZDlcXHUxMGQwXFx1MTBkY1wiKTovXFx1MTBlY1xcdTEwZDRcXHUxMGRhXFx1MTBkOC8udGVzdChlKT9lLnJlcGxhY2UoL1xcdTEwZWNcXHUxMGQ0XFx1MTBkYVxcdTEwZDgkLyxcIlxcdTEwZWNcXHUxMGRhXFx1MTBkOFxcdTEwZTEgXFx1MTBlM1xcdTEwZDlcXHUxMGQwXFx1MTBkY1wiKTp2b2lkIDB9LHM6XCJcXHUxMGUwXFx1MTBkMFxcdTEwZGJcXHUxMGQzXFx1MTBkNFxcdTEwZGNcXHUxMGQ4XFx1MTBkYlxcdTEwZDQgXFx1MTBlY1xcdTEwZDBcXHUxMGRiXFx1MTBkOFwiLHNzOlwiJWQgXFx1MTBlY1xcdTEwZDBcXHUxMGRiXFx1MTBkOFwiLG06XCJcXHUxMGVjXFx1MTBlM1xcdTEwZDdcXHUxMGQ4XCIsbW06XCIlZCBcXHUxMGVjXFx1MTBlM1xcdTEwZDdcXHUxMGQ4XCIsaDpcIlxcdTEwZTFcXHUxMGQwXFx1MTBkMFxcdTEwZDdcXHUxMGQ4XCIsaGg6XCIlZCBcXHUxMGUxXFx1MTBkMFxcdTEwZDBcXHUxMGQ3XFx1MTBkOFwiLGQ6XCJcXHUxMGQzXFx1MTBlNlxcdTEwZDRcIixkZDpcIiVkIFxcdTEwZDNcXHUxMGU2XFx1MTBkNFwiLE06XCJcXHUxMGQ3XFx1MTBkNVxcdTEwZDRcIixNTTpcIiVkIFxcdTEwZDdcXHUxMGQ1XFx1MTBkNFwiLHk6XCJcXHUxMGVjXFx1MTBkNFxcdTEwZGFcXHUxMGQ4XCIseXk6XCIlZCBcXHUxMGVjXFx1MTBkNFxcdTEwZGFcXHUxMGQ4XCJ9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6LzB8MS1cXHUxMGRhXFx1MTBkOHxcXHUxMGRiXFx1MTBkNC1cXGR7MSwyfXxcXGR7MSwyfS1cXHUxMGQ0LyxvcmRpbmFsOmZ1bmN0aW9uKGUpe3JldHVybiAwPT09ZT9lOjE9PT1lP2UrXCItXFx1MTBkYVxcdTEwZDhcIjplPDIwfHxlPD0xMDAmJmUlMjA9PTB8fGUlMTAwPT0wP1wiXFx1MTBkYlxcdTEwZDQtXCIrZTplK1wiLVxcdTEwZDRcIn0sd2Vlazp7ZG93OjEsZG95Ojd9fSk7dmFyIG5lPXswOlwiLVxcdTA0NDhcXHUwNDU2XCIsMTpcIi1cXHUwNDQ4XFx1MDQ1NlwiLDI6XCItXFx1MDQ0OFxcdTA0NTZcIiwzOlwiLVxcdTA0NDhcXHUwNDU2XCIsNDpcIi1cXHUwNDQ4XFx1MDQ1NlwiLDU6XCItXFx1MDQ0OFxcdTA0NTZcIiw2OlwiLVxcdTA0NDhcXHUwNDRiXCIsNzpcIi1cXHUwNDQ4XFx1MDQ1NlwiLDg6XCItXFx1MDQ0OFxcdTA0NTZcIiw5OlwiLVxcdTA0NDhcXHUwNDRiXCIsMTA6XCItXFx1MDQ0OFxcdTA0NGJcIiwyMDpcIi1cXHUwNDQ4XFx1MDQ0YlwiLDMwOlwiLVxcdTA0NDhcXHUwNDRiXCIsNDA6XCItXFx1MDQ0OFxcdTA0NGJcIiw1MDpcIi1cXHUwNDQ4XFx1MDQ1NlwiLDYwOlwiLVxcdTA0NDhcXHUwNDRiXCIsNzA6XCItXFx1MDQ0OFxcdTA0NTZcIiw4MDpcIi1cXHUwNDQ4XFx1MDQ1NlwiLDkwOlwiLVxcdTA0NDhcXHUwNDRiXCIsMTAwOlwiLVxcdTA0NDhcXHUwNDU2XCJ9O2UuZGVmaW5lTG9jYWxlKFwia2tcIix7bW9udGhzOlwiXFx1MDQ5YlxcdTA0MzBcXHUwNGEzXFx1MDQ0MlxcdTA0MzBcXHUwNDQwX1xcdTA0MzBcXHUwNDliXFx1MDQzZlxcdTA0MzBcXHUwNDNkX1xcdTA0M2RcXHUwNDMwXFx1MDQ0M1xcdTA0NDBcXHUwNDRiXFx1MDQzN19cXHUwNDQxXFx1MDRkOVxcdTA0NDNcXHUwNDU2XFx1MDQ0MF9cXHUwNDNjXFx1MDQzMFxcdTA0M2NcXHUwNDRiXFx1MDQ0MF9cXHUwNDNjXFx1MDQzMFxcdTA0NDNcXHUwNDQxXFx1MDQ0YlxcdTA0M2NfXFx1MDQ0OFxcdTA0NTZcXHUwNDNiXFx1MDQzNFxcdTA0MzVfXFx1MDQ0MlxcdTA0MzBcXHUwNDNjXFx1MDQ0YlxcdTA0MzdfXFx1MDQ5YlxcdTA0NGJcXHUwNDQwXFx1MDQzYVxcdTA0YWZcXHUwNDM5XFx1MDQzNVxcdTA0M2FfXFx1MDQ5YlxcdTA0MzBcXHUwNDM3XFx1MDQzMFxcdTA0M2RfXFx1MDQ5YlxcdTA0MzBcXHUwNDQwXFx1MDQzMFxcdTA0NDhcXHUwNDMwX1xcdTA0MzZcXHUwNDM1XFx1MDQzYlxcdTA0NDJcXHUwNDNlXFx1MDQ5YlxcdTA0NDFcXHUwNDMwXFx1MDQzZFwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIlxcdTA0OWJcXHUwNDMwXFx1MDRhM19cXHUwNDMwXFx1MDQ5YlxcdTA0M2ZfXFx1MDQzZFxcdTA0MzBcXHUwNDQzX1xcdTA0NDFcXHUwNGQ5XFx1MDQ0M19cXHUwNDNjXFx1MDQzMFxcdTA0M2NfXFx1MDQzY1xcdTA0MzBcXHUwNDQzX1xcdTA0NDhcXHUwNDU2XFx1MDQzYl9cXHUwNDQyXFx1MDQzMFxcdTA0M2NfXFx1MDQ5YlxcdTA0NGJcXHUwNDQwX1xcdTA0OWJcXHUwNDMwXFx1MDQzN19cXHUwNDliXFx1MDQzMFxcdTA0NDBfXFx1MDQzNlxcdTA0MzVcXHUwNDNiXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiXFx1MDQzNlxcdTA0MzVcXHUwNDNhXFx1MDQ0MVxcdTA0MzVcXHUwNDNkXFx1MDQzMVxcdTA0NTZfXFx1MDQzNFxcdTA0YWZcXHUwNDM5XFx1MDQ0MVxcdTA0MzVcXHUwNDNkXFx1MDQzMVxcdTA0NTZfXFx1MDQ0MVxcdTA0MzVcXHUwNDM5XFx1MDQ0MVxcdTA0MzVcXHUwNDNkXFx1MDQzMVxcdTA0NTZfXFx1MDQ0MVxcdTA0ZDlcXHUwNDQwXFx1MDQ0MVxcdTA0MzVcXHUwNDNkXFx1MDQzMVxcdTA0NTZfXFx1MDQzMVxcdTA0MzVcXHUwNDM5XFx1MDQ0MVxcdTA0MzVcXHUwNDNkXFx1MDQzMVxcdTA0NTZfXFx1MDQzNlxcdTA0YjFcXHUwNDNjXFx1MDQzMF9cXHUwNDQxXFx1MDQzNVxcdTA0M2RcXHUwNDMxXFx1MDQ1NlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiXFx1MDQzNlxcdTA0MzVcXHUwNDNhX1xcdTA0MzRcXHUwNGFmXFx1MDQzOV9cXHUwNDQxXFx1MDQzNVxcdTA0MzlfXFx1MDQ0MVxcdTA0ZDlcXHUwNDQwX1xcdTA0MzFcXHUwNDM1XFx1MDQzOV9cXHUwNDM2XFx1MDRiMVxcdTA0M2NfXFx1MDQ0MVxcdTA0MzVcXHUwNDNkXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiXFx1MDQzNlxcdTA0M2FfXFx1MDQzNFxcdTA0MzlfXFx1MDQ0MVxcdTA0MzlfXFx1MDQ0MVxcdTA0NDBfXFx1MDQzMVxcdTA0MzlfXFx1MDQzNlxcdTA0M2NfXFx1MDQ0MVxcdTA0M2RcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTA0MTFcXHUwNGFmXFx1MDQzM1xcdTA0NTZcXHUwNDNkIFxcdTA0NDFcXHUwNDMwXFx1MDQ5M1xcdTA0MzBcXHUwNDQyXSBMVFwiLG5leHREYXk6XCJbXFx1MDQxNVxcdTA0NDBcXHUwNDQyXFx1MDQzNVxcdTA0YTMgXFx1MDQ0MVxcdTA0MzBcXHUwNDkzXFx1MDQzMFxcdTA0NDJdIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtcXHUwNDQxXFx1MDQzMFxcdTA0OTNcXHUwNDMwXFx1MDQ0Ml0gTFRcIixsYXN0RGF5OlwiW1xcdTA0MWFcXHUwNDM1XFx1MDQ0OFxcdTA0MzUgXFx1MDQ0MVxcdTA0MzBcXHUwNDkzXFx1MDQzMFxcdTA0NDJdIExUXCIsbGFzdFdlZWs6XCJbXFx1MDRlOFxcdTA0NDJcXHUwNDNhXFx1MDQzNVxcdTA0M2QgXFx1MDQzMFxcdTA0M2ZcXHUwNDQyXFx1MDQzMFxcdTA0M2RcXHUwNDRiXFx1MDRhM10gZGRkZCBbXFx1MDQ0MVxcdTA0MzBcXHUwNDkzXFx1MDQzMFxcdTA0NDJdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiJXMgXFx1MDQ1NlxcdTA0NDhcXHUwNDU2XFx1MDQzZFxcdTA0MzRcXHUwNDM1XCIscGFzdDpcIiVzIFxcdTA0MzFcXHUwNGIxXFx1MDQ0MFxcdTA0NGJcXHUwNDNkXCIsczpcIlxcdTA0MzFcXHUwNDU2XFx1MDQ0MFxcdTA0M2RcXHUwNDM1XFx1MDQ0OFxcdTA0MzUgXFx1MDQ0MVxcdTA0MzVcXHUwNDNhXFx1MDQ0M1xcdTA0M2RcXHUwNDM0XCIsc3M6XCIlZCBcXHUwNDQxXFx1MDQzNVxcdTA0M2FcXHUwNDQzXFx1MDQzZFxcdTA0MzRcIixtOlwiXFx1MDQzMVxcdTA0NTZcXHUwNDQwIFxcdTA0M2NcXHUwNDM4XFx1MDQzZFxcdTA0NDNcXHUwNDQyXCIsbW06XCIlZCBcXHUwNDNjXFx1MDQzOFxcdTA0M2RcXHUwNDQzXFx1MDQ0MlwiLGg6XCJcXHUwNDMxXFx1MDQ1NlxcdTA0NDAgXFx1MDQ0MVxcdTA0MzBcXHUwNDkzXFx1MDQzMFxcdTA0NDJcIixoaDpcIiVkIFxcdTA0NDFcXHUwNDMwXFx1MDQ5M1xcdTA0MzBcXHUwNDQyXCIsZDpcIlxcdTA0MzFcXHUwNDU2XFx1MDQ0MCBcXHUwNDNhXFx1MDRhZlxcdTA0M2RcIixkZDpcIiVkIFxcdTA0M2FcXHUwNGFmXFx1MDQzZFwiLE06XCJcXHUwNDMxXFx1MDQ1NlxcdTA0NDAgXFx1MDQzMFxcdTA0MzlcIixNTTpcIiVkIFxcdTA0MzBcXHUwNDM5XCIseTpcIlxcdTA0MzFcXHUwNDU2XFx1MDQ0MCBcXHUwNDM2XFx1MDQ0YlxcdTA0M2JcIix5eTpcIiVkIFxcdTA0MzZcXHUwNDRiXFx1MDQzYlwifSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfS0oXFx1MDQ0OFxcdTA0NTZ8XFx1MDQ0OFxcdTA0NGIpLyxvcmRpbmFsOmZ1bmN0aW9uKGUpe3JldHVybiBlKyhuZVtlXXx8bmVbZSUxMF18fG5lW2U+PTEwMD8xMDA6bnVsbF0pfSx3ZWVrOntkb3c6MSxkb3k6N319KSxlLmRlZmluZUxvY2FsZShcImttXCIse21vbnRoczpcIlxcdTE3OThcXHUxNzgwXFx1MTc5YVxcdTE3YjZfXFx1MTc4MFxcdTE3YmJcXHUxNzk4XFx1MTdkMlxcdTE3OTdcXHUxN2M4X1xcdTE3OThcXHUxN2I4XFx1MTc5M1xcdTE3YjZfXFx1MTc5OFxcdTE3YzFcXHUxNzlmXFx1MTdiNl9cXHUxN2E3XFx1MTc5ZlxcdTE3OTdcXHUxN2I2X1xcdTE3OThcXHUxN2I3XFx1MTc5MFxcdTE3YmJcXHUxNzkzXFx1MTdiNl9cXHUxNzgwXFx1MTc4MFxcdTE3ZDJcXHUxNzgwXFx1MTc4YVxcdTE3YjZfXFx1MTc5ZlxcdTE3YjhcXHUxN2EwXFx1MTdiNl9cXHUxNzgwXFx1MTc4OVxcdTE3ZDJcXHUxNzg5XFx1MTdiNl9cXHUxNzhmXFx1MTdiYlxcdTE3OWJcXHUxN2I2X1xcdTE3OWNcXHUxN2I3XFx1MTc4NVxcdTE3ZDJcXHUxNzg2XFx1MTdiN1xcdTE3ODBcXHUxN2I2X1xcdTE3OTJcXHUxN2QyXFx1MTc5M1xcdTE3YmNcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJcXHUxNzk4XFx1MTc4MFxcdTE3OWFcXHUxN2I2X1xcdTE3ODBcXHUxN2JiXFx1MTc5OFxcdTE3ZDJcXHUxNzk3XFx1MTdjOF9cXHUxNzk4XFx1MTdiOFxcdTE3OTNcXHUxN2I2X1xcdTE3OThcXHUxN2MxXFx1MTc5ZlxcdTE3YjZfXFx1MTdhN1xcdTE3OWZcXHUxNzk3XFx1MTdiNl9cXHUxNzk4XFx1MTdiN1xcdTE3OTBcXHUxN2JiXFx1MTc5M1xcdTE3YjZfXFx1MTc4MFxcdTE3ODBcXHUxN2QyXFx1MTc4MFxcdTE3OGFcXHUxN2I2X1xcdTE3OWZcXHUxN2I4XFx1MTdhMFxcdTE3YjZfXFx1MTc4MFxcdTE3ODlcXHUxN2QyXFx1MTc4OVxcdTE3YjZfXFx1MTc4ZlxcdTE3YmJcXHUxNzliXFx1MTdiNl9cXHUxNzljXFx1MTdiN1xcdTE3ODVcXHUxN2QyXFx1MTc4NlxcdTE3YjdcXHUxNzgwXFx1MTdiNl9cXHUxNzkyXFx1MTdkMlxcdTE3OTNcXHUxN2JjXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiXFx1MTdhMlxcdTE3YjZcXHUxNzkxXFx1MTdiN1xcdTE3OGZcXHUxN2QyXFx1MTc5OV9cXHUxNzg1XFx1MTdkMFxcdTE3OTNcXHUxN2QyXFx1MTc5MV9cXHUxN2EyXFx1MTc4NFxcdTE3ZDJcXHUxNzgyXFx1MTdiNlxcdTE3OWFfXFx1MTc5NlxcdTE3YmJcXHUxNzkyX1xcdTE3OTZcXHUxN2QyXFx1MTc5YVxcdTE3YTBcXHUxNzlmXFx1MTdkMlxcdTE3OTRcXHUxNzhmXFx1MTdiN1xcdTE3Y2RfXFx1MTc5ZlxcdTE3YmJcXHUxNzgwXFx1MTdkMlxcdTE3OWFfXFx1MTc5ZlxcdTE3YzVcXHUxNzlhXFx1MTdjZFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiXFx1MTdhMlxcdTE3YjZcXHUxNzkxXFx1MTdiN1xcdTE3OGZcXHUxN2QyXFx1MTc5OV9cXHUxNzg1XFx1MTdkMFxcdTE3OTNcXHUxN2QyXFx1MTc5MV9cXHUxN2EyXFx1MTc4NFxcdTE3ZDJcXHUxNzgyXFx1MTdiNlxcdTE3OWFfXFx1MTc5NlxcdTE3YmJcXHUxNzkyX1xcdTE3OTZcXHUxN2QyXFx1MTc5YVxcdTE3YTBcXHUxNzlmXFx1MTdkMlxcdTE3OTRcXHUxNzhmXFx1MTdiN1xcdTE3Y2RfXFx1MTc5ZlxcdTE3YmJcXHUxNzgwXFx1MTdkMlxcdTE3OWFfXFx1MTc5ZlxcdTE3YzVcXHUxNzlhXFx1MTdjZFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIlxcdTE3YTJcXHUxN2I2XFx1MTc5MVxcdTE3YjdcXHUxNzhmXFx1MTdkMlxcdTE3OTlfXFx1MTc4NVxcdTE3ZDBcXHUxNzkzXFx1MTdkMlxcdTE3OTFfXFx1MTdhMlxcdTE3ODRcXHUxN2QyXFx1MTc4MlxcdTE3YjZcXHUxNzlhX1xcdTE3OTZcXHUxN2JiXFx1MTc5Ml9cXHUxNzk2XFx1MTdkMlxcdTE3OWFcXHUxN2EwXFx1MTc5ZlxcdTE3ZDJcXHUxNzk0XFx1MTc4ZlxcdTE3YjdcXHUxN2NkX1xcdTE3OWZcXHUxN2JiXFx1MTc4MFxcdTE3ZDJcXHUxNzlhX1xcdTE3OWZcXHUxN2M1XFx1MTc5YVxcdTE3Y2RcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTE3OTBcXHUxN2QyXFx1MTc4NFxcdTE3YzNcXHUxNzkzXFx1MTdjMVxcdTE3YzcgXFx1MTc5OFxcdTE3YzlcXHUxN2M0XFx1MTc4NF0gTFRcIixuZXh0RGF5OlwiW1xcdTE3OWZcXHUxN2QyXFx1MTdhMlxcdTE3YzJcXHUxNzgwIFxcdTE3OThcXHUxN2M5XFx1MTdjNFxcdTE3ODRdIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtcXHUxNzk4XFx1MTdjOVxcdTE3YzRcXHUxNzg0XSBMVFwiLGxhc3REYXk6XCJbXFx1MTc5OFxcdTE3ZDJcXHUxNzlmXFx1MTdiN1xcdTE3OWJcXHUxNzk4XFx1MTdiN1xcdTE3ODkgXFx1MTc5OFxcdTE3YzlcXHUxN2M0XFx1MTc4NF0gTFRcIixsYXN0V2VlazpcImRkZGQgW1xcdTE3OWZcXHUxNzk0XFx1MTdkMlxcdTE3OGZcXHUxN2I2XFx1MTdhMFxcdTE3Y2RcXHUxNzk4XFx1MTdiYlxcdTE3OTNdIFtcXHUxNzk4XFx1MTdjOVxcdTE3YzRcXHUxNzg0XSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIiVzXFx1MTc5MVxcdTE3YzBcXHUxNzhmXCIscGFzdDpcIiVzXFx1MTc5OFxcdTE3YmJcXHUxNzkzXCIsczpcIlxcdTE3OTRcXHUxN2M5XFx1MTdiYlxcdTE3OTNcXHUxN2QyXFx1MTc5OFxcdTE3YjZcXHUxNzkzXFx1MTc5Y1xcdTE3YjdcXHUxNzkzXFx1MTdiNlxcdTE3OTFcXHUxN2I4XCIsc3M6XCIlZCBcXHUxNzljXFx1MTdiN1xcdTE3OTNcXHUxN2I2XFx1MTc5MVxcdTE3YjhcIixtOlwiXFx1MTc5OFxcdTE3YmRcXHUxNzk5XFx1MTc5M1xcdTE3YjZcXHUxNzkxXFx1MTdiOFwiLG1tOlwiJWQgXFx1MTc5M1xcdTE3YjZcXHUxNzkxXFx1MTdiOFwiLGg6XCJcXHUxNzk4XFx1MTdiZFxcdTE3OTlcXHUxNzk4XFx1MTdjOVxcdTE3YzRcXHUxNzg0XCIsaGg6XCIlZCBcXHUxNzk4XFx1MTdjOVxcdTE3YzRcXHUxNzg0XCIsZDpcIlxcdTE3OThcXHUxN2JkXFx1MTc5OVxcdTE3OTBcXHUxN2QyXFx1MTc4NFxcdTE3YzNcIixkZDpcIiVkIFxcdTE3OTBcXHUxN2QyXFx1MTc4NFxcdTE3YzNcIixNOlwiXFx1MTc5OFxcdTE3YmRcXHUxNzk5XFx1MTc4MVxcdTE3YzJcIixNTTpcIiVkIFxcdTE3ODFcXHUxN2MyXCIseTpcIlxcdTE3OThcXHUxN2JkXFx1MTc5OVxcdTE3ODZcXHUxN2QyXFx1MTc5M1xcdTE3YjZcXHUxN2M2XCIseXk6XCIlZCBcXHUxNzg2XFx1MTdkMlxcdTE3OTNcXHUxN2I2XFx1MTdjNlwifSx3ZWVrOntkb3c6MSxkb3k6NH19KTt2YXIgcmU9ezE6XCJcXHUwY2U3XCIsMjpcIlxcdTBjZThcIiwzOlwiXFx1MGNlOVwiLDQ6XCJcXHUwY2VhXCIsNTpcIlxcdTBjZWJcIiw2OlwiXFx1MGNlY1wiLDc6XCJcXHUwY2VkXCIsODpcIlxcdTBjZWVcIiw5OlwiXFx1MGNlZlwiLDA6XCJcXHUwY2U2XCJ9LGllPXtcIlxcdTBjZTdcIjpcIjFcIixcIlxcdTBjZThcIjpcIjJcIixcIlxcdTBjZTlcIjpcIjNcIixcIlxcdTBjZWFcIjpcIjRcIixcIlxcdTBjZWJcIjpcIjVcIixcIlxcdTBjZWNcIjpcIjZcIixcIlxcdTBjZWRcIjpcIjdcIixcIlxcdTBjZWVcIjpcIjhcIixcIlxcdTBjZWZcIjpcIjlcIixcIlxcdTBjZTZcIjpcIjBcIn07ZS5kZWZpbmVMb2NhbGUoXCJrblwiLHttb250aHM6XCJcXHUwYzljXFx1MGNhOFxcdTBjYjVcXHUwY2IwXFx1MGNiZl9cXHUwY2FiXFx1MGNjNlxcdTBjYWNcXHUwY2NkXFx1MGNiMFxcdTBjYjVcXHUwY2IwXFx1MGNiZl9cXHUwY2FlXFx1MGNiZVxcdTBjYjBcXHUwY2NkXFx1MGM5YVxcdTBjY2RfXFx1MGM4ZlxcdTBjYWFcXHUwY2NkXFx1MGNiMFxcdTBjYmZcXHUwY2IyXFx1MGNjZF9cXHUwY2FlXFx1MGNjNlxcdTBjZDVfXFx1MGM5Y1xcdTBjYzJcXHUwY2E4XFx1MGNjZF9cXHUwYzljXFx1MGNjMVxcdTBjYjJcXHUwY2M2XFx1MGNkNl9cXHUwYzg2XFx1MGM5N1xcdTBjYjhcXHUwY2NkXFx1MGM5ZlxcdTBjY2RfXFx1MGNiOFxcdTBjYzZcXHUwY2FhXFx1MGNjZFxcdTBjOWZcXHUwY2M2XFx1MGM4MlxcdTBjYWNcXHUwY2IwXFx1MGNjZF9cXHUwYzg1XFx1MGM5NVxcdTBjY2RcXHUwYzlmXFx1MGNjNlxcdTBjYzJcXHUwY2Q1XFx1MGNhY1xcdTBjYjBcXHUwY2NkX1xcdTBjYThcXHUwY2I1XFx1MGNjNlxcdTBjODJcXHUwY2FjXFx1MGNiMFxcdTBjY2RfXFx1MGNhMVxcdTBjYmZcXHUwY2I4XFx1MGNjNlxcdTBjODJcXHUwY2FjXFx1MGNiMFxcdTBjY2RcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJcXHUwYzljXFx1MGNhOF9cXHUwY2FiXFx1MGNjNlxcdTBjYWNcXHUwY2NkXFx1MGNiMF9cXHUwY2FlXFx1MGNiZVxcdTBjYjBcXHUwY2NkXFx1MGM5YVxcdTBjY2RfXFx1MGM4ZlxcdTBjYWFcXHUwY2NkXFx1MGNiMFxcdTBjYmZcXHUwY2IyXFx1MGNjZF9cXHUwY2FlXFx1MGNjNlxcdTBjZDVfXFx1MGM5Y1xcdTBjYzJcXHUwY2E4XFx1MGNjZF9cXHUwYzljXFx1MGNjMVxcdTBjYjJcXHUwY2M2XFx1MGNkNl9cXHUwYzg2XFx1MGM5N1xcdTBjYjhcXHUwY2NkXFx1MGM5ZlxcdTBjY2RfXFx1MGNiOFxcdTBjYzZcXHUwY2FhXFx1MGNjZFxcdTBjOWZcXHUwY2M2XFx1MGM4Ml9cXHUwYzg1XFx1MGM5NVxcdTBjY2RcXHUwYzlmXFx1MGNjNlxcdTBjYzJcXHUwY2Q1X1xcdTBjYThcXHUwY2I1XFx1MGNjNlxcdTBjODJfXFx1MGNhMVxcdTBjYmZcXHUwY2I4XFx1MGNjNlxcdTBjODJcIi5zcGxpdChcIl9cIiksbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czpcIlxcdTBjYWRcXHUwY2JlXFx1MGNhOFxcdTBjYzFcXHUwY2I1XFx1MGNiZVxcdTBjYjBfXFx1MGNiOFxcdTBjYzZcXHUwY2MyXFx1MGNkNVxcdTBjYWVcXHUwY2I1XFx1MGNiZVxcdTBjYjBfXFx1MGNhZVxcdTBjODJcXHUwYzk3XFx1MGNiM1xcdTBjYjVcXHUwY2JlXFx1MGNiMF9cXHUwY2FjXFx1MGNjMVxcdTBjYTdcXHUwY2I1XFx1MGNiZVxcdTBjYjBfXFx1MGM5N1xcdTBjYzFcXHUwY2IwXFx1MGNjMVxcdTBjYjVcXHUwY2JlXFx1MGNiMF9cXHUwY2I2XFx1MGNjMVxcdTBjOTVcXHUwY2NkXFx1MGNiMFxcdTBjYjVcXHUwY2JlXFx1MGNiMF9cXHUwY2I2XFx1MGNhOFxcdTBjYmZcXHUwY2I1XFx1MGNiZVxcdTBjYjBcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlxcdTBjYWRcXHUwY2JlXFx1MGNhOFxcdTBjYzFfXFx1MGNiOFxcdTBjYzZcXHUwY2MyXFx1MGNkNVxcdTBjYWVfXFx1MGNhZVxcdTBjODJcXHUwYzk3XFx1MGNiM19cXHUwY2FjXFx1MGNjMVxcdTBjYTdfXFx1MGM5N1xcdTBjYzFcXHUwY2IwXFx1MGNjMV9cXHUwY2I2XFx1MGNjMVxcdTBjOTVcXHUwY2NkXFx1MGNiMF9cXHUwY2I2XFx1MGNhOFxcdTBjYmZcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJcXHUwY2FkXFx1MGNiZV9cXHUwY2I4XFx1MGNjNlxcdTBjYzJcXHUwY2Q1X1xcdTBjYWVcXHUwYzgyX1xcdTBjYWNcXHUwY2MxX1xcdTBjOTdcXHUwY2MxX1xcdTBjYjZcXHUwY2MxX1xcdTBjYjZcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiQSBoOm1tXCIsTFRTOlwiQSBoOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVksIEEgaDptbVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTBjODdcXHUwYzgyXFx1MGNhNlxcdTBjYzFdIExUXCIsbmV4dERheTpcIltcXHUwY2E4XFx1MGNiZVxcdTBjYjNcXHUwY2M2XSBMVFwiLG5leHRXZWVrOlwiZGRkZCwgTFRcIixsYXN0RGF5OlwiW1xcdTBjYThcXHUwY2JmXFx1MGNhOFxcdTBjY2RcXHUwY2E4XFx1MGNjNl0gTFRcIixsYXN0V2VlazpcIltcXHUwYzk1XFx1MGNjNlxcdTBjYzJcXHUwY2E4XFx1MGNjNlxcdTBjYWZdIGRkZGQsIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiJXMgXFx1MGNhOFxcdTBjODJcXHUwY2E0XFx1MGNiMFwiLHBhc3Q6XCIlcyBcXHUwY2I5XFx1MGNiZlxcdTBjODJcXHUwY2E2XFx1MGNjNlwiLHM6XCJcXHUwYzk1XFx1MGNjNlxcdTBjYjJcXHUwY2I1XFx1MGNjMSBcXHUwYzk1XFx1MGNjZFxcdTBjYjdcXHUwY2EzXFx1MGM5N1xcdTBjYjNcXHUwY2MxXCIsc3M6XCIlZCBcXHUwY2I4XFx1MGNjNlxcdTBjOTVcXHUwY2M2XFx1MGM4MlxcdTBjYTFcXHUwY2MxXFx1MGM5N1xcdTBjYjNcXHUwY2MxXCIsbTpcIlxcdTBjOTJcXHUwYzgyXFx1MGNhNlxcdTBjYzEgXFx1MGNhOFxcdTBjYmZcXHUwY2FlXFx1MGNiZlxcdTBjYjdcIixtbTpcIiVkIFxcdTBjYThcXHUwY2JmXFx1MGNhZVxcdTBjYmZcXHUwY2I3XCIsaDpcIlxcdTBjOTJcXHUwYzgyXFx1MGNhNlxcdTBjYzEgXFx1MGM5N1xcdTBjODJcXHUwYzlmXFx1MGNjNlwiLGhoOlwiJWQgXFx1MGM5N1xcdTBjODJcXHUwYzlmXFx1MGNjNlwiLGQ6XCJcXHUwYzkyXFx1MGM4MlxcdTBjYTZcXHUwY2MxIFxcdTBjYTZcXHUwY2JmXFx1MGNhOFwiLGRkOlwiJWQgXFx1MGNhNlxcdTBjYmZcXHUwY2E4XCIsTTpcIlxcdTBjOTJcXHUwYzgyXFx1MGNhNlxcdTBjYzEgXFx1MGNhNFxcdTBjYmZcXHUwYzgyXFx1MGM5N1xcdTBjYjNcXHUwY2MxXCIsTU06XCIlZCBcXHUwY2E0XFx1MGNiZlxcdTBjODJcXHUwYzk3XFx1MGNiM1xcdTBjYzFcIix5OlwiXFx1MGM5MlxcdTBjODJcXHUwY2E2XFx1MGNjMSBcXHUwY2I1XFx1MGNiMFxcdTBjY2RcXHUwY2I3XCIseXk6XCIlZCBcXHUwY2I1XFx1MGNiMFxcdTBjY2RcXHUwY2I3XCJ9LHByZXBhcnNlOmZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoL1tcXHUwY2U3XFx1MGNlOFxcdTBjZTlcXHUwY2VhXFx1MGNlYlxcdTBjZWNcXHUwY2VkXFx1MGNlZVxcdTBjZWZcXHUwY2U2XS9nLGZ1bmN0aW9uKGUpe3JldHVybiBpZVtlXX0pfSxwb3N0Zm9ybWF0OmZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoL1xcZC9nLGZ1bmN0aW9uKGUpe3JldHVybiByZVtlXX0pfSxtZXJpZGllbVBhcnNlOi9cXHUwY2IwXFx1MGNiZVxcdTBjYTRcXHUwY2NkXFx1MGNiMFxcdTBjYmZ8XFx1MGNhY1xcdTBjYzZcXHUwY2IzXFx1MGNiZlxcdTBjOTdcXHUwY2NkXFx1MGM5N1xcdTBjYzZ8XFx1MGNhZVxcdTBjYTdcXHUwY2NkXFx1MGNhZlxcdTBjYmVcXHUwY2I5XFx1MGNjZFxcdTBjYTh8XFx1MGNiOFxcdTBjODJcXHUwYzljXFx1MGNjNi8sbWVyaWRpZW1Ib3VyOmZ1bmN0aW9uKGUsYSl7cmV0dXJuIDEyPT09ZSYmKGU9MCksXCJcXHUwY2IwXFx1MGNiZVxcdTBjYTRcXHUwY2NkXFx1MGNiMFxcdTBjYmZcIj09PWE/ZTw0P2U6ZSsxMjpcIlxcdTBjYWNcXHUwY2M2XFx1MGNiM1xcdTBjYmZcXHUwYzk3XFx1MGNjZFxcdTBjOTdcXHUwY2M2XCI9PT1hP2U6XCJcXHUwY2FlXFx1MGNhN1xcdTBjY2RcXHUwY2FmXFx1MGNiZVxcdTBjYjlcXHUwY2NkXFx1MGNhOFwiPT09YT9lPj0xMD9lOmUrMTI6XCJcXHUwY2I4XFx1MGM4MlxcdTBjOWNcXHUwY2M2XCI9PT1hP2UrMTI6dm9pZCAwfSxtZXJpZGllbTpmdW5jdGlvbihlLGEsXyl7cmV0dXJuIGU8ND9cIlxcdTBjYjBcXHUwY2JlXFx1MGNhNFxcdTBjY2RcXHUwY2IwXFx1MGNiZlwiOmU8MTA/XCJcXHUwY2FjXFx1MGNjNlxcdTBjYjNcXHUwY2JmXFx1MGM5N1xcdTBjY2RcXHUwYzk3XFx1MGNjNlwiOmU8MTc/XCJcXHUwY2FlXFx1MGNhN1xcdTBjY2RcXHUwY2FmXFx1MGNiZVxcdTBjYjlcXHUwY2NkXFx1MGNhOFwiOmU8MjA/XCJcXHUwY2I4XFx1MGM4MlxcdTBjOWNcXHUwY2M2XCI6XCJcXHUwY2IwXFx1MGNiZVxcdTBjYTRcXHUwY2NkXFx1MGNiMFxcdTBjYmZcIn0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn0oXFx1MGNhOFxcdTBjYzZcXHUwY2Q1KS8sb3JkaW5hbDpmdW5jdGlvbihlKXtyZXR1cm4gZStcIlxcdTBjYThcXHUwY2M2XFx1MGNkNVwifSx3ZWVrOntkb3c6MCxkb3k6Nn19KSxlLmRlZmluZUxvY2FsZShcImtvXCIse21vbnRoczpcIjFcXHVjNmQ0XzJcXHVjNmQ0XzNcXHVjNmQ0XzRcXHVjNmQ0XzVcXHVjNmQ0XzZcXHVjNmQ0XzdcXHVjNmQ0XzhcXHVjNmQ0XzlcXHVjNmQ0XzEwXFx1YzZkNF8xMVxcdWM2ZDRfMTJcXHVjNmQ0XCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiMVxcdWM2ZDRfMlxcdWM2ZDRfM1xcdWM2ZDRfNFxcdWM2ZDRfNVxcdWM2ZDRfNlxcdWM2ZDRfN1xcdWM2ZDRfOFxcdWM2ZDRfOVxcdWM2ZDRfMTBcXHVjNmQ0XzExXFx1YzZkNF8xMlxcdWM2ZDRcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJcXHVjNzdjXFx1YzY5NFxcdWM3N2NfXFx1YzZkNFxcdWM2OTRcXHVjNzdjX1xcdWQ2NTRcXHVjNjk0XFx1Yzc3Y19cXHVjMjE4XFx1YzY5NFxcdWM3N2NfXFx1YmFhOVxcdWM2OTRcXHVjNzdjX1xcdWFlMDhcXHVjNjk0XFx1Yzc3Y19cXHVkMWEwXFx1YzY5NFxcdWM3N2NcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlxcdWM3N2NfXFx1YzZkNF9cXHVkNjU0X1xcdWMyMThfXFx1YmFhOV9cXHVhZTA4X1xcdWQxYTBcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJcXHVjNzdjX1xcdWM2ZDRfXFx1ZDY1NF9cXHVjMjE4X1xcdWJhYTlfXFx1YWUwOF9cXHVkMWEwXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkEgaDptbVwiLExUUzpcIkEgaDptbTpzc1wiLEw6XCJZWVlZLk1NLkRELlwiLExMOlwiWVlZWVxcdWIxNDQgTU1NTSBEXFx1Yzc3Y1wiLExMTDpcIllZWVlcXHViMTQ0IE1NTU0gRFxcdWM3N2MgQSBoOm1tXCIsTExMTDpcIllZWVlcXHViMTQ0IE1NTU0gRFxcdWM3N2MgZGRkZCBBIGg6bW1cIixsOlwiWVlZWS5NTS5ERC5cIixsbDpcIllZWVlcXHViMTQ0IE1NTU0gRFxcdWM3N2NcIixsbGw6XCJZWVlZXFx1YjE0NCBNTU1NIERcXHVjNzdjIEEgaDptbVwiLGxsbGw6XCJZWVlZXFx1YjE0NCBNTU1NIERcXHVjNzdjIGRkZGQgQSBoOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiXFx1YzYyNFxcdWIyOTggTFRcIixuZXh0RGF5OlwiXFx1YjBiNFxcdWM3N2MgTFRcIixuZXh0V2VlazpcImRkZGQgTFRcIixsYXN0RGF5OlwiXFx1YzViNFxcdWM4MWMgTFRcIixsYXN0V2VlazpcIlxcdWM5YzBcXHViMDljXFx1YzhmYyBkZGRkIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiJXMgXFx1ZDZjNFwiLHBhc3Q6XCIlcyBcXHVjODA0XCIsczpcIlxcdWJhODcgXFx1Y2QwOFwiLHNzOlwiJWRcXHVjZDA4XCIsbTpcIjFcXHViZDg0XCIsbW06XCIlZFxcdWJkODRcIixoOlwiXFx1ZDU1YyBcXHVjMmRjXFx1YWMwNFwiLGhoOlwiJWRcXHVjMmRjXFx1YWMwNFwiLGQ6XCJcXHVkNTU4XFx1YjhlOFwiLGRkOlwiJWRcXHVjNzdjXCIsTTpcIlxcdWQ1NWMgXFx1YjJlY1wiLE1NOlwiJWRcXHViMmVjXCIseTpcIlxcdWM3N2MgXFx1YjE0NFwiLHl5OlwiJWRcXHViMTQ0XCJ9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9KFxcdWM3N2N8XFx1YzZkNHxcXHVjOGZjKS8sb3JkaW5hbDpmdW5jdGlvbihlLGEpe3N3aXRjaChhKXtjYXNlXCJkXCI6Y2FzZVwiRFwiOmNhc2VcIkRERFwiOnJldHVybiBlK1wiXFx1Yzc3Y1wiO2Nhc2VcIk1cIjpyZXR1cm4gZStcIlxcdWM2ZDRcIjtjYXNlXCJ3XCI6Y2FzZVwiV1wiOnJldHVybiBlK1wiXFx1YzhmY1wiO2RlZmF1bHQ6cmV0dXJuIGV9fSxtZXJpZGllbVBhcnNlOi9cXHVjNjI0XFx1YzgwNHxcXHVjNjI0XFx1ZDZjNC8saXNQTTpmdW5jdGlvbihlKXtyZXR1cm5cIlxcdWM2MjRcXHVkNmM0XCI9PT1lfSxtZXJpZGllbTpmdW5jdGlvbihlLGEsXyl7cmV0dXJuIGU8MTI/XCJcXHVjNjI0XFx1YzgwNFwiOlwiXFx1YzYyNFxcdWQ2YzRcIn19KTt2YXIgbWU9ezA6XCItXFx1MDQ0N1xcdTA0YWZcIiwxOlwiLVxcdTA0NDdcXHUwNDM4XCIsMjpcIi1cXHUwNDQ3XFx1MDQzOFwiLDM6XCItXFx1MDQ0N1xcdTA0YWZcIiw0OlwiLVxcdTA0NDdcXHUwNGFmXCIsNTpcIi1cXHUwNDQ3XFx1MDQzOFwiLDY6XCItXFx1MDQ0N1xcdTA0NGJcIiw3OlwiLVxcdTA0NDdcXHUwNDM4XCIsODpcIi1cXHUwNDQ3XFx1MDQzOFwiLDk6XCItXFx1MDQ0N1xcdTA0NDNcIiwxMDpcIi1cXHUwNDQ3XFx1MDQ0M1wiLDIwOlwiLVxcdTA0NDdcXHUwNDRiXCIsMzA6XCItXFx1MDQ0N1xcdTA0NDNcIiw0MDpcIi1cXHUwNDQ3XFx1MDQ0YlwiLDUwOlwiLVxcdTA0NDdcXHUwNGFmXCIsNjA6XCItXFx1MDQ0N1xcdTA0NGJcIiw3MDpcIi1cXHUwNDQ3XFx1MDQzOFwiLDgwOlwiLVxcdTA0NDdcXHUwNDM4XCIsOTA6XCItXFx1MDQ0N1xcdTA0NDNcIiwxMDA6XCItXFx1MDQ0N1xcdTA0YWZcIn07ZnVuY3Rpb24gb2UoZSxhLF8scyl7dmFyIGQ9e206W1wiZW5nIE1pbnV0dFwiLFwiZW5nZXIgTWludXR0XCJdLGg6W1wiZW5nIFN0b25uXCIsXCJlbmdlciBTdG9ublwiXSxkOltcImVlbiBEYWdcIixcImVuZ2VtIERhZ1wiXSxNOltcImVlIE1vdW50XCIsXCJlbmdlbSBNb3VudFwiXSx5OltcImVlIEpvZXJcIixcImVuZ2VtIEpvZXJcIl19O3JldHVybiBhP2RbX11bMF06ZFtfXVsxXX1mdW5jdGlvbiB1ZShlKXtpZihlPXBhcnNlSW50KGUsMTApLGlzTmFOKGUpKXJldHVybiExO2lmKGU8MClyZXR1cm4hMDtpZihlPDEwKXJldHVybiA0PD1lJiZlPD03O2lmKGU8MTAwKXt2YXIgYT1lJTEwO3JldHVybiB1ZSgwPT09YT9lLzEwOmEpfWlmKGU8MWU0KXtmb3IoO2U+PTEwOyllLz0xMDtyZXR1cm4gdWUoZSl9cmV0dXJuIHVlKGUvPTFlMyl9ZS5kZWZpbmVMb2NhbGUoXCJreVwiLHttb250aHM6XCJcXHUwNDRmXFx1MDQzZFxcdTA0MzJcXHUwNDMwXFx1MDQ0MFxcdTA0NGNfXFx1MDQ0NFxcdTA0MzVcXHUwNDMyXFx1MDQ0MFxcdTA0MzBcXHUwNDNiXFx1MDQ0Y19cXHUwNDNjXFx1MDQzMFxcdTA0NDBcXHUwNDQyX1xcdTA0MzBcXHUwNDNmXFx1MDQ0MFxcdTA0MzVcXHUwNDNiXFx1MDQ0Y19cXHUwNDNjXFx1MDQzMFxcdTA0MzlfXFx1MDQzOFxcdTA0NGVcXHUwNDNkXFx1MDQ0Y19cXHUwNDM4XFx1MDQ0ZVxcdTA0M2JcXHUwNDRjX1xcdTA0MzBcXHUwNDMyXFx1MDQzM1xcdTA0NDNcXHUwNDQxXFx1MDQ0Ml9cXHUwNDQxXFx1MDQzNVxcdTA0M2RcXHUwNDQyXFx1MDQ0ZlxcdTA0MzFcXHUwNDQwXFx1MDQ0Y19cXHUwNDNlXFx1MDQzYVxcdTA0NDJcXHUwNDRmXFx1MDQzMVxcdTA0NDBcXHUwNDRjX1xcdTA0M2RcXHUwNDNlXFx1MDQ0ZlxcdTA0MzFcXHUwNDQwXFx1MDQ0Y19cXHUwNDM0XFx1MDQzNVxcdTA0M2FcXHUwNDMwXFx1MDQzMVxcdTA0NDBcXHUwNDRjXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiXFx1MDQ0ZlxcdTA0M2RcXHUwNDMyX1xcdTA0NDRcXHUwNDM1XFx1MDQzMl9cXHUwNDNjXFx1MDQzMFxcdTA0NDBcXHUwNDQyX1xcdTA0MzBcXHUwNDNmXFx1MDQ0MF9cXHUwNDNjXFx1MDQzMFxcdTA0MzlfXFx1MDQzOFxcdTA0NGVcXHUwNDNkXFx1MDQ0Y19cXHUwNDM4XFx1MDQ0ZVxcdTA0M2JcXHUwNDRjX1xcdTA0MzBcXHUwNDMyXFx1MDQzM19cXHUwNDQxXFx1MDQzNVxcdTA0M2RfXFx1MDQzZVxcdTA0M2FcXHUwNDQyX1xcdTA0M2RcXHUwNDNlXFx1MDQ0Zl9cXHUwNDM0XFx1MDQzNVxcdTA0M2FcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJcXHUwNDE2XFx1MDQzNVxcdTA0M2FcXHUwNDQ4XFx1MDQzNVxcdTA0M2NcXHUwNDMxXFx1MDQzOF9cXHUwNDE0XFx1MDRhZlxcdTA0MzlcXHUwNDQ4XFx1MDRlOVxcdTA0M2NcXHUwNDMxXFx1MDRhZl9cXHUwNDI4XFx1MDQzNVxcdTA0MzlcXHUwNDQ4XFx1MDQzNVxcdTA0M2NcXHUwNDMxXFx1MDQzOF9cXHUwNDI4XFx1MDQzMFxcdTA0NDBcXHUwNDQ4XFx1MDQzNVxcdTA0M2NcXHUwNDMxXFx1MDQzOF9cXHUwNDExXFx1MDQzNVxcdTA0MzlcXHUwNDQ4XFx1MDQzNVxcdTA0M2NcXHUwNDMxXFx1MDQzOF9cXHUwNDE2XFx1MDQ0M1xcdTA0M2NcXHUwNDMwX1xcdTA0MThcXHUwNDQ4XFx1MDQzNVxcdTA0M2NcXHUwNDMxXFx1MDQzOFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiXFx1MDQxNlxcdTA0MzVcXHUwNDNhX1xcdTA0MTRcXHUwNGFmXFx1MDQzOV9cXHUwNDI4XFx1MDQzNVxcdTA0MzlfXFx1MDQyOFxcdTA0MzBcXHUwNDQwX1xcdTA0MTFcXHUwNDM1XFx1MDQzOV9cXHUwNDE2XFx1MDQ0M1xcdTA0M2NfXFx1MDQxOFxcdTA0NDhcXHUwNDM1XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiXFx1MDQxNlxcdTA0M2FfXFx1MDQxNFxcdTA0MzlfXFx1MDQyOFxcdTA0MzlfXFx1MDQyOFxcdTA0NDBfXFx1MDQxMVxcdTA0MzlfXFx1MDQxNlxcdTA0M2NfXFx1MDQxOFxcdTA0NDhcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTA0MTFcXHUwNGFmXFx1MDQzM1xcdTA0YWZcXHUwNDNkIFxcdTA0NDFcXHUwNDMwXFx1MDQzMFxcdTA0NDJdIExUXCIsbmV4dERheTpcIltcXHUwNDJkXFx1MDQ0MFxcdTA0NDJcXHUwNDM1XFx1MDRhMyBcXHUwNDQxXFx1MDQzMFxcdTA0MzBcXHUwNDQyXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbXFx1MDQ0MVxcdTA0MzBcXHUwNDMwXFx1MDQ0Ml0gTFRcIixsYXN0RGF5OlwiW1xcdTA0MWFcXHUwNDM1XFx1MDQ0N1xcdTA0MzUgXFx1MDQ0MVxcdTA0MzBcXHUwNDMwXFx1MDQ0Ml0gTFRcIixsYXN0V2VlazpcIltcXHUwNGU4XFx1MDQ0MlxcdTA0M2FcXHUwNDM1XFx1MDQzZCBcXHUwNDMwXFx1MDQzZlxcdTA0NDJcXHUwNDMwXFx1MDQzZFxcdTA0NGJcXHUwNDNkXSBkZGRkIFtcXHUwNDNhXFx1MDRhZlxcdTA0M2RcXHUwNGFmXSBbXFx1MDQ0MVxcdTA0MzBcXHUwNDMwXFx1MDQ0Ml0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCIlcyBcXHUwNDM4XFx1MDQ0N1xcdTA0MzhcXHUwNDNkXFx1MDQzNFxcdTA0MzVcIixwYXN0OlwiJXMgXFx1MDQzY1xcdTA0NDNcXHUwNDQwXFx1MDQ0M1xcdTA0M2RcIixzOlwiXFx1MDQzMVxcdTA0MzhcXHUwNDQwXFx1MDQzZFxcdTA0MzVcXHUwNDQ3XFx1MDQzNSBcXHUwNDQxXFx1MDQzNVxcdTA0M2FcXHUwNDQzXFx1MDQzZFxcdTA0MzRcIixzczpcIiVkIFxcdTA0NDFcXHUwNDM1XFx1MDQzYVxcdTA0NDNcXHUwNDNkXFx1MDQzNFwiLG06XCJcXHUwNDMxXFx1MDQzOFxcdTA0NDAgXFx1MDQzY1xcdTA0YWZcXHUwNDNkXFx1MDRlOVxcdTA0NDJcIixtbTpcIiVkIFxcdTA0M2NcXHUwNGFmXFx1MDQzZFxcdTA0ZTlcXHUwNDQyXCIsaDpcIlxcdTA0MzFcXHUwNDM4XFx1MDQ0MCBcXHUwNDQxXFx1MDQzMFxcdTA0MzBcXHUwNDQyXCIsaGg6XCIlZCBcXHUwNDQxXFx1MDQzMFxcdTA0MzBcXHUwNDQyXCIsZDpcIlxcdTA0MzFcXHUwNDM4XFx1MDQ0MCBcXHUwNDNhXFx1MDRhZlxcdTA0M2RcIixkZDpcIiVkIFxcdTA0M2FcXHUwNGFmXFx1MDQzZFwiLE06XCJcXHUwNDMxXFx1MDQzOFxcdTA0NDAgXFx1MDQzMFxcdTA0MzlcIixNTTpcIiVkIFxcdTA0MzBcXHUwNDM5XCIseTpcIlxcdTA0MzFcXHUwNDM4XFx1MDQ0MCBcXHUwNDM2XFx1MDQ0YlxcdTA0M2JcIix5eTpcIiVkIFxcdTA0MzZcXHUwNDRiXFx1MDQzYlwifSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfS0oXFx1MDQ0N1xcdTA0Mzh8XFx1MDQ0N1xcdTA0NGJ8XFx1MDQ0N1xcdTA0YWZ8XFx1MDQ0N1xcdTA0NDMpLyxvcmRpbmFsOmZ1bmN0aW9uKGUpe3JldHVybiBlKyhtZVtlXXx8bWVbZSUxMF18fG1lW2U+PTEwMD8xMDA6bnVsbF0pfSx3ZWVrOntkb3c6MSxkb3k6N319KSxlLmRlZmluZUxvY2FsZShcImxiXCIse21vbnRoczpcIkphbnVhcl9GZWJydWFyX01cXHhlNGVyel9BYnJcXHhlYmxsX01lZV9KdW5pX0p1bGlfQXVndXN0X1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0RlemVtYmVyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiSmFuLl9GZWJyLl9NcnouX0Fici5fTWVlX0p1bi5fSnVsLl9BdWcuX1NlcHQuX09rdC5fTm92Ll9EZXouXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1BhcnNlRXhhY3Q6ITAsd2Vla2RheXM6XCJTb25uZGVnX01cXHhlOWluZGVnX0RcXHhlYm5zY2hkZWdfTVxceGVidHR3b2NoX0Rvbm5lc2NoZGVnX0ZyZWlkZWdfU2Ftc2NoZGVnXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJTby5fTVxceGU5Ll9EXFx4ZWIuX01cXHhlYi5fRG8uX0ZyLl9TYS5cIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJTb19NXFx4ZTlfRFxceGViX01cXHhlYl9Eb19Gcl9TYVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSDptbSBbQXVlcl1cIixMVFM6XCJIOm1tOnNzIFtBdWVyXVwiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJELiBNTU1NIFlZWVlcIixMTEw6XCJELiBNTU1NIFlZWVkgSDptbSBbQXVlcl1cIixMTExMOlwiZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW0gW0F1ZXJdXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW0hhdXQgdW1dIExUXCIsc2FtZUVsc2U6XCJMXCIsbmV4dERheTpcIltNdWVyIHVtXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbdW1dIExUXCIsbGFzdERheTpcIltHXFx4ZWJzY2h0ZXIgdW1dIExUXCIsbGFzdFdlZWs6ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5kYXkoKSl7Y2FzZSAyOmNhc2UgNDpyZXR1cm5cIltMZXNjaHRlbl0gZGRkZCBbdW1dIExUXCI7ZGVmYXVsdDpyZXR1cm5cIltMZXNjaHRlXSBkZGRkIFt1bV0gTFRcIn19fSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpmdW5jdGlvbihlKXtyZXR1cm4gdWUoZS5zdWJzdHIoMCxlLmluZGV4T2YoXCIgXCIpKSk/XCJhIFwiK2U6XCJhbiBcIitlfSxwYXN0OmZ1bmN0aW9uKGUpe3JldHVybiB1ZShlLnN1YnN0cigwLGUuaW5kZXhPZihcIiBcIikpKT9cInZpcnUgXCIrZTpcInZpcnVuIFwiK2V9LHM6XCJlIHB1ZXIgU2Vrb25uZW5cIixzczpcIiVkIFNla29ubmVuXCIsbTpvZSxtbTpcIiVkIE1pbnV0dGVuXCIsaDpvZSxoaDpcIiVkIFN0b25uZW5cIixkOm9lLGRkOlwiJWQgRGVlZ1wiLE06b2UsTU06XCIlZCBNXFx4ZTlpbnRcIix5Om9lLHl5OlwiJWQgSm9lclwifSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLGRveTo0fX0pLGUuZGVmaW5lTG9jYWxlKFwibG9cIix7bW9udGhzOlwiXFx1MGVhMVxcdTBlYjFcXHUwZTg3XFx1MGU4MVxcdTBlYWRcXHUwZTk5X1xcdTBlODFcXHUwZWI4XFx1MGVhMVxcdTBlOWVcXHUwZWIyX1xcdTBlYTFcXHUwZWI1XFx1MGU5OVxcdTBlYjJfXFx1MGVjMFxcdTBlYTFcXHUwZWFhXFx1MGViMl9cXHUwZTllXFx1MGViNlxcdTBlOTRcXHUwZWFhXFx1MGViMFxcdTBlOWVcXHUwZWIyX1xcdTBlYTFcXHUwZWI0XFx1MGU5NlxcdTBlYjhcXHUwZTk5XFx1MGViMl9cXHUwZTgxXFx1MGVjZFxcdTBlYTVcXHUwZWIwXFx1MGU4MVxcdTBlYmJcXHUwZTk0X1xcdTBlYWFcXHUwZWI0XFx1MGU4N1xcdTBlYWJcXHUwZWIyX1xcdTBlODFcXHUwZWIxXFx1MGU5OVxcdTBlOGRcXHUwZWIyX1xcdTBlOTVcXHUwZWI4XFx1MGVhNVxcdTBlYjJfXFx1MGU5ZVxcdTBlYjBcXHUwZTg4XFx1MGViNFxcdTBlODFfXFx1MGU5N1xcdTBlYjFcXHUwZTk5XFx1MGVhN1xcdTBlYjJcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJcXHUwZWExXFx1MGViMVxcdTBlODdcXHUwZTgxXFx1MGVhZFxcdTBlOTlfXFx1MGU4MVxcdTBlYjhcXHUwZWExXFx1MGU5ZVxcdTBlYjJfXFx1MGVhMVxcdTBlYjVcXHUwZTk5XFx1MGViMl9cXHUwZWMwXFx1MGVhMVxcdTBlYWFcXHUwZWIyX1xcdTBlOWVcXHUwZWI2XFx1MGU5NFxcdTBlYWFcXHUwZWIwXFx1MGU5ZVxcdTBlYjJfXFx1MGVhMVxcdTBlYjRcXHUwZTk2XFx1MGViOFxcdTBlOTlcXHUwZWIyX1xcdTBlODFcXHUwZWNkXFx1MGVhNVxcdTBlYjBcXHUwZTgxXFx1MGViYlxcdTBlOTRfXFx1MGVhYVxcdTBlYjRcXHUwZTg3XFx1MGVhYlxcdTBlYjJfXFx1MGU4MVxcdTBlYjFcXHUwZTk5XFx1MGU4ZFxcdTBlYjJfXFx1MGU5NVxcdTBlYjhcXHUwZWE1XFx1MGViMl9cXHUwZTllXFx1MGViMFxcdTBlODhcXHUwZWI0XFx1MGU4MV9cXHUwZTk3XFx1MGViMVxcdTBlOTlcXHUwZWE3XFx1MGViMlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIlxcdTBlYWRcXHUwZWIyXFx1MGU5N1xcdTBlYjRcXHUwZTk0X1xcdTBlODhcXHUwZWIxXFx1MGU5OV9cXHUwZWFkXFx1MGViMVxcdTBlODdcXHUwZTg0XFx1MGViMlxcdTBlOTlfXFx1MGU5ZVxcdTBlYjhcXHUwZTk0X1xcdTBlOWVcXHUwZWIwXFx1MGVhYlxcdTBlYjFcXHUwZTk0X1xcdTBlYWFcXHUwZWI4XFx1MGU4MV9cXHUwZWMwXFx1MGVhYVxcdTBlYmJcXHUwZWIyXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJcXHUwZTk3XFx1MGViNFxcdTBlOTRfXFx1MGU4OFxcdTBlYjFcXHUwZTk5X1xcdTBlYWRcXHUwZWIxXFx1MGU4N1xcdTBlODRcXHUwZWIyXFx1MGU5OV9cXHUwZTllXFx1MGViOFxcdTBlOTRfXFx1MGU5ZVxcdTBlYjBcXHUwZWFiXFx1MGViMVxcdTBlOTRfXFx1MGVhYVxcdTBlYjhcXHUwZTgxX1xcdTBlYzBcXHUwZWFhXFx1MGViYlxcdTBlYjJcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJcXHUwZTk3X1xcdTBlODhfXFx1MGVhZFxcdTBlODRfXFx1MGU5ZV9cXHUwZTllXFx1MGVhYl9cXHUwZWFhXFx1MGU4MV9cXHUwZWFhXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiXFx1MGVhN1xcdTBlYjFcXHUwZTk5ZGRkZCBEIE1NTU0gWVlZWSBISDptbVwifSxtZXJpZGllbVBhcnNlOi9cXHUwZTk1XFx1MGVhZFxcdTBlOTlcXHUwZWMwXFx1MGU4YVxcdTBlYmJcXHUwZWM5XFx1MGViMnxcXHUwZTk1XFx1MGVhZFxcdTBlOTlcXHUwZWMxXFx1MGVhNVxcdTBlODcvLGlzUE06ZnVuY3Rpb24oZSl7cmV0dXJuXCJcXHUwZTk1XFx1MGVhZFxcdTBlOTlcXHUwZWMxXFx1MGVhNVxcdTBlODdcIj09PWV9LG1lcmlkaWVtOmZ1bmN0aW9uKGUsYSxfKXtyZXR1cm4gZTwxMj9cIlxcdTBlOTVcXHUwZWFkXFx1MGU5OVxcdTBlYzBcXHUwZThhXFx1MGViYlxcdTBlYzlcXHUwZWIyXCI6XCJcXHUwZTk1XFx1MGVhZFxcdTBlOTlcXHUwZWMxXFx1MGVhNVxcdTBlODdcIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbXFx1MGVhMVxcdTBlYjdcXHUwZWM5XFx1MGU5OVxcdTBlYjVcXHUwZWM5XFx1MGVjMFxcdTBlYTdcXHUwZWE1XFx1MGViMl0gTFRcIixuZXh0RGF5OlwiW1xcdTBlYTFcXHUwZWI3XFx1MGVjOVxcdTBlYWRcXHUwZWI3XFx1MGVjOFxcdTBlOTlcXHUwZWMwXFx1MGVhN1xcdTBlYTVcXHUwZWIyXSBMVFwiLG5leHRXZWVrOlwiW1xcdTBlYTdcXHUwZWIxXFx1MGU5OV1kZGRkW1xcdTBlZGNcXHUwZWM5XFx1MGViMlxcdTBlYzBcXHUwZWE3XFx1MGVhNVxcdTBlYjJdIExUXCIsbGFzdERheTpcIltcXHUwZWExXFx1MGViN1xcdTBlYzlcXHUwZWE3XFx1MGViMlxcdTBlOTlcXHUwZTk5XFx1MGViNVxcdTBlYzlcXHUwZWMwXFx1MGVhN1xcdTBlYTVcXHUwZWIyXSBMVFwiLGxhc3RXZWVrOlwiW1xcdTBlYTdcXHUwZWIxXFx1MGU5OV1kZGRkW1xcdTBlYzFcXHUwZWE1XFx1MGVjOVxcdTBlYTdcXHUwZTk5XFx1MGViNVxcdTBlYzlcXHUwZWMwXFx1MGVhN1xcdTBlYTVcXHUwZWIyXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIlxcdTBlYWRcXHUwZWI1XFx1MGU4MSAlc1wiLHBhc3Q6XCIlc1xcdTBlOWNcXHUwZWM4XFx1MGViMlxcdTBlOTlcXHUwZWExXFx1MGViMlwiLHM6XCJcXHUwZTlhXFx1MGVjZFxcdTBlYzhcXHUwZWMwXFx1MGU5N1xcdTBlYmJcXHUwZWM4XFx1MGViMlxcdTBlYzNcXHUwZTk0XFx1MGVhN1xcdTBlYjRcXHUwZTk5XFx1MGViMlxcdTBlOTdcXHUwZWI1XCIsc3M6XCIlZCBcXHUwZWE3XFx1MGViNFxcdTBlOTlcXHUwZWIyXFx1MGU5N1xcdTBlYjVcIixtOlwiMSBcXHUwZTk5XFx1MGViMlxcdTBlOTdcXHUwZWI1XCIsbW06XCIlZCBcXHUwZTk5XFx1MGViMlxcdTBlOTdcXHUwZWI1XCIsaDpcIjEgXFx1MGU4YVxcdTBlYmJcXHUwZWM4XFx1MGVhN1xcdTBlYzJcXHUwZWExXFx1MGU4N1wiLGhoOlwiJWQgXFx1MGU4YVxcdTBlYmJcXHUwZWM4XFx1MGVhN1xcdTBlYzJcXHUwZWExXFx1MGU4N1wiLGQ6XCIxIFxcdTBlYTFcXHUwZWI3XFx1MGVjOVwiLGRkOlwiJWQgXFx1MGVhMVxcdTBlYjdcXHUwZWM5XCIsTTpcIjEgXFx1MGVjMFxcdTBlOTRcXHUwZWI3XFx1MGVhZFxcdTBlOTlcIixNTTpcIiVkIFxcdTBlYzBcXHUwZTk0XFx1MGViN1xcdTBlYWRcXHUwZTk5XCIseTpcIjEgXFx1MGU5YlxcdTBlYjVcIix5eTpcIiVkIFxcdTBlOWJcXHUwZWI1XCJ9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6LyhcXHUwZTk3XFx1MGViNVxcdTBlYzgpXFxkezEsMn0vLG9yZGluYWw6ZnVuY3Rpb24oZSl7cmV0dXJuXCJcXHUwZTk3XFx1MGViNVxcdTBlYzhcIitlfX0pO3ZhciBsZT17c3M6XCJzZWt1bmRcXHUwMTE3X3Nla3VuZFxcdTAxN2VpXFx1MDE3M19zZWt1bmRlc1wiLG06XCJtaW51dFxcdTAxMTdfbWludXRcXHUwMTE3c19taW51dFxcdTAxMTlcIixtbTpcIm1pbnV0XFx1MDExN3NfbWludVxcdTAxMGRpXFx1MDE3M19taW51dGVzXCIsaDpcInZhbGFuZGFfdmFsYW5kb3NfdmFsYW5kXFx1MDEwNVwiLGhoOlwidmFsYW5kb3NfdmFsYW5kXFx1MDE3M192YWxhbmRhc1wiLGQ6XCJkaWVuYV9kaWVub3NfZGllblxcdTAxMDVcIixkZDpcImRpZW5vc19kaWVuXFx1MDE3M19kaWVuYXNcIixNOlwibVxcdTAxMTdudW9fbVxcdTAxMTduZXNpb19tXFx1MDExN25lc1xcdTAxMmZcIixNTTpcIm1cXHUwMTE3bmVzaWFpX21cXHUwMTE3bmVzaVxcdTAxNzNfbVxcdTAxMTduZXNpdXNcIix5OlwibWV0YWlfbWV0XFx1MDE3M19tZXR1c1wiLHl5OlwibWV0YWlfbWV0XFx1MDE3M19tZXR1c1wifTtmdW5jdGlvbiBNZShlLGEsXyxzKXtyZXR1cm4gYT9ZZShfKVswXTpzP1llKF8pWzFdOlllKF8pWzJdfWZ1bmN0aW9uIExlKGUpe3JldHVybiBlJTEwPT0wfHxlPjEwJiZlPDIwfWZ1bmN0aW9uIFllKGUpe3JldHVybiBsZVtlXS5zcGxpdChcIl9cIil9ZnVuY3Rpb24gaGUoZSxhLF8scyl7dmFyIGQ9ZStcIiBcIjtyZXR1cm4gMT09PWU/ZCtNZSgwLGEsX1swXSxzKTphP2QrKExlKGUpP1llKF8pWzFdOlllKF8pWzBdKTpzP2QrWWUoXylbMV06ZCsoTGUoZSk/WWUoXylbMV06WWUoXylbMl0pfWUuZGVmaW5lTG9jYWxlKFwibHRcIix7bW9udGhzOntmb3JtYXQ6XCJzYXVzaW9fdmFzYXJpb19rb3ZvX2JhbGFuZFxcdTAxN2Vpb19nZWd1XFx1MDE3ZVxcdTAxMTdzX2JpclxcdTAxN2VlbGlvX2xpZXBvc19ydWdwalxcdTAxNmJcXHUwMTBkaW9fcnVnc1xcdTAxMTdqb19zcGFsaW9fbGFwa3JpXFx1MDEwZGlvX2dydW9kXFx1MDE3ZWlvXCIuc3BsaXQoXCJfXCIpLHN0YW5kYWxvbmU6XCJzYXVzaXNfdmFzYXJpc19rb3Zhc19iYWxhbmRpc19nZWd1XFx1MDE3ZVxcdTAxMTdfYmlyXFx1MDE3ZWVsaXNfbGllcGFfcnVncGpcXHUwMTZidGlzX3J1Z3NcXHUwMTE3amlzX3NwYWxpc19sYXBrcml0aXNfZ3J1b2Rpc1wiLnNwbGl0KFwiX1wiKSxpc0Zvcm1hdDovRFtvRF0/KFxcW1teXFxbXFxdXSpcXF18XFxzKStNTU1NP3xNTU1NPyhcXFtbXlxcW1xcXV0qXFxdfFxccykrRFtvRF0/L30sbW9udGhzU2hvcnQ6XCJzYXVfdmFzX2tvdl9iYWxfZ2VnX2Jpcl9saWVfcmdwX3Jnc19zcGFfbGFwX2dyZFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czp7Zm9ybWF0Olwic2VrbWFkaWVuXFx1MDEyZl9waXJtYWRpZW5cXHUwMTJmX2FudHJhZGllblxcdTAxMmZfdHJlXFx1MDEwZGlhZGllblxcdTAxMmZfa2V0dmlydGFkaWVuXFx1MDEyZl9wZW5rdGFkaWVuXFx1MDEyZl9cXHUwMTYxZVxcdTAxNjF0YWRpZW5cXHUwMTJmXCIuc3BsaXQoXCJfXCIpLHN0YW5kYWxvbmU6XCJzZWttYWRpZW5pc19waXJtYWRpZW5pc19hbnRyYWRpZW5pc190cmVcXHUwMTBkaWFkaWVuaXNfa2V0dmlydGFkaWVuaXNfcGVua3RhZGllbmlzX1xcdTAxNjFlXFx1MDE2MXRhZGllbmlzXCIuc3BsaXQoXCJfXCIpLGlzRm9ybWF0Oi9kZGRkIEhIOm1tL30sd2Vla2RheXNTaG9ydDpcIlNla19QaXJfQW50X1RyZV9LZXRfUGVuX1xcdTAxNjBlXFx1MDE2MVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIlNfUF9BX1RfS19Qbl9cXHUwMTYwXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIllZWVktTU0tRERcIixMTDpcIllZWVkgW20uXSBNTU1NIEQgW2QuXVwiLExMTDpcIllZWVkgW20uXSBNTU1NIEQgW2QuXSwgSEg6bW0gW3ZhbC5dXCIsTExMTDpcIllZWVkgW20uXSBNTU1NIEQgW2QuXSwgZGRkZCwgSEg6bW0gW3ZhbC5dXCIsbDpcIllZWVktTU0tRERcIixsbDpcIllZWVkgW20uXSBNTU1NIEQgW2QuXVwiLGxsbDpcIllZWVkgW20uXSBNTU1NIEQgW2QuXSwgSEg6bW0gW3ZhbC5dXCIsbGxsbDpcIllZWVkgW20uXSBNTU1NIEQgW2QuXSwgZGRkLCBISDptbSBbdmFsLl1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbXFx1MDE2MGlhbmRpZW5dIExUXCIsbmV4dERheTpcIltSeXRval0gTFRcIixuZXh0V2VlazpcImRkZGQgTFRcIixsYXN0RGF5OlwiW1Zha2FyXSBMVFwiLGxhc3RXZWVrOlwiW1ByYVxcdTAxMTdqdXNcXHUwMTJmXSBkZGRkIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwicG8gJXNcIixwYXN0OlwicHJpZVxcdTAxNjEgJXNcIixzOmZ1bmN0aW9uKGUsYSxfLHMpe3JldHVybiBhP1wia2VsaW9zIHNla3VuZFxcdTAxMTdzXCI6cz9cImtlbGlcXHUwMTczIHNla3VuZFxcdTAxN2VpXFx1MDE3M1wiOlwia2VsaWFzIHNla3VuZGVzXCJ9LHNzOmhlLG06TWUsbW06aGUsaDpNZSxoaDpoZSxkOk1lLGRkOmhlLE06TWUsTU06aGUseTpNZSx5eTpoZX0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn0tb2ppLyxvcmRpbmFsOmZ1bmN0aW9uKGUpe3JldHVybiBlK1wiLW9qaVwifSx3ZWVrOntkb3c6MSxkb3k6NH19KTt2YXIgeWU9e3NzOlwic2VrdW5kZXNfc2VrdW5kXFx1MDExM21fc2VrdW5kZV9zZWt1bmRlc1wiLnNwbGl0KFwiX1wiKSxtOlwibWluXFx1MDE2YnRlc19taW5cXHUwMTZidFxcdTAxMTNtX21pblxcdTAxNmJ0ZV9taW5cXHUwMTZidGVzXCIuc3BsaXQoXCJfXCIpLG1tOlwibWluXFx1MDE2YnRlc19taW5cXHUwMTZidFxcdTAxMTNtX21pblxcdTAxNmJ0ZV9taW5cXHUwMTZidGVzXCIuc3BsaXQoXCJfXCIpLGg6XCJzdHVuZGFzX3N0dW5kXFx1MDEwMW1fc3R1bmRhX3N0dW5kYXNcIi5zcGxpdChcIl9cIiksaGg6XCJzdHVuZGFzX3N0dW5kXFx1MDEwMW1fc3R1bmRhX3N0dW5kYXNcIi5zcGxpdChcIl9cIiksZDpcImRpZW5hc19kaWVuXFx1MDEwMW1fZGllbmFfZGllbmFzXCIuc3BsaXQoXCJfXCIpLGRkOlwiZGllbmFzX2RpZW5cXHUwMTAxbV9kaWVuYV9kaWVuYXNcIi5zcGxpdChcIl9cIiksTTpcIm1cXHUwMTEzbmVcXHUwMTYxYV9tXFx1MDExM25lXFx1MDE2MWllbV9tXFx1MDExM25lc2lzX21cXHUwMTEzbmVcXHUwMTYxaVwiLnNwbGl0KFwiX1wiKSxNTTpcIm1cXHUwMTEzbmVcXHUwMTYxYV9tXFx1MDExM25lXFx1MDE2MWllbV9tXFx1MDExM25lc2lzX21cXHUwMTEzbmVcXHUwMTYxaVwiLnNwbGl0KFwiX1wiKSx5OlwiZ2FkYV9nYWRpZW1fZ2Fkc19nYWRpXCIuc3BsaXQoXCJfXCIpLHl5OlwiZ2FkYV9nYWRpZW1fZ2Fkc19nYWRpXCIuc3BsaXQoXCJfXCIpfTtmdW5jdGlvbiBjZShlLGEsXyl7cmV0dXJuIF8/YSUxMD09MSYmYSUxMDAhPTExP2VbMl06ZVszXTphJTEwPT0xJiZhJTEwMCE9MTE/ZVswXTplWzFdfWZ1bmN0aW9uIGtlKGUsYSxfKXtyZXR1cm4gZStcIiBcIitjZSh5ZVtfXSxlLGEpfWZ1bmN0aW9uIHBlKGUsYSxfKXtyZXR1cm4gY2UoeWVbX10sZSxhKX1lLmRlZmluZUxvY2FsZShcImx2XCIse21vbnRoczpcImphbnZcXHUwMTAxcmlzX2ZlYnJ1XFx1MDEwMXJpc19tYXJ0c19hcHJcXHUwMTJibGlzX21haWpzX2pcXHUwMTZibmlqc19qXFx1MDE2YmxpanNfYXVndXN0c19zZXB0ZW1icmlzX29rdG9icmlzX25vdmVtYnJpc19kZWNlbWJyaXNcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJqYW5fZmViX21hcl9hcHJfbWFpX2pcXHUwMTZibl9qXFx1MDE2YmxfYXVnX3NlcF9va3Rfbm92X2RlY1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcInN2XFx1MDExM3RkaWVuYV9waXJtZGllbmFfb3RyZGllbmFfdHJlXFx1MDE2MWRpZW5hX2NldHVydGRpZW5hX3BpZWt0ZGllbmFfc2VzdGRpZW5hXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJTdl9QX09fVF9DX1BrX1NcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJTdl9QX09fVF9DX1BrX1NcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQuTU0uWVlZWS5cIixMTDpcIllZWVkuIFtnYWRhXSBELiBNTU1NXCIsTExMOlwiWVlZWS4gW2dhZGFdIEQuIE1NTU0sIEhIOm1tXCIsTExMTDpcIllZWVkuIFtnYWRhXSBELiBNTU1NLCBkZGRkLCBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltcXHUwMTYwb2RpZW4gcHVsa3N0ZW5dIExUXCIsbmV4dERheTpcIltSXFx1MDEyYnQgcHVsa3N0ZW5dIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtwdWxrc3Rlbl0gTFRcIixsYXN0RGF5OlwiW1Zha2FyIHB1bGtzdGVuXSBMVFwiLGxhc3RXZWVrOlwiW1BhZ1xcdTAxMDFqdVxcdTAxNjFcXHUwMTAxXSBkZGRkIFtwdWxrc3Rlbl0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJwXFx1MDExM2MgJXNcIixwYXN0OlwicGlybXMgJXNcIixzOmZ1bmN0aW9uKGUsYSl7cmV0dXJuIGE/XCJkYVxcdTAxN2VhcyBzZWt1bmRlc1wiOlwiZGFcXHUwMTdlXFx1MDEwMW0gc2VrdW5kXFx1MDExM21cIn0sc3M6a2UsbTpwZSxtbTprZSxoOnBlLGhoOmtlLGQ6cGUsZGQ6a2UsTTpwZSxNTTprZSx5OnBlLHl5OmtlfSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLGRveTo0fX0pO3ZhciBEZT17d29yZHM6e3NzOltcInNla3VuZFwiLFwic2VrdW5kYVwiLFwic2VrdW5kaVwiXSxtOltcImplZGFuIG1pbnV0XCIsXCJqZWRub2cgbWludXRhXCJdLG1tOltcIm1pbnV0XCIsXCJtaW51dGFcIixcIm1pbnV0YVwiXSxoOltcImplZGFuIHNhdFwiLFwiamVkbm9nIHNhdGFcIl0saGg6W1wic2F0XCIsXCJzYXRhXCIsXCJzYXRpXCJdLGRkOltcImRhblwiLFwiZGFuYVwiLFwiZGFuYVwiXSxNTTpbXCJtamVzZWNcIixcIm1qZXNlY2FcIixcIm1qZXNlY2lcIl0seXk6W1wiZ29kaW5hXCIsXCJnb2RpbmVcIixcImdvZGluYVwiXX0sY29ycmVjdEdyYW1tYXRpY2FsQ2FzZTpmdW5jdGlvbihlLGEpe3JldHVybiAxPT09ZT9hWzBdOmU+PTImJmU8PTQ/YVsxXTphWzJdfSx0cmFuc2xhdGU6ZnVuY3Rpb24oZSxhLF8pe3ZhciBzPURlLndvcmRzW19dO3JldHVybiAxPT09Xy5sZW5ndGg/YT9zWzBdOnNbMV06ZStcIiBcIitEZS5jb3JyZWN0R3JhbW1hdGljYWxDYXNlKGUscyl9fTtlLmRlZmluZUxvY2FsZShcIm1lXCIse21vbnRoczpcImphbnVhcl9mZWJydWFyX21hcnRfYXByaWxfbWFqX2p1bl9qdWxfYXZndXN0X3NlcHRlbWJhcl9va3RvYmFyX25vdmVtYmFyX2RlY2VtYmFyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiamFuLl9mZWIuX21hci5fYXByLl9tYWpfanVuX2p1bF9hdmcuX3NlcC5fb2t0Ll9ub3YuX2RlYy5cIi5zcGxpdChcIl9cIiksbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czpcIm5lZGplbGphX3BvbmVkamVsamFrX3V0b3Jha19zcmlqZWRhX1xcdTAxMGRldHZydGFrX3BldGFrX3N1Ym90YVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwibmVkLl9wb24uX3V0by5fc3JpLl9cXHUwMTBkZXQuX3BldC5fc3ViLlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIm5lX3BvX3V0X3NyX1xcdTAxMGRlX3BlX3N1XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJIOm1tXCIsTFRTOlwiSDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJELiBNTU1NIFlZWVlcIixMTEw6XCJELiBNTU1NIFlZWVkgSDptbVwiLExMTEw6XCJkZGRkLCBELiBNTU1NIFlZWVkgSDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltkYW5hcyB1XSBMVFwiLG5leHREYXk6XCJbc2p1dHJhIHVdIExUXCIsbmV4dFdlZWs6ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5kYXkoKSl7Y2FzZSAwOnJldHVyblwiW3VdIFtuZWRqZWxqdV0gW3VdIExUXCI7Y2FzZSAzOnJldHVyblwiW3VdIFtzcmlqZWR1XSBbdV0gTFRcIjtjYXNlIDY6cmV0dXJuXCJbdV0gW3N1Ym90dV0gW3VdIExUXCI7Y2FzZSAxOmNhc2UgMjpjYXNlIDQ6Y2FzZSA1OnJldHVyblwiW3VdIGRkZGQgW3VdIExUXCJ9fSxsYXN0RGF5OlwiW2p1XFx1MDEwZGUgdV0gTFRcIixsYXN0V2VlazpmdW5jdGlvbigpe3JldHVybltcIltwcm9cXHUwMTYxbGVdIFtuZWRqZWxqZV0gW3VdIExUXCIsXCJbcHJvXFx1MDE2MWxvZ10gW3BvbmVkamVsamthXSBbdV0gTFRcIixcIltwcm9cXHUwMTYxbG9nXSBbdXRvcmthXSBbdV0gTFRcIixcIltwcm9cXHUwMTYxbGVdIFtzcmlqZWRlXSBbdV0gTFRcIixcIltwcm9cXHUwMTYxbG9nXSBbXFx1MDEwZGV0dnJ0a2FdIFt1XSBMVFwiLFwiW3Byb1xcdTAxNjFsb2ddIFtwZXRrYV0gW3VdIExUXCIsXCJbcHJvXFx1MDE2MWxlXSBbc3Vib3RlXSBbdV0gTFRcIl1bdGhpcy5kYXkoKV19LHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcInphICVzXCIscGFzdDpcInByaWplICVzXCIsczpcIm5la29saWtvIHNla3VuZGlcIixzczpEZS50cmFuc2xhdGUsbTpEZS50cmFuc2xhdGUsbW06RGUudHJhbnNsYXRlLGg6RGUudHJhbnNsYXRlLGhoOkRlLnRyYW5zbGF0ZSxkOlwiZGFuXCIsZGQ6RGUudHJhbnNsYXRlLE06XCJtamVzZWNcIixNTTpEZS50cmFuc2xhdGUseTpcImdvZGludVwiLHl5OkRlLnRyYW5zbGF0ZX0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn1cXC4vLG9yZGluYWw6XCIlZC5cIix3ZWVrOntkb3c6MSxkb3k6N319KSxlLmRlZmluZUxvY2FsZShcIm1pXCIse21vbnRoczpcIktvaGktdFxcdTAxMDF0ZV9IdWktdGFuZ3VydV9Qb3V0XFx1MDE2Yi10ZS1yYW5naV9QYWVuZ2Etd2hcXHUwMTAxd2hcXHUwMTAxX0hhcmF0dWFfUGlwaXJpX0hcXHUwMTRkbmdvaW5nb2lfSGVyZS10dXJpLWtcXHUwMTRka1xcdTAxMDFfTWFodXJ1X1doaXJpbmdhLVxcdTAxMDEtbnVrdV9XaGlyaW5nYS1cXHUwMTAxLXJhbmdpX0hha2loZWFcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJLb2hpX0h1aV9Qb3VfUGFlX0hhcmFfUGlwaV9IXFx1MDE0ZG5nb2lfSGVyZV9NYWh1X1doaS1udV9XaGktcmFfSGFraVwiLnNwbGl0KFwiX1wiKSxtb250aHNSZWdleDovKD86WydhLXpcXHUwMTAxXFx1MDE0RFxcdTAxNkJdK1xcLT8pezEsM30vaSxtb250aHNTdHJpY3RSZWdleDovKD86WydhLXpcXHUwMTAxXFx1MDE0RFxcdTAxNkJdK1xcLT8pezEsM30vaSxtb250aHNTaG9ydFJlZ2V4Oi8oPzpbJ2EtelxcdTAxMDFcXHUwMTREXFx1MDE2Ql0rXFwtPyl7MSwzfS9pLG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6Lyg/OlsnYS16XFx1MDEwMVxcdTAxNERcXHUwMTZCXStcXC0/KXsxLDJ9L2ksd2Vla2RheXM6XCJSXFx1MDEwMXRhcHVfTWFuZV9UXFx1MDE2YnJlaV9XZW5lcmVpX1RcXHUwMTAxaXRlX1BhcmFpcmVfSFxcdTAxMDF0YXJlaVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiVGFfTWFfVFxcdTAxNmJfV2VfVFxcdTAxMDFpX1BhX0hcXHUwMTAxXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiVGFfTWFfVFxcdTAxNmJfV2VfVFxcdTAxMDFpX1BhX0hcXHUwMTAxXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBbaV0gSEg6bW1cIixMTExMOlwiZGRkZCwgRCBNTU1NIFlZWVkgW2ldIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW2kgdGVpZSBtYWhhbmEsIGldIExUXCIsbmV4dERheTpcIlthcG9wbyBpXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbaV0gTFRcIixsYXN0RGF5OlwiW2luYW5haGkgaV0gTFRcIixsYXN0V2VlazpcImRkZGQgW3doYWthbXV0dW5nYSBpXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcImkgcm90byBpICVzXCIscGFzdDpcIiVzIGkgbXVhXCIsczpcInRlIGhcXHUwMTEza29uYSBydWFydWFcIixzczpcIiVkIGhcXHUwMTEza29uYVwiLG06XCJoZSBtZW5ldGlcIixtbTpcIiVkIG1lbmV0aVwiLGg6XCJ0ZSBoYW9yYVwiLGhoOlwiJWQgaGFvcmFcIixkOlwiaGUgcmFcIixkZDpcIiVkIHJhXCIsTTpcImhlIG1hcmFtYVwiLE1NOlwiJWQgbWFyYW1hXCIseTpcImhlIHRhdVwiLHl5OlwiJWQgdGF1XCJ9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9XFx4YmEvLG9yZGluYWw6XCIlZFxceGJhXCIsd2Vlazp7ZG93OjEsZG95OjR9fSksZS5kZWZpbmVMb2NhbGUoXCJta1wiLHttb250aHM6XCJcXHUwNDU4XFx1MDQzMFxcdTA0M2RcXHUwNDQzXFx1MDQzMFxcdTA0NDBcXHUwNDM4X1xcdTA0NDRcXHUwNDM1XFx1MDQzMlxcdTA0NDBcXHUwNDQzXFx1MDQzMFxcdTA0NDBcXHUwNDM4X1xcdTA0M2NcXHUwNDMwXFx1MDQ0MFxcdTA0NDJfXFx1MDQzMFxcdTA0M2ZcXHUwNDQwXFx1MDQzOFxcdTA0M2JfXFx1MDQzY1xcdTA0MzBcXHUwNDU4X1xcdTA0NThcXHUwNDQzXFx1MDQzZFxcdTA0MzhfXFx1MDQ1OFxcdTA0NDNcXHUwNDNiXFx1MDQzOF9cXHUwNDMwXFx1MDQzMlxcdTA0MzNcXHUwNDQzXFx1MDQ0MVxcdTA0NDJfXFx1MDQ0MVxcdTA0MzVcXHUwNDNmXFx1MDQ0MlxcdTA0MzVcXHUwNDNjXFx1MDQzMlxcdTA0NDBcXHUwNDM4X1xcdTA0M2VcXHUwNDNhXFx1MDQ0MlxcdTA0M2VcXHUwNDNjXFx1MDQzMlxcdTA0NDBcXHUwNDM4X1xcdTA0M2RcXHUwNDNlXFx1MDQzNVxcdTA0M2NcXHUwNDMyXFx1MDQ0MFxcdTA0MzhfXFx1MDQzNFxcdTA0MzVcXHUwNDNhXFx1MDQzNVxcdTA0M2NcXHUwNDMyXFx1MDQ0MFxcdTA0MzhcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJcXHUwNDU4XFx1MDQzMFxcdTA0M2RfXFx1MDQ0NFxcdTA0MzVcXHUwNDMyX1xcdTA0M2NcXHUwNDMwXFx1MDQ0MF9cXHUwNDMwXFx1MDQzZlxcdTA0NDBfXFx1MDQzY1xcdTA0MzBcXHUwNDU4X1xcdTA0NThcXHUwNDQzXFx1MDQzZF9cXHUwNDU4XFx1MDQ0M1xcdTA0M2JfXFx1MDQzMFxcdTA0MzJcXHUwNDMzX1xcdTA0NDFcXHUwNDM1XFx1MDQzZl9cXHUwNDNlXFx1MDQzYVxcdTA0NDJfXFx1MDQzZFxcdTA0M2VcXHUwNDM1X1xcdTA0MzRcXHUwNDM1XFx1MDQzYVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIlxcdTA0M2RcXHUwNDM1XFx1MDQzNFxcdTA0MzVcXHUwNDNiXFx1MDQzMF9cXHUwNDNmXFx1MDQzZVxcdTA0M2RcXHUwNDM1XFx1MDQzNFxcdTA0MzVcXHUwNDNiXFx1MDQzZFxcdTA0MzhcXHUwNDNhX1xcdTA0MzJcXHUwNDQyXFx1MDQzZVxcdTA0NDBcXHUwNDNkXFx1MDQzOFxcdTA0M2FfXFx1MDQ0MVxcdTA0NDBcXHUwNDM1XFx1MDQzNFxcdTA0MzBfXFx1MDQ0N1xcdTA0MzVcXHUwNDQyXFx1MDQzMlxcdTA0NDBcXHUwNDQyXFx1MDQzZVxcdTA0M2FfXFx1MDQzZlxcdTA0MzVcXHUwNDQyXFx1MDQzZVxcdTA0M2FfXFx1MDQ0MVxcdTA0MzBcXHUwNDMxXFx1MDQzZVxcdTA0NDJcXHUwNDMwXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJcXHUwNDNkXFx1MDQzNVxcdTA0MzRfXFx1MDQzZlxcdTA0M2VcXHUwNDNkX1xcdTA0MzJcXHUwNDQyXFx1MDQzZV9cXHUwNDQxXFx1MDQ0MFxcdTA0MzVfXFx1MDQ0N1xcdTA0MzVcXHUwNDQyX1xcdTA0M2ZcXHUwNDM1XFx1MDQ0Ml9cXHUwNDQxXFx1MDQzMFxcdTA0MzFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJcXHUwNDNkZV9cXHUwNDNmb19cXHUwNDMyXFx1MDQ0Ml9cXHUwNDQxXFx1MDQ0MF9cXHUwNDQ3XFx1MDQzNV9cXHUwNDNmXFx1MDQzNV9cXHUwNDQxYVwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJIOm1tXCIsTFRTOlwiSDptbTpzc1wiLEw6XCJELk1NLllZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSDptbVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSBIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTA0MTRcXHUwNDM1XFx1MDQzZFxcdTA0MzVcXHUwNDQxIFxcdTA0MzJcXHUwNDNlXSBMVFwiLG5leHREYXk6XCJbXFx1MDQyM1xcdTA0NDJcXHUwNDQwXFx1MDQzNSBcXHUwNDMyXFx1MDQzZV0gTFRcIixuZXh0V2VlazpcIltcXHUwNDEyXFx1MDQzZV0gZGRkZCBbXFx1MDQzMlxcdTA0M2VdIExUXCIsbGFzdERheTpcIltcXHUwNDEyXFx1MDQ0N1xcdTA0MzVcXHUwNDQwXFx1MDQzMCBcXHUwNDMyXFx1MDQzZV0gTFRcIixsYXN0V2VlazpmdW5jdGlvbigpe3N3aXRjaCh0aGlzLmRheSgpKXtjYXNlIDA6Y2FzZSAzOmNhc2UgNjpyZXR1cm5cIltcXHUwNDE4XFx1MDQzN1xcdTA0M2NcXHUwNDM4XFx1MDQzZFxcdTA0MzBcXHUwNDQyXFx1MDQzMFxcdTA0NDJcXHUwNDMwXSBkZGRkIFtcXHUwNDMyXFx1MDQzZV0gTFRcIjtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpjYXNlIDU6cmV0dXJuXCJbXFx1MDQxOFxcdTA0MzdcXHUwNDNjXFx1MDQzOFxcdTA0M2RcXHUwNDMwXFx1MDQ0MlxcdTA0MzhcXHUwNDNlXFx1MDQ0Ml0gZGRkZCBbXFx1MDQzMlxcdTA0M2VdIExUXCJ9fSxzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJcXHUwNDNmXFx1MDQzZVxcdTA0NDFcXHUwNDNiXFx1MDQzNSAlc1wiLHBhc3Q6XCJcXHUwNDNmXFx1MDQ0MFxcdTA0MzVcXHUwNDM0ICVzXCIsczpcIlxcdTA0M2RcXHUwNDM1XFx1MDQzYVxcdTA0M2VcXHUwNDNiXFx1MDQzYVxcdTA0NDMgXFx1MDQ0MVxcdTA0MzVcXHUwNDNhXFx1MDQ0M1xcdTA0M2RcXHUwNDM0XFx1MDQzOFwiLHNzOlwiJWQgXFx1MDQ0MVxcdTA0MzVcXHUwNDNhXFx1MDQ0M1xcdTA0M2RcXHUwNDM0XFx1MDQzOFwiLG06XCJcXHUwNDNjXFx1MDQzOFxcdTA0M2RcXHUwNDQzXFx1MDQ0MlxcdTA0MzBcIixtbTpcIiVkIFxcdTA0M2NcXHUwNDM4XFx1MDQzZFxcdTA0NDNcXHUwNDQyXFx1MDQzOFwiLGg6XCJcXHUwNDQ3XFx1MDQzMFxcdTA0NDFcIixoaDpcIiVkIFxcdTA0NDdcXHUwNDMwXFx1MDQ0MVxcdTA0MzBcIixkOlwiXFx1MDQzNFxcdTA0MzVcXHUwNDNkXCIsZGQ6XCIlZCBcXHUwNDM0XFx1MDQzNVxcdTA0M2RcXHUwNDMwXCIsTTpcIlxcdTA0M2NcXHUwNDM1XFx1MDQ0MVxcdTA0MzVcXHUwNDQ2XCIsTU06XCIlZCBcXHUwNDNjXFx1MDQzNVxcdTA0NDFcXHUwNDM1XFx1MDQ0NlxcdTA0MzhcIix5OlwiXFx1MDQzM1xcdTA0M2VcXHUwNDM0XFx1MDQzOFxcdTA0M2RcXHUwNDMwXCIseXk6XCIlZCBcXHUwNDMzXFx1MDQzZVxcdTA0MzRcXHUwNDM4XFx1MDQzZFxcdTA0MzhcIn0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn0tKFxcdTA0MzVcXHUwNDMyfFxcdTA0MzVcXHUwNDNkfFxcdTA0NDJcXHUwNDM4fFxcdTA0MzJcXHUwNDM4fFxcdTA0NDBcXHUwNDM4fFxcdTA0M2NcXHUwNDM4KS8sb3JkaW5hbDpmdW5jdGlvbihlKXt2YXIgYT1lJTEwLF89ZSUxMDA7cmV0dXJuIDA9PT1lP2UrXCItXFx1MDQzNVxcdTA0MzJcIjowPT09Xz9lK1wiLVxcdTA0MzVcXHUwNDNkXCI6Xz4xMCYmXzwyMD9lK1wiLVxcdTA0NDJcXHUwNDM4XCI6MT09PWE/ZStcIi1cXHUwNDMyXFx1MDQzOFwiOjI9PT1hP2UrXCItXFx1MDQ0MFxcdTA0MzhcIjo3PT09YXx8OD09PWE/ZStcIi1cXHUwNDNjXFx1MDQzOFwiOmUrXCItXFx1MDQ0MlxcdTA0MzhcIn0sd2Vlazp7ZG93OjEsZG95Ojd9fSksZS5kZWZpbmVMb2NhbGUoXCJtbFwiLHttb250aHM6XCJcXHUwZDFjXFx1MGQyOFxcdTBkNDFcXHUwZDM1XFx1MGQzMFxcdTBkM2ZfXFx1MGQyYlxcdTBkNDZcXHUwZDJjXFx1MGQ0ZFxcdTBkMzBcXHUwZDQxXFx1MGQzNVxcdTBkMzBcXHUwZDNmX1xcdTBkMmVcXHUwZDNlXFx1MGQ3Y1xcdTBkMWFcXHUwZDRkXFx1MGQxYVxcdTBkNGRfXFx1MGQwZlxcdTBkMmFcXHUwZDRkXFx1MGQzMFxcdTBkM2ZcXHUwZDdkX1xcdTBkMmVcXHUwZDQ3XFx1MGQyZlxcdTBkNGRfXFx1MGQxY1xcdTBkNDJcXHUwZDdhX1xcdTBkMWNcXHUwZDQyXFx1MGQzMlxcdTBkNDhfXFx1MGQxM1xcdTBkMTdcXHUwZDM4XFx1MGQ0ZFxcdTBkMzFcXHUwZDRkXFx1MGQzMVxcdTBkNGRfXFx1MGQzOFxcdTBkNDZcXHUwZDJhXFx1MGQ0ZFxcdTBkMzFcXHUwZDRkXFx1MGQzMVxcdTBkMDJcXHUwZDJjXFx1MGQ3Y19cXHUwZDEyXFx1MGQxNVxcdTBkNGRcXHUwZDFmXFx1MGQ0YlxcdTBkMmNcXHUwZDdjX1xcdTBkMjhcXHUwZDM1XFx1MGQwMlxcdTBkMmNcXHUwZDdjX1xcdTBkMjFcXHUwZDNmXFx1MGQzOFxcdTBkMDJcXHUwZDJjXFx1MGQ3Y1wiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIlxcdTBkMWNcXHUwZDI4XFx1MGQ0MS5fXFx1MGQyYlxcdTBkNDZcXHUwZDJjXFx1MGQ0ZFxcdTBkMzBcXHUwZDQxLl9cXHUwZDJlXFx1MGQzZVxcdTBkN2MuX1xcdTBkMGZcXHUwZDJhXFx1MGQ0ZFxcdTBkMzBcXHUwZDNmLl9cXHUwZDJlXFx1MGQ0N1xcdTBkMmZcXHUwZDRkX1xcdTBkMWNcXHUwZDQyXFx1MGQ3YV9cXHUwZDFjXFx1MGQ0MlxcdTBkMzJcXHUwZDQ4Ll9cXHUwZDEzXFx1MGQxNy5fXFx1MGQzOFxcdTBkNDZcXHUwZDJhXFx1MGQ0ZFxcdTBkMzFcXHUwZDRkXFx1MGQzMS5fXFx1MGQxMlxcdTBkMTVcXHUwZDRkXFx1MGQxZlxcdTBkNGIuX1xcdTBkMjhcXHUwZDM1XFx1MGQwMi5fXFx1MGQyMVxcdTBkM2ZcXHUwZDM4XFx1MGQwMi5cIi5zcGxpdChcIl9cIiksbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czpcIlxcdTBkMWVcXHUwZDNlXFx1MGQyZlxcdTBkMzFcXHUwZDNlXFx1MGQzNFxcdTBkNGRcXHUwZDFhX1xcdTBkMjRcXHUwZDNmXFx1MGQxOVxcdTBkNGRcXHUwZDE1XFx1MGQzM1xcdTBkM2VcXHUwZDM0XFx1MGQ0ZFxcdTBkMWFfXFx1MGQxYVxcdTBkNGFcXHUwZDM1XFx1MGQ0ZFxcdTBkMzVcXHUwZDNlXFx1MGQzNFxcdTBkNGRcXHUwZDFhX1xcdTBkMmNcXHUwZDQxXFx1MGQyN1xcdTBkMjhcXHUwZDNlXFx1MGQzNFxcdTBkNGRcXHUwZDFhX1xcdTBkMzVcXHUwZDRkXFx1MGQyZlxcdTBkM2VcXHUwZDM0XFx1MGQzZVxcdTBkMzRcXHUwZDRkXFx1MGQxYV9cXHUwZDM1XFx1MGQ0NlxcdTBkMzNcXHUwZDRkXFx1MGQzM1xcdTBkM2ZcXHUwZDJmXFx1MGQzZVxcdTBkMzRcXHUwZDRkXFx1MGQxYV9cXHUwZDM2XFx1MGQyOFxcdTBkM2ZcXHUwZDJmXFx1MGQzZVxcdTBkMzRcXHUwZDRkXFx1MGQxYVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiXFx1MGQxZVxcdTBkM2VcXHUwZDJmXFx1MGQ3Y19cXHUwZDI0XFx1MGQzZlxcdTBkMTlcXHUwZDRkXFx1MGQxNVxcdTBkN2VfXFx1MGQxYVxcdTBkNGFcXHUwZDM1XFx1MGQ0ZFxcdTBkMzVfXFx1MGQyY1xcdTBkNDFcXHUwZDI3XFx1MGQ3Yl9cXHUwZDM1XFx1MGQ0ZFxcdTBkMmZcXHUwZDNlXFx1MGQzNFxcdTBkMDJfXFx1MGQzNVxcdTBkNDZcXHUwZDMzXFx1MGQ0ZFxcdTBkMzNcXHUwZDNmX1xcdTBkMzZcXHUwZDI4XFx1MGQzZlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIlxcdTBkMWVcXHUwZDNlX1xcdTBkMjRcXHUwZDNmX1xcdTBkMWFcXHUwZDRhX1xcdTBkMmNcXHUwZDQxX1xcdTBkMzVcXHUwZDRkXFx1MGQyZlxcdTBkM2VfXFx1MGQzNVxcdTBkNDZfXFx1MGQzNlwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJBIGg6bW0gLVxcdTBkMjhcXHUwZDQxXCIsTFRTOlwiQSBoOm1tOnNzIC1cXHUwZDI4XFx1MGQ0MVwiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZLCBBIGg6bW0gLVxcdTBkMjhcXHUwZDQxXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0gLVxcdTBkMjhcXHUwZDQxXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTBkMDdcXHUwZDI4XFx1MGQ0ZFxcdTBkMjhcXHUwZDRkXSBMVFwiLG5leHREYXk6XCJbXFx1MGQyOFxcdTBkM2VcXHUwZDMzXFx1MGQ0Nl0gTFRcIixuZXh0V2VlazpcImRkZGQsIExUXCIsbGFzdERheTpcIltcXHUwZDA3XFx1MGQyOFxcdTBkNGRcXHUwZDI4XFx1MGQzMlxcdTBkNDZdIExUXCIsbGFzdFdlZWs6XCJbXFx1MGQxNVxcdTBkMzRcXHUwZDNmXFx1MGQxZVxcdTBkNGRcXHUwZDFlXSBkZGRkLCBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIiVzIFxcdTBkMTVcXHUwZDM0XFx1MGQzZlxcdTBkMWVcXHUwZDRkXFx1MGQxZVxcdTBkNGRcIixwYXN0OlwiJXMgXFx1MGQyZVxcdTBkNDFcXHUwZDdiXFx1MGQyYVxcdTBkNGRcIixzOlwiXFx1MGQwNVxcdTBkN2RcXHUwZDJhIFxcdTBkMjhcXHUwZDNmXFx1MGQyZVxcdTBkM2ZcXHUwZDM3XFx1MGQxOVxcdTBkNGRcXHUwZDE5XFx1MGQ3ZVwiLHNzOlwiJWQgXFx1MGQzOFxcdTBkNDZcXHUwZDE1XFx1MGQ0ZFxcdTBkMTVcXHUwZDdiXFx1MGQyMVxcdTBkNGRcIixtOlwiXFx1MGQxMlxcdTBkMzBcXHUwZDQxIFxcdTBkMmVcXHUwZDNmXFx1MGQyOFxcdTBkM2ZcXHUwZDMxXFx1MGQ0ZFxcdTBkMzFcXHUwZDRkXCIsbW06XCIlZCBcXHUwZDJlXFx1MGQzZlxcdTBkMjhcXHUwZDNmXFx1MGQzMVxcdTBkNGRcXHUwZDMxXFx1MGQ0ZFwiLGg6XCJcXHUwZDEyXFx1MGQzMFxcdTBkNDEgXFx1MGQyZVxcdTBkMjNcXHUwZDNmXFx1MGQxNVxcdTBkNGRcXHUwZDE1XFx1MGQ0MlxcdTBkN2NcIixoaDpcIiVkIFxcdTBkMmVcXHUwZDIzXFx1MGQzZlxcdTBkMTVcXHUwZDRkXFx1MGQxNVxcdTBkNDJcXHUwZDdjXCIsZDpcIlxcdTBkMTJcXHUwZDMwXFx1MGQ0MSBcXHUwZDI2XFx1MGQzZlxcdTBkMzVcXHUwZDM4XFx1MGQwMlwiLGRkOlwiJWQgXFx1MGQyNlxcdTBkM2ZcXHUwZDM1XFx1MGQzOFxcdTBkMDJcIixNOlwiXFx1MGQxMlxcdTBkMzBcXHUwZDQxIFxcdTBkMmVcXHUwZDNlXFx1MGQzOFxcdTBkMDJcIixNTTpcIiVkIFxcdTBkMmVcXHUwZDNlXFx1MGQzOFxcdTBkMDJcIix5OlwiXFx1MGQxMlxcdTBkMzBcXHUwZDQxIFxcdTBkMzVcXHUwZDdjXFx1MGQzN1xcdTBkMDJcIix5eTpcIiVkIFxcdTBkMzVcXHUwZDdjXFx1MGQzN1xcdTBkMDJcIn0sbWVyaWRpZW1QYXJzZTovXFx1MGQzMFxcdTBkM2VcXHUwZDI0XFx1MGQ0ZFxcdTBkMzBcXHUwZDNmfFxcdTBkMzBcXHUwZDNlXFx1MGQzNVxcdTBkM2ZcXHUwZDMyXFx1MGQ0NnxcXHUwZDA5XFx1MGQxYVxcdTBkNGRcXHUwZDFhIFxcdTBkMTVcXHUwZDM0XFx1MGQzZlxcdTBkMWVcXHUwZDRkXFx1MGQxZVxcdTBkNGR8XFx1MGQzNVxcdTBkNDhcXHUwZDE1XFx1MGQ0MVxcdTBkMjhcXHUwZDRkXFx1MGQyOFxcdTBkNDdcXHUwZDMwXFx1MGQwMnxcXHUwZDMwXFx1MGQzZVxcdTBkMjRcXHUwZDRkXFx1MGQzMFxcdTBkM2YvaSxtZXJpZGllbUhvdXI6ZnVuY3Rpb24oZSxhKXtyZXR1cm4gMTI9PT1lJiYoZT0wKSxcIlxcdTBkMzBcXHUwZDNlXFx1MGQyNFxcdTBkNGRcXHUwZDMwXFx1MGQzZlwiPT09YSYmZT49NHx8XCJcXHUwZDA5XFx1MGQxYVxcdTBkNGRcXHUwZDFhIFxcdTBkMTVcXHUwZDM0XFx1MGQzZlxcdTBkMWVcXHUwZDRkXFx1MGQxZVxcdTBkNGRcIj09PWF8fFwiXFx1MGQzNVxcdTBkNDhcXHUwZDE1XFx1MGQ0MVxcdTBkMjhcXHUwZDRkXFx1MGQyOFxcdTBkNDdcXHUwZDMwXFx1MGQwMlwiPT09YT9lKzEyOmV9LG1lcmlkaWVtOmZ1bmN0aW9uKGUsYSxfKXtyZXR1cm4gZTw0P1wiXFx1MGQzMFxcdTBkM2VcXHUwZDI0XFx1MGQ0ZFxcdTBkMzBcXHUwZDNmXCI6ZTwxMj9cIlxcdTBkMzBcXHUwZDNlXFx1MGQzNVxcdTBkM2ZcXHUwZDMyXFx1MGQ0NlwiOmU8MTc/XCJcXHUwZDA5XFx1MGQxYVxcdTBkNGRcXHUwZDFhIFxcdTBkMTVcXHUwZDM0XFx1MGQzZlxcdTBkMWVcXHUwZDRkXFx1MGQxZVxcdTBkNGRcIjplPDIwP1wiXFx1MGQzNVxcdTBkNDhcXHUwZDE1XFx1MGQ0MVxcdTBkMjhcXHUwZDRkXFx1MGQyOFxcdTBkNDdcXHUwZDMwXFx1MGQwMlwiOlwiXFx1MGQzMFxcdTBkM2VcXHUwZDI0XFx1MGQ0ZFxcdTBkMzBcXHUwZDNmXCJ9fSk7dmFyIFRlPXsxOlwiXFx1MDk2N1wiLDI6XCJcXHUwOTY4XCIsMzpcIlxcdTA5NjlcIiw0OlwiXFx1MDk2YVwiLDU6XCJcXHUwOTZiXCIsNjpcIlxcdTA5NmNcIiw3OlwiXFx1MDk2ZFwiLDg6XCJcXHUwOTZlXCIsOTpcIlxcdTA5NmZcIiwwOlwiXFx1MDk2NlwifSxmZT17XCJcXHUwOTY3XCI6XCIxXCIsXCJcXHUwOTY4XCI6XCIyXCIsXCJcXHUwOTY5XCI6XCIzXCIsXCJcXHUwOTZhXCI6XCI0XCIsXCJcXHUwOTZiXCI6XCI1XCIsXCJcXHUwOTZjXCI6XCI2XCIsXCJcXHUwOTZkXCI6XCI3XCIsXCJcXHUwOTZlXCI6XCI4XCIsXCJcXHUwOTZmXCI6XCI5XCIsXCJcXHUwOTY2XCI6XCIwXCJ9O2Z1bmN0aW9uIHdlKGUsYSxfLHMpe3ZhciBkPVwiXCI7aWYoYSlzd2l0Y2goXyl7Y2FzZVwic1wiOmQ9XCJcXHUwOTE1XFx1MDkzZVxcdTA5MzlcXHUwOTQwIFxcdTA5MzhcXHUwOTQ3XFx1MDkxNVxcdTA5MDJcXHUwOTI2XCI7YnJlYWs7Y2FzZVwic3NcIjpkPVwiJWQgXFx1MDkzOFxcdTA5NDdcXHUwOTE1XFx1MDkwMlxcdTA5MjZcIjticmVhaztjYXNlXCJtXCI6ZD1cIlxcdTA5MGZcXHUwOTE1IFxcdTA5MmVcXHUwOTNmXFx1MDkyOFxcdTA5M2ZcXHUwOTFmXCI7YnJlYWs7Y2FzZVwibW1cIjpkPVwiJWQgXFx1MDkyZVxcdTA5M2ZcXHUwOTI4XFx1MDkzZlxcdTA5MWZcXHUwOTQ3XCI7YnJlYWs7Y2FzZVwiaFwiOmQ9XCJcXHUwOTBmXFx1MDkxNSBcXHUwOTI0XFx1MDkzZVxcdTA5MzhcIjticmVhaztjYXNlXCJoaFwiOmQ9XCIlZCBcXHUwOTI0XFx1MDkzZVxcdTA5MzhcIjticmVhaztjYXNlXCJkXCI6ZD1cIlxcdTA5MGZcXHUwOTE1IFxcdTA5MjZcXHUwOTNmXFx1MDkzNVxcdTA5MzhcIjticmVhaztjYXNlXCJkZFwiOmQ9XCIlZCBcXHUwOTI2XFx1MDkzZlxcdTA5MzVcXHUwOTM4XCI7YnJlYWs7Y2FzZVwiTVwiOmQ9XCJcXHUwOTBmXFx1MDkxNSBcXHUwOTJlXFx1MDkzOVxcdTA5M2ZcXHUwOTI4XFx1MDkzZVwiO2JyZWFrO2Nhc2VcIk1NXCI6ZD1cIiVkIFxcdTA5MmVcXHUwOTM5XFx1MDkzZlxcdTA5MjhcXHUwOTQ3XCI7YnJlYWs7Y2FzZVwieVwiOmQ9XCJcXHUwOTBmXFx1MDkxNSBcXHUwOTM1XFx1MDkzMFxcdTA5NGRcXHUwOTM3XCI7YnJlYWs7Y2FzZVwieXlcIjpkPVwiJWQgXFx1MDkzNVxcdTA5MzBcXHUwOTRkXFx1MDkzN1xcdTA5NDdcIjticmVha31lbHNlIHN3aXRjaChfKXtjYXNlXCJzXCI6ZD1cIlxcdTA5MTVcXHUwOTNlXFx1MDkzOVxcdTA5NDAgXFx1MDkzOFxcdTA5NDdcXHUwOTE1XFx1MDkwMlxcdTA5MjZcXHUwOTNlXFx1MDkwMlwiO2JyZWFrO2Nhc2VcInNzXCI6ZD1cIiVkIFxcdTA5MzhcXHUwOTQ3XFx1MDkxNVxcdTA5MDJcXHUwOTI2XFx1MDkzZVxcdTA5MDJcIjticmVhaztjYXNlXCJtXCI6ZD1cIlxcdTA5MGZcXHUwOTE1XFx1MDkzZSBcXHUwOTJlXFx1MDkzZlxcdTA5MjhcXHUwOTNmXFx1MDkxZlxcdTA5M2VcIjticmVhaztjYXNlXCJtbVwiOmQ9XCIlZCBcXHUwOTJlXFx1MDkzZlxcdTA5MjhcXHUwOTNmXFx1MDkxZlxcdTA5M2VcXHUwOTAyXCI7YnJlYWs7Y2FzZVwiaFwiOmQ9XCJcXHUwOTBmXFx1MDkxNVxcdTA5M2UgXFx1MDkyNFxcdTA5M2VcXHUwOTM4XFx1MDkzZVwiO2JyZWFrO2Nhc2VcImhoXCI6ZD1cIiVkIFxcdTA5MjRcXHUwOTNlXFx1MDkzOFxcdTA5M2VcXHUwOTAyXCI7YnJlYWs7Y2FzZVwiZFwiOmQ9XCJcXHUwOTBmXFx1MDkxNVxcdTA5M2UgXFx1MDkyNlxcdTA5M2ZcXHUwOTM1XFx1MDkzOFxcdTA5M2VcIjticmVhaztjYXNlXCJkZFwiOmQ9XCIlZCBcXHUwOTI2XFx1MDkzZlxcdTA5MzVcXHUwOTM4XFx1MDkzZVxcdTA5MDJcIjticmVhaztjYXNlXCJNXCI6ZD1cIlxcdTA5MGZcXHUwOTE1XFx1MDkzZSBcXHUwOTJlXFx1MDkzOVxcdTA5M2ZcXHUwOTI4XFx1MDk0ZFxcdTA5MmZcXHUwOTNlXCI7YnJlYWs7Y2FzZVwiTU1cIjpkPVwiJWQgXFx1MDkyZVxcdTA5MzlcXHUwOTNmXFx1MDkyOFxcdTA5NGRcXHUwOTJmXFx1MDkzZVxcdTA5MDJcIjticmVhaztjYXNlXCJ5XCI6ZD1cIlxcdTA5MGZcXHUwOTE1XFx1MDkzZSBcXHUwOTM1XFx1MDkzMFxcdTA5NGRcXHUwOTM3XFx1MDkzZVwiO2JyZWFrO2Nhc2VcInl5XCI6ZD1cIiVkIFxcdTA5MzVcXHUwOTMwXFx1MDk0ZFxcdTA5MzdcXHUwOTNlXFx1MDkwMlwiO2JyZWFrfXJldHVybiBkLnJlcGxhY2UoLyVkL2ksZSl9ZS5kZWZpbmVMb2NhbGUoXCJtclwiLHttb250aHM6XCJcXHUwOTFjXFx1MDkzZVxcdTA5MjhcXHUwOTQ3XFx1MDkzNVxcdTA5M2VcXHUwOTMwXFx1MDk0MF9cXHUwOTJiXFx1MDk0N1xcdTA5MmNcXHUwOTRkXFx1MDkzMFxcdTA5NDFcXHUwOTM1XFx1MDkzZVxcdTA5MzBcXHUwOTQwX1xcdTA5MmVcXHUwOTNlXFx1MDkzMFxcdTA5NGRcXHUwOTFhX1xcdTA5MGZcXHUwOTJhXFx1MDk0ZFxcdTA5MzBcXHUwOTNmXFx1MDkzMl9cXHUwOTJlXFx1MDk0N19cXHUwOTFjXFx1MDk0MlxcdTA5MjhfXFx1MDkxY1xcdTA5NDFcXHUwOTMyXFx1MDk0OF9cXHUwOTExXFx1MDkxN1xcdTA5MzhcXHUwOTRkXFx1MDkxZl9cXHUwOTM4XFx1MDkyYVxcdTA5NGRcXHUwOTFmXFx1MDk0N1xcdTA5MDJcXHUwOTJjXFx1MDkzMF9cXHUwOTExXFx1MDkxNVxcdTA5NGRcXHUwOTFmXFx1MDk0YlxcdTA5MmNcXHUwOTMwX1xcdTA5MjhcXHUwOTRiXFx1MDkzNVxcdTA5NGRcXHUwOTM5XFx1MDk0N1xcdTA5MDJcXHUwOTJjXFx1MDkzMF9cXHUwOTIxXFx1MDkzZlxcdTA5MzhcXHUwOTQ3XFx1MDkwMlxcdTA5MmNcXHUwOTMwXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiXFx1MDkxY1xcdTA5M2VcXHUwOTI4XFx1MDk0Ny5fXFx1MDkyYlxcdTA5NDdcXHUwOTJjXFx1MDk0ZFxcdTA5MzBcXHUwOTQxLl9cXHUwOTJlXFx1MDkzZVxcdTA5MzBcXHUwOTRkXFx1MDkxYS5fXFx1MDkwZlxcdTA5MmFcXHUwOTRkXFx1MDkzMFxcdTA5M2YuX1xcdTA5MmVcXHUwOTQ3Ll9cXHUwOTFjXFx1MDk0MlxcdTA5MjguX1xcdTA5MWNcXHUwOTQxXFx1MDkzMlxcdTA5NDguX1xcdTA5MTFcXHUwOTE3Ll9cXHUwOTM4XFx1MDkyYVxcdTA5NGRcXHUwOTFmXFx1MDk0N1xcdTA5MDIuX1xcdTA5MTFcXHUwOTE1XFx1MDk0ZFxcdTA5MWZcXHUwOTRiLl9cXHUwOTI4XFx1MDk0YlxcdTA5MzVcXHUwOTRkXFx1MDkzOVxcdTA5NDdcXHUwOTAyLl9cXHUwOTIxXFx1MDkzZlxcdTA5MzhcXHUwOTQ3XFx1MDkwMi5cIi5zcGxpdChcIl9cIiksbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czpcIlxcdTA5MzBcXHUwOTM1XFx1MDkzZlxcdTA5MzVcXHUwOTNlXFx1MDkzMF9cXHUwOTM4XFx1MDk0YlxcdTA5MmVcXHUwOTM1XFx1MDkzZVxcdTA5MzBfXFx1MDkyZVxcdTA5MDJcXHUwOTE3XFx1MDkzM1xcdTA5MzVcXHUwOTNlXFx1MDkzMF9cXHUwOTJjXFx1MDk0MVxcdTA5MjdcXHUwOTM1XFx1MDkzZVxcdTA5MzBfXFx1MDkxN1xcdTA5NDFcXHUwOTMwXFx1MDk0MlxcdTA5MzVcXHUwOTNlXFx1MDkzMF9cXHUwOTM2XFx1MDk0MVxcdTA5MTVcXHUwOTRkXFx1MDkzMFxcdTA5MzVcXHUwOTNlXFx1MDkzMF9cXHUwOTM2XFx1MDkyOFxcdTA5M2ZcXHUwOTM1XFx1MDkzZVxcdTA5MzBcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlxcdTA5MzBcXHUwOTM1XFx1MDkzZl9cXHUwOTM4XFx1MDk0YlxcdTA5MmVfXFx1MDkyZVxcdTA5MDJcXHUwOTE3XFx1MDkzM19cXHUwOTJjXFx1MDk0MVxcdTA5MjdfXFx1MDkxN1xcdTA5NDFcXHUwOTMwXFx1MDk0Ml9cXHUwOTM2XFx1MDk0MVxcdTA5MTVcXHUwOTRkXFx1MDkzMF9cXHUwOTM2XFx1MDkyOFxcdTA5M2ZcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJcXHUwOTMwX1xcdTA5MzhcXHUwOTRiX1xcdTA5MmVcXHUwOTAyX1xcdTA5MmNcXHUwOTQxX1xcdTA5MTdcXHUwOTQxX1xcdTA5MzZcXHUwOTQxX1xcdTA5MzZcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiQSBoOm1tIFxcdTA5MzVcXHUwOTNlXFx1MDkxY1xcdTA5MjRcXHUwOTNlXCIsTFRTOlwiQSBoOm1tOnNzIFxcdTA5MzVcXHUwOTNlXFx1MDkxY1xcdTA5MjRcXHUwOTNlXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVksIEEgaDptbSBcXHUwOTM1XFx1MDkzZVxcdTA5MWNcXHUwOTI0XFx1MDkzZVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIFxcdTA5MzVcXHUwOTNlXFx1MDkxY1xcdTA5MjRcXHUwOTNlXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTA5MDZcXHUwOTFjXSBMVFwiLG5leHREYXk6XCJbXFx1MDkwOVxcdTA5MjZcXHUwOTRkXFx1MDkyZlxcdTA5M2VdIExUXCIsbmV4dFdlZWs6XCJkZGRkLCBMVFwiLGxhc3REYXk6XCJbXFx1MDkxNVxcdTA5M2VcXHUwOTMyXSBMVFwiLGxhc3RXZWVrOlwiW1xcdTA5MmVcXHUwOTNlXFx1MDkxN1xcdTA5NDBcXHUwOTMyXSBkZGRkLCBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIiVzXFx1MDkyZVxcdTA5MjdcXHUwOTRkXFx1MDkyZlxcdTA5NDdcIixwYXN0OlwiJXNcXHUwOTJhXFx1MDk0MlxcdTA5MzBcXHUwOTRkXFx1MDkzNVxcdTA5NDBcIixzOndlLHNzOndlLG06d2UsbW06d2UsaDp3ZSxoaDp3ZSxkOndlLGRkOndlLE06d2UsTU06d2UseTp3ZSx5eTp3ZX0scHJlcGFyc2U6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvW1xcdTA5NjdcXHUwOTY4XFx1MDk2OVxcdTA5NmFcXHUwOTZiXFx1MDk2Y1xcdTA5NmRcXHUwOTZlXFx1MDk2ZlxcdTA5NjZdL2csZnVuY3Rpb24oZSl7cmV0dXJuIGZlW2VdfSl9LHBvc3Rmb3JtYXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvXFxkL2csZnVuY3Rpb24oZSl7cmV0dXJuIFRlW2VdfSl9LG1lcmlkaWVtUGFyc2U6L1xcdTA5MzBcXHUwOTNlXFx1MDkyNFxcdTA5NGRcXHUwOTMwXFx1MDk0MHxcXHUwOTM4XFx1MDkxNVxcdTA5M2VcXHUwOTMzXFx1MDk0MHxcXHUwOTI2XFx1MDk0MVxcdTA5MmFcXHUwOTNlXFx1MDkzMFxcdTA5NDB8XFx1MDkzOFxcdTA5M2VcXHUwOTJmXFx1MDkwMlxcdTA5MTVcXHUwOTNlXFx1MDkzM1xcdTA5NDAvLG1lcmlkaWVtSG91cjpmdW5jdGlvbihlLGEpe3JldHVybiAxMj09PWUmJihlPTApLFwiXFx1MDkzMFxcdTA5M2VcXHUwOTI0XFx1MDk0ZFxcdTA5MzBcXHUwOTQwXCI9PT1hP2U8ND9lOmUrMTI6XCJcXHUwOTM4XFx1MDkxNVxcdTA5M2VcXHUwOTMzXFx1MDk0MFwiPT09YT9lOlwiXFx1MDkyNlxcdTA5NDFcXHUwOTJhXFx1MDkzZVxcdTA5MzBcXHUwOTQwXCI9PT1hP2U+PTEwP2U6ZSsxMjpcIlxcdTA5MzhcXHUwOTNlXFx1MDkyZlxcdTA5MDJcXHUwOTE1XFx1MDkzZVxcdTA5MzNcXHUwOTQwXCI9PT1hP2UrMTI6dm9pZCAwfSxtZXJpZGllbTpmdW5jdGlvbihlLGEsXyl7cmV0dXJuIGU8ND9cIlxcdTA5MzBcXHUwOTNlXFx1MDkyNFxcdTA5NGRcXHUwOTMwXFx1MDk0MFwiOmU8MTA/XCJcXHUwOTM4XFx1MDkxNVxcdTA5M2VcXHUwOTMzXFx1MDk0MFwiOmU8MTc/XCJcXHUwOTI2XFx1MDk0MVxcdTA5MmFcXHUwOTNlXFx1MDkzMFxcdTA5NDBcIjplPDIwP1wiXFx1MDkzOFxcdTA5M2VcXHUwOTJmXFx1MDkwMlxcdTA5MTVcXHUwOTNlXFx1MDkzM1xcdTA5NDBcIjpcIlxcdTA5MzBcXHUwOTNlXFx1MDkyNFxcdTA5NGRcXHUwOTMwXFx1MDk0MFwifSx3ZWVrOntkb3c6MCxkb3k6Nn19KSxlLmRlZmluZUxvY2FsZShcIm1zLW15XCIse21vbnRoczpcIkphbnVhcmlfRmVicnVhcmlfTWFjX0FwcmlsX01laV9KdW5fSnVsYWlfT2dvc19TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EaXNlbWJlclwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIkphbl9GZWJfTWFjX0Fwcl9NZWlfSnVuX0p1bF9PZ3NfU2VwX09rdF9Ob3ZfRGlzXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiQWhhZF9Jc25pbl9TZWxhc2FfUmFidV9LaGFtaXNfSnVtYWF0X1NhYnR1XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJBaGRfSXNuX1NlbF9SYWJfS2hhX0p1bV9TYWJcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJBaF9Jc19TbF9SYl9LbV9KbV9TYlwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISC5tbVwiLExUUzpcIkhILm1tLnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tXCJ9LG1lcmlkaWVtUGFyc2U6L3BhZ2l8dGVuZ2FoYXJpfHBldGFuZ3xtYWxhbS8sbWVyaWRpZW1Ib3VyOmZ1bmN0aW9uKGUsYSl7cmV0dXJuIDEyPT09ZSYmKGU9MCksXCJwYWdpXCI9PT1hP2U6XCJ0ZW5nYWhhcmlcIj09PWE/ZT49MTE/ZTplKzEyOlwicGV0YW5nXCI9PT1hfHxcIm1hbGFtXCI9PT1hP2UrMTI6dm9pZCAwfSxtZXJpZGllbTpmdW5jdGlvbihlLGEsXyl7cmV0dXJuIGU8MTE/XCJwYWdpXCI6ZTwxNT9cInRlbmdhaGFyaVwiOmU8MTk/XCJwZXRhbmdcIjpcIm1hbGFtXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW0hhcmkgaW5pIHB1a3VsXSBMVFwiLG5leHREYXk6XCJbRXNvayBwdWt1bF0gTFRcIixuZXh0V2VlazpcImRkZGQgW3B1a3VsXSBMVFwiLGxhc3REYXk6XCJbS2VsbWFyaW4gcHVrdWxdIExUXCIsbGFzdFdlZWs6XCJkZGRkIFtsZXBhcyBwdWt1bF0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJkYWxhbSAlc1wiLHBhc3Q6XCIlcyB5YW5nIGxlcGFzXCIsczpcImJlYmVyYXBhIHNhYXRcIixzczpcIiVkIHNhYXRcIixtOlwic2VtaW5pdFwiLG1tOlwiJWQgbWluaXRcIixoOlwic2VqYW1cIixoaDpcIiVkIGphbVwiLGQ6XCJzZWhhcmlcIixkZDpcIiVkIGhhcmlcIixNOlwic2VidWxhblwiLE1NOlwiJWQgYnVsYW5cIix5Olwic2V0YWh1blwiLHl5OlwiJWQgdGFodW5cIn0sd2Vlazp7ZG93OjEsZG95Ojd9fSksZS5kZWZpbmVMb2NhbGUoXCJtc1wiLHttb250aHM6XCJKYW51YXJpX0ZlYnJ1YXJpX01hY19BcHJpbF9NZWlfSnVuX0p1bGFpX09nb3NfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGlzZW1iZXJcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJKYW5fRmViX01hY19BcHJfTWVpX0p1bl9KdWxfT2dzX1NlcF9Pa3RfTm92X0Rpc1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIkFoYWRfSXNuaW5fU2VsYXNhX1JhYnVfS2hhbWlzX0p1bWFhdF9TYWJ0dVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiQWhkX0lzbl9TZWxfUmFiX0toYV9KdW1fU2FiXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiQWhfSXNfU2xfUmJfS21fSm1fU2JcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEgubW1cIixMVFM6XCJISC5tbS5zc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW1cIixMTExMOlwiZGRkZCwgRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbVwifSxtZXJpZGllbVBhcnNlOi9wYWdpfHRlbmdhaGFyaXxwZXRhbmd8bWFsYW0vLG1lcmlkaWVtSG91cjpmdW5jdGlvbihlLGEpe3JldHVybiAxMj09PWUmJihlPTApLFwicGFnaVwiPT09YT9lOlwidGVuZ2FoYXJpXCI9PT1hP2U+PTExP2U6ZSsxMjpcInBldGFuZ1wiPT09YXx8XCJtYWxhbVwiPT09YT9lKzEyOnZvaWQgMH0sbWVyaWRpZW06ZnVuY3Rpb24oZSxhLF8pe3JldHVybiBlPDExP1wicGFnaVwiOmU8MTU/XCJ0ZW5nYWhhcmlcIjplPDE5P1wicGV0YW5nXCI6XCJtYWxhbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltIYXJpIGluaSBwdWt1bF0gTFRcIixuZXh0RGF5OlwiW0Vzb2sgcHVrdWxdIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtwdWt1bF0gTFRcIixsYXN0RGF5OlwiW0tlbG1hcmluIHB1a3VsXSBMVFwiLGxhc3RXZWVrOlwiZGRkZCBbbGVwYXMgcHVrdWxdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiZGFsYW0gJXNcIixwYXN0OlwiJXMgeWFuZyBsZXBhc1wiLHM6XCJiZWJlcmFwYSBzYWF0XCIsc3M6XCIlZCBzYWF0XCIsbTpcInNlbWluaXRcIixtbTpcIiVkIG1pbml0XCIsaDpcInNlamFtXCIsaGg6XCIlZCBqYW1cIixkOlwic2VoYXJpXCIsZGQ6XCIlZCBoYXJpXCIsTTpcInNlYnVsYW5cIixNTTpcIiVkIGJ1bGFuXCIseTpcInNldGFodW5cIix5eTpcIiVkIHRhaHVuXCJ9LHdlZWs6e2RvdzoxLGRveTo3fX0pLGUuZGVmaW5lTG9jYWxlKFwibXRcIix7bW9udGhzOlwiSmFubmFyX0ZyYXJfTWFyenVfQXByaWxfTWVqanVfXFx1MDEyMHVuanVfTHVsanVfQXd3aXNzdV9TZXR0ZW1icnVfT3R0dWJydV9Ob3ZlbWJydV9EaVxcdTAxMGJlbWJydVwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIkphbl9GcmFfTWFyX0Fwcl9NZWpfXFx1MDEyMHVuX0x1bF9Bd3dfU2V0X090dF9Ob3ZfRGlcXHUwMTBiXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiSWwtXFx1MDEyNmFkZF9JdC1UbmVqbl9JdC1UbGlldGFfTC1FcmJnXFx1MDEyN2FfSWwtXFx1MDEyNmFtaXNfSWwtXFx1MDEyMGltZ1xcdTAxMjdhX0lzLVNpYnRcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlxcdTAxMjZhZF9UbmVfVGxpX0VyYl9cXHUwMTI2YW1fXFx1MDEyMGltX1NpYlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIlxcdTAxMjZhX1RuX1RsX0VyX1xcdTAxMjZhX1xcdTAxMjBpX1NpXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltJbGx1bSBmaWwtXUxUXCIsbmV4dERheTpcIltHXFx1MDEyN2FkYSBmaWwtXUxUXCIsbmV4dFdlZWs6XCJkZGRkIFtmaWwtXUxUXCIsbGFzdERheTpcIltJbC1iaWVyYVxcdTAxMjcgZmlsLV1MVFwiLGxhc3RXZWVrOlwiZGRkZCBbbGkgZ1xcdTAxMjdhZGRhXSBbZmlsLV1MVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcImZcXHUyMDE5ICVzXCIscGFzdDpcIiVzIGlsdVwiLHM6XCJmdGl0IHNla29uZGlcIixzczpcIiVkIHNla29uZGlcIixtOlwibWludXRhXCIsbW06XCIlZCBtaW51dGlcIixoOlwic2llZ1xcdTAxMjdhXCIsaGg6XCIlZCBzaWVnXFx1MDEyN2F0XCIsZDpcIlxcdTAxMjF1cm5hdGFcIixkZDpcIiVkIFxcdTAxMjFyYW5ldFwiLE06XCJ4YWhhclwiLE1NOlwiJWQgeGh1clwiLHk6XCJzZW5hXCIseXk6XCIlZCBzbmlcIn0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn1cXHhiYS8sb3JkaW5hbDpcIiVkXFx4YmFcIix3ZWVrOntkb3c6MSxkb3k6NH19KTt2YXIgZ2U9ezE6XCJcXHUxMDQxXCIsMjpcIlxcdTEwNDJcIiwzOlwiXFx1MTA0M1wiLDQ6XCJcXHUxMDQ0XCIsNTpcIlxcdTEwNDVcIiw2OlwiXFx1MTA0NlwiLDc6XCJcXHUxMDQ3XCIsODpcIlxcdTEwNDhcIiw5OlwiXFx1MTA0OVwiLDA6XCJcXHUxMDQwXCJ9LEhlPXtcIlxcdTEwNDFcIjpcIjFcIixcIlxcdTEwNDJcIjpcIjJcIixcIlxcdTEwNDNcIjpcIjNcIixcIlxcdTEwNDRcIjpcIjRcIixcIlxcdTEwNDVcIjpcIjVcIixcIlxcdTEwNDZcIjpcIjZcIixcIlxcdTEwNDdcIjpcIjdcIixcIlxcdTEwNDhcIjpcIjhcIixcIlxcdTEwNDlcIjpcIjlcIixcIlxcdTEwNDBcIjpcIjBcIn07ZS5kZWZpbmVMb2NhbGUoXCJteVwiLHttb250aHM6XCJcXHUxMDA3XFx1MTAxNFxcdTEwM2FcXHUxMDE0XFx1MTAxZFxcdTEwMmJcXHUxMDFiXFx1MTAyZV9cXHUxMDE2XFx1MTAzMVxcdTEwMTZcXHUxMDMxXFx1MTAyY1xcdTEwM2FcXHUxMDFkXFx1MTAyYlxcdTEwMWJcXHUxMDJlX1xcdTEwMTlcXHUxMDEwXFx1MTAzYV9cXHUxMDI3XFx1MTAxNVxcdTEwM2NcXHUxMDJlX1xcdTEwMTlcXHUxMDMxX1xcdTEwMDdcXHUxMDNkXFx1MTAxNFxcdTEwM2FfXFx1MTAwN1xcdTEwMzBcXHUxMDFjXFx1MTAyZFxcdTEwMmZcXHUxMDA0XFx1MTAzYV9cXHUxMDFlXFx1MTAzY1xcdTEwMDJcXHUxMDJmXFx1MTAxMFxcdTEwM2FfXFx1MTAwNVxcdTEwMDBcXHUxMDNhXFx1MTAxMFxcdTEwMDRcXHUxMDNhXFx1MTAxOFxcdTEwMmNfXFx1MTAyMVxcdTEwMzFcXHUxMDJjXFx1MTAwMFxcdTEwM2FcXHUxMDEwXFx1MTAyZFxcdTEwMmZcXHUxMDE4XFx1MTAyY19cXHUxMDE0XFx1MTAyZFxcdTEwMmZcXHUxMDFkXFx1MTAwNFxcdTEwM2FcXHUxMDE4XFx1MTAyY19cXHUxMDEyXFx1MTAyZVxcdTEwMDdcXHUxMDA0XFx1MTAzYVxcdTEwMThcXHUxMDJjXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiXFx1MTAwN1xcdTEwMTRcXHUxMDNhX1xcdTEwMTZcXHUxMDMxX1xcdTEwMTlcXHUxMDEwXFx1MTAzYV9cXHUxMDE1XFx1MTAzY1xcdTEwMmVfXFx1MTAxOVxcdTEwMzFfXFx1MTAwN1xcdTEwM2RcXHUxMDE0XFx1MTAzYV9cXHUxMDFjXFx1MTAyZFxcdTEwMmZcXHUxMDA0XFx1MTAzYV9cXHUxMDFlXFx1MTAzY19cXHUxMDA1XFx1MTAwMFxcdTEwM2FfXFx1MTAyMVxcdTEwMzFcXHUxMDJjXFx1MTAwMFxcdTEwM2FfXFx1MTAxNFxcdTEwMmRcXHUxMDJmX1xcdTEwMTJcXHUxMDJlXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiXFx1MTAxMFxcdTEwMTRcXHUxMDA0XFx1MTAzYVxcdTEwMzlcXHUxMDAyXFx1MTAxNFxcdTEwM2RcXHUxMDMxX1xcdTEwMTBcXHUxMDE0XFx1MTAwNFxcdTEwM2FcXHUxMDM5XFx1MTAxY1xcdTEwMmNfXFx1MTAyMVxcdTEwMDRcXHUxMDNhXFx1MTAzOVxcdTEwMDJcXHUxMDJiX1xcdTEwMTdcXHUxMDJmXFx1MTAxMlxcdTEwMzlcXHUxMDEzXFx1MTAxZlxcdTEwMzBcXHUxMDM4X1xcdTEwMDBcXHUxMDNjXFx1MTAyY1xcdTEwMWVcXHUxMDE1XFx1MTAxMFxcdTEwMzFcXHUxMDM4X1xcdTEwMWVcXHUxMDMxXFx1MTAyY1xcdTEwMDBcXHUxMDNjXFx1MTAyY19cXHUxMDA1XFx1MTAxNFxcdTEwMzFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlxcdTEwMTRcXHUxMDNkXFx1MTAzMV9cXHUxMDFjXFx1MTAyY19cXHUxMDAyXFx1MTAyYl9cXHUxMDFmXFx1MTAzMFxcdTEwMzhfXFx1MTAwMFxcdTEwM2NcXHUxMDJjX1xcdTEwMWVcXHUxMDMxXFx1MTAyY19cXHUxMDE0XFx1MTAzMVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIlxcdTEwMTRcXHUxMDNkXFx1MTAzMV9cXHUxMDFjXFx1MTAyY19cXHUxMDAyXFx1MTAyYl9cXHUxMDFmXFx1MTAzMFxcdTEwMzhfXFx1MTAwMFxcdTEwM2NcXHUxMDJjX1xcdTEwMWVcXHUxMDMxXFx1MTAyY19cXHUxMDE0XFx1MTAzMVwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCBEIE1NTU0gWVlZWSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltcXHUxMDFhXFx1MTAxNFxcdTEwMzEuXSBMVCBbXFx1MTAxOVxcdTEwM2VcXHUxMDJjXVwiLG5leHREYXk6XCJbXFx1MTAxOVxcdTEwMTRcXHUxMDAwXFx1MTAzYVxcdTEwMTZcXHUxMDNjXFx1MTAxNFxcdTEwM2FdIExUIFtcXHUxMDE5XFx1MTAzZVxcdTEwMmNdXCIsbmV4dFdlZWs6XCJkZGRkIExUIFtcXHUxMDE5XFx1MTAzZVxcdTEwMmNdXCIsbGFzdERheTpcIltcXHUxMDE5XFx1MTAxNFxcdTEwMzEuXFx1MTAwMF0gTFQgW1xcdTEwMTlcXHUxMDNlXFx1MTAyY11cIixsYXN0V2VlazpcIltcXHUxMDE1XFx1MTAzY1xcdTEwMmVcXHUxMDM4XFx1MTAwMVxcdTEwMzJcXHUxMDM3XFx1MTAxZVxcdTEwMzFcXHUxMDJjXSBkZGRkIExUIFtcXHUxMDE5XFx1MTAzZVxcdTEwMmNdXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiXFx1MTAxY1xcdTEwMmNcXHUxMDE5XFx1MTAwYVxcdTEwM2FcXHUxMDM3ICVzIFxcdTEwMTlcXHUxMDNlXFx1MTAyY1wiLHBhc3Q6XCJcXHUxMDFjXFx1MTAzZFxcdTEwMTRcXHUxMDNhXFx1MTAwMVxcdTEwMzJcXHUxMDM3XFx1MTAxZVxcdTEwMzFcXHUxMDJjICVzIFxcdTEwMDBcIixzOlwiXFx1MTAwNVxcdTEwMDBcXHUxMDM5XFx1MTAwMFxcdTEwMTRcXHUxMDNhLlxcdTEwMjFcXHUxMDE0XFx1MTAwYVxcdTEwM2FcXHUxMDM4XFx1MTAwNFxcdTEwMWFcXHUxMDNhXCIsc3M6XCIlZCBcXHUxMDA1XFx1MTAwMFxcdTEwMzlcXHUxMDAwXFx1MTAxNFxcdTEwMzdcXHUxMDNhXCIsbTpcIlxcdTEwMTBcXHUxMDA1XFx1MTAzYVxcdTEwMTlcXHUxMDJkXFx1MTAxNFxcdTEwMDVcXHUxMDNhXCIsbW06XCIlZCBcXHUxMDE5XFx1MTAyZFxcdTEwMTRcXHUxMDA1XFx1MTAzYVwiLGg6XCJcXHUxMDEwXFx1MTAwNVxcdTEwM2FcXHUxMDE0XFx1MTAyY1xcdTEwMWJcXHUxMDJlXCIsaGg6XCIlZCBcXHUxMDE0XFx1MTAyY1xcdTEwMWJcXHUxMDJlXCIsZDpcIlxcdTEwMTBcXHUxMDA1XFx1MTAzYVxcdTEwMWJcXHUxMDAwXFx1MTAzYVwiLGRkOlwiJWQgXFx1MTAxYlxcdTEwMDBcXHUxMDNhXCIsTTpcIlxcdTEwMTBcXHUxMDA1XFx1MTAzYVxcdTEwMWNcIixNTTpcIiVkIFxcdTEwMWNcIix5OlwiXFx1MTAxMFxcdTEwMDVcXHUxMDNhXFx1MTAxNFxcdTEwM2VcXHUxMDA1XFx1MTAzYVwiLHl5OlwiJWQgXFx1MTAxNFxcdTEwM2VcXHUxMDA1XFx1MTAzYVwifSxwcmVwYXJzZTpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9bXFx1MTA0MVxcdTEwNDJcXHUxMDQzXFx1MTA0NFxcdTEwNDVcXHUxMDQ2XFx1MTA0N1xcdTEwNDhcXHUxMDQ5XFx1MTA0MF0vZyxmdW5jdGlvbihlKXtyZXR1cm4gSGVbZV19KX0scG9zdGZvcm1hdDpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9cXGQvZyxmdW5jdGlvbihlKXtyZXR1cm4gZ2VbZV19KX0sd2Vlazp7ZG93OjEsZG95OjR9fSksZS5kZWZpbmVMb2NhbGUoXCJuYlwiLHttb250aHM6XCJqYW51YXJfZmVicnVhcl9tYXJzX2FwcmlsX21haV9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2Rlc2VtYmVyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiamFuLl9mZWIuX21hcnNfYXByaWxfbWFpX2p1bmlfanVsaV9hdWcuX3NlcC5fb2t0Ll9ub3YuX2Rlcy5cIi5zcGxpdChcIl9cIiksbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czpcInNcXHhmOG5kYWdfbWFuZGFnX3RpcnNkYWdfb25zZGFnX3RvcnNkYWdfZnJlZGFnX2xcXHhmOHJkYWdcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcInNcXHhmOC5fbWEuX3RpLl9vbi5fdG8uX2ZyLl9sXFx4ZjguXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwic1xceGY4X21hX3RpX29uX3RvX2ZyX2xcXHhmOFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJELiBNTU1NIFlZWVlcIixMTEw6XCJELiBNTU1NIFlZWVkgW2tsLl0gSEg6bW1cIixMTExMOlwiZGRkZCBELiBNTU1NIFlZWVkgW2tsLl0gSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbaSBkYWcga2wuXSBMVFwiLG5leHREYXk6XCJbaSBtb3JnZW4ga2wuXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBba2wuXSBMVFwiLGxhc3REYXk6XCJbaSBnXFx4ZTVyIGtsLl0gTFRcIixsYXN0V2VlazpcIltmb3JyaWdlXSBkZGRkIFtrbC5dIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwib20gJXNcIixwYXN0OlwiJXMgc2lkZW5cIixzOlwibm9lbiBzZWt1bmRlclwiLHNzOlwiJWQgc2VrdW5kZXJcIixtOlwiZXR0IG1pbnV0dFwiLG1tOlwiJWQgbWludXR0ZXJcIixoOlwiZW4gdGltZVwiLGhoOlwiJWQgdGltZXJcIixkOlwiZW4gZGFnXCIsZGQ6XCIlZCBkYWdlclwiLE06XCJlbiBtXFx4ZTVuZWRcIixNTTpcIiVkIG1cXHhlNW5lZGVyXCIseTpcImV0dCBcXHhlNXJcIix5eTpcIiVkIFxceGU1clwifSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLGRveTo0fX0pO3ZhciBiZT17MTpcIlxcdTA5NjdcIiwyOlwiXFx1MDk2OFwiLDM6XCJcXHUwOTY5XCIsNDpcIlxcdTA5NmFcIiw1OlwiXFx1MDk2YlwiLDY6XCJcXHUwOTZjXCIsNzpcIlxcdTA5NmRcIiw4OlwiXFx1MDk2ZVwiLDk6XCJcXHUwOTZmXCIsMDpcIlxcdTA5NjZcIn0sU2U9e1wiXFx1MDk2N1wiOlwiMVwiLFwiXFx1MDk2OFwiOlwiMlwiLFwiXFx1MDk2OVwiOlwiM1wiLFwiXFx1MDk2YVwiOlwiNFwiLFwiXFx1MDk2YlwiOlwiNVwiLFwiXFx1MDk2Y1wiOlwiNlwiLFwiXFx1MDk2ZFwiOlwiN1wiLFwiXFx1MDk2ZVwiOlwiOFwiLFwiXFx1MDk2ZlwiOlwiOVwiLFwiXFx1MDk2NlwiOlwiMFwifTtlLmRlZmluZUxvY2FsZShcIm5lXCIse21vbnRoczpcIlxcdTA5MWNcXHUwOTI4XFx1MDkzNVxcdTA5MzBcXHUwOTQwX1xcdTA5MmJcXHUwOTQ3XFx1MDkyY1xcdTA5NGRcXHUwOTMwXFx1MDk0MVxcdTA5MzVcXHUwOTMwXFx1MDk0MF9cXHUwOTJlXFx1MDkzZVxcdTA5MzBcXHUwOTRkXFx1MDkxYV9cXHUwOTA1XFx1MDkyYVxcdTA5NGRcXHUwOTMwXFx1MDkzZlxcdTA5MzJfXFx1MDkyZVxcdTA5MDhfXFx1MDkxY1xcdTA5NDFcXHUwOTI4X1xcdTA5MWNcXHUwOTQxXFx1MDkzMlxcdTA5M2VcXHUwOTA4X1xcdTA5MDVcXHUwOTE3XFx1MDkzN1xcdTA5NGRcXHUwOTFmX1xcdTA5MzhcXHUwOTQ3XFx1MDkyYVxcdTA5NGRcXHUwOTFmXFx1MDk0N1xcdTA5MmVcXHUwOTRkXFx1MDkyY1xcdTA5MzBfXFx1MDkwNVxcdTA5MTVcXHUwOTRkXFx1MDkxZlxcdTA5NGJcXHUwOTJjXFx1MDkzMF9cXHUwOTI4XFx1MDk0YlxcdTA5MmRcXHUwOTQ3XFx1MDkyZVxcdTA5NGRcXHUwOTJjXFx1MDkzMF9cXHUwOTIxXFx1MDkzZlxcdTA5MzhcXHUwOTQ3XFx1MDkyZVxcdTA5NGRcXHUwOTJjXFx1MDkzMFwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIlxcdTA5MWNcXHUwOTI4Ll9cXHUwOTJiXFx1MDk0N1xcdTA5MmNcXHUwOTRkXFx1MDkzMFxcdTA5NDEuX1xcdTA5MmVcXHUwOTNlXFx1MDkzMFxcdTA5NGRcXHUwOTFhX1xcdTA5MDVcXHUwOTJhXFx1MDk0ZFxcdTA5MzBcXHUwOTNmLl9cXHUwOTJlXFx1MDkwOF9cXHUwOTFjXFx1MDk0MVxcdTA5MjhfXFx1MDkxY1xcdTA5NDFcXHUwOTMyXFx1MDkzZVxcdTA5MDguX1xcdTA5MDVcXHUwOTE3Ll9cXHUwOTM4XFx1MDk0N1xcdTA5MmFcXHUwOTRkXFx1MDkxZi5fXFx1MDkwNVxcdTA5MTVcXHUwOTRkXFx1MDkxZlxcdTA5NGIuX1xcdTA5MjhcXHUwOTRiXFx1MDkyZFxcdTA5NDcuX1xcdTA5MjFcXHUwOTNmXFx1MDkzOFxcdTA5NDcuXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1BhcnNlRXhhY3Q6ITAsd2Vla2RheXM6XCJcXHUwOTA2XFx1MDkwN1xcdTA5MjRcXHUwOTJjXFx1MDkzZVxcdTA5MzBfXFx1MDkzOFxcdTA5NGJcXHUwOTJlXFx1MDkyY1xcdTA5M2VcXHUwOTMwX1xcdTA5MmVcXHUwOTE5XFx1MDk0ZFxcdTA5MTdcXHUwOTMyXFx1MDkyY1xcdTA5M2VcXHUwOTMwX1xcdTA5MmNcXHUwOTQxXFx1MDkyN1xcdTA5MmNcXHUwOTNlXFx1MDkzMF9cXHUwOTJjXFx1MDkzZlxcdTA5MzlcXHUwOTNmXFx1MDkyY1xcdTA5M2VcXHUwOTMwX1xcdTA5MzZcXHUwOTQxXFx1MDkxNVxcdTA5NGRcXHUwOTMwXFx1MDkyY1xcdTA5M2VcXHUwOTMwX1xcdTA5MzZcXHUwOTI4XFx1MDkzZlxcdTA5MmNcXHUwOTNlXFx1MDkzMFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiXFx1MDkwNlxcdTA5MDdcXHUwOTI0Ll9cXHUwOTM4XFx1MDk0YlxcdTA5MmUuX1xcdTA5MmVcXHUwOTE5XFx1MDk0ZFxcdTA5MTdcXHUwOTMyLl9cXHUwOTJjXFx1MDk0MVxcdTA5MjcuX1xcdTA5MmNcXHUwOTNmXFx1MDkzOVxcdTA5M2YuX1xcdTA5MzZcXHUwOTQxXFx1MDkxNVxcdTA5NGRcXHUwOTMwLl9cXHUwOTM2XFx1MDkyOFxcdTA5M2YuXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiXFx1MDkwNi5fXFx1MDkzOFxcdTA5NGIuX1xcdTA5MmVcXHUwOTAyLl9cXHUwOTJjXFx1MDk0MS5fXFx1MDkyY1xcdTA5M2YuX1xcdTA5MzZcXHUwOTQxLl9cXHUwOTM2LlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiQVxcdTA5MTVcXHUwOTRiIGg6bW0gXFx1MDkyY1xcdTA5MWNcXHUwOTQ3XCIsTFRTOlwiQVxcdTA5MTVcXHUwOTRiIGg6bW06c3MgXFx1MDkyY1xcdTA5MWNcXHUwOTQ3XCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVksIEFcXHUwOTE1XFx1MDk0YiBoOm1tIFxcdTA5MmNcXHUwOTFjXFx1MDk0N1wiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSwgQVxcdTA5MTVcXHUwOTRiIGg6bW0gXFx1MDkyY1xcdTA5MWNcXHUwOTQ3XCJ9LHByZXBhcnNlOmZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoL1tcXHUwOTY3XFx1MDk2OFxcdTA5NjlcXHUwOTZhXFx1MDk2YlxcdTA5NmNcXHUwOTZkXFx1MDk2ZVxcdTA5NmZcXHUwOTY2XS9nLGZ1bmN0aW9uKGUpe3JldHVybiBTZVtlXX0pfSxwb3N0Zm9ybWF0OmZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoL1xcZC9nLGZ1bmN0aW9uKGUpe3JldHVybiBiZVtlXX0pfSxtZXJpZGllbVBhcnNlOi9cXHUwOTMwXFx1MDkzZVxcdTA5MjRcXHUwOTNmfFxcdTA5MmNcXHUwOTNmXFx1MDkzOVxcdTA5M2VcXHUwOTI4fFxcdTA5MjZcXHUwOTNmXFx1MDkwOVxcdTA5MDFcXHUwOTM4XFx1MDk0YnxcXHUwOTM4XFx1MDkzZVxcdTA5MDFcXHUwOTFkLyxtZXJpZGllbUhvdXI6ZnVuY3Rpb24oZSxhKXtyZXR1cm4gMTI9PT1lJiYoZT0wKSxcIlxcdTA5MzBcXHUwOTNlXFx1MDkyNFxcdTA5M2ZcIj09PWE/ZTw0P2U6ZSsxMjpcIlxcdTA5MmNcXHUwOTNmXFx1MDkzOVxcdTA5M2VcXHUwOTI4XCI9PT1hP2U6XCJcXHUwOTI2XFx1MDkzZlxcdTA5MDlcXHUwOTAxXFx1MDkzOFxcdTA5NGJcIj09PWE/ZT49MTA/ZTplKzEyOlwiXFx1MDkzOFxcdTA5M2VcXHUwOTAxXFx1MDkxZFwiPT09YT9lKzEyOnZvaWQgMH0sbWVyaWRpZW06ZnVuY3Rpb24oZSxhLF8pe3JldHVybiBlPDM/XCJcXHUwOTMwXFx1MDkzZVxcdTA5MjRcXHUwOTNmXCI6ZTwxMj9cIlxcdTA5MmNcXHUwOTNmXFx1MDkzOVxcdTA5M2VcXHUwOTI4XCI6ZTwxNj9cIlxcdTA5MjZcXHUwOTNmXFx1MDkwOVxcdTA5MDFcXHUwOTM4XFx1MDk0YlwiOmU8MjA/XCJcXHUwOTM4XFx1MDkzZVxcdTA5MDFcXHUwOTFkXCI6XCJcXHUwOTMwXFx1MDkzZVxcdTA5MjRcXHUwOTNmXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTA5MDZcXHUwOTFjXSBMVFwiLG5leHREYXk6XCJbXFx1MDkyZFxcdTA5NGJcXHUwOTMyXFx1MDkzZl0gTFRcIixuZXh0V2VlazpcIltcXHUwOTA2XFx1MDkwOVxcdTA5MDFcXHUwOTI2XFx1MDk0Yl0gZGRkZFssXSBMVFwiLGxhc3REYXk6XCJbXFx1MDkzOVxcdTA5M2ZcXHUwOTFjXFx1MDk0Yl0gTFRcIixsYXN0V2VlazpcIltcXHUwOTE3XFx1MDkwZlxcdTA5MTVcXHUwOTRiXSBkZGRkWyxdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiJXNcXHUwOTJlXFx1MDkzZVwiLHBhc3Q6XCIlcyBcXHUwOTA1XFx1MDkxN1xcdTA5M2VcXHUwOTIxXFx1MDkzZlwiLHM6XCJcXHUwOTE1XFx1MDk0N1xcdTA5MzlcXHUwOTQwIFxcdTA5MTVcXHUwOTRkXFx1MDkzN1xcdTA5MjNcIixzczpcIiVkIFxcdTA5MzhcXHUwOTQ3XFx1MDkxNVxcdTA5NDdcXHUwOTIzXFx1MDk0ZFxcdTA5MjFcIixtOlwiXFx1MDkwZlxcdTA5MTUgXFx1MDkyZVxcdTA5M2ZcXHUwOTI4XFx1MDk0N1xcdTA5MWZcIixtbTpcIiVkIFxcdTA5MmVcXHUwOTNmXFx1MDkyOFxcdTA5NDdcXHUwOTFmXCIsaDpcIlxcdTA5MGZcXHUwOTE1IFxcdTA5MThcXHUwOTIzXFx1MDk0ZFxcdTA5MWZcXHUwOTNlXCIsaGg6XCIlZCBcXHUwOTE4XFx1MDkyM1xcdTA5NGRcXHUwOTFmXFx1MDkzZVwiLGQ6XCJcXHUwOTBmXFx1MDkxNSBcXHUwOTI2XFx1MDkzZlxcdTA5MjhcIixkZDpcIiVkIFxcdTA5MjZcXHUwOTNmXFx1MDkyOFwiLE06XCJcXHUwOTBmXFx1MDkxNSBcXHUwOTJlXFx1MDkzOVxcdTA5M2ZcXHUwOTI4XFx1MDkzZVwiLE1NOlwiJWQgXFx1MDkyZVxcdTA5MzlcXHUwOTNmXFx1MDkyOFxcdTA5M2VcIix5OlwiXFx1MDkwZlxcdTA5MTUgXFx1MDkyY1xcdTA5MzBcXHUwOTRkXFx1MDkzN1wiLHl5OlwiJWQgXFx1MDkyY1xcdTA5MzBcXHUwOTRkXFx1MDkzN1wifSx3ZWVrOntkb3c6MCxkb3k6Nn19KTt2YXIgdmU9XCJqYW4uX2ZlYi5fbXJ0Ll9hcHIuX21laV9qdW4uX2p1bC5fYXVnLl9zZXAuX29rdC5fbm92Ll9kZWMuXCIuc3BsaXQoXCJfXCIpLGplPVwiamFuX2ZlYl9tcnRfYXByX21laV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZWNcIi5zcGxpdChcIl9cIikseGU9Wy9eamFuL2ksL15mZWIvaSwvXm1hYXJ0fG1ydC4/JC9pLC9eYXByL2ksL15tZWkkL2ksL15qdW5baS5dPyQvaSwvXmp1bFtpLl0/JC9pLC9eYXVnL2ksL15zZXAvaSwvXm9rdC9pLC9ebm92L2ksL15kZWMvaV0sUGU9L14oamFudWFyaXxmZWJydWFyaXxtYWFydHxhcHJpbHxtZWl8YXByaWx8anVbbmxdaXxhdWd1c3R1c3xzZXB0ZW1iZXJ8b2t0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcnxqYW5cXC4/fGZlYlxcLj98bXJ0XFwuP3xhcHJcXC4/fGp1W25sXVxcLj98YXVnXFwuP3xzZXBcXC4/fG9rdFxcLj98bm92XFwuP3xkZWNcXC4/KS9pO2UuZGVmaW5lTG9jYWxlKFwibmwtYmVcIix7bW9udGhzOlwiamFudWFyaV9mZWJydWFyaV9tYWFydF9hcHJpbF9tZWlfanVuaV9qdWxpX2F1Z3VzdHVzX3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OmZ1bmN0aW9uKGUsYSl7cmV0dXJuIGU/Ly1NTU0tLy50ZXN0KGEpP2plW2UubW9udGgoKV06dmVbZS5tb250aCgpXTp2ZX0sbW9udGhzUmVnZXg6UGUsbW9udGhzU2hvcnRSZWdleDpQZSxtb250aHNTdHJpY3RSZWdleDovXihqYW51YXJpfGZlYnJ1YXJpfG1hYXJ0fG1laXxqdVtubF1pfGFwcmlsfGF1Z3VzdHVzfHNlcHRlbWJlcnxva3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pLG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6L14oamFuXFwuP3xmZWJcXC4/fG1ydFxcLj98YXByXFwuP3xtZWl8anVbbmxdXFwuP3xhdWdcXC4/fHNlcFxcLj98b2t0XFwuP3xub3ZcXC4/fGRlY1xcLj8pL2ksbW9udGhzUGFyc2U6eGUsbG9uZ01vbnRoc1BhcnNlOnhlLHNob3J0TW9udGhzUGFyc2U6eGUsd2Vla2RheXM6XCJ6b25kYWdfbWFhbmRhZ19kaW5zZGFnX3dvZW5zZGFnX2RvbmRlcmRhZ192cmlqZGFnX3phdGVyZGFnXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJ6by5fbWEuX2RpLl93by5fZG8uX3ZyLl96YS5cIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJ6b19tYV9kaV93b19kb192cl96YVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQgRCBNTU1NIFlZWVkgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbdmFuZGFhZyBvbV0gTFRcIixuZXh0RGF5OlwiW21vcmdlbiBvbV0gTFRcIixuZXh0V2VlazpcImRkZGQgW29tXSBMVFwiLGxhc3REYXk6XCJbZ2lzdGVyZW4gb21dIExUXCIsbGFzdFdlZWs6XCJbYWZnZWxvcGVuXSBkZGRkIFtvbV0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJvdmVyICVzXCIscGFzdDpcIiVzIGdlbGVkZW5cIixzOlwiZWVuIHBhYXIgc2Vjb25kZW5cIixzczpcIiVkIHNlY29uZGVuXCIsbTpcIlxceGU5XFx4ZTluIG1pbnV1dFwiLG1tOlwiJWQgbWludXRlblwiLGg6XCJcXHhlOVxceGU5biB1dXJcIixoaDpcIiVkIHV1clwiLGQ6XCJcXHhlOVxceGU5biBkYWdcIixkZDpcIiVkIGRhZ2VuXCIsTTpcIlxceGU5XFx4ZTluIG1hYW5kXCIsTU06XCIlZCBtYWFuZGVuXCIseTpcIlxceGU5XFx4ZTluIGphYXJcIix5eTpcIiVkIGphYXJcIn0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn0oc3RlfGRlKS8sb3JkaW5hbDpmdW5jdGlvbihlKXtyZXR1cm4gZSsoMT09PWV8fDg9PT1lfHxlPj0yMD9cInN0ZVwiOlwiZGVcIil9LHdlZWs6e2RvdzoxLGRveTo0fX0pO3ZhciBXZT1cImphbi5fZmViLl9tcnQuX2Fwci5fbWVpX2p1bi5fanVsLl9hdWcuX3NlcC5fb2t0Ll9ub3YuX2RlYy5cIi5zcGxpdChcIl9cIiksQWU9XCJqYW5fZmViX21ydF9hcHJfbWVpX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2RlY1wiLnNwbGl0KFwiX1wiKSxFZT1bL15qYW4vaSwvXmZlYi9pLC9ebWFhcnR8bXJ0Lj8kL2ksL15hcHIvaSwvXm1laSQvaSwvXmp1bltpLl0/JC9pLC9eanVsW2kuXT8kL2ksL15hdWcvaSwvXnNlcC9pLC9eb2t0L2ksL15ub3YvaSwvXmRlYy9pXSxPZT0vXihqYW51YXJpfGZlYnJ1YXJpfG1hYXJ0fGFwcmlsfG1laXxhcHJpbHxqdVtubF1pfGF1Z3VzdHVzfHNlcHRlbWJlcnxva3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyfGphblxcLj98ZmViXFwuP3xtcnRcXC4/fGFwclxcLj98anVbbmxdXFwuP3xhdWdcXC4/fHNlcFxcLj98b2t0XFwuP3xub3ZcXC4/fGRlY1xcLj8pL2k7ZS5kZWZpbmVMb2NhbGUoXCJubFwiLHttb250aHM6XCJqYW51YXJpX2ZlYnJ1YXJpX21hYXJ0X2FwcmlsX21laV9qdW5pX2p1bGlfYXVndXN0dXNfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVjZW1iZXJcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6ZnVuY3Rpb24oZSxhKXtyZXR1cm4gZT8vLU1NTS0vLnRlc3QoYSk/QWVbZS5tb250aCgpXTpXZVtlLm1vbnRoKCldOldlfSxtb250aHNSZWdleDpPZSxtb250aHNTaG9ydFJlZ2V4Ok9lLG1vbnRoc1N0cmljdFJlZ2V4Oi9eKGphbnVhcml8ZmVicnVhcml8bWFhcnR8bWVpfGp1W25sXWl8YXByaWx8YXVndXN0dXN8c2VwdGVtYmVyfG9rdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXIpL2ksbW9udGhzU2hvcnRTdHJpY3RSZWdleDovXihqYW5cXC4/fGZlYlxcLj98bXJ0XFwuP3xhcHJcXC4/fG1laXxqdVtubF1cXC4/fGF1Z1xcLj98c2VwXFwuP3xva3RcXC4/fG5vdlxcLj98ZGVjXFwuPykvaSxtb250aHNQYXJzZTpFZSxsb25nTW9udGhzUGFyc2U6RWUsc2hvcnRNb250aHNQYXJzZTpFZSx3ZWVrZGF5czpcInpvbmRhZ19tYWFuZGFnX2RpbnNkYWdfd29lbnNkYWdfZG9uZGVyZGFnX3ZyaWpkYWdfemF0ZXJkYWdcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcInpvLl9tYS5fZGkuX3dvLl9kby5fdnIuX3phLlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcInpvX21hX2RpX3dvX2RvX3ZyX3phXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkRELU1NLVlZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCBEIE1NTU0gWVlZWSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIlt2YW5kYWFnIG9tXSBMVFwiLG5leHREYXk6XCJbbW9yZ2VuIG9tXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbb21dIExUXCIsbGFzdERheTpcIltnaXN0ZXJlbiBvbV0gTFRcIixsYXN0V2VlazpcIlthZmdlbG9wZW5dIGRkZGQgW29tXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIm92ZXIgJXNcIixwYXN0OlwiJXMgZ2VsZWRlblwiLHM6XCJlZW4gcGFhciBzZWNvbmRlblwiLHNzOlwiJWQgc2Vjb25kZW5cIixtOlwiXFx4ZTlcXHhlOW4gbWludXV0XCIsbW06XCIlZCBtaW51dGVuXCIsaDpcIlxceGU5XFx4ZTluIHV1clwiLGhoOlwiJWQgdXVyXCIsZDpcIlxceGU5XFx4ZTluIGRhZ1wiLGRkOlwiJWQgZGFnZW5cIixNOlwiXFx4ZTlcXHhlOW4gbWFhbmRcIixNTTpcIiVkIG1hYW5kZW5cIix5OlwiXFx4ZTlcXHhlOW4gamFhclwiLHl5OlwiJWQgamFhclwifSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfShzdGV8ZGUpLyxvcmRpbmFsOmZ1bmN0aW9uKGUpe3JldHVybiBlKygxPT09ZXx8OD09PWV8fGU+PTIwP1wic3RlXCI6XCJkZVwiKX0sd2Vlazp7ZG93OjEsZG95OjR9fSksZS5kZWZpbmVMb2NhbGUoXCJublwiLHttb250aHM6XCJqYW51YXJfZmVicnVhcl9tYXJzX2FwcmlsX21haV9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2Rlc2VtYmVyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiamFuX2ZlYl9tYXJfYXByX21haV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZXNcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJzdW5kYWdfbVxceGU1bmRhZ190eXNkYWdfb25zZGFnX3RvcnNkYWdfZnJlZGFnX2xhdXJkYWdcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcInN1bl9tXFx4ZTVuX3R5c19vbnNfdG9yX2ZyZV9sYXVcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJzdV9tXFx4ZTVfdHlfb25fdG9fZnJfbFxceGY4XCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQuTU0uWVlZWVwiLExMOlwiRC4gTU1NTSBZWVlZXCIsTExMOlwiRC4gTU1NTSBZWVlZIFtrbC5dIEg6bW1cIixMTExMOlwiZGRkZCBELiBNTU1NIFlZWVkgW2tsLl0gSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbSSBkYWcga2xva2thXSBMVFwiLG5leHREYXk6XCJbSSBtb3Jnb24ga2xva2thXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBba2xva2thXSBMVFwiLGxhc3REYXk6XCJbSSBnXFx4ZTVyIGtsb2trYV0gTFRcIixsYXN0V2VlazpcIltGXFx4ZjhyZWdcXHhlNWFuZGVdIGRkZGQgW2tsb2trYV0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJvbSAlc1wiLHBhc3Q6XCIlcyBzaWRhblwiLHM6XCJub2tyZSBzZWt1bmRcIixzczpcIiVkIHNla3VuZFwiLG06XCJlaXQgbWludXR0XCIsbW06XCIlZCBtaW51dHRcIixoOlwiZWluIHRpbWVcIixoaDpcIiVkIHRpbWFyXCIsZDpcImVpbiBkYWdcIixkZDpcIiVkIGRhZ2FyXCIsTTpcImVpbiBtXFx4ZTVuYWRcIixNTTpcIiVkIG1cXHhlNW5hZGVyXCIseTpcImVpdCBcXHhlNXJcIix5eTpcIiVkIFxceGU1clwifSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLGRveTo0fX0pO3ZhciBGZT17MTpcIlxcdTBhNjdcIiwyOlwiXFx1MGE2OFwiLDM6XCJcXHUwYTY5XCIsNDpcIlxcdTBhNmFcIiw1OlwiXFx1MGE2YlwiLDY6XCJcXHUwYTZjXCIsNzpcIlxcdTBhNmRcIiw4OlwiXFx1MGE2ZVwiLDk6XCJcXHUwYTZmXCIsMDpcIlxcdTBhNjZcIn0semU9e1wiXFx1MGE2N1wiOlwiMVwiLFwiXFx1MGE2OFwiOlwiMlwiLFwiXFx1MGE2OVwiOlwiM1wiLFwiXFx1MGE2YVwiOlwiNFwiLFwiXFx1MGE2YlwiOlwiNVwiLFwiXFx1MGE2Y1wiOlwiNlwiLFwiXFx1MGE2ZFwiOlwiN1wiLFwiXFx1MGE2ZVwiOlwiOFwiLFwiXFx1MGE2ZlwiOlwiOVwiLFwiXFx1MGE2NlwiOlwiMFwifTtlLmRlZmluZUxvY2FsZShcInBhLWluXCIse21vbnRoczpcIlxcdTBhMWNcXHUwYTI4XFx1MGEzNVxcdTBhMzBcXHUwYTQwX1xcdTBhMmJcXHUwYTNjXFx1MGEzMFxcdTBhMzVcXHUwYTMwXFx1MGE0MF9cXHUwYTJlXFx1MGEzZVxcdTBhMzBcXHUwYTFhX1xcdTBhMDVcXHUwYTJhXFx1MGE0ZFxcdTBhMzBcXHUwYTQ4XFx1MGEzMl9cXHUwYTJlXFx1MGEwOF9cXHUwYTFjXFx1MGE0MlxcdTBhMjhfXFx1MGExY1xcdTBhNDFcXHUwYTMyXFx1MGEzZVxcdTBhMDhfXFx1MGEwNVxcdTBhMTdcXHUwYTM4XFx1MGEyNF9cXHUwYTM4XFx1MGEyNFxcdTBhNzBcXHUwYTJjXFx1MGEzMF9cXHUwYTA1XFx1MGExNVxcdTBhMjRcXHUwYTQyXFx1MGEyY1xcdTBhMzBfXFx1MGEyOFxcdTBhMzVcXHUwYTcwXFx1MGEyY1xcdTBhMzBfXFx1MGEyNlxcdTBhMzhcXHUwYTcwXFx1MGEyY1xcdTBhMzBcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJcXHUwYTFjXFx1MGEyOFxcdTBhMzVcXHUwYTMwXFx1MGE0MF9cXHUwYTJiXFx1MGEzY1xcdTBhMzBcXHUwYTM1XFx1MGEzMFxcdTBhNDBfXFx1MGEyZVxcdTBhM2VcXHUwYTMwXFx1MGExYV9cXHUwYTA1XFx1MGEyYVxcdTBhNGRcXHUwYTMwXFx1MGE0OFxcdTBhMzJfXFx1MGEyZVxcdTBhMDhfXFx1MGExY1xcdTBhNDJcXHUwYTI4X1xcdTBhMWNcXHUwYTQxXFx1MGEzMlxcdTBhM2VcXHUwYTA4X1xcdTBhMDVcXHUwYTE3XFx1MGEzOFxcdTBhMjRfXFx1MGEzOFxcdTBhMjRcXHUwYTcwXFx1MGEyY1xcdTBhMzBfXFx1MGEwNVxcdTBhMTVcXHUwYTI0XFx1MGE0MlxcdTBhMmNcXHUwYTMwX1xcdTBhMjhcXHUwYTM1XFx1MGE3MFxcdTBhMmNcXHUwYTMwX1xcdTBhMjZcXHUwYTM4XFx1MGE3MFxcdTBhMmNcXHUwYTMwXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiXFx1MGExMFxcdTBhMjRcXHUwYTM1XFx1MGEzZVxcdTBhMzBfXFx1MGEzOFxcdTBhNGJcXHUwYTJlXFx1MGEzNVxcdTBhM2VcXHUwYTMwX1xcdTBhMmVcXHUwYTcwXFx1MGExN1xcdTBhMzJcXHUwYTM1XFx1MGEzZVxcdTBhMzBfXFx1MGEyY1xcdTBhNDFcXHUwYTI3XFx1MGEzNVxcdTBhM2VcXHUwYTMwX1xcdTBhMzVcXHUwYTQwXFx1MGEzMFxcdTBhMzVcXHUwYTNlXFx1MGEzMF9cXHUwYTM4XFx1MGEzY1xcdTBhNDFcXHUwYTcxXFx1MGExNVxcdTBhMzBcXHUwYTM1XFx1MGEzZVxcdTBhMzBfXFx1MGEzOFxcdTBhM2NcXHUwYTI4XFx1MGE0MFxcdTBhMWFcXHUwYTMwXFx1MGEzNVxcdTBhM2VcXHUwYTMwXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJcXHUwYTEwXFx1MGEyNF9cXHUwYTM4XFx1MGE0YlxcdTBhMmVfXFx1MGEyZVxcdTBhNzBcXHUwYTE3XFx1MGEzMl9cXHUwYTJjXFx1MGE0MVxcdTBhMjdfXFx1MGEzNVxcdTBhNDBcXHUwYTMwX1xcdTBhMzhcXHUwYTNjXFx1MGE0MVxcdTBhMTVcXHUwYTMwX1xcdTBhMzhcXHUwYTNjXFx1MGEyOFxcdTBhNDBcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJcXHUwYTEwXFx1MGEyNF9cXHUwYTM4XFx1MGE0YlxcdTBhMmVfXFx1MGEyZVxcdTBhNzBcXHUwYTE3XFx1MGEzMl9cXHUwYTJjXFx1MGE0MVxcdTBhMjdfXFx1MGEzNVxcdTBhNDBcXHUwYTMwX1xcdTBhMzhcXHUwYTNjXFx1MGE0MVxcdTBhMTVcXHUwYTMwX1xcdTBhMzhcXHUwYTNjXFx1MGEyOFxcdTBhNDBcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiQSBoOm1tIFxcdTBhMzVcXHUwYTFjXFx1MGE0N1wiLExUUzpcIkEgaDptbTpzcyBcXHUwYTM1XFx1MGExY1xcdTBhNDdcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSwgQSBoOm1tIFxcdTBhMzVcXHUwYTFjXFx1MGE0N1wiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIFxcdTBhMzVcXHUwYTFjXFx1MGE0N1wifSxjYWxlbmRhcjp7c2FtZURheTpcIltcXHUwYTA1XFx1MGExY10gTFRcIixuZXh0RGF5OlwiW1xcdTBhMTVcXHUwYTMyXSBMVFwiLG5leHRXZWVrOlwiZGRkZCwgTFRcIixsYXN0RGF5OlwiW1xcdTBhMTVcXHUwYTMyXSBMVFwiLGxhc3RXZWVrOlwiW1xcdTBhMmFcXHUwYTNmXFx1MGExYlxcdTBhMzJcXHUwYTQ3XSBkZGRkLCBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIiVzIFxcdTBhMzVcXHUwYTNmXFx1MGE3MVxcdTBhMWFcIixwYXN0OlwiJXMgXFx1MGEyYVxcdTBhM2ZcXHUwYTFiXFx1MGEzMlxcdTBhNDdcIixzOlwiXFx1MGExNVxcdTBhNDFcXHUwYTFkIFxcdTBhMzhcXHUwYTE1XFx1MGEzZlxcdTBhNzBcXHUwYTFmXCIsc3M6XCIlZCBcXHUwYTM4XFx1MGExNVxcdTBhM2ZcXHUwYTcwXFx1MGExZlwiLG06XCJcXHUwYTA3XFx1MGExNSBcXHUwYTJlXFx1MGEzZlxcdTBhNzBcXHUwYTFmXCIsbW06XCIlZCBcXHUwYTJlXFx1MGEzZlxcdTBhNzBcXHUwYTFmXCIsaDpcIlxcdTBhMDdcXHUwYTcxXFx1MGExNSBcXHUwYTE4XFx1MGE3MFxcdTBhMWZcXHUwYTNlXCIsaGg6XCIlZCBcXHUwYTE4XFx1MGE3MFxcdTBhMWZcXHUwYTQ3XCIsZDpcIlxcdTBhMDdcXHUwYTcxXFx1MGExNSBcXHUwYTI2XFx1MGEzZlxcdTBhMjhcIixkZDpcIiVkIFxcdTBhMjZcXHUwYTNmXFx1MGEyOFwiLE06XCJcXHUwYTA3XFx1MGE3MVxcdTBhMTUgXFx1MGEyZVxcdTBhMzlcXHUwYTQwXFx1MGEyOFxcdTBhM2VcIixNTTpcIiVkIFxcdTBhMmVcXHUwYTM5XFx1MGE0MFxcdTBhMjhcXHUwYTQ3XCIseTpcIlxcdTBhMDdcXHUwYTcxXFx1MGExNSBcXHUwYTM4XFx1MGEzZVxcdTBhMzJcIix5eTpcIiVkIFxcdTBhMzhcXHUwYTNlXFx1MGEzMlwifSxwcmVwYXJzZTpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9bXFx1MGE2N1xcdTBhNjhcXHUwYTY5XFx1MGE2YVxcdTBhNmJcXHUwYTZjXFx1MGE2ZFxcdTBhNmVcXHUwYTZmXFx1MGE2Nl0vZyxmdW5jdGlvbihlKXtyZXR1cm4gemVbZV19KX0scG9zdGZvcm1hdDpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9cXGQvZyxmdW5jdGlvbihlKXtyZXR1cm4gRmVbZV19KX0sbWVyaWRpZW1QYXJzZTovXFx1MGEzMFxcdTBhM2VcXHUwYTI0fFxcdTBhMzhcXHUwYTM1XFx1MGE0N1xcdTBhMzB8XFx1MGEyNlxcdTBhNDFcXHUwYTJhXFx1MGEzOVxcdTBhM2ZcXHUwYTMwfFxcdTBhMzhcXHUwYTNjXFx1MGEzZVxcdTBhMmUvLG1lcmlkaWVtSG91cjpmdW5jdGlvbihlLGEpe3JldHVybiAxMj09PWUmJihlPTApLFwiXFx1MGEzMFxcdTBhM2VcXHUwYTI0XCI9PT1hP2U8ND9lOmUrMTI6XCJcXHUwYTM4XFx1MGEzNVxcdTBhNDdcXHUwYTMwXCI9PT1hP2U6XCJcXHUwYTI2XFx1MGE0MVxcdTBhMmFcXHUwYTM5XFx1MGEzZlxcdTBhMzBcIj09PWE/ZT49MTA/ZTplKzEyOlwiXFx1MGEzOFxcdTBhM2NcXHUwYTNlXFx1MGEyZVwiPT09YT9lKzEyOnZvaWQgMH0sbWVyaWRpZW06ZnVuY3Rpb24oZSxhLF8pe3JldHVybiBlPDQ/XCJcXHUwYTMwXFx1MGEzZVxcdTBhMjRcIjplPDEwP1wiXFx1MGEzOFxcdTBhMzVcXHUwYTQ3XFx1MGEzMFwiOmU8MTc/XCJcXHUwYTI2XFx1MGE0MVxcdTBhMmFcXHUwYTM5XFx1MGEzZlxcdTBhMzBcIjplPDIwP1wiXFx1MGEzOFxcdTBhM2NcXHUwYTNlXFx1MGEyZVwiOlwiXFx1MGEzMFxcdTBhM2VcXHUwYTI0XCJ9LHdlZWs6e2RvdzowLGRveTo2fX0pO3ZhciBKZT1cInN0eWN6ZVxcdTAxNDRfbHV0eV9tYXJ6ZWNfa3dpZWNpZVxcdTAxNDRfbWFqX2N6ZXJ3aWVjX2xpcGllY19zaWVycGllXFx1MDE0NF93cnplc2llXFx1MDE0NF9wYVxcdTAxN2Fkemllcm5pa19saXN0b3BhZF9ncnVkemllXFx1MDE0NFwiLnNwbGl0KFwiX1wiKSxJZT1cInN0eWN6bmlhX2x1dGVnb19tYXJjYV9rd2lldG5pYV9tYWphX2N6ZXJ3Y2FfbGlwY2Ffc2llcnBuaWFfd3J6ZVxcdTAxNWJuaWFfcGFcXHUwMTdhZHppZXJuaWthX2xpc3RvcGFkYV9ncnVkbmlhXCIuc3BsaXQoXCJfXCIpO2Z1bmN0aW9uIE5lKGUpe3JldHVybiBlJTEwPDUmJmUlMTA+MSYmfn4oZS8xMCklMTAhPTF9ZnVuY3Rpb24gUmUoZSxhLF8pe3ZhciBzPWUrXCIgXCI7c3dpdGNoKF8pe2Nhc2VcInNzXCI6cmV0dXJuIHMrKE5lKGUpP1wic2VrdW5keVwiOlwic2VrdW5kXCIpO2Nhc2VcIm1cIjpyZXR1cm4gYT9cIm1pbnV0YVwiOlwibWludXRcXHUwMTE5XCI7Y2FzZVwibW1cIjpyZXR1cm4gcysoTmUoZSk/XCJtaW51dHlcIjpcIm1pbnV0XCIpO2Nhc2VcImhcIjpyZXR1cm4gYT9cImdvZHppbmFcIjpcImdvZHppblxcdTAxMTlcIjtjYXNlXCJoaFwiOnJldHVybiBzKyhOZShlKT9cImdvZHppbnlcIjpcImdvZHppblwiKTtjYXNlXCJNTVwiOnJldHVybiBzKyhOZShlKT9cIm1pZXNpXFx1MDEwNWNlXCI6XCJtaWVzaVxcdTAxMTljeVwiKTtjYXNlXCJ5eVwiOnJldHVybiBzKyhOZShlKT9cImxhdGFcIjpcImxhdFwiKX19ZnVuY3Rpb24gS2UoZSxhLF8pe3ZhciBzPVwiIFwiO3JldHVybihlJTEwMD49MjB8fGU+PTEwMCYmZSUxMDA9PTApJiYocz1cIiBkZSBcIiksZStzK3tzczpcInNlY3VuZGVcIixtbTpcIm1pbnV0ZVwiLGhoOlwib3JlXCIsZGQ6XCJ6aWxlXCIsTU06XCJsdW5pXCIseXk6XCJhbmlcIn1bX119ZnVuY3Rpb24gQ2UoZSxhLF8pe3ZhciBzLGQ7cmV0dXJuXCJtXCI9PT1fP2E/XCJcXHUwNDNjXFx1MDQzOFxcdTA0M2RcXHUwNDQzXFx1MDQ0MlxcdTA0MzBcIjpcIlxcdTA0M2NcXHUwNDM4XFx1MDQzZFxcdTA0NDNcXHUwNDQyXFx1MDQ0M1wiOmUrXCIgXCIrKHM9K2UsZD17c3M6YT9cIlxcdTA0NDFcXHUwNDM1XFx1MDQzYVxcdTA0NDNcXHUwNDNkXFx1MDQzNFxcdTA0MzBfXFx1MDQ0MVxcdTA0MzVcXHUwNDNhXFx1MDQ0M1xcdTA0M2RcXHUwNDM0XFx1MDQ0Yl9cXHUwNDQxXFx1MDQzNVxcdTA0M2FcXHUwNDQzXFx1MDQzZFxcdTA0MzRcIjpcIlxcdTA0NDFcXHUwNDM1XFx1MDQzYVxcdTA0NDNcXHUwNDNkXFx1MDQzNFxcdTA0NDNfXFx1MDQ0MVxcdTA0MzVcXHUwNDNhXFx1MDQ0M1xcdTA0M2RcXHUwNDM0XFx1MDQ0Yl9cXHUwNDQxXFx1MDQzNVxcdTA0M2FcXHUwNDQzXFx1MDQzZFxcdTA0MzRcIixtbTphP1wiXFx1MDQzY1xcdTA0MzhcXHUwNDNkXFx1MDQ0M1xcdTA0NDJcXHUwNDMwX1xcdTA0M2NcXHUwNDM4XFx1MDQzZFxcdTA0NDNcXHUwNDQyXFx1MDQ0Yl9cXHUwNDNjXFx1MDQzOFxcdTA0M2RcXHUwNDQzXFx1MDQ0MlwiOlwiXFx1MDQzY1xcdTA0MzhcXHUwNDNkXFx1MDQ0M1xcdTA0NDJcXHUwNDQzX1xcdTA0M2NcXHUwNDM4XFx1MDQzZFxcdTA0NDNcXHUwNDQyXFx1MDQ0Yl9cXHUwNDNjXFx1MDQzOFxcdTA0M2RcXHUwNDQzXFx1MDQ0MlwiLGhoOlwiXFx1MDQ0N1xcdTA0MzBcXHUwNDQxX1xcdTA0NDdcXHUwNDMwXFx1MDQ0MVxcdTA0MzBfXFx1MDQ0N1xcdTA0MzBcXHUwNDQxXFx1MDQzZVxcdTA0MzJcIixkZDpcIlxcdTA0MzRcXHUwNDM1XFx1MDQzZFxcdTA0NGNfXFx1MDQzNFxcdTA0M2RcXHUwNDRmX1xcdTA0MzRcXHUwNDNkXFx1MDQzNVxcdTA0MzlcIixNTTpcIlxcdTA0M2NcXHUwNDM1XFx1MDQ0MVxcdTA0NGZcXHUwNDQ2X1xcdTA0M2NcXHUwNDM1XFx1MDQ0MVxcdTA0NGZcXHUwNDQ2XFx1MDQzMF9cXHUwNDNjXFx1MDQzNVxcdTA0NDFcXHUwNDRmXFx1MDQ0NlxcdTA0MzVcXHUwNDMyXCIseXk6XCJcXHUwNDMzXFx1MDQzZVxcdTA0MzRfXFx1MDQzM1xcdTA0M2VcXHUwNDM0XFx1MDQzMF9cXHUwNDNiXFx1MDQzNVxcdTA0NDJcIn1bX10uc3BsaXQoXCJfXCIpLHMlMTA9PTEmJnMlMTAwIT0xMT9kWzBdOnMlMTA+PTImJnMlMTA8PTQmJihzJTEwMDwxMHx8cyUxMDA+PTIwKT9kWzFdOmRbMl0pfWUuZGVmaW5lTG9jYWxlKFwicGxcIix7bW9udGhzOmZ1bmN0aW9uKGUsYSl7cmV0dXJuIGU/XCJcIj09PWE/XCIoXCIrSWVbZS5tb250aCgpXStcInxcIitKZVtlLm1vbnRoKCldK1wiKVwiOi9EIE1NTU0vLnRlc3QoYSk/SWVbZS5tb250aCgpXTpKZVtlLm1vbnRoKCldOkplfSxtb250aHNTaG9ydDpcInN0eV9sdXRfbWFyX2t3aV9tYWpfY3plX2xpcF9zaWVfd3J6X3BhXFx1MDE3YV9saXNfZ3J1XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwibmllZHppZWxhX3BvbmllZHppYVxcdTAxNDJla193dG9yZWtfXFx1MDE1YnJvZGFfY3p3YXJ0ZWtfcGlcXHUwMTA1dGVrX3NvYm90YVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwibmR6X3Bvbl93dF9cXHUwMTVicl9jendfcHRfc29iXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiTmRfUG5fV3RfXFx1MDE1YXJfQ3pfUHRfU29cIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW0R6aVxcdTAxNWIgb10gTFRcIixuZXh0RGF5OlwiW0p1dHJvIG9dIExUXCIsbmV4dFdlZWs6ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5kYXkoKSl7Y2FzZSAwOnJldHVyblwiW1cgbmllZHppZWxcXHUwMTE5IG9dIExUXCI7Y2FzZSAyOnJldHVyblwiW1dlIHd0b3JlayBvXSBMVFwiO2Nhc2UgMzpyZXR1cm5cIltXIFxcdTAxNWJyb2RcXHUwMTE5IG9dIExUXCI7Y2FzZSA2OnJldHVyblwiW1cgc29ib3RcXHUwMTE5IG9dIExUXCI7ZGVmYXVsdDpyZXR1cm5cIltXXSBkZGRkIFtvXSBMVFwifX0sbGFzdERheTpcIltXY3pvcmFqIG9dIExUXCIsbGFzdFdlZWs6ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5kYXkoKSl7Y2FzZSAwOnJldHVyblwiW1cgemVzelxcdTAxNDJcXHUwMTA1IG5pZWR6aWVsXFx1MDExOSBvXSBMVFwiO2Nhc2UgMzpyZXR1cm5cIltXIHplc3pcXHUwMTQyXFx1MDEwNSBcXHUwMTVicm9kXFx1MDExOSBvXSBMVFwiO2Nhc2UgNjpyZXR1cm5cIltXIHplc3pcXHUwMTQyXFx1MDEwNSBzb2JvdFxcdTAxMTkgb10gTFRcIjtkZWZhdWx0OnJldHVyblwiW1cgemVzelxcdTAxNDJ5XSBkZGRkIFtvXSBMVFwifX0sc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiemEgJXNcIixwYXN0OlwiJXMgdGVtdVwiLHM6XCJraWxrYSBzZWt1bmRcIixzczpSZSxtOlJlLG1tOlJlLGg6UmUsaGg6UmUsZDpcIjEgZHppZVxcdTAxNDRcIixkZDpcIiVkIGRuaVwiLE06XCJtaWVzaVxcdTAxMDVjXCIsTU06UmUseTpcInJva1wiLHl5OlJlfSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLGRveTo0fX0pLGUuZGVmaW5lTG9jYWxlKFwicHQtYnJcIix7bW9udGhzOlwiamFuZWlyb19mZXZlcmVpcm9fbWFyXFx4ZTdvX2FicmlsX21haW9fanVuaG9fanVsaG9fYWdvc3RvX3NldGVtYnJvX291dHVicm9fbm92ZW1icm9fZGV6ZW1icm9cIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJqYW5fZmV2X21hcl9hYnJfbWFpX2p1bl9qdWxfYWdvX3NldF9vdXRfbm92X2RlelwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIkRvbWluZ29fU2VndW5kYS1mZWlyYV9UZXJcXHhlN2EtZmVpcmFfUXVhcnRhLWZlaXJhX1F1aW50YS1mZWlyYV9TZXh0YS1mZWlyYV9TXFx4ZTFiYWRvXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJEb21fU2VnX1Rlcl9RdWFfUXVpX1NleF9TXFx4ZTFiXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiRG9fMlxceGFhXzNcXHhhYV80XFx4YWFfNVxceGFhXzZcXHhhYV9TXFx4ZTFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBbZGVdIE1NTU0gW2RlXSBZWVlZXCIsTExMOlwiRCBbZGVdIE1NTU0gW2RlXSBZWVlZIFtcXHhlMHNdIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgW2RlXSBNTU1NIFtkZV0gWVlZWSBbXFx4ZTBzXSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltIb2plIFxceGUwc10gTFRcIixuZXh0RGF5OlwiW0FtYW5oXFx4ZTMgXFx4ZTBzXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbXFx4ZTBzXSBMVFwiLGxhc3REYXk6XCJbT250ZW0gXFx4ZTBzXSBMVFwiLGxhc3RXZWVrOmZ1bmN0aW9uKCl7cmV0dXJuIDA9PT10aGlzLmRheSgpfHw2PT09dGhpcy5kYXkoKT9cIltcXHhkYWx0aW1vXSBkZGRkIFtcXHhlMHNdIExUXCI6XCJbXFx4ZGFsdGltYV0gZGRkZCBbXFx4ZTBzXSBMVFwifSxzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJlbSAlc1wiLHBhc3Q6XCJoXFx4ZTEgJXNcIixzOlwicG91Y29zIHNlZ3VuZG9zXCIsc3M6XCIlZCBzZWd1bmRvc1wiLG06XCJ1bSBtaW51dG9cIixtbTpcIiVkIG1pbnV0b3NcIixoOlwidW1hIGhvcmFcIixoaDpcIiVkIGhvcmFzXCIsZDpcInVtIGRpYVwiLGRkOlwiJWQgZGlhc1wiLE06XCJ1bSBtXFx4ZWFzXCIsTU06XCIlZCBtZXNlc1wiLHk6XCJ1bSBhbm9cIix5eTpcIiVkIGFub3NcIn0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn1cXHhiYS8sb3JkaW5hbDpcIiVkXFx4YmFcIn0pLGUuZGVmaW5lTG9jYWxlKFwicHRcIix7bW9udGhzOlwiamFuZWlyb19mZXZlcmVpcm9fbWFyXFx4ZTdvX2FicmlsX21haW9fanVuaG9fanVsaG9fYWdvc3RvX3NldGVtYnJvX291dHVicm9fbm92ZW1icm9fZGV6ZW1icm9cIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJqYW5fZmV2X21hcl9hYnJfbWFpX2p1bl9qdWxfYWdvX3NldF9vdXRfbm92X2RlelwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIkRvbWluZ29fU2VndW5kYS1mZWlyYV9UZXJcXHhlN2EtZmVpcmFfUXVhcnRhLWZlaXJhX1F1aW50YS1mZWlyYV9TZXh0YS1mZWlyYV9TXFx4ZTFiYWRvXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJEb21fU2VnX1Rlcl9RdWFfUXVpX1NleF9TXFx4ZTFiXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiRG9fMlxceGFhXzNcXHhhYV80XFx4YWFfNVxceGFhXzZcXHhhYV9TXFx4ZTFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBbZGVdIE1NTU0gW2RlXSBZWVlZXCIsTExMOlwiRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgW2RlXSBNTU1NIFtkZV0gWVlZWSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltIb2plIFxceGUwc10gTFRcIixuZXh0RGF5OlwiW0FtYW5oXFx4ZTMgXFx4ZTBzXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbXFx4ZTBzXSBMVFwiLGxhc3REYXk6XCJbT250ZW0gXFx4ZTBzXSBMVFwiLGxhc3RXZWVrOmZ1bmN0aW9uKCl7cmV0dXJuIDA9PT10aGlzLmRheSgpfHw2PT09dGhpcy5kYXkoKT9cIltcXHhkYWx0aW1vXSBkZGRkIFtcXHhlMHNdIExUXCI6XCJbXFx4ZGFsdGltYV0gZGRkZCBbXFx4ZTBzXSBMVFwifSxzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJlbSAlc1wiLHBhc3Q6XCJoXFx4ZTEgJXNcIixzOlwic2VndW5kb3NcIixzczpcIiVkIHNlZ3VuZG9zXCIsbTpcInVtIG1pbnV0b1wiLG1tOlwiJWQgbWludXRvc1wiLGg6XCJ1bWEgaG9yYVwiLGhoOlwiJWQgaG9yYXNcIixkOlwidW0gZGlhXCIsZGQ6XCIlZCBkaWFzXCIsTTpcInVtIG1cXHhlYXNcIixNTTpcIiVkIG1lc2VzXCIseTpcInVtIGFub1wiLHl5OlwiJWQgYW5vc1wifSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxceGJhLyxvcmRpbmFsOlwiJWRcXHhiYVwiLHdlZWs6e2RvdzoxLGRveTo0fX0pLGUuZGVmaW5lTG9jYWxlKFwicm9cIix7bW9udGhzOlwiaWFudWFyaWVfZmVicnVhcmllX21hcnRpZV9hcHJpbGllX21haV9pdW5pZV9pdWxpZV9hdWd1c3Rfc2VwdGVtYnJpZV9vY3RvbWJyaWVfbm9pZW1icmllX2RlY2VtYnJpZVwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcImlhbi5fZmVici5fbWFydC5fYXByLl9tYWlfaXVuLl9pdWwuX2F1Zy5fc2VwdC5fb2N0Ll9ub3YuX2RlYy5cIi5zcGxpdChcIl9cIiksbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czpcImR1bWluaWNcXHUwMTAzX2x1bmlfbWFyXFx1MDIxYmlfbWllcmN1cmlfam9pX3ZpbmVyaV9zXFx4ZTJtYlxcdTAxMDN0XFx1MDEwM1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiRHVtX0x1bl9NYXJfTWllX0pvaV9WaW5fU1xceGUybVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIkR1X0x1X01hX01pX0pvX1ZpX1NcXHhlMlwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJIOm1tXCIsTFRTOlwiSDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEg6bW1cIixMTExMOlwiZGRkZCwgRCBNTU1NIFlZWVkgSDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIlthemkgbGFdIExUXCIsbmV4dERheTpcIlttXFx4ZTJpbmUgbGFdIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtsYV0gTFRcIixsYXN0RGF5OlwiW2llcmkgbGFdIExUXCIsbGFzdFdlZWs6XCJbZm9zdGFdIGRkZGQgW2xhXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcInBlc3RlICVzXCIscGFzdDpcIiVzIFxceGVlbiB1cm1cXHUwMTAzXCIsczpcImNcXHhlMnRldmEgc2VjdW5kZVwiLHNzOktlLG06XCJ1biBtaW51dFwiLG1tOktlLGg6XCJvIG9yXFx1MDEwM1wiLGhoOktlLGQ6XCJvIHppXCIsZGQ6S2UsTTpcIm8gbHVuXFx1MDEwM1wiLE1NOktlLHk6XCJ1biBhblwiLHl5OktlfSx3ZWVrOntkb3c6MSxkb3k6N319KTt2YXIgR2U9Wy9eXFx1MDQ0ZlxcdTA0M2RcXHUwNDMyL2ksL15cXHUwNDQ0XFx1MDQzNVxcdTA0MzIvaSwvXlxcdTA0M2NcXHUwNDMwXFx1MDQ0MC9pLC9eXFx1MDQzMFxcdTA0M2ZcXHUwNDQwL2ksL15cXHUwNDNjXFx1MDQzMFtcXHUwNDM5XFx1MDQ0Zl0vaSwvXlxcdTA0MzhcXHUwNDRlXFx1MDQzZC9pLC9eXFx1MDQzOFxcdTA0NGVcXHUwNDNiL2ksL15cXHUwNDMwXFx1MDQzMlxcdTA0MzMvaSwvXlxcdTA0NDFcXHUwNDM1XFx1MDQzZC9pLC9eXFx1MDQzZVxcdTA0M2FcXHUwNDQyL2ksL15cXHUwNDNkXFx1MDQzZVxcdTA0NGYvaSwvXlxcdTA0MzRcXHUwNDM1XFx1MDQzYS9pXTtlLmRlZmluZUxvY2FsZShcInJ1XCIse21vbnRoczp7Zm9ybWF0OlwiXFx1MDQ0ZlxcdTA0M2RcXHUwNDMyXFx1MDQzMFxcdTA0NDBcXHUwNDRmX1xcdTA0NDRcXHUwNDM1XFx1MDQzMlxcdTA0NDBcXHUwNDMwXFx1MDQzYlxcdTA0NGZfXFx1MDQzY1xcdTA0MzBcXHUwNDQwXFx1MDQ0MlxcdTA0MzBfXFx1MDQzMFxcdTA0M2ZcXHUwNDQwXFx1MDQzNVxcdTA0M2JcXHUwNDRmX1xcdTA0M2NcXHUwNDMwXFx1MDQ0Zl9cXHUwNDM4XFx1MDQ0ZVxcdTA0M2RcXHUwNDRmX1xcdTA0MzhcXHUwNDRlXFx1MDQzYlxcdTA0NGZfXFx1MDQzMFxcdTA0MzJcXHUwNDMzXFx1MDQ0M1xcdTA0NDFcXHUwNDQyXFx1MDQzMF9cXHUwNDQxXFx1MDQzNVxcdTA0M2RcXHUwNDQyXFx1MDQ0ZlxcdTA0MzFcXHUwNDQwXFx1MDQ0Zl9cXHUwNDNlXFx1MDQzYVxcdTA0NDJcXHUwNDRmXFx1MDQzMVxcdTA0NDBcXHUwNDRmX1xcdTA0M2RcXHUwNDNlXFx1MDQ0ZlxcdTA0MzFcXHUwNDQwXFx1MDQ0Zl9cXHUwNDM0XFx1MDQzNVxcdTA0M2FcXHUwNDMwXFx1MDQzMVxcdTA0NDBcXHUwNDRmXCIuc3BsaXQoXCJfXCIpLHN0YW5kYWxvbmU6XCJcXHUwNDRmXFx1MDQzZFxcdTA0MzJcXHUwNDMwXFx1MDQ0MFxcdTA0NGNfXFx1MDQ0NFxcdTA0MzVcXHUwNDMyXFx1MDQ0MFxcdTA0MzBcXHUwNDNiXFx1MDQ0Y19cXHUwNDNjXFx1MDQzMFxcdTA0NDBcXHUwNDQyX1xcdTA0MzBcXHUwNDNmXFx1MDQ0MFxcdTA0MzVcXHUwNDNiXFx1MDQ0Y19cXHUwNDNjXFx1MDQzMFxcdTA0MzlfXFx1MDQzOFxcdTA0NGVcXHUwNDNkXFx1MDQ0Y19cXHUwNDM4XFx1MDQ0ZVxcdTA0M2JcXHUwNDRjX1xcdTA0MzBcXHUwNDMyXFx1MDQzM1xcdTA0NDNcXHUwNDQxXFx1MDQ0Ml9cXHUwNDQxXFx1MDQzNVxcdTA0M2RcXHUwNDQyXFx1MDQ0ZlxcdTA0MzFcXHUwNDQwXFx1MDQ0Y19cXHUwNDNlXFx1MDQzYVxcdTA0NDJcXHUwNDRmXFx1MDQzMVxcdTA0NDBcXHUwNDRjX1xcdTA0M2RcXHUwNDNlXFx1MDQ0ZlxcdTA0MzFcXHUwNDQwXFx1MDQ0Y19cXHUwNDM0XFx1MDQzNVxcdTA0M2FcXHUwNDMwXFx1MDQzMVxcdTA0NDBcXHUwNDRjXCIuc3BsaXQoXCJfXCIpfSxtb250aHNTaG9ydDp7Zm9ybWF0OlwiXFx1MDQ0ZlxcdTA0M2RcXHUwNDMyLl9cXHUwNDQ0XFx1MDQzNVxcdTA0MzJcXHUwNDQwLl9cXHUwNDNjXFx1MDQzMFxcdTA0NDAuX1xcdTA0MzBcXHUwNDNmXFx1MDQ0MC5fXFx1MDQzY1xcdTA0MzBcXHUwNDRmX1xcdTA0MzhcXHUwNDRlXFx1MDQzZFxcdTA0NGZfXFx1MDQzOFxcdTA0NGVcXHUwNDNiXFx1MDQ0Zl9cXHUwNDMwXFx1MDQzMlxcdTA0MzMuX1xcdTA0NDFcXHUwNDM1XFx1MDQzZFxcdTA0NDIuX1xcdTA0M2VcXHUwNDNhXFx1MDQ0Mi5fXFx1MDQzZFxcdTA0M2VcXHUwNDRmXFx1MDQzMS5fXFx1MDQzNFxcdTA0MzVcXHUwNDNhLlwiLnNwbGl0KFwiX1wiKSxzdGFuZGFsb25lOlwiXFx1MDQ0ZlxcdTA0M2RcXHUwNDMyLl9cXHUwNDQ0XFx1MDQzNVxcdTA0MzJcXHUwNDQwLl9cXHUwNDNjXFx1MDQzMFxcdTA0NDBcXHUwNDQyX1xcdTA0MzBcXHUwNDNmXFx1MDQ0MC5fXFx1MDQzY1xcdTA0MzBcXHUwNDM5X1xcdTA0MzhcXHUwNDRlXFx1MDQzZFxcdTA0NGNfXFx1MDQzOFxcdTA0NGVcXHUwNDNiXFx1MDQ0Y19cXHUwNDMwXFx1MDQzMlxcdTA0MzMuX1xcdTA0NDFcXHUwNDM1XFx1MDQzZFxcdTA0NDIuX1xcdTA0M2VcXHUwNDNhXFx1MDQ0Mi5fXFx1MDQzZFxcdTA0M2VcXHUwNDRmXFx1MDQzMS5fXFx1MDQzNFxcdTA0MzVcXHUwNDNhLlwiLnNwbGl0KFwiX1wiKX0sd2Vla2RheXM6e3N0YW5kYWxvbmU6XCJcXHUwNDMyXFx1MDQzZVxcdTA0NDFcXHUwNDNhXFx1MDQ0MFxcdTA0MzVcXHUwNDQxXFx1MDQzNVxcdTA0M2RcXHUwNDRjXFx1MDQzNV9cXHUwNDNmXFx1MDQzZVxcdTA0M2RcXHUwNDM1XFx1MDQzNFxcdTA0MzVcXHUwNDNiXFx1MDQ0Y1xcdTA0M2RcXHUwNDM4XFx1MDQzYV9cXHUwNDMyXFx1MDQ0MlxcdTA0M2VcXHUwNDQwXFx1MDQzZFxcdTA0MzhcXHUwNDNhX1xcdTA0NDFcXHUwNDQwXFx1MDQzNVxcdTA0MzRcXHUwNDMwX1xcdTA0NDdcXHUwNDM1XFx1MDQ0MlxcdTA0MzJcXHUwNDM1XFx1MDQ0MFxcdTA0MzNfXFx1MDQzZlxcdTA0NGZcXHUwNDQyXFx1MDQzZFxcdTA0MzhcXHUwNDQ2XFx1MDQzMF9cXHUwNDQxXFx1MDQ0M1xcdTA0MzFcXHUwNDMxXFx1MDQzZVxcdTA0NDJcXHUwNDMwXCIuc3BsaXQoXCJfXCIpLGZvcm1hdDpcIlxcdTA0MzJcXHUwNDNlXFx1MDQ0MVxcdTA0M2FcXHUwNDQwXFx1MDQzNVxcdTA0NDFcXHUwNDM1XFx1MDQzZFxcdTA0NGNcXHUwNDM1X1xcdTA0M2ZcXHUwNDNlXFx1MDQzZFxcdTA0MzVcXHUwNDM0XFx1MDQzNVxcdTA0M2JcXHUwNDRjXFx1MDQzZFxcdTA0MzhcXHUwNDNhX1xcdTA0MzJcXHUwNDQyXFx1MDQzZVxcdTA0NDBcXHUwNDNkXFx1MDQzOFxcdTA0M2FfXFx1MDQ0MVxcdTA0NDBcXHUwNDM1XFx1MDQzNFxcdTA0NDNfXFx1MDQ0N1xcdTA0MzVcXHUwNDQyXFx1MDQzMlxcdTA0MzVcXHUwNDQwXFx1MDQzM19cXHUwNDNmXFx1MDQ0ZlxcdTA0NDJcXHUwNDNkXFx1MDQzOFxcdTA0NDZcXHUwNDQzX1xcdTA0NDFcXHUwNDQzXFx1MDQzMVxcdTA0MzFcXHUwNDNlXFx1MDQ0MlxcdTA0NDNcIi5zcGxpdChcIl9cIiksaXNGb3JtYXQ6L1xcWyA/W1xcdTA0MTJcXHUwNDMyXSA/KD86XFx1MDQzZlxcdTA0NDBcXHUwNDNlXFx1MDQ0OFxcdTA0M2JcXHUwNDQzXFx1MDQ0ZXxcXHUwNDQxXFx1MDQzYlxcdTA0MzVcXHUwNDM0XFx1MDQ0M1xcdTA0NGVcXHUwNDQ5XFx1MDQ0M1xcdTA0NGV8XFx1MDQ0ZFxcdTA0NDJcXHUwNDQzKT8gP1xcXSA/ZGRkZC99LHdlZWtkYXlzU2hvcnQ6XCJcXHUwNDMyXFx1MDQ0MV9cXHUwNDNmXFx1MDQzZF9cXHUwNDMyXFx1MDQ0Ml9cXHUwNDQxXFx1MDQ0MF9cXHUwNDQ3XFx1MDQ0Ml9cXHUwNDNmXFx1MDQ0Ml9cXHUwNDQxXFx1MDQzMVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIlxcdTA0MzJcXHUwNDQxX1xcdTA0M2ZcXHUwNDNkX1xcdTA0MzJcXHUwNDQyX1xcdTA0NDFcXHUwNDQwX1xcdTA0NDdcXHUwNDQyX1xcdTA0M2ZcXHUwNDQyX1xcdTA0NDFcXHUwNDMxXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1BhcnNlOkdlLGxvbmdNb250aHNQYXJzZTpHZSxzaG9ydE1vbnRoc1BhcnNlOkdlLG1vbnRoc1JlZ2V4Oi9eKFxcdTA0NGZcXHUwNDNkXFx1MDQzMlxcdTA0MzBcXHUwNDQwW1xcdTA0NGNcXHUwNDRmXXxcXHUwNDRmXFx1MDQzZFxcdTA0MzJcXC4/fFxcdTA0NDRcXHUwNDM1XFx1MDQzMlxcdTA0NDBcXHUwNDMwXFx1MDQzYltcXHUwNDRjXFx1MDQ0Zl18XFx1MDQ0NFxcdTA0MzVcXHUwNDMyXFx1MDQ0MD9cXC4/fFxcdTA0M2NcXHUwNDMwXFx1MDQ0MFxcdTA0NDJcXHUwNDMwP3xcXHUwNDNjXFx1MDQzMFxcdTA0NDBcXC4/fFxcdTA0MzBcXHUwNDNmXFx1MDQ0MFxcdTA0MzVcXHUwNDNiW1xcdTA0NGNcXHUwNDRmXXxcXHUwNDMwXFx1MDQzZlxcdTA0NDBcXC4/fFxcdTA0M2NcXHUwNDMwW1xcdTA0MzlcXHUwNDRmXXxcXHUwNDM4XFx1MDQ0ZVxcdTA0M2RbXFx1MDQ0Y1xcdTA0NGZdfFxcdTA0MzhcXHUwNDRlXFx1MDQzZFxcLj98XFx1MDQzOFxcdTA0NGVcXHUwNDNiW1xcdTA0NGNcXHUwNDRmXXxcXHUwNDM4XFx1MDQ0ZVxcdTA0M2JcXC4/fFxcdTA0MzBcXHUwNDMyXFx1MDQzM1xcdTA0NDNcXHUwNDQxXFx1MDQ0MlxcdTA0MzA/fFxcdTA0MzBcXHUwNDMyXFx1MDQzM1xcLj98XFx1MDQ0MVxcdTA0MzVcXHUwNDNkXFx1MDQ0MlxcdTA0NGZcXHUwNDMxXFx1MDQ0MFtcXHUwNDRjXFx1MDQ0Zl18XFx1MDQ0MVxcdTA0MzVcXHUwNDNkXFx1MDQ0Mj9cXC4/fFxcdTA0M2VcXHUwNDNhXFx1MDQ0MlxcdTA0NGZcXHUwNDMxXFx1MDQ0MFtcXHUwNDRjXFx1MDQ0Zl18XFx1MDQzZVxcdTA0M2FcXHUwNDQyXFwuP3xcXHUwNDNkXFx1MDQzZVxcdTA0NGZcXHUwNDMxXFx1MDQ0MFtcXHUwNDRjXFx1MDQ0Zl18XFx1MDQzZFxcdTA0M2VcXHUwNDRmXFx1MDQzMT9cXC4/fFxcdTA0MzRcXHUwNDM1XFx1MDQzYVxcdTA0MzBcXHUwNDMxXFx1MDQ0MFtcXHUwNDRjXFx1MDQ0Zl18XFx1MDQzNFxcdTA0MzVcXHUwNDNhXFwuPykvaSxtb250aHNTaG9ydFJlZ2V4Oi9eKFxcdTA0NGZcXHUwNDNkXFx1MDQzMlxcdTA0MzBcXHUwNDQwW1xcdTA0NGNcXHUwNDRmXXxcXHUwNDRmXFx1MDQzZFxcdTA0MzJcXC4/fFxcdTA0NDRcXHUwNDM1XFx1MDQzMlxcdTA0NDBcXHUwNDMwXFx1MDQzYltcXHUwNDRjXFx1MDQ0Zl18XFx1MDQ0NFxcdTA0MzVcXHUwNDMyXFx1MDQ0MD9cXC4/fFxcdTA0M2NcXHUwNDMwXFx1MDQ0MFxcdTA0NDJcXHUwNDMwP3xcXHUwNDNjXFx1MDQzMFxcdTA0NDBcXC4/fFxcdTA0MzBcXHUwNDNmXFx1MDQ0MFxcdTA0MzVcXHUwNDNiW1xcdTA0NGNcXHUwNDRmXXxcXHUwNDMwXFx1MDQzZlxcdTA0NDBcXC4/fFxcdTA0M2NcXHUwNDMwW1xcdTA0MzlcXHUwNDRmXXxcXHUwNDM4XFx1MDQ0ZVxcdTA0M2RbXFx1MDQ0Y1xcdTA0NGZdfFxcdTA0MzhcXHUwNDRlXFx1MDQzZFxcLj98XFx1MDQzOFxcdTA0NGVcXHUwNDNiW1xcdTA0NGNcXHUwNDRmXXxcXHUwNDM4XFx1MDQ0ZVxcdTA0M2JcXC4/fFxcdTA0MzBcXHUwNDMyXFx1MDQzM1xcdTA0NDNcXHUwNDQxXFx1MDQ0MlxcdTA0MzA/fFxcdTA0MzBcXHUwNDMyXFx1MDQzM1xcLj98XFx1MDQ0MVxcdTA0MzVcXHUwNDNkXFx1MDQ0MlxcdTA0NGZcXHUwNDMxXFx1MDQ0MFtcXHUwNDRjXFx1MDQ0Zl18XFx1MDQ0MVxcdTA0MzVcXHUwNDNkXFx1MDQ0Mj9cXC4/fFxcdTA0M2VcXHUwNDNhXFx1MDQ0MlxcdTA0NGZcXHUwNDMxXFx1MDQ0MFtcXHUwNDRjXFx1MDQ0Zl18XFx1MDQzZVxcdTA0M2FcXHUwNDQyXFwuP3xcXHUwNDNkXFx1MDQzZVxcdTA0NGZcXHUwNDMxXFx1MDQ0MFtcXHUwNDRjXFx1MDQ0Zl18XFx1MDQzZFxcdTA0M2VcXHUwNDRmXFx1MDQzMT9cXC4/fFxcdTA0MzRcXHUwNDM1XFx1MDQzYVxcdTA0MzBcXHUwNDMxXFx1MDQ0MFtcXHUwNDRjXFx1MDQ0Zl18XFx1MDQzNFxcdTA0MzVcXHUwNDNhXFwuPykvaSxtb250aHNTdHJpY3RSZWdleDovXihcXHUwNDRmXFx1MDQzZFxcdTA0MzJcXHUwNDMwXFx1MDQ0MFtcXHUwNDRmXFx1MDQ0Y118XFx1MDQ0NFxcdTA0MzVcXHUwNDMyXFx1MDQ0MFxcdTA0MzBcXHUwNDNiW1xcdTA0NGZcXHUwNDRjXXxcXHUwNDNjXFx1MDQzMFxcdTA0NDBcXHUwNDQyXFx1MDQzMD98XFx1MDQzMFxcdTA0M2ZcXHUwNDQwXFx1MDQzNVxcdTA0M2JbXFx1MDQ0ZlxcdTA0NGNdfFxcdTA0M2NcXHUwNDMwW1xcdTA0NGZcXHUwNDM5XXxcXHUwNDM4XFx1MDQ0ZVxcdTA0M2RbXFx1MDQ0ZlxcdTA0NGNdfFxcdTA0MzhcXHUwNDRlXFx1MDQzYltcXHUwNDRmXFx1MDQ0Y118XFx1MDQzMFxcdTA0MzJcXHUwNDMzXFx1MDQ0M1xcdTA0NDFcXHUwNDQyXFx1MDQzMD98XFx1MDQ0MVxcdTA0MzVcXHUwNDNkXFx1MDQ0MlxcdTA0NGZcXHUwNDMxXFx1MDQ0MFtcXHUwNDRmXFx1MDQ0Y118XFx1MDQzZVxcdTA0M2FcXHUwNDQyXFx1MDQ0ZlxcdTA0MzFcXHUwNDQwW1xcdTA0NGZcXHUwNDRjXXxcXHUwNDNkXFx1MDQzZVxcdTA0NGZcXHUwNDMxXFx1MDQ0MFtcXHUwNDRmXFx1MDQ0Y118XFx1MDQzNFxcdTA0MzVcXHUwNDNhXFx1MDQzMFxcdTA0MzFcXHUwNDQwW1xcdTA0NGZcXHUwNDRjXSkvaSxtb250aHNTaG9ydFN0cmljdFJlZ2V4Oi9eKFxcdTA0NGZcXHUwNDNkXFx1MDQzMlxcLnxcXHUwNDQ0XFx1MDQzNVxcdTA0MzJcXHUwNDQwP1xcLnxcXHUwNDNjXFx1MDQzMFxcdTA0NDBbXFx1MDQ0Mi5dfFxcdTA0MzBcXHUwNDNmXFx1MDQ0MFxcLnxcXHUwNDNjXFx1MDQzMFtcXHUwNDRmXFx1MDQzOV18XFx1MDQzOFxcdTA0NGVcXHUwNDNkW1xcdTA0NGNcXHUwNDRmLl18XFx1MDQzOFxcdTA0NGVcXHUwNDNiW1xcdTA0NGNcXHUwNDRmLl18XFx1MDQzMFxcdTA0MzJcXHUwNDMzXFwufFxcdTA0NDFcXHUwNDM1XFx1MDQzZFxcdTA0NDI/XFwufFxcdTA0M2VcXHUwNDNhXFx1MDQ0MlxcLnxcXHUwNDNkXFx1MDQzZVxcdTA0NGZcXHUwNDMxP1xcLnxcXHUwNDM0XFx1MDQzNVxcdTA0M2FcXC4pL2ksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSDptbVwiLExUUzpcIkg6bW06c3NcIixMOlwiREQuTU0uWVlZWVwiLExMOlwiRCBNTU1NIFlZWVkgXFx1MDQzMy5cIixMTEw6XCJEIE1NTU0gWVlZWSBcXHUwNDMzLiwgSDptbVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSBcXHUwNDMzLiwgSDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltcXHUwNDIxXFx1MDQzNVxcdTA0MzNcXHUwNDNlXFx1MDQzNFxcdTA0M2RcXHUwNDRmIFxcdTA0MzJdIExUXCIsbmV4dERheTpcIltcXHUwNDE3XFx1MDQzMFxcdTA0MzJcXHUwNDQyXFx1MDQ0MFxcdTA0MzAgXFx1MDQzMl0gTFRcIixsYXN0RGF5OlwiW1xcdTA0MTJcXHUwNDQ3XFx1MDQzNVxcdTA0NDBcXHUwNDMwIFxcdTA0MzJdIExUXCIsbmV4dFdlZWs6ZnVuY3Rpb24oZSl7aWYoZS53ZWVrKCk9PT10aGlzLndlZWsoKSlyZXR1cm4gMj09PXRoaXMuZGF5KCk/XCJbXFx1MDQxMlxcdTA0M2VdIGRkZGQgW1xcdTA0MzJdIExUXCI6XCJbXFx1MDQxMl0gZGRkZCBbXFx1MDQzMl0gTFRcIjtzd2l0Y2godGhpcy5kYXkoKSl7Y2FzZSAwOnJldHVyblwiW1xcdTA0MTIgXFx1MDQ0MVxcdTA0M2JcXHUwNDM1XFx1MDQzNFxcdTA0NDNcXHUwNDRlXFx1MDQ0OVxcdTA0MzVcXHUwNDM1XSBkZGRkIFtcXHUwNDMyXSBMVFwiO2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OnJldHVyblwiW1xcdTA0MTIgXFx1MDQ0MVxcdTA0M2JcXHUwNDM1XFx1MDQzNFxcdTA0NDNcXHUwNDRlXFx1MDQ0OVxcdTA0MzhcXHUwNDM5XSBkZGRkIFtcXHUwNDMyXSBMVFwiO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OnJldHVyblwiW1xcdTA0MTIgXFx1MDQ0MVxcdTA0M2JcXHUwNDM1XFx1MDQzNFxcdTA0NDNcXHUwNDRlXFx1MDQ0OVxcdTA0NDNcXHUwNDRlXSBkZGRkIFtcXHUwNDMyXSBMVFwifX0sbGFzdFdlZWs6ZnVuY3Rpb24oZSl7aWYoZS53ZWVrKCk9PT10aGlzLndlZWsoKSlyZXR1cm4gMj09PXRoaXMuZGF5KCk/XCJbXFx1MDQxMlxcdTA0M2VdIGRkZGQgW1xcdTA0MzJdIExUXCI6XCJbXFx1MDQxMl0gZGRkZCBbXFx1MDQzMl0gTFRcIjtzd2l0Y2godGhpcy5kYXkoKSl7Y2FzZSAwOnJldHVyblwiW1xcdTA0MTIgXFx1MDQzZlxcdTA0NDBcXHUwNDNlXFx1MDQ0OFxcdTA0M2JcXHUwNDNlXFx1MDQzNV0gZGRkZCBbXFx1MDQzMl0gTFRcIjtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpyZXR1cm5cIltcXHUwNDEyIFxcdTA0M2ZcXHUwNDQwXFx1MDQzZVxcdTA0NDhcXHUwNDNiXFx1MDQ0YlxcdTA0MzldIGRkZGQgW1xcdTA0MzJdIExUXCI7Y2FzZSAzOmNhc2UgNTpjYXNlIDY6cmV0dXJuXCJbXFx1MDQxMiBcXHUwNDNmXFx1MDQ0MFxcdTA0M2VcXHUwNDQ4XFx1MDQzYlxcdTA0NDNcXHUwNDRlXSBkZGRkIFtcXHUwNDMyXSBMVFwifX0sc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiXFx1MDQ0N1xcdTA0MzVcXHUwNDQwXFx1MDQzNVxcdTA0MzcgJXNcIixwYXN0OlwiJXMgXFx1MDQzZFxcdTA0MzBcXHUwNDM3XFx1MDQzMFxcdTA0MzRcIixzOlwiXFx1MDQzZFxcdTA0MzVcXHUwNDQxXFx1MDQzYVxcdTA0M2VcXHUwNDNiXFx1MDQ0Y1xcdTA0M2FcXHUwNDNlIFxcdTA0NDFcXHUwNDM1XFx1MDQzYVxcdTA0NDNcXHUwNDNkXFx1MDQzNFwiLHNzOkNlLG06Q2UsbW06Q2UsaDpcIlxcdTA0NDdcXHUwNDMwXFx1MDQ0MVwiLGhoOkNlLGQ6XCJcXHUwNDM0XFx1MDQzNVxcdTA0M2RcXHUwNDRjXCIsZGQ6Q2UsTTpcIlxcdTA0M2NcXHUwNDM1XFx1MDQ0MVxcdTA0NGZcXHUwNDQ2XCIsTU06Q2UseTpcIlxcdTA0MzNcXHUwNDNlXFx1MDQzNFwiLHl5OkNlfSxtZXJpZGllbVBhcnNlOi9cXHUwNDNkXFx1MDQzZVxcdTA0NDdcXHUwNDM4fFxcdTA0NDNcXHUwNDQyXFx1MDQ0MFxcdTA0MzB8XFx1MDQzNFxcdTA0M2RcXHUwNDRmfFxcdTA0MzJcXHUwNDM1XFx1MDQ0N1xcdTA0MzVcXHUwNDQwXFx1MDQzMC9pLGlzUE06ZnVuY3Rpb24oZSl7cmV0dXJuL14oXFx1MDQzNFxcdTA0M2RcXHUwNDRmfFxcdTA0MzJcXHUwNDM1XFx1MDQ0N1xcdTA0MzVcXHUwNDQwXFx1MDQzMCkkLy50ZXN0KGUpfSxtZXJpZGllbTpmdW5jdGlvbihlLGEsXyl7cmV0dXJuIGU8ND9cIlxcdTA0M2RcXHUwNDNlXFx1MDQ0N1xcdTA0MzhcIjplPDEyP1wiXFx1MDQ0M1xcdTA0NDJcXHUwNDQwXFx1MDQzMFwiOmU8MTc/XCJcXHUwNDM0XFx1MDQzZFxcdTA0NGZcIjpcIlxcdTA0MzJcXHUwNDM1XFx1MDQ0N1xcdTA0MzVcXHUwNDQwXFx1MDQzMFwifSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfS0oXFx1MDQzOXxcXHUwNDMzXFx1MDQzZXxcXHUwNDRmKS8sb3JkaW5hbDpmdW5jdGlvbihlLGEpe3N3aXRjaChhKXtjYXNlXCJNXCI6Y2FzZVwiZFwiOmNhc2VcIkRERFwiOnJldHVybiBlK1wiLVxcdTA0MzlcIjtjYXNlXCJEXCI6cmV0dXJuIGUrXCItXFx1MDQzM1xcdTA0M2VcIjtjYXNlXCJ3XCI6Y2FzZVwiV1wiOnJldHVybiBlK1wiLVxcdTA0NGZcIjtkZWZhdWx0OnJldHVybiBlfX0sd2Vlazp7ZG93OjEsZG95OjR9fSk7dmFyIEJlPVtcIlxcdTA2MmNcXHUwNjQ2XFx1MDY0OFxcdTA2MzFcXHUwNjRhXCIsXCJcXHUwNjQxXFx1MDY0YVxcdTA2MjhcXHUwNjMxXFx1MDY0OFxcdTA2MzFcXHUwNjRhXCIsXCJcXHUwNjQ1XFx1MDYyN1xcdTA2MzFcXHUwNjg2XCIsXCJcXHUwNjI3XFx1MDY3ZVxcdTA2MzFcXHUwNjRhXFx1MDY0NFwiLFwiXFx1MDY0NVxcdTA2MjZcXHUwNjRhXCIsXCJcXHUwNjJjXFx1MDY0OFxcdTA2NDZcIixcIlxcdTA2MmNcXHUwNjQ4XFx1MDY0NFxcdTA2MjdcXHUwNjIxXFx1MDY1MFwiLFwiXFx1MDYyMlxcdTA2YWZcXHUwNjMzXFx1MDY3ZFwiLFwiXFx1MDYzM1xcdTA2NGFcXHUwNjdlXFx1MDY3ZFxcdTA2NDVcXHUwNjI4XFx1MDYzMVwiLFwiXFx1MDYyMlxcdTA2YWFcXHUwNjdkXFx1MDY0OFxcdTA2MjhcXHUwNjMxXCIsXCJcXHUwNjQ2XFx1MDY0OFxcdTA2NDVcXHUwNjI4XFx1MDYzMVwiLFwiXFx1MDY4YVxcdTA2MzNcXHUwNjQ1XFx1MDYyOFxcdTA2MzFcIl0scWU9W1wiXFx1MDYyMlxcdTA2ODZcXHUwNjMxXCIsXCJcXHUwNjMzXFx1MDY0OFxcdTA2NDVcXHUwNjMxXCIsXCJcXHUwNjI3XFx1MDZiMVxcdTA2MjdcXHUwNjMxXFx1MDY0OFwiLFwiXFx1MDYyN1xcdTA2MzFcXHUwNjI4XFx1MDYzOVwiLFwiXFx1MDYyZVxcdTA2NDVcXHUwNjRhXFx1MDYzM1wiLFwiXFx1MDYyY1xcdTA2NDVcXHUwNjM5XCIsXCJcXHUwNjg3XFx1MDY0NlxcdTA2ODdcXHUwNjMxXCJdO2UuZGVmaW5lTG9jYWxlKFwic2RcIix7bW9udGhzOkJlLG1vbnRoc1Nob3J0OkJlLHdlZWtkYXlzOnFlLHdlZWtkYXlzU2hvcnQ6cWUsd2Vla2RheXNNaW46cWUsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGRcXHUwNjBjIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LG1lcmlkaWVtUGFyc2U6L1xcdTA2MzVcXHUwNjI4XFx1MDYyZHxcXHUwNjM0XFx1MDYyN1xcdTA2NDUvLGlzUE06ZnVuY3Rpb24oZSl7cmV0dXJuXCJcXHUwNjM0XFx1MDYyN1xcdTA2NDVcIj09PWV9LG1lcmlkaWVtOmZ1bmN0aW9uKGUsYSxfKXtyZXR1cm4gZTwxMj9cIlxcdTA2MzVcXHUwNjI4XFx1MDYyZFwiOlwiXFx1MDYzNFxcdTA2MjdcXHUwNjQ1XCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTA2MjdcXHUwNjg0XSBMVFwiLG5leHREYXk6XCJbXFx1MDYzM1xcdTA2ODBcXHUwNjI3XFx1MDZiYlxcdTA2NGFdIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtcXHUwNjI3XFx1MDZiM1xcdTA2NGFcXHUwNjQ2IFxcdTA2NDdcXHUwNjQxXFx1MDYyYVxcdTA2NGEgXFx1MDYyYVxcdTA2NGFdIExUXCIsbGFzdERheTpcIltcXHUwNmFhXFx1MDYyN1xcdTA2NDRcXHUwNjQ3XFx1MDY0N10gTFRcIixsYXN0V2VlazpcIltcXHUwNmFmXFx1MDYzMlxcdTA2MzFcXHUwNjRhXFx1MDY0NCBcXHUwNjQ3XFx1MDY0MVxcdTA2MmFcXHUwNjRhXSBkZGRkIFtcXHUwNjJhXFx1MDY0YV0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCIlcyBcXHUwNjdlXFx1MDY0OFxcdTA2MjFcIixwYXN0OlwiJXMgXFx1MDYyN1xcdTA2YjNcIixzOlwiXFx1MDY4NlxcdTA2NDZcXHUwNjJmIFxcdTA2MzNcXHUwNjRhXFx1MDZhYVxcdTA2NDZcXHUwNjhhXCIsc3M6XCIlZCBcXHUwNjMzXFx1MDY0YVxcdTA2YWFcXHUwNjQ2XFx1MDY4YVwiLG06XCJcXHUwNjQ3XFx1MDZhYSBcXHUwNjQ1XFx1MDY0NlxcdTA2N2RcIixtbTpcIiVkIFxcdTA2NDVcXHUwNjQ2XFx1MDY3ZFwiLGg6XCJcXHUwNjQ3XFx1MDZhYSBcXHUwNmFhXFx1MDY0NFxcdTA2MjdcXHUwNmFhXCIsaGg6XCIlZCBcXHUwNmFhXFx1MDY0NFxcdTA2MjdcXHUwNmFhXCIsZDpcIlxcdTA2NDdcXHUwNmFhIFxcdTA2OGZcXHUwNjRhXFx1MDY0NlxcdTA2NDdcXHUwNjQ2XCIsZGQ6XCIlZCBcXHUwNjhmXFx1MDY0YVxcdTA2NDZcXHUwNjQ3XFx1MDY0NlwiLE06XCJcXHUwNjQ3XFx1MDZhYSBcXHUwNjQ1XFx1MDY0N1xcdTA2NGFcXHUwNjQ2XFx1MDY0OFwiLE1NOlwiJWQgXFx1MDY0NVxcdTA2NDdcXHUwNjRhXFx1MDY0NlxcdTA2MjdcIix5OlwiXFx1MDY0N1xcdTA2YWEgXFx1MDYzM1xcdTA2MjdcXHUwNjQ0XCIseXk6XCIlZCBcXHUwNjMzXFx1MDYyN1xcdTA2NDRcIn0scHJlcGFyc2U6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvXFx1MDYwYy9nLFwiLFwiKX0scG9zdGZvcm1hdDpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC8sL2csXCJcXHUwNjBjXCIpfSx3ZWVrOntkb3c6MSxkb3k6NH19KSxlLmRlZmluZUxvY2FsZShcInNlXCIse21vbnRoczpcIm9cXHUwMTExXFx1MDExMWFqYWdlbVxceGUxbm51X2d1b3Z2YW1cXHhlMW5udV9uanVrXFx1MDEwZGFtXFx4ZTFubnVfY3VvXFx1MDE0Ym9tXFx4ZTFubnVfbWllc3NlbVxceGUxbm51X2dlYXNzZW1cXHhlMW5udV9zdW9pZG5lbVxceGUxbm51X2JvcmdlbVxceGUxbm51X1xcdTAxMGRha1xcdTAxMGRhbVxceGUxbm51X2dvbGdnb3RtXFx4ZTFubnVfc2tcXHhlMWJtYW1cXHhlMW5udV9qdW92bGFtXFx4ZTFubnVcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJvXFx1MDExMVxcdTAxMTFqX2d1b3Zfbmp1a19jdW9fbWllc19nZWFzX3N1b2lfYm9yZ19cXHUwMTBkYWtcXHUwMTBkX2dvbGdfc2tcXHhlMWJfanVvdlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcInNvdG5hYmVhaXZpX3Z1b3NzXFx4ZTFyZ2FfbWFcXHUwMTRiXFx1MDE0YmViXFx4ZTFyZ2FfZ2Fza2F2YWhra3VfZHVvcmFzdGF0X2JlYXJqYWRhdF9sXFx4ZTF2dmFyZGF0XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJzb3RuX3Z1b3NfbWFcXHUwMTRiX2dhc2tfZHVvcl9iZWFyX2xcXHhlMXZcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJzX3ZfbV9nX2RfYl9MXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQuTU0uWVlZWVwiLExMOlwiTU1NTSBELiBbYi5dIFlZWVlcIixMTEw6XCJNTU1NIEQuIFtiLl0gWVlZWSBbdGkuXSBISDptbVwiLExMTEw6XCJkZGRkLCBNTU1NIEQuIFtiLl0gWVlZWSBbdGkuXSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltvdG5lIHRpXSBMVFwiLG5leHREYXk6XCJbaWh0dGluIHRpXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbdGldIExUXCIsbGFzdERheTpcIltpa3RlIHRpXSBMVFwiLGxhc3RXZWVrOlwiW292ZGRpdF0gZGRkZCBbdGldIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiJXMgZ2VhXFx1MDE3ZWVzXCIscGFzdDpcIm1hXFx1MDE0Yml0ICVzXCIsczpcIm1vYWRkZSBzZWt1bmRkYXRcIixzczpcIiVkIHNla3VuZGRhdFwiLG06XCJva3RhIG1pbnVodGFcIixtbTpcIiVkIG1pbnVodGF0XCIsaDpcIm9rdGEgZGlpbW11XCIsaGg6XCIlZCBkaWltbXV0XCIsZDpcIm9rdGEgYmVhaXZpXCIsZGQ6XCIlZCBiZWFpdnZpdFwiLE06XCJva3RhIG1cXHhlMW5udVwiLE1NOlwiJWQgbVxceGUxbnV0XCIseTpcIm9rdGEgamFoa2lcIix5eTpcIiVkIGphZ2l0XCJ9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9XFwuLyxvcmRpbmFsOlwiJWQuXCIsd2Vlazp7ZG93OjEsZG95OjR9fSksZS5kZWZpbmVMb2NhbGUoXCJzaVwiLHttb250aHM6XCJcXHUwZGEyXFx1MGRiMVxcdTBkYzBcXHUwZGNmXFx1MGRiYlxcdTBkZDJfXFx1MGRiNFxcdTBkZDlcXHUwZGI2XFx1MGRiYlxcdTBkYzBcXHUwZGNmXFx1MGRiYlxcdTBkZDJfXFx1MGRiOFxcdTBkY2ZcXHUwZGJiXFx1MGRjYVxcdTBkYWRcXHUwZGQ0X1xcdTBkODVcXHUwZGI0XFx1MGRjYVxcdTIwMGRcXHUwZGJiXFx1MGRkYVxcdTBkYmRcXHUwZGNhX1xcdTBkYjhcXHUwZGQwXFx1MGRiYVxcdTBkZDJfXFx1MGRhMlxcdTBkZDZcXHUwZGIxXFx1MGRkMl9cXHUwZGEyXFx1MGRkNlxcdTBkYmRcXHUwZGQyX1xcdTBkODVcXHUwZDljXFx1MGRkZFxcdTBkYzNcXHUwZGNhXFx1MGRhZFxcdTBkZDRfXFx1MGRjM1xcdTBkZDBcXHUwZGI0XFx1MGRjYVxcdTBkYWRcXHUwZGQwXFx1MGRiOFxcdTBkY2FcXHUwZGI2XFx1MGRiYlxcdTBkY2FfXFx1MGQ5NFxcdTBkOWFcXHUwZGNhXFx1MGRhZFxcdTBkZGRcXHUwZGI2XFx1MGRiYlxcdTBkY2FfXFx1MGRiMVxcdTBkZGNcXHUwZGMwXFx1MGRkMFxcdTBkYjhcXHUwZGNhXFx1MGRiNlxcdTBkYmJcXHUwZGNhX1xcdTBkYWZcXHUwZGQ5XFx1MGRjM1xcdTBkZDBcXHUwZGI4XFx1MGRjYVxcdTBkYjZcXHUwZGJiXFx1MGRjYVwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIlxcdTBkYTJcXHUwZGIxX1xcdTBkYjRcXHUwZGQ5XFx1MGRiNl9cXHUwZGI4XFx1MGRjZlxcdTBkYmJcXHUwZGNhX1xcdTBkODVcXHUwZGI0XFx1MGRjYV9cXHUwZGI4XFx1MGRkMFxcdTBkYmFcXHUwZGQyX1xcdTBkYTJcXHUwZGQ2XFx1MGRiMVxcdTBkZDJfXFx1MGRhMlxcdTBkZDZcXHUwZGJkXFx1MGRkMl9cXHUwZDg1XFx1MGQ5Y1xcdTBkZGRfXFx1MGRjM1xcdTBkZDBcXHUwZGI0XFx1MGRjYV9cXHUwZDk0XFx1MGQ5YVxcdTBkY2FfXFx1MGRiMVxcdTBkZGNcXHUwZGMwXFx1MGRkMF9cXHUwZGFmXFx1MGRkOVxcdTBkYzNcXHUwZGQwXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiXFx1MGQ4OVxcdTBkYmJcXHUwZGQyXFx1MGRhZlxcdTBkY2ZfXFx1MGRjM1xcdTBkYjNcXHUwZGQ0XFx1MGRhZlxcdTBkY2ZfXFx1MGQ4NVxcdTBkOWZcXHUwZGM0XFx1MGRiYlxcdTBkZDRcXHUwZGMwXFx1MGRjZlxcdTBkYWZcXHUwZGNmX1xcdTBkYjZcXHUwZGFmXFx1MGRjZlxcdTBkYWZcXHUwZGNmX1xcdTBkYjZcXHUwZGNhXFx1MjAwZFxcdTBkYmJcXHUwZGM0XFx1MGRjM1xcdTBkY2FcXHUwZGI0XFx1MGRhZFxcdTBkZDJcXHUwZGIxXFx1MGRjYVxcdTBkYWZcXHUwZGNmX1xcdTBkYzNcXHUwZGQyXFx1MGQ5YVxcdTBkZDRcXHUwZGJiXFx1MGRjZlxcdTBkYWZcXHUwZGNmX1xcdTBkYzNcXHUwZGQ5XFx1MGRiMVxcdTBkYzNcXHUwZGQ0XFx1MGRiYlxcdTBkY2ZcXHUwZGFmXFx1MGRjZlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiXFx1MGQ4OVxcdTBkYmJcXHUwZGQyX1xcdTBkYzNcXHUwZGIzXFx1MGRkNF9cXHUwZDg1XFx1MGQ5Zl9cXHUwZGI2XFx1MGRhZlxcdTBkY2ZfXFx1MGRiNlxcdTBkY2FcXHUyMDBkXFx1MGRiYlxcdTBkYzRfXFx1MGRjM1xcdTBkZDJcXHUwZDlhXFx1MGRkNF9cXHUwZGMzXFx1MGRkOVxcdTBkYjFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJcXHUwZDg5X1xcdTBkYzNfXFx1MGQ4NV9cXHUwZGI2X1xcdTBkYjZcXHUwZGNhXFx1MjAwZFxcdTBkYmJfXFx1MGRjM1xcdTBkZDJfXFx1MGRjM1xcdTBkZDlcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcImEgaDptbVwiLExUUzpcImEgaDptbTpzc1wiLEw6XCJZWVlZL01NL0REXCIsTEw6XCJZWVlZIE1NTU0gRFwiLExMTDpcIllZWVkgTU1NTSBELCBhIGg6bW1cIixMTExMOlwiWVlZWSBNTU1NIEQgW1xcdTBkYzBcXHUwZGQwXFx1MGRiMVxcdTBkZDJdIGRkZGQsIGEgaDptbTpzc1wifSxjYWxlbmRhcjp7c2FtZURheTpcIltcXHUwZDg1XFx1MGRhZl0gTFRbXFx1MGRhN11cIixuZXh0RGF5OlwiW1xcdTBkYzRcXHUwZGQ5XFx1MGRhN10gTFRbXFx1MGRhN11cIixuZXh0V2VlazpcImRkZGQgTFRbXFx1MGRhN11cIixsYXN0RGF5OlwiW1xcdTBkOGFcXHUwZGJhXFx1MGRkYV0gTFRbXFx1MGRhN11cIixsYXN0V2VlazpcIltcXHUwZGI0XFx1MGRjM1xcdTBkZDRcXHUwZDljXFx1MGRkMlxcdTBkYmFdIGRkZGQgTFRbXFx1MGRhN11cIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCIlc1xcdTBkOWFcXHUwZGQyXFx1MGRiMVxcdTBkY2FcIixwYXN0OlwiJXNcXHUwZDlhXFx1MGRhNyBcXHUwZGI0XFx1MGRkOVxcdTBkYmJcIixzOlwiXFx1MGRhZFxcdTBkYWRcXHUwZGNhXFx1MGRiNFxcdTBkYmIgXFx1MGQ5YVxcdTBkZDJcXHUwZGM0XFx1MGRkMlxcdTBkYjRcXHUwZGJhXCIsc3M6XCJcXHUwZGFkXFx1MGRhZFxcdTBkY2FcXHUwZGI0XFx1MGRiYiAlZFwiLG06XCJcXHUwZGI4XFx1MGRkMlxcdTBkYjFcXHUwZGQyXFx1MGRhZFxcdTBkY2FcXHUwZGFkXFx1MGRkNFxcdTBkYzBcIixtbTpcIlxcdTBkYjhcXHUwZGQyXFx1MGRiMVxcdTBkZDJcXHUwZGFkXFx1MGRjYVxcdTBkYWRcXHUwZGQ0ICVkXCIsaDpcIlxcdTBkYjRcXHUwZGQwXFx1MGRiYVwiLGhoOlwiXFx1MGRiNFxcdTBkZDBcXHUwZGJhICVkXCIsZDpcIlxcdTBkYWZcXHUwZGQyXFx1MGRiMVxcdTBkYmFcIixkZDpcIlxcdTBkYWZcXHUwZGQyXFx1MGRiMSAlZFwiLE06XCJcXHUwZGI4XFx1MGRjZlxcdTBkYzNcXHUwZGJhXCIsTU06XCJcXHUwZGI4XFx1MGRjZlxcdTBkYzMgJWRcIix5OlwiXFx1MGRjMFxcdTBkYzNcXHUwZGJiXCIseXk6XCJcXHUwZGMwXFx1MGRjM1xcdTBkYmIgJWRcIn0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn0gXFx1MGRjMFxcdTBkZDBcXHUwZGIxXFx1MGRkMi8sb3JkaW5hbDpmdW5jdGlvbihlKXtyZXR1cm4gZStcIiBcXHUwZGMwXFx1MGRkMFxcdTBkYjFcXHUwZGQyXCJ9LG1lcmlkaWVtUGFyc2U6L1xcdTBkYjRcXHUwZGQ5XFx1MGRiYiBcXHUwZGMwXFx1MGRiYlxcdTBkZDR8XFx1MGRiNFxcdTBkYzNcXHUwZGNhIFxcdTBkYzBcXHUwZGJiXFx1MGRkNHxcXHUwZGI0XFx1MGRkOS5cXHUwZGMwfFxcdTBkYjQuXFx1MGRjMC4vLGlzUE06ZnVuY3Rpb24oZSl7cmV0dXJuXCJcXHUwZGI0LlxcdTBkYzAuXCI9PT1lfHxcIlxcdTBkYjRcXHUwZGMzXFx1MGRjYSBcXHUwZGMwXFx1MGRiYlxcdTBkZDRcIj09PWV9LG1lcmlkaWVtOmZ1bmN0aW9uKGUsYSxfKXtyZXR1cm4gZT4xMT9fP1wiXFx1MGRiNC5cXHUwZGMwLlwiOlwiXFx1MGRiNFxcdTBkYzNcXHUwZGNhIFxcdTBkYzBcXHUwZGJiXFx1MGRkNFwiOl8/XCJcXHUwZGI0XFx1MGRkOS5cXHUwZGMwLlwiOlwiXFx1MGRiNFxcdTBkZDlcXHUwZGJiIFxcdTBkYzBcXHUwZGJiXFx1MGRkNFwifX0pO3ZhciAkZT1cImphbnVcXHhlMXJfZmVicnVcXHhlMXJfbWFyZWNfYXByXFx4ZWRsX21cXHhlMWpfalxceGZhbl9qXFx4ZmFsX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0XFx4ZjNiZXJfbm92ZW1iZXJfZGVjZW1iZXJcIi5zcGxpdChcIl9cIiksVWU9XCJqYW5fZmViX21hcl9hcHJfbVxceGUxal9qXFx4ZmFuX2pcXHhmYWxfYXVnX3NlcF9va3Rfbm92X2RlY1wiLnNwbGl0KFwiX1wiKTtmdW5jdGlvbiBRZShlKXtyZXR1cm4gZT4xJiZlPDV9ZnVuY3Rpb24gVmUoZSxhLF8scyl7dmFyIGQ9ZStcIiBcIjtzd2l0Y2goXyl7Y2FzZVwic1wiOnJldHVybiBhfHxzP1wicFxceGUxciBzZWtcXHhmYW5kXCI6XCJwXFx4ZTFyIHNla3VuZGFtaVwiO2Nhc2VcInNzXCI6cmV0dXJuIGF8fHM/ZCsoUWUoZSk/XCJzZWt1bmR5XCI6XCJzZWtcXHhmYW5kXCIpOmQrXCJzZWt1bmRhbWlcIjticmVhaztjYXNlXCJtXCI6cmV0dXJuIGE/XCJtaW5cXHhmYXRhXCI6cz9cIm1pblxceGZhdHVcIjpcIm1pblxceGZhdG91XCI7Y2FzZVwibW1cIjpyZXR1cm4gYXx8cz9kKyhRZShlKT9cIm1pblxceGZhdHlcIjpcIm1pblxceGZhdFwiKTpkK1wibWluXFx4ZmF0YW1pXCI7YnJlYWs7Y2FzZVwiaFwiOnJldHVybiBhP1wiaG9kaW5hXCI6cz9cImhvZGludVwiOlwiaG9kaW5vdVwiO2Nhc2VcImhoXCI6cmV0dXJuIGF8fHM/ZCsoUWUoZSk/XCJob2RpbnlcIjpcImhvZFxceGVkblwiKTpkK1wiaG9kaW5hbWlcIjticmVhaztjYXNlXCJkXCI6cmV0dXJuIGF8fHM/XCJkZVxcdTAxNDhcIjpcImRcXHUwMTQ4b21cIjtjYXNlXCJkZFwiOnJldHVybiBhfHxzP2QrKFFlKGUpP1wiZG5pXCI6XCJkblxceGVkXCIpOmQrXCJkXFx1MDE0OGFtaVwiO2JyZWFrO2Nhc2VcIk1cIjpyZXR1cm4gYXx8cz9cIm1lc2lhY1wiOlwibWVzaWFjb21cIjtjYXNlXCJNTVwiOnJldHVybiBhfHxzP2QrKFFlKGUpP1wibWVzaWFjZVwiOlwibWVzaWFjb3ZcIik6ZCtcIm1lc2lhY21pXCI7YnJlYWs7Y2FzZVwieVwiOnJldHVybiBhfHxzP1wicm9rXCI6XCJyb2tvbVwiO2Nhc2VcInl5XCI6cmV0dXJuIGF8fHM/ZCsoUWUoZSk/XCJyb2t5XCI6XCJyb2tvdlwiKTpkK1wicm9rbWlcIjticmVha319ZnVuY3Rpb24gWmUoZSxhLF8scyl7dmFyIGQ9ZStcIiBcIjtzd2l0Y2goXyl7Y2FzZVwic1wiOnJldHVybiBhfHxzP1wibmVrYWogc2VrdW5kXCI6XCJuZWthaiBzZWt1bmRhbWlcIjtjYXNlXCJzc1wiOnJldHVybiBkKz0xPT09ZT9hP1wic2VrdW5kb1wiOlwic2VrdW5kaVwiOjI9PT1lP2F8fHM/XCJzZWt1bmRpXCI6XCJzZWt1bmRhaFwiOmU8NT9hfHxzP1wic2VrdW5kZVwiOlwic2VrdW5kYWhcIjpcInNla3VuZFwiO2Nhc2VcIm1cIjpyZXR1cm4gYT9cImVuYSBtaW51dGFcIjpcImVubyBtaW51dG9cIjtjYXNlXCJtbVwiOnJldHVybiBkKz0xPT09ZT9hP1wibWludXRhXCI6XCJtaW51dG9cIjoyPT09ZT9hfHxzP1wibWludXRpXCI6XCJtaW51dGFtYVwiOmU8NT9hfHxzP1wibWludXRlXCI6XCJtaW51dGFtaVwiOmF8fHM/XCJtaW51dFwiOlwibWludXRhbWlcIjtjYXNlXCJoXCI6cmV0dXJuIGE/XCJlbmEgdXJhXCI6XCJlbm8gdXJvXCI7Y2FzZVwiaGhcIjpyZXR1cm4gZCs9MT09PWU/YT9cInVyYVwiOlwidXJvXCI6Mj09PWU/YXx8cz9cInVyaVwiOlwidXJhbWFcIjplPDU/YXx8cz9cInVyZVwiOlwidXJhbWlcIjphfHxzP1widXJcIjpcInVyYW1pXCI7Y2FzZVwiZFwiOnJldHVybiBhfHxzP1wiZW4gZGFuXCI6XCJlbmltIGRuZW1cIjtjYXNlXCJkZFwiOnJldHVybiBkKz0xPT09ZT9hfHxzP1wiZGFuXCI6XCJkbmVtXCI6Mj09PWU/YXx8cz9cImRuaVwiOlwiZG5ldm9tYVwiOmF8fHM/XCJkbmlcIjpcImRuZXZpXCI7Y2FzZVwiTVwiOnJldHVybiBhfHxzP1wiZW4gbWVzZWNcIjpcImVuaW0gbWVzZWNlbVwiO2Nhc2VcIk1NXCI6cmV0dXJuIGQrPTE9PT1lP2F8fHM/XCJtZXNlY1wiOlwibWVzZWNlbVwiOjI9PT1lP2F8fHM/XCJtZXNlY2FcIjpcIm1lc2VjZW1hXCI6ZTw1P2F8fHM/XCJtZXNlY2VcIjpcIm1lc2VjaVwiOmF8fHM/XCJtZXNlY2V2XCI6XCJtZXNlY2lcIjtjYXNlXCJ5XCI6cmV0dXJuIGF8fHM/XCJlbm8gbGV0b1wiOlwiZW5pbSBsZXRvbVwiO2Nhc2VcInl5XCI6cmV0dXJuIGQrPTE9PT1lP2F8fHM/XCJsZXRvXCI6XCJsZXRvbVwiOjI9PT1lP2F8fHM/XCJsZXRpXCI6XCJsZXRvbWFcIjplPDU/YXx8cz9cImxldGFcIjpcImxldGlcIjphfHxzP1wibGV0XCI6XCJsZXRpXCJ9fWUuZGVmaW5lTG9jYWxlKFwic2tcIix7bW9udGhzOiRlLG1vbnRoc1Nob3J0OlVlLHdlZWtkYXlzOlwibmVkZVxcdTAxM2VhX3BvbmRlbG9rX3V0b3Jva19zdHJlZGFfXFx1MDE2MXR2cnRva19waWF0b2tfc29ib3RhXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJuZV9wb191dF9zdF9cXHUwMTYxdF9waV9zb1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIm5lX3BvX3V0X3N0X1xcdTAxNjF0X3BpX3NvXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkg6bW1cIixMVFM6XCJIOm1tOnNzXCIsTDpcIkRELk1NLllZWVlcIixMTDpcIkQuIE1NTU0gWVlZWVwiLExMTDpcIkQuIE1NTU0gWVlZWSBIOm1tXCIsTExMTDpcImRkZGQgRC4gTU1NTSBZWVlZIEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbZG5lcyBvXSBMVFwiLG5leHREYXk6XCJbemFqdHJhIG9dIExUXCIsbmV4dFdlZWs6ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5kYXkoKSl7Y2FzZSAwOnJldHVyblwiW3YgbmVkZVxcdTAxM2V1IG9dIExUXCI7Y2FzZSAxOmNhc2UgMjpyZXR1cm5cIlt2XSBkZGRkIFtvXSBMVFwiO2Nhc2UgMzpyZXR1cm5cIlt2IHN0cmVkdSBvXSBMVFwiO2Nhc2UgNDpyZXR1cm5cIlt2byBcXHUwMTYxdHZydG9rIG9dIExUXCI7Y2FzZSA1OnJldHVyblwiW3YgcGlhdG9rIG9dIExUXCI7Y2FzZSA2OnJldHVyblwiW3Ygc29ib3R1IG9dIExUXCJ9fSxsYXN0RGF5OlwiW3ZcXHUwMTBkZXJhIG9dIExUXCIsbGFzdFdlZWs6ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5kYXkoKSl7Y2FzZSAwOnJldHVyblwiW21pbnVsXFx4ZmEgbmVkZVxcdTAxM2V1IG9dIExUXCI7Y2FzZSAxOmNhc2UgMjpyZXR1cm5cIlttaW51bFxceGZkXSBkZGRkIFtvXSBMVFwiO2Nhc2UgMzpyZXR1cm5cIlttaW51bFxceGZhIHN0cmVkdSBvXSBMVFwiO2Nhc2UgNDpjYXNlIDU6cmV0dXJuXCJbbWludWxcXHhmZF0gZGRkZCBbb10gTFRcIjtjYXNlIDY6cmV0dXJuXCJbbWludWxcXHhmYSBzb2JvdHUgb10gTFRcIn19LHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcInphICVzXCIscGFzdDpcInByZWQgJXNcIixzOlZlLHNzOlZlLG06VmUsbW06VmUsaDpWZSxoaDpWZSxkOlZlLGRkOlZlLE06VmUsTU06VmUseTpWZSx5eTpWZX0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn1cXC4vLG9yZGluYWw6XCIlZC5cIix3ZWVrOntkb3c6MSxkb3k6NH19KSxlLmRlZmluZUxvY2FsZShcInNsXCIse21vbnRoczpcImphbnVhcl9mZWJydWFyX21hcmVjX2FwcmlsX21hal9qdW5pal9qdWxpal9hdmd1c3Rfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVjZW1iZXJcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJqYW4uX2ZlYi5fbWFyLl9hcHIuX21hai5fanVuLl9qdWwuX2F2Zy5fc2VwLl9va3QuX25vdi5fZGVjLlwiLnNwbGl0KFwiX1wiKSxtb250aHNQYXJzZUV4YWN0OiEwLHdlZWtkYXlzOlwibmVkZWxqYV9wb25lZGVsamVrX3RvcmVrX3NyZWRhX1xcdTAxMGRldHJ0ZWtfcGV0ZWtfc29ib3RhXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJuZWQuX3Bvbi5fdG9yLl9zcmUuX1xcdTAxMGRldC5fcGV0Ll9zb2IuXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwibmVfcG9fdG9fc3JfXFx1MDEwZGVfcGVfc29cIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcIkg6bW1cIixMVFM6XCJIOm1tOnNzXCIsTDpcIkRELk1NLllZWVlcIixMTDpcIkQuIE1NTU0gWVlZWVwiLExMTDpcIkQuIE1NTU0gWVlZWSBIOm1tXCIsTExMTDpcImRkZGQsIEQuIE1NTU0gWVlZWSBIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW2RhbmVzIG9iXSBMVFwiLG5leHREYXk6XCJbanV0cmkgb2JdIExUXCIsbmV4dFdlZWs6ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5kYXkoKSl7Y2FzZSAwOnJldHVyblwiW3ZdIFtuZWRlbGpvXSBbb2JdIExUXCI7Y2FzZSAzOnJldHVyblwiW3ZdIFtzcmVkb10gW29iXSBMVFwiO2Nhc2UgNjpyZXR1cm5cIlt2XSBbc29ib3RvXSBbb2JdIExUXCI7Y2FzZSAxOmNhc2UgMjpjYXNlIDQ6Y2FzZSA1OnJldHVyblwiW3ZdIGRkZGQgW29iXSBMVFwifX0sbGFzdERheTpcIlt2XFx1MDEwZGVyYWogb2JdIExUXCIsbGFzdFdlZWs6ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5kYXkoKSl7Y2FzZSAwOnJldHVyblwiW3ByZWpcXHUwMTYxbmpvXSBbbmVkZWxqb10gW29iXSBMVFwiO2Nhc2UgMzpyZXR1cm5cIltwcmVqXFx1MDE2MW5qb10gW3NyZWRvXSBbb2JdIExUXCI7Y2FzZSA2OnJldHVyblwiW3ByZWpcXHUwMTYxbmpvXSBbc29ib3RvXSBbb2JdIExUXCI7Y2FzZSAxOmNhc2UgMjpjYXNlIDQ6Y2FzZSA1OnJldHVyblwiW3ByZWpcXHUwMTYxbmppXSBkZGRkIFtvYl0gTFRcIn19LHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIlxcdTAxMGRleiAlc1wiLHBhc3Q6XCJwcmVkICVzXCIsczpaZSxzczpaZSxtOlplLG1tOlplLGg6WmUsaGg6WmUsZDpaZSxkZDpaZSxNOlplLE1NOlplLHk6WmUseXk6WmV9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9XFwuLyxvcmRpbmFsOlwiJWQuXCIsd2Vlazp7ZG93OjEsZG95Ojd9fSksZS5kZWZpbmVMb2NhbGUoXCJzcVwiLHttb250aHM6XCJKYW5hcl9TaGt1cnRfTWFyc19QcmlsbF9NYWpfUWVyc2hvcl9Lb3JyaWtfR3VzaHRfU2h0YXRvcl9UZXRvcl9OXFx4ZWJudG9yX0RoamV0b3JcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJKYW5fU2hrX01hcl9QcmlfTWFqX1Flcl9Lb3JfR3VzX1NodF9UZXRfTlxceGVibl9EaGpcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJFIERpZWxfRSBIXFx4ZWJuXFx4ZWJfRSBNYXJ0XFx4ZWJfRSBNXFx4ZWJya3VyXFx4ZWJfRSBFbmp0ZV9FIFByZW10ZV9FIFNodHVuXFx4ZWJcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIkRpZV9IXFx4ZWJuX01hcl9NXFx4ZWJyX0Vual9QcmVfU2h0XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiRF9IX01hX01cXHhlYl9FX1BfU2hcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLG1lcmlkaWVtUGFyc2U6L1BEfE1ELyxpc1BNOmZ1bmN0aW9uKGUpe3JldHVyblwiTVwiPT09ZS5jaGFyQXQoMCl9LG1lcmlkaWVtOmZ1bmN0aW9uKGUsYSxfKXtyZXR1cm4gZTwxMj9cIlBEXCI6XCJNRFwifSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbU290IG5cXHhlYl0gTFRcIixuZXh0RGF5OlwiW05lc1xceGViciBuXFx4ZWJdIExUXCIsbmV4dFdlZWs6XCJkZGRkIFtuXFx4ZWJdIExUXCIsbGFzdERheTpcIltEamUgblxceGViXSBMVFwiLGxhc3RXZWVrOlwiZGRkZCBbZSBrYWx1YXIgblxceGViXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIm5cXHhlYiAlc1wiLHBhc3Q6XCIlcyBtXFx4ZWIgcGFyXFx4ZWJcIixzOlwiZGlzYSBzZWtvbmRhXCIsc3M6XCIlZCBzZWtvbmRhXCIsbTpcIm5qXFx4ZWIgbWludXRcXHhlYlwiLG1tOlwiJWQgbWludXRhXCIsaDpcIm5qXFx4ZWIgb3JcXHhlYlwiLGhoOlwiJWQgb3JcXHhlYlwiLGQ6XCJualxceGViIGRpdFxceGViXCIsZGQ6XCIlZCBkaXRcXHhlYlwiLE06XCJualxceGViIG11YWpcIixNTTpcIiVkIG11YWpcIix5OlwibmpcXHhlYiB2aXRcIix5eTpcIiVkIHZpdGVcIn0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn1cXC4vLG9yZGluYWw6XCIlZC5cIix3ZWVrOntkb3c6MSxkb3k6NH19KTt2YXIgWGU9e3dvcmRzOntzczpbXCJcXHUwNDQxXFx1MDQzNVxcdTA0M2FcXHUwNDQzXFx1MDQzZFxcdTA0MzRcXHUwNDMwXCIsXCJcXHUwNDQxXFx1MDQzNVxcdTA0M2FcXHUwNDQzXFx1MDQzZFxcdTA0MzRcXHUwNDM1XCIsXCJcXHUwNDQxXFx1MDQzNVxcdTA0M2FcXHUwNDQzXFx1MDQzZFxcdTA0MzRcXHUwNDM4XCJdLG06W1wiXFx1MDQ1OFxcdTA0MzVcXHUwNDM0XFx1MDQzMFxcdTA0M2QgXFx1MDQzY1xcdTA0MzhcXHUwNDNkXFx1MDQ0M1xcdTA0NDJcIixcIlxcdTA0NThcXHUwNDM1XFx1MDQzNFxcdTA0M2RcXHUwNDM1IFxcdTA0M2NcXHUwNDM4XFx1MDQzZFxcdTA0NDNcXHUwNDQyXFx1MDQzNVwiXSxtbTpbXCJcXHUwNDNjXFx1MDQzOFxcdTA0M2RcXHUwNDQzXFx1MDQ0MlwiLFwiXFx1MDQzY1xcdTA0MzhcXHUwNDNkXFx1MDQ0M1xcdTA0NDJcXHUwNDM1XCIsXCJcXHUwNDNjXFx1MDQzOFxcdTA0M2RcXHUwNDQzXFx1MDQ0MlxcdTA0MzBcIl0saDpbXCJcXHUwNDU4XFx1MDQzNVxcdTA0MzRcXHUwNDMwXFx1MDQzZCBcXHUwNDQxXFx1MDQzMFxcdTA0NDJcIixcIlxcdTA0NThcXHUwNDM1XFx1MDQzNFxcdTA0M2RcXHUwNDNlXFx1MDQzMyBcXHUwNDQxXFx1MDQzMFxcdTA0NDJcXHUwNDMwXCJdLGhoOltcIlxcdTA0NDFcXHUwNDMwXFx1MDQ0MlwiLFwiXFx1MDQ0MVxcdTA0MzBcXHUwNDQyXFx1MDQzMFwiLFwiXFx1MDQ0MVxcdTA0MzBcXHUwNDQyXFx1MDQzOFwiXSxkZDpbXCJcXHUwNDM0XFx1MDQzMFxcdTA0M2RcIixcIlxcdTA0MzRcXHUwNDMwXFx1MDQzZFxcdTA0MzBcIixcIlxcdTA0MzRcXHUwNDMwXFx1MDQzZFxcdTA0MzBcIl0sTU06W1wiXFx1MDQzY1xcdTA0MzVcXHUwNDQxXFx1MDQzNVxcdTA0NDZcIixcIlxcdTA0M2NcXHUwNDM1XFx1MDQ0MVxcdTA0MzVcXHUwNDQ2XFx1MDQzMFwiLFwiXFx1MDQzY1xcdTA0MzVcXHUwNDQxXFx1MDQzNVxcdTA0NDZcXHUwNDM4XCJdLHl5OltcIlxcdTA0MzNcXHUwNDNlXFx1MDQzNFxcdTA0MzhcXHUwNDNkXFx1MDQzMFwiLFwiXFx1MDQzM1xcdTA0M2VcXHUwNDM0XFx1MDQzOFxcdTA0M2RcXHUwNDM1XCIsXCJcXHUwNDMzXFx1MDQzZVxcdTA0MzRcXHUwNDM4XFx1MDQzZFxcdTA0MzBcIl19LGNvcnJlY3RHcmFtbWF0aWNhbENhc2U6ZnVuY3Rpb24oZSxhKXtyZXR1cm4gMT09PWU/YVswXTplPj0yJiZlPD00P2FbMV06YVsyXX0sdHJhbnNsYXRlOmZ1bmN0aW9uKGUsYSxfKXt2YXIgcz1YZS53b3Jkc1tfXTtyZXR1cm4gMT09PV8ubGVuZ3RoP2E/c1swXTpzWzFdOmUrXCIgXCIrWGUuY29ycmVjdEdyYW1tYXRpY2FsQ2FzZShlLHMpfX07ZS5kZWZpbmVMb2NhbGUoXCJzci1jeXJsXCIse21vbnRoczpcIlxcdTA0NThcXHUwNDMwXFx1MDQzZFxcdTA0NDNcXHUwNDMwXFx1MDQ0MF9cXHUwNDQ0XFx1MDQzNVxcdTA0MzFcXHUwNDQwXFx1MDQ0M1xcdTA0MzBcXHUwNDQwX1xcdTA0M2NcXHUwNDMwXFx1MDQ0MFxcdTA0NDJfXFx1MDQzMFxcdTA0M2ZcXHUwNDQwXFx1MDQzOFxcdTA0M2JfXFx1MDQzY1xcdTA0MzBcXHUwNDU4X1xcdTA0NThcXHUwNDQzXFx1MDQzZF9cXHUwNDU4XFx1MDQ0M1xcdTA0M2JfXFx1MDQzMFxcdTA0MzJcXHUwNDMzXFx1MDQ0M1xcdTA0NDFcXHUwNDQyX1xcdTA0NDFcXHUwNDM1XFx1MDQzZlxcdTA0NDJcXHUwNDM1XFx1MDQzY1xcdTA0MzFcXHUwNDMwXFx1MDQ0MF9cXHUwNDNlXFx1MDQzYVxcdTA0NDJcXHUwNDNlXFx1MDQzMVxcdTA0MzBcXHUwNDQwX1xcdTA0M2RcXHUwNDNlXFx1MDQzMlxcdTA0MzVcXHUwNDNjXFx1MDQzMVxcdTA0MzBcXHUwNDQwX1xcdTA0MzRcXHUwNDM1XFx1MDQ0NlxcdTA0MzVcXHUwNDNjXFx1MDQzMVxcdTA0MzBcXHUwNDQwXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiXFx1MDQ1OFxcdTA0MzBcXHUwNDNkLl9cXHUwNDQ0XFx1MDQzNVxcdTA0MzEuX1xcdTA0M2NcXHUwNDMwXFx1MDQ0MC5fXFx1MDQzMFxcdTA0M2ZcXHUwNDQwLl9cXHUwNDNjXFx1MDQzMFxcdTA0NThfXFx1MDQ1OFxcdTA0NDNcXHUwNDNkX1xcdTA0NThcXHUwNDQzXFx1MDQzYl9cXHUwNDMwXFx1MDQzMlxcdTA0MzMuX1xcdTA0NDFcXHUwNDM1XFx1MDQzZi5fXFx1MDQzZVxcdTA0M2FcXHUwNDQyLl9cXHUwNDNkXFx1MDQzZVxcdTA0MzIuX1xcdTA0MzRcXHUwNDM1XFx1MDQ0Ni5cIi5zcGxpdChcIl9cIiksbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czpcIlxcdTA0M2RcXHUwNDM1XFx1MDQzNFxcdTA0MzVcXHUwNDU5XFx1MDQzMF9cXHUwNDNmXFx1MDQzZVxcdTA0M2RcXHUwNDM1XFx1MDQzNFxcdTA0MzVcXHUwNDU5XFx1MDQzMFxcdTA0M2FfXFx1MDQ0M1xcdTA0NDJcXHUwNDNlXFx1MDQ0MFxcdTA0MzBcXHUwNDNhX1xcdTA0NDFcXHUwNDQwXFx1MDQzNVxcdTA0MzRcXHUwNDMwX1xcdTA0NDdcXHUwNDM1XFx1MDQ0MlxcdTA0MzJcXHUwNDQwXFx1MDQ0MlxcdTA0MzBcXHUwNDNhX1xcdTA0M2ZcXHUwNDM1XFx1MDQ0MlxcdTA0MzBcXHUwNDNhX1xcdTA0NDFcXHUwNDQzXFx1MDQzMVxcdTA0M2VcXHUwNDQyXFx1MDQzMFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiXFx1MDQzZFxcdTA0MzVcXHUwNDM0Ll9cXHUwNDNmXFx1MDQzZVxcdTA0M2QuX1xcdTA0NDNcXHUwNDQyXFx1MDQzZS5fXFx1MDQ0MVxcdTA0NDBcXHUwNDM1Ll9cXHUwNDQ3XFx1MDQzNVxcdTA0NDIuX1xcdTA0M2ZcXHUwNDM1XFx1MDQ0Mi5fXFx1MDQ0MVxcdTA0NDNcXHUwNDMxLlwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIlxcdTA0M2RcXHUwNDM1X1xcdTA0M2ZcXHUwNDNlX1xcdTA0NDNcXHUwNDQyX1xcdTA0NDFcXHUwNDQwX1xcdTA0NDdcXHUwNDM1X1xcdTA0M2ZcXHUwNDM1X1xcdTA0NDFcXHUwNDQzXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJIOm1tXCIsTFRTOlwiSDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJELiBNTU1NIFlZWVlcIixMTEw6XCJELiBNTU1NIFlZWVkgSDptbVwiLExMTEw6XCJkZGRkLCBELiBNTU1NIFlZWVkgSDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltcXHUwNDM0XFx1MDQzMFxcdTA0M2RcXHUwNDMwXFx1MDQ0MSBcXHUwNDQzXSBMVFwiLG5leHREYXk6XCJbXFx1MDQ0MVxcdTA0NDNcXHUwNDQyXFx1MDQ0MFxcdTA0MzAgXFx1MDQ0M10gTFRcIixuZXh0V2VlazpmdW5jdGlvbigpe3N3aXRjaCh0aGlzLmRheSgpKXtjYXNlIDA6cmV0dXJuXCJbXFx1MDQ0M10gW1xcdTA0M2RcXHUwNDM1XFx1MDQzNFxcdTA0MzVcXHUwNDU5XFx1MDQ0M10gW1xcdTA0NDNdIExUXCI7Y2FzZSAzOnJldHVyblwiW1xcdTA0NDNdIFtcXHUwNDQxXFx1MDQ0MFxcdTA0MzVcXHUwNDM0XFx1MDQ0M10gW1xcdTA0NDNdIExUXCI7Y2FzZSA2OnJldHVyblwiW1xcdTA0NDNdIFtcXHUwNDQxXFx1MDQ0M1xcdTA0MzFcXHUwNDNlXFx1MDQ0MlxcdTA0NDNdIFtcXHUwNDQzXSBMVFwiO2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OmNhc2UgNTpyZXR1cm5cIltcXHUwNDQzXSBkZGRkIFtcXHUwNDQzXSBMVFwifX0sbGFzdERheTpcIltcXHUwNDU4XFx1MDQ0M1xcdTA0NDdcXHUwNDM1IFxcdTA0NDNdIExUXCIsbGFzdFdlZWs6ZnVuY3Rpb24oKXtyZXR1cm5bXCJbXFx1MDQzZlxcdTA0NDBcXHUwNDNlXFx1MDQ0OFxcdTA0M2JcXHUwNDM1XSBbXFx1MDQzZFxcdTA0MzVcXHUwNDM0XFx1MDQzNVxcdTA0NTlcXHUwNDM1XSBbXFx1MDQ0M10gTFRcIixcIltcXHUwNDNmXFx1MDQ0MFxcdTA0M2VcXHUwNDQ4XFx1MDQzYlxcdTA0M2VcXHUwNDMzXSBbXFx1MDQzZlxcdTA0M2VcXHUwNDNkXFx1MDQzNVxcdTA0MzRcXHUwNDM1XFx1MDQ1OVxcdTA0M2FcXHUwNDMwXSBbXFx1MDQ0M10gTFRcIixcIltcXHUwNDNmXFx1MDQ0MFxcdTA0M2VcXHUwNDQ4XFx1MDQzYlxcdTA0M2VcXHUwNDMzXSBbXFx1MDQ0M1xcdTA0NDJcXHUwNDNlXFx1MDQ0MFxcdTA0M2FcXHUwNDMwXSBbXFx1MDQ0M10gTFRcIixcIltcXHUwNDNmXFx1MDQ0MFxcdTA0M2VcXHUwNDQ4XFx1MDQzYlxcdTA0MzVdIFtcXHUwNDQxXFx1MDQ0MFxcdTA0MzVcXHUwNDM0XFx1MDQzNV0gW1xcdTA0NDNdIExUXCIsXCJbXFx1MDQzZlxcdTA0NDBcXHUwNDNlXFx1MDQ0OFxcdTA0M2JcXHUwNDNlXFx1MDQzM10gW1xcdTA0NDdcXHUwNDM1XFx1MDQ0MlxcdTA0MzJcXHUwNDQwXFx1MDQ0MlxcdTA0M2FcXHUwNDMwXSBbXFx1MDQ0M10gTFRcIixcIltcXHUwNDNmXFx1MDQ0MFxcdTA0M2VcXHUwNDQ4XFx1MDQzYlxcdTA0M2VcXHUwNDMzXSBbXFx1MDQzZlxcdTA0MzVcXHUwNDQyXFx1MDQzYVxcdTA0MzBdIFtcXHUwNDQzXSBMVFwiLFwiW1xcdTA0M2ZcXHUwNDQwXFx1MDQzZVxcdTA0NDhcXHUwNDNiXFx1MDQzNV0gW1xcdTA0NDFcXHUwNDQzXFx1MDQzMVxcdTA0M2VcXHUwNDQyXFx1MDQzNV0gW1xcdTA0NDNdIExUXCJdW3RoaXMuZGF5KCldfSxzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJcXHUwNDM3XFx1MDQzMCAlc1wiLHBhc3Q6XCJcXHUwNDNmXFx1MDQ0MFxcdTA0MzUgJXNcIixzOlwiXFx1MDQzZFxcdTA0MzVcXHUwNDNhXFx1MDQzZVxcdTA0M2JcXHUwNDM4XFx1MDQzYVxcdTA0M2UgXFx1MDQ0MVxcdTA0MzVcXHUwNDNhXFx1MDQ0M1xcdTA0M2RcXHUwNDM0XFx1MDQzOFwiLHNzOlhlLnRyYW5zbGF0ZSxtOlhlLnRyYW5zbGF0ZSxtbTpYZS50cmFuc2xhdGUsaDpYZS50cmFuc2xhdGUsaGg6WGUudHJhbnNsYXRlLGQ6XCJcXHUwNDM0XFx1MDQzMFxcdTA0M2RcIixkZDpYZS50cmFuc2xhdGUsTTpcIlxcdTA0M2NcXHUwNDM1XFx1MDQ0MVxcdTA0MzVcXHUwNDQ2XCIsTU06WGUudHJhbnNsYXRlLHk6XCJcXHUwNDMzXFx1MDQzZVxcdTA0MzRcXHUwNDM4XFx1MDQzZFxcdTA0NDNcIix5eTpYZS50cmFuc2xhdGV9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9XFwuLyxvcmRpbmFsOlwiJWQuXCIsd2Vlazp7ZG93OjEsZG95Ojd9fSk7dmFyIGVhPXt3b3Jkczp7c3M6W1wic2VrdW5kYVwiLFwic2VrdW5kZVwiLFwic2VrdW5kaVwiXSxtOltcImplZGFuIG1pbnV0XCIsXCJqZWRuZSBtaW51dGVcIl0sbW06W1wibWludXRcIixcIm1pbnV0ZVwiLFwibWludXRhXCJdLGg6W1wiamVkYW4gc2F0XCIsXCJqZWRub2cgc2F0YVwiXSxoaDpbXCJzYXRcIixcInNhdGFcIixcInNhdGlcIl0sZGQ6W1wiZGFuXCIsXCJkYW5hXCIsXCJkYW5hXCJdLE1NOltcIm1lc2VjXCIsXCJtZXNlY2FcIixcIm1lc2VjaVwiXSx5eTpbXCJnb2RpbmFcIixcImdvZGluZVwiLFwiZ29kaW5hXCJdfSxjb3JyZWN0R3JhbW1hdGljYWxDYXNlOmZ1bmN0aW9uKGUsYSl7cmV0dXJuIDE9PT1lP2FbMF06ZT49MiYmZTw9ND9hWzFdOmFbMl19LHRyYW5zbGF0ZTpmdW5jdGlvbihlLGEsXyl7dmFyIHM9ZWEud29yZHNbX107cmV0dXJuIDE9PT1fLmxlbmd0aD9hP3NbMF06c1sxXTplK1wiIFwiK2VhLmNvcnJlY3RHcmFtbWF0aWNhbENhc2UoZSxzKX19O2UuZGVmaW5lTG9jYWxlKFwic3JcIix7bW9udGhzOlwiamFudWFyX2ZlYnJ1YXJfbWFydF9hcHJpbF9tYWpfanVuX2p1bF9hdmd1c3Rfc2VwdGVtYmFyX29rdG9iYXJfbm92ZW1iYXJfZGVjZW1iYXJcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJqYW4uX2ZlYi5fbWFyLl9hcHIuX21hal9qdW5fanVsX2F2Zy5fc2VwLl9va3QuX25vdi5fZGVjLlwiLnNwbGl0KFwiX1wiKSxtb250aHNQYXJzZUV4YWN0OiEwLHdlZWtkYXlzOlwibmVkZWxqYV9wb25lZGVsamFrX3V0b3Jha19zcmVkYV9cXHUwMTBkZXR2cnRha19wZXRha19zdWJvdGFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIm5lZC5fcG9uLl91dG8uX3NyZS5fXFx1MDEwZGV0Ll9wZXQuX3N1Yi5cIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJuZV9wb191dF9zcl9cXHUwMTBkZV9wZV9zdVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSDptbVwiLExUUzpcIkg6bW06c3NcIixMOlwiREQuTU0uWVlZWVwiLExMOlwiRC4gTU1NTSBZWVlZXCIsTExMOlwiRC4gTU1NTSBZWVlZIEg6bW1cIixMTExMOlwiZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbZGFuYXMgdV0gTFRcIixuZXh0RGF5OlwiW3N1dHJhIHVdIExUXCIsbmV4dFdlZWs6ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5kYXkoKSl7Y2FzZSAwOnJldHVyblwiW3VdIFtuZWRlbGp1XSBbdV0gTFRcIjtjYXNlIDM6cmV0dXJuXCJbdV0gW3NyZWR1XSBbdV0gTFRcIjtjYXNlIDY6cmV0dXJuXCJbdV0gW3N1Ym90dV0gW3VdIExUXCI7Y2FzZSAxOmNhc2UgMjpjYXNlIDQ6Y2FzZSA1OnJldHVyblwiW3VdIGRkZGQgW3VdIExUXCJ9fSxsYXN0RGF5OlwiW2p1XFx1MDEwZGUgdV0gTFRcIixsYXN0V2VlazpmdW5jdGlvbigpe3JldHVybltcIltwcm9cXHUwMTYxbGVdIFtuZWRlbGplXSBbdV0gTFRcIixcIltwcm9cXHUwMTYxbG9nXSBbcG9uZWRlbGprYV0gW3VdIExUXCIsXCJbcHJvXFx1MDE2MWxvZ10gW3V0b3JrYV0gW3VdIExUXCIsXCJbcHJvXFx1MDE2MWxlXSBbc3JlZGVdIFt1XSBMVFwiLFwiW3Byb1xcdTAxNjFsb2ddIFtcXHUwMTBkZXR2cnRrYV0gW3VdIExUXCIsXCJbcHJvXFx1MDE2MWxvZ10gW3BldGthXSBbdV0gTFRcIixcIltwcm9cXHUwMTYxbGVdIFtzdWJvdGVdIFt1XSBMVFwiXVt0aGlzLmRheSgpXX0sc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiemEgJXNcIixwYXN0OlwicHJlICVzXCIsczpcIm5la29saWtvIHNla3VuZGlcIixzczplYS50cmFuc2xhdGUsbTplYS50cmFuc2xhdGUsbW06ZWEudHJhbnNsYXRlLGg6ZWEudHJhbnNsYXRlLGhoOmVhLnRyYW5zbGF0ZSxkOlwiZGFuXCIsZGQ6ZWEudHJhbnNsYXRlLE06XCJtZXNlY1wiLE1NOmVhLnRyYW5zbGF0ZSx5OlwiZ29kaW51XCIseXk6ZWEudHJhbnNsYXRlfSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcLi8sb3JkaW5hbDpcIiVkLlwiLHdlZWs6e2RvdzoxLGRveTo3fX0pLGUuZGVmaW5lTG9jYWxlKFwic3NcIix7bW9udGhzOlwiQmhpbWJpZHZ3YW5lX0luZGxvdmFuYV9JbmRsb3YnbGVua2h1bHVfTWFiYXNhX0lua2h3ZWtod2V0aV9JbmhsYWJhX0tob2x3YW5lX0luZ2NpX0lueW9uaV9JbXBoYWxhX0x3ZXRpX0luZ29uZ29uaVwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIkJoaV9JbmFfSW51X01hYl9JbmtfSW5oX0tob19JZ2NfSW55X0ltcF9Md2VfSWdvXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiTGlzb250Zm9fVW1zb21idWx1a29fTGVzaWJpbGlfTGVzaXRzYXRmdV9MZXNpbmVfTGVzaWhsYW51X1VtZ2NpYmVsb1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiTGlzX1VtYl9Mc2JfTGVzX0xzaV9Mc2hfVW1nXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiTGlfVXNfTGJfTHRfTHNfTGhfVWdcIi5zcGxpdChcIl9cIiksd2Vla2RheXNQYXJzZUV4YWN0OiEwLGxvbmdEYXRlRm9ybWF0OntMVDpcImg6bW0gQVwiLExUUzpcImg6bW06c3MgQVwiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIGg6bW0gQVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSBoOm1tIEFcIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbTmFtdWhsYSBuZ2FdIExUXCIsbmV4dERheTpcIltLdXNhc2EgbmdhXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbbmdhXSBMVFwiLGxhc3REYXk6XCJbSXRvbG8gbmdhXSBMVFwiLGxhc3RXZWVrOlwiZGRkZCBbbGVsaXBoZWxpbGVdIFtuZ2FdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwibmdhICVzXCIscGFzdDpcIndlbnRla2EgbmdhICVzXCIsczpcImVtaXp1endhbmEgbG9tY2FuZVwiLHNzOlwiJWQgbXp1endhbmFcIixtOlwidW16dXp1XCIsbW06XCIlZCBlbWl6dXp1XCIsaDpcImxpaG9yYVwiLGhoOlwiJWQgZW1haG9yYVwiLGQ6XCJsaWxhbmdhXCIsZGQ6XCIlZCBlbWFsYW5nYVwiLE06XCJpbnlhbmdhXCIsTU06XCIlZCB0aW55YW5nYVwiLHk6XCJ1bW55YWthXCIseXk6XCIlZCBpbWlueWFrYVwifSxtZXJpZGllbVBhcnNlOi9la3VzZW5pfGVtaW5pfGVudHNhbWJhbWF8ZWJ1c3VrdS8sbWVyaWRpZW06ZnVuY3Rpb24oZSxhLF8pe3JldHVybiBlPDExP1wiZWt1c2VuaVwiOmU8MTU/XCJlbWluaVwiOmU8MTk/XCJlbnRzYW1iYW1hXCI6XCJlYnVzdWt1XCJ9LG1lcmlkaWVtSG91cjpmdW5jdGlvbihlLGEpe3JldHVybiAxMj09PWUmJihlPTApLFwiZWt1c2VuaVwiPT09YT9lOlwiZW1pbmlcIj09PWE/ZT49MTE/ZTplKzEyOlwiZW50c2FtYmFtYVwiPT09YXx8XCJlYnVzdWt1XCI9PT1hPzA9PT1lPzA6ZSsxMjp2b2lkIDB9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9LyxvcmRpbmFsOlwiJWRcIix3ZWVrOntkb3c6MSxkb3k6NH19KSxlLmRlZmluZUxvY2FsZShcInN2XCIse21vbnRoczpcImphbnVhcmlfZmVicnVhcmlfbWFyc19hcHJpbF9tYWpfanVuaV9qdWxpX2F1Z3VzdGlfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVjZW1iZXJcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJqYW5fZmViX21hcl9hcHJfbWFqX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2RlY1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcInNcXHhmNm5kYWdfbVxceGU1bmRhZ190aXNkYWdfb25zZGFnX3RvcnNkYWdfZnJlZGFnX2xcXHhmNnJkYWdcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcInNcXHhmNm5fbVxceGU1bl90aXNfb25zX3Rvcl9mcmVfbFxceGY2clwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcInNcXHhmNl9tXFx4ZTVfdGlfb25fdG9fZnJfbFxceGY2XCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiWVlZWS1NTS1ERFwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBba2wuXSBISDptbVwiLExMTEw6XCJkZGRkIEQgTU1NTSBZWVlZIFtrbC5dIEhIOm1tXCIsbGxsOlwiRCBNTU0gWVlZWSBISDptbVwiLGxsbGw6XCJkZGQgRCBNTU0gWVlZWSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltJZGFnXSBMVFwiLG5leHREYXk6XCJbSW1vcmdvbl0gTFRcIixsYXN0RGF5OlwiW0lnXFx4ZTVyXSBMVFwiLG5leHRXZWVrOlwiW1BcXHhlNV0gZGRkZCBMVFwiLGxhc3RXZWVrOlwiW0ldIGRkZGRbc10gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJvbSAlc1wiLHBhc3Q6XCJmXFx4ZjZyICVzIHNlZGFuXCIsczpcIm5cXHhlNWdyYSBzZWt1bmRlclwiLHNzOlwiJWQgc2VrdW5kZXJcIixtOlwiZW4gbWludXRcIixtbTpcIiVkIG1pbnV0ZXJcIixoOlwiZW4gdGltbWVcIixoaDpcIiVkIHRpbW1hclwiLGQ6XCJlbiBkYWdcIixkZDpcIiVkIGRhZ2FyXCIsTTpcImVuIG1cXHhlNW5hZFwiLE1NOlwiJWQgbVxceGU1bmFkZXJcIix5OlwiZXR0IFxceGU1clwiLHl5OlwiJWQgXFx4ZTVyXCJ9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9KGV8YSkvLG9yZGluYWw6ZnVuY3Rpb24oZSl7dmFyIGE9ZSUxMDtyZXR1cm4gZSsoMT09fn4oZSUxMDAvMTApP1wiZVwiOjE9PT1hP1wiYVwiOjI9PT1hP1wiYVwiOlwiZVwiKX0sd2Vlazp7ZG93OjEsZG95OjR9fSksZS5kZWZpbmVMb2NhbGUoXCJzd1wiLHttb250aHM6XCJKYW51YXJpX0ZlYnJ1YXJpX01hY2hpX0FwcmlsaV9NZWlfSnVuaV9KdWxhaV9BZ29zdGlfU2VwdGVtYmFfT2t0b2JhX05vdmVtYmFfRGVzZW1iYVwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIkphbl9GZWJfTWFjX0Fwcl9NZWlfSnVuX0p1bF9BZ29fU2VwX09rdF9Ob3ZfRGVzXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiSnVtYXBpbGlfSnVtYXRhdHVfSnVtYW5uZV9KdW1hdGFub19BbGhhbWlzaV9JanVtYWFfSnVtYW1vc2lcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIkpwbF9KdGF0X0pubmVfSnRhbl9BbGhfSWptX0ptb3NcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJKMl9KM19KNF9KNV9BbF9Jal9KMVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1BhcnNlRXhhY3Q6ITAsbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW2xlbyBzYWFdIExUXCIsbmV4dERheTpcIltrZXNobyBzYWFdIExUXCIsbmV4dFdlZWs6XCJbd2lraSBpamF5b10gZGRkZCBbc2FhdF0gTFRcIixsYXN0RGF5OlwiW2phbmFdIExUXCIsbGFzdFdlZWs6XCJbd2lraSBpbGl5b3BpdGFdIGRkZGQgW3NhYXRdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiJXMgYmFhZGF5ZVwiLHBhc3Q6XCJ0b2tlYSAlc1wiLHM6XCJoaXZpIHB1bmRlXCIsc3M6XCJzZWt1bmRlICVkXCIsbTpcImRha2lrYSBtb2phXCIsbW06XCJkYWtpa2EgJWRcIixoOlwic2FhIGxpbW9qYVwiLGhoOlwibWFzYWEgJWRcIixkOlwic2lrdSBtb2phXCIsZGQ6XCJtYXNpa3UgJWRcIixNOlwibXdlemkgbW1vamFcIixNTTpcIm1pZXppICVkXCIseTpcIm13YWthIG1tb2phXCIseXk6XCJtaWFrYSAlZFwifSx3ZWVrOntkb3c6MSxkb3k6N319KTt2YXIgYWE9ezE6XCJcXHUwYmU3XCIsMjpcIlxcdTBiZThcIiwzOlwiXFx1MGJlOVwiLDQ6XCJcXHUwYmVhXCIsNTpcIlxcdTBiZWJcIiw2OlwiXFx1MGJlY1wiLDc6XCJcXHUwYmVkXCIsODpcIlxcdTBiZWVcIiw5OlwiXFx1MGJlZlwiLDA6XCJcXHUwYmU2XCJ9LF9hPXtcIlxcdTBiZTdcIjpcIjFcIixcIlxcdTBiZThcIjpcIjJcIixcIlxcdTBiZTlcIjpcIjNcIixcIlxcdTBiZWFcIjpcIjRcIixcIlxcdTBiZWJcIjpcIjVcIixcIlxcdTBiZWNcIjpcIjZcIixcIlxcdTBiZWRcIjpcIjdcIixcIlxcdTBiZWVcIjpcIjhcIixcIlxcdTBiZWZcIjpcIjlcIixcIlxcdTBiZTZcIjpcIjBcIn07ZS5kZWZpbmVMb2NhbGUoXCJ0YVwiLHttb250aHM6XCJcXHUwYjljXFx1MGJhOVxcdTBiYjVcXHUwYmIwXFx1MGJiZl9cXHUwYmFhXFx1MGJiZlxcdTBiYWFcXHUwYmNkXFx1MGJiMFxcdTBiYjVcXHUwYmIwXFx1MGJiZl9cXHUwYmFlXFx1MGJiZVxcdTBiYjBcXHUwYmNkXFx1MGI5YVxcdTBiY2RfXFx1MGI4ZlxcdTBiYWFcXHUwYmNkXFx1MGJiMFxcdTBiYjJcXHUwYmNkX1xcdTBiYWVcXHUwYmM3X1xcdTBiOWNcXHUwYmMyXFx1MGJhOVxcdTBiY2RfXFx1MGI5Y1xcdTBiYzJcXHUwYmIyXFx1MGJjOF9cXHUwYjg2XFx1MGI5NVxcdTBiYjhcXHUwYmNkXFx1MGI5ZlxcdTBiY2RfXFx1MGI5YVxcdTBiYzZcXHUwYmFhXFx1MGJjZFxcdTBiOWZcXHUwYmM2XFx1MGJhZVxcdTBiY2RcXHUwYmFhXFx1MGJiMFxcdTBiY2RfXFx1MGI4NVxcdTBiOTVcXHUwYmNkXFx1MGI5ZlxcdTBiYzdcXHUwYmJlXFx1MGJhYVxcdTBiYjBcXHUwYmNkX1xcdTBiYThcXHUwYmI1XFx1MGJhZVxcdTBiY2RcXHUwYmFhXFx1MGJiMFxcdTBiY2RfXFx1MGI5ZlxcdTBiYmZcXHUwYjlhXFx1MGJhZVxcdTBiY2RcXHUwYmFhXFx1MGJiMFxcdTBiY2RcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJcXHUwYjljXFx1MGJhOVxcdTBiYjVcXHUwYmIwXFx1MGJiZl9cXHUwYmFhXFx1MGJiZlxcdTBiYWFcXHUwYmNkXFx1MGJiMFxcdTBiYjVcXHUwYmIwXFx1MGJiZl9cXHUwYmFlXFx1MGJiZVxcdTBiYjBcXHUwYmNkXFx1MGI5YVxcdTBiY2RfXFx1MGI4ZlxcdTBiYWFcXHUwYmNkXFx1MGJiMFxcdTBiYjJcXHUwYmNkX1xcdTBiYWVcXHUwYmM3X1xcdTBiOWNcXHUwYmMyXFx1MGJhOVxcdTBiY2RfXFx1MGI5Y1xcdTBiYzJcXHUwYmIyXFx1MGJjOF9cXHUwYjg2XFx1MGI5NVxcdTBiYjhcXHUwYmNkXFx1MGI5ZlxcdTBiY2RfXFx1MGI5YVxcdTBiYzZcXHUwYmFhXFx1MGJjZFxcdTBiOWZcXHUwYmM2XFx1MGJhZVxcdTBiY2RcXHUwYmFhXFx1MGJiMFxcdTBiY2RfXFx1MGI4NVxcdTBiOTVcXHUwYmNkXFx1MGI5ZlxcdTBiYzdcXHUwYmJlXFx1MGJhYVxcdTBiYjBcXHUwYmNkX1xcdTBiYThcXHUwYmI1XFx1MGJhZVxcdTBiY2RcXHUwYmFhXFx1MGJiMFxcdTBiY2RfXFx1MGI5ZlxcdTBiYmZcXHUwYjlhXFx1MGJhZVxcdTBiY2RcXHUwYmFhXFx1MGJiMFxcdTBiY2RcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJcXHUwYjllXFx1MGJiZVxcdTBiYWZcXHUwYmJmXFx1MGJiMVxcdTBiY2RcXHUwYmIxXFx1MGJjMVxcdTBiOTVcXHUwYmNkXFx1MGI5NVxcdTBiYmZcXHUwYmI0XFx1MGJhZVxcdTBiYzhfXFx1MGJhNFxcdTBiYmZcXHUwYjk5XFx1MGJjZFxcdTBiOTVcXHUwYjlmXFx1MGJjZFxcdTBiOTVcXHUwYmJmXFx1MGJiNFxcdTBiYWVcXHUwYmM4X1xcdTBiOWFcXHUwYmM2XFx1MGJiNVxcdTBiY2RcXHUwYmI1XFx1MGJiZVxcdTBiYWZcXHUwYmNkXFx1MGI5NVxcdTBiYmZcXHUwYmI0XFx1MGJhZVxcdTBiYzhfXFx1MGJhYVxcdTBiYzFcXHUwYmE0XFx1MGJhOVxcdTBiY2RcXHUwYjk1XFx1MGJiZlxcdTBiYjRcXHUwYmFlXFx1MGJjOF9cXHUwYmI1XFx1MGJiZlxcdTBiYWZcXHUwYmJlXFx1MGJiNFxcdTBiOTVcXHUwYmNkXFx1MGI5NVxcdTBiYmZcXHUwYmI0XFx1MGJhZVxcdTBiYzhfXFx1MGJiNVxcdTBiYzZcXHUwYmIzXFx1MGJjZFxcdTBiYjNcXHUwYmJmXFx1MGI5NVxcdTBiY2RcXHUwYjk1XFx1MGJiZlxcdTBiYjRcXHUwYmFlXFx1MGJjOF9cXHUwYjlhXFx1MGJhOVxcdTBiYmZcXHUwYjk1XFx1MGJjZFxcdTBiOTVcXHUwYmJmXFx1MGJiNFxcdTBiYWVcXHUwYmM4XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJcXHUwYjllXFx1MGJiZVxcdTBiYWZcXHUwYmJmXFx1MGJiMVxcdTBiYzFfXFx1MGJhNFxcdTBiYmZcXHUwYjk5XFx1MGJjZFxcdTBiOTVcXHUwYmIzXFx1MGJjZF9cXHUwYjlhXFx1MGJjNlxcdTBiYjVcXHUwYmNkXFx1MGJiNVxcdTBiYmVcXHUwYmFmXFx1MGJjZF9cXHUwYmFhXFx1MGJjMVxcdTBiYTRcXHUwYmE5XFx1MGJjZF9cXHUwYmI1XFx1MGJiZlxcdTBiYWZcXHUwYmJlXFx1MGJiNFxcdTBiYTlcXHUwYmNkX1xcdTBiYjVcXHUwYmM2XFx1MGJiM1xcdTBiY2RcXHUwYmIzXFx1MGJiZl9cXHUwYjlhXFx1MGJhOVxcdTBiYmZcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJcXHUwYjllXFx1MGJiZV9cXHUwYmE0XFx1MGJiZl9cXHUwYjlhXFx1MGJjNl9cXHUwYmFhXFx1MGJjMV9cXHUwYmI1XFx1MGJiZl9cXHUwYmI1XFx1MGJjNl9cXHUwYjlhXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSwgSEg6bW1cIixMTExMOlwiZGRkZCwgRCBNTU1NIFlZWVksIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTBiODdcXHUwYmE5XFx1MGJjZFxcdTBiYjFcXHUwYmMxXSBMVFwiLG5leHREYXk6XCJbXFx1MGJhOFxcdTBiYmVcXHUwYmIzXFx1MGJjOF0gTFRcIixuZXh0V2VlazpcImRkZGQsIExUXCIsbGFzdERheTpcIltcXHUwYmE4XFx1MGJjN1xcdTBiYjFcXHUwYmNkXFx1MGJiMVxcdTBiYzFdIExUXCIsbGFzdFdlZWs6XCJbXFx1MGI5NVxcdTBiOWZcXHUwYmE4XFx1MGJjZFxcdTBiYTQgXFx1MGJiNVxcdTBiYmVcXHUwYmIwXFx1MGJhZVxcdTBiY2RdIGRkZGQsIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiJXMgXFx1MGI4N1xcdTBiYjJcXHUwYmNkXCIscGFzdDpcIiVzIFxcdTBiYWVcXHUwYmMxXFx1MGJhOVxcdTBiY2RcIixzOlwiXFx1MGI5MlxcdTBiYjBcXHUwYmMxIFxcdTBiOWFcXHUwYmJmXFx1MGJiMiBcXHUwYmI1XFx1MGJiZlxcdTBiYThcXHUwYmJlXFx1MGI5ZlxcdTBiYmZcXHUwYjk1XFx1MGJiM1xcdTBiY2RcIixzczpcIiVkIFxcdTBiYjVcXHUwYmJmXFx1MGJhOFxcdTBiYmVcXHUwYjlmXFx1MGJiZlxcdTBiOTVcXHUwYmIzXFx1MGJjZFwiLG06XCJcXHUwYjkyXFx1MGJiMFxcdTBiYzEgXFx1MGJhOFxcdTBiYmZcXHUwYmFlXFx1MGJiZlxcdTBiOWZcXHUwYmFlXFx1MGJjZFwiLG1tOlwiJWQgXFx1MGJhOFxcdTBiYmZcXHUwYmFlXFx1MGJiZlxcdTBiOWZcXHUwYjk5XFx1MGJjZFxcdTBiOTVcXHUwYmIzXFx1MGJjZFwiLGg6XCJcXHUwYjkyXFx1MGJiMFxcdTBiYzEgXFx1MGJhZVxcdTBiYTNcXHUwYmJmIFxcdTBiYThcXHUwYmM3XFx1MGJiMFxcdTBiYWVcXHUwYmNkXCIsaGg6XCIlZCBcXHUwYmFlXFx1MGJhM1xcdTBiYmYgXFx1MGJhOFxcdTBiYzdcXHUwYmIwXFx1MGJhZVxcdTBiY2RcIixkOlwiXFx1MGI5MlxcdTBiYjBcXHUwYmMxIFxcdTBiYThcXHUwYmJlXFx1MGJiM1xcdTBiY2RcIixkZDpcIiVkIFxcdTBiYThcXHUwYmJlXFx1MGI5ZlxcdTBiY2RcXHUwYjk1XFx1MGJiM1xcdTBiY2RcIixNOlwiXFx1MGI5MlxcdTBiYjBcXHUwYmMxIFxcdTBiYWVcXHUwYmJlXFx1MGJhNFxcdTBiYWVcXHUwYmNkXCIsTU06XCIlZCBcXHUwYmFlXFx1MGJiZVxcdTBiYTRcXHUwYjk5XFx1MGJjZFxcdTBiOTVcXHUwYmIzXFx1MGJjZFwiLHk6XCJcXHUwYjkyXFx1MGJiMFxcdTBiYzEgXFx1MGJiNVxcdTBiYjBcXHUwYmMxXFx1MGI5ZlxcdTBiYWVcXHUwYmNkXCIseXk6XCIlZCBcXHUwYjg2XFx1MGJhM1xcdTBiY2RcXHUwYjlmXFx1MGJjMVxcdTBiOTVcXHUwYmIzXFx1MGJjZFwifSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfVxcdTBiYjVcXHUwYmE0XFx1MGJjMS8sb3JkaW5hbDpmdW5jdGlvbihlKXtyZXR1cm4gZStcIlxcdTBiYjVcXHUwYmE0XFx1MGJjMVwifSxwcmVwYXJzZTpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9bXFx1MGJlN1xcdTBiZThcXHUwYmU5XFx1MGJlYVxcdTBiZWJcXHUwYmVjXFx1MGJlZFxcdTBiZWVcXHUwYmVmXFx1MGJlNl0vZyxmdW5jdGlvbihlKXtyZXR1cm4gX2FbZV19KX0scG9zdGZvcm1hdDpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9cXGQvZyxmdW5jdGlvbihlKXtyZXR1cm4gYWFbZV19KX0sbWVyaWRpZW1QYXJzZTovXFx1MGJhZlxcdTBiYmVcXHUwYmFlXFx1MGJhZVxcdTBiY2R8XFx1MGJiNVxcdTBiYzhcXHUwYjk1XFx1MGJiMVxcdTBiYzh8XFx1MGI5NVxcdTBiYmVcXHUwYmIyXFx1MGJjOHxcXHUwYmE4XFx1MGJhM1xcdTBiY2RcXHUwYmFhXFx1MGI5NVxcdTBiYjJcXHUwYmNkfFxcdTBiOGVcXHUwYmIxXFx1MGJjZFxcdTBiYWFcXHUwYmJlXFx1MGI5ZlxcdTBiYzF8XFx1MGJhZVxcdTBiYmVcXHUwYmIyXFx1MGJjOC8sbWVyaWRpZW06ZnVuY3Rpb24oZSxhLF8pe3JldHVybiBlPDI/XCIgXFx1MGJhZlxcdTBiYmVcXHUwYmFlXFx1MGJhZVxcdTBiY2RcIjplPDY/XCIgXFx1MGJiNVxcdTBiYzhcXHUwYjk1XFx1MGJiMVxcdTBiYzhcIjplPDEwP1wiIFxcdTBiOTVcXHUwYmJlXFx1MGJiMlxcdTBiYzhcIjplPDE0P1wiIFxcdTBiYThcXHUwYmEzXFx1MGJjZFxcdTBiYWFcXHUwYjk1XFx1MGJiMlxcdTBiY2RcIjplPDE4P1wiIFxcdTBiOGVcXHUwYmIxXFx1MGJjZFxcdTBiYWFcXHUwYmJlXFx1MGI5ZlxcdTBiYzFcIjplPDIyP1wiIFxcdTBiYWVcXHUwYmJlXFx1MGJiMlxcdTBiYzhcIjpcIiBcXHUwYmFmXFx1MGJiZVxcdTBiYWVcXHUwYmFlXFx1MGJjZFwifSxtZXJpZGllbUhvdXI6ZnVuY3Rpb24oZSxhKXtyZXR1cm4gMTI9PT1lJiYoZT0wKSxcIlxcdTBiYWZcXHUwYmJlXFx1MGJhZVxcdTBiYWVcXHUwYmNkXCI9PT1hP2U8Mj9lOmUrMTI6XCJcXHUwYmI1XFx1MGJjOFxcdTBiOTVcXHUwYmIxXFx1MGJjOFwiPT09YXx8XCJcXHUwYjk1XFx1MGJiZVxcdTBiYjJcXHUwYmM4XCI9PT1hP2U6XCJcXHUwYmE4XFx1MGJhM1xcdTBiY2RcXHUwYmFhXFx1MGI5NVxcdTBiYjJcXHUwYmNkXCI9PT1hJiZlPj0xMD9lOmUrMTJ9LHdlZWs6e2RvdzowLGRveTo2fX0pLGUuZGVmaW5lTG9jYWxlKFwidGVcIix7bW9udGhzOlwiXFx1MGMxY1xcdTBjMjhcXHUwYzM1XFx1MGMzMFxcdTBjM2ZfXFx1MGMyYlxcdTBjM2ZcXHUwYzJjXFx1MGM0ZFxcdTBjMzBcXHUwYzM1XFx1MGMzMFxcdTBjM2ZfXFx1MGMyZVxcdTBjM2VcXHUwYzMwXFx1MGM0ZFxcdTBjMWFcXHUwYzNmX1xcdTBjMGZcXHUwYzJhXFx1MGM0ZFxcdTBjMzBcXHUwYzNmXFx1MGMzMlxcdTBjNGRfXFx1MGMyZVxcdTBjNDdfXFx1MGMxY1xcdTBjNDJcXHUwYzI4XFx1MGM0ZF9cXHUwYzFjXFx1MGM0MlxcdTBjMzJcXHUwYzQ2XFx1MGM1Nl9cXHUwYzA2XFx1MGMxN1xcdTBjMzhcXHUwYzRkXFx1MGMxZlxcdTBjNDFfXFx1MGMzOFxcdTBjNDZcXHUwYzJhXFx1MGM0ZFxcdTBjMWZcXHUwYzQ2XFx1MGMwMlxcdTBjMmNcXHUwYzMwXFx1MGM0ZF9cXHUwYzA1XFx1MGMxNVxcdTBjNGRcXHUwYzFmXFx1MGM0YlxcdTBjMmNcXHUwYzMwXFx1MGM0ZF9cXHUwYzI4XFx1MGMzNVxcdTBjMDJcXHUwYzJjXFx1MGMzMFxcdTBjNGRfXFx1MGMyMVxcdTBjM2ZcXHUwYzM4XFx1MGM0NlxcdTBjMDJcXHUwYzJjXFx1MGMzMFxcdTBjNGRcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJcXHUwYzFjXFx1MGMyOC5fXFx1MGMyYlxcdTBjM2ZcXHUwYzJjXFx1MGM0ZFxcdTBjMzAuX1xcdTBjMmVcXHUwYzNlXFx1MGMzMFxcdTBjNGRcXHUwYzFhXFx1MGMzZl9cXHUwYzBmXFx1MGMyYVxcdTBjNGRcXHUwYzMwXFx1MGMzZi5fXFx1MGMyZVxcdTBjNDdfXFx1MGMxY1xcdTBjNDJcXHUwYzI4XFx1MGM0ZF9cXHUwYzFjXFx1MGM0MlxcdTBjMzJcXHUwYzQ2XFx1MGM1Nl9cXHUwYzA2XFx1MGMxNy5fXFx1MGMzOFxcdTBjNDZcXHUwYzJhXFx1MGM0ZC5fXFx1MGMwNVxcdTBjMTVcXHUwYzRkXFx1MGMxZlxcdTBjNGIuX1xcdTBjMjhcXHUwYzM1Ll9cXHUwYzIxXFx1MGMzZlxcdTBjMzhcXHUwYzQ2LlwiLnNwbGl0KFwiX1wiKSxtb250aHNQYXJzZUV4YWN0OiEwLHdlZWtkYXlzOlwiXFx1MGMwNlxcdTBjMjZcXHUwYzNmXFx1MGMzNVxcdTBjM2VcXHUwYzMwXFx1MGMwMl9cXHUwYzM4XFx1MGM0YlxcdTBjMmVcXHUwYzM1XFx1MGMzZVxcdTBjMzBcXHUwYzAyX1xcdTBjMmVcXHUwYzAyXFx1MGMxN1xcdTBjMzNcXHUwYzM1XFx1MGMzZVxcdTBjMzBcXHUwYzAyX1xcdTBjMmNcXHUwYzQxXFx1MGMyN1xcdTBjMzVcXHUwYzNlXFx1MGMzMFxcdTBjMDJfXFx1MGMxN1xcdTBjNDFcXHUwYzMwXFx1MGM0MVxcdTBjMzVcXHUwYzNlXFx1MGMzMFxcdTBjMDJfXFx1MGMzNlxcdTBjNDFcXHUwYzE1XFx1MGM0ZFxcdTBjMzBcXHUwYzM1XFx1MGMzZVxcdTBjMzBcXHUwYzAyX1xcdTBjMzZcXHUwYzI4XFx1MGMzZlxcdTBjMzVcXHUwYzNlXFx1MGMzMFxcdTBjMDJcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlxcdTBjMDZcXHUwYzI2XFx1MGMzZl9cXHUwYzM4XFx1MGM0YlxcdTBjMmVfXFx1MGMyZVxcdTBjMDJcXHUwYzE3XFx1MGMzM19cXHUwYzJjXFx1MGM0MVxcdTBjMjdfXFx1MGMxN1xcdTBjNDFcXHUwYzMwXFx1MGM0MV9cXHUwYzM2XFx1MGM0MVxcdTBjMTVcXHUwYzRkXFx1MGMzMF9cXHUwYzM2XFx1MGMyOFxcdTBjM2ZcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJcXHUwYzA2X1xcdTBjMzhcXHUwYzRiX1xcdTBjMmVcXHUwYzAyX1xcdTBjMmNcXHUwYzQxX1xcdTBjMTdcXHUwYzQxX1xcdTBjMzZcXHUwYzQxX1xcdTBjMzZcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiQSBoOm1tXCIsTFRTOlwiQSBoOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVksIEEgaDptbVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTBjMjhcXHUwYzQ3XFx1MGMyMVxcdTBjNDFdIExUXCIsbmV4dERheTpcIltcXHUwYzMwXFx1MGM0N1xcdTBjMmFcXHUwYzQxXSBMVFwiLG5leHRXZWVrOlwiZGRkZCwgTFRcIixsYXN0RGF5OlwiW1xcdTBjMjhcXHUwYzNmXFx1MGMyOFxcdTBjNGRcXHUwYzI4XSBMVFwiLGxhc3RXZWVrOlwiW1xcdTBjMTdcXHUwYzI0XSBkZGRkLCBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIiVzIFxcdTBjMzJcXHUwYzRiXCIscGFzdDpcIiVzIFxcdTBjMTVcXHUwYzRkXFx1MGMzMFxcdTBjM2ZcXHUwYzI0XFx1MGMwMlwiLHM6XCJcXHUwYzE1XFx1MGM0YVxcdTBjMjhcXHUwYzRkXFx1MGMyOFxcdTBjM2YgXFx1MGMxNVxcdTBjNGRcXHUwYzM3XFx1MGMyM1xcdTBjM2VcXHUwYzMyXFx1MGM0MVwiLHNzOlwiJWQgXFx1MGMzOFxcdTBjNDZcXHUwYzE1XFx1MGMyOFxcdTBjNGRcXHUwYzMyXFx1MGM0MVwiLG06XCJcXHUwYzEyXFx1MGMxNSBcXHUwYzI4XFx1MGMzZlxcdTBjMmVcXHUwYzNmXFx1MGMzN1xcdTBjMDJcIixtbTpcIiVkIFxcdTBjMjhcXHUwYzNmXFx1MGMyZVxcdTBjM2ZcXHUwYzM3XFx1MGMzZVxcdTBjMzJcXHUwYzQxXCIsaDpcIlxcdTBjMTJcXHUwYzE1IFxcdTBjMTdcXHUwYzAyXFx1MGMxZlwiLGhoOlwiJWQgXFx1MGMxN1xcdTBjMDJcXHUwYzFmXFx1MGMzMlxcdTBjNDFcIixkOlwiXFx1MGMxMlxcdTBjMTUgXFx1MGMzMFxcdTBjNGJcXHUwYzFjXFx1MGM0MVwiLGRkOlwiJWQgXFx1MGMzMFxcdTBjNGJcXHUwYzFjXFx1MGM0MVxcdTBjMzJcXHUwYzQxXCIsTTpcIlxcdTBjMTJcXHUwYzE1IFxcdTBjMjhcXHUwYzQ2XFx1MGMzMlwiLE1NOlwiJWQgXFx1MGMyOFxcdTBjNDZcXHUwYzMyXFx1MGMzMlxcdTBjNDFcIix5OlwiXFx1MGMxMlxcdTBjMTUgXFx1MGMzOFxcdTBjMDJcXHUwYzM1XFx1MGMyNFxcdTBjNGRcXHUwYzM4XFx1MGMzMFxcdTBjMDJcIix5eTpcIiVkIFxcdTBjMzhcXHUwYzAyXFx1MGMzNVxcdTBjMjRcXHUwYzRkXFx1MGMzOFxcdTBjMzBcXHUwYzNlXFx1MGMzMlxcdTBjNDFcIn0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn1cXHUwYzM1LyxvcmRpbmFsOlwiJWRcXHUwYzM1XCIsbWVyaWRpZW1QYXJzZTovXFx1MGMzMFxcdTBjM2VcXHUwYzI0XFx1MGM0ZFxcdTBjMzBcXHUwYzNmfFxcdTBjMDlcXHUwYzI2XFx1MGMyZlxcdTBjMDJ8XFx1MGMyZVxcdTBjMjdcXHUwYzRkXFx1MGMyZlxcdTBjM2VcXHUwYzM5XFx1MGM0ZFxcdTBjMjhcXHUwYzAyfFxcdTBjMzhcXHUwYzNlXFx1MGMyZlxcdTBjMDJcXHUwYzI0XFx1MGM0ZFxcdTBjMzBcXHUwYzAyLyxtZXJpZGllbUhvdXI6ZnVuY3Rpb24oZSxhKXtyZXR1cm4gMTI9PT1lJiYoZT0wKSxcIlxcdTBjMzBcXHUwYzNlXFx1MGMyNFxcdTBjNGRcXHUwYzMwXFx1MGMzZlwiPT09YT9lPDQ/ZTplKzEyOlwiXFx1MGMwOVxcdTBjMjZcXHUwYzJmXFx1MGMwMlwiPT09YT9lOlwiXFx1MGMyZVxcdTBjMjdcXHUwYzRkXFx1MGMyZlxcdTBjM2VcXHUwYzM5XFx1MGM0ZFxcdTBjMjhcXHUwYzAyXCI9PT1hP2U+PTEwP2U6ZSsxMjpcIlxcdTBjMzhcXHUwYzNlXFx1MGMyZlxcdTBjMDJcXHUwYzI0XFx1MGM0ZFxcdTBjMzBcXHUwYzAyXCI9PT1hP2UrMTI6dm9pZCAwfSxtZXJpZGllbTpmdW5jdGlvbihlLGEsXyl7cmV0dXJuIGU8ND9cIlxcdTBjMzBcXHUwYzNlXFx1MGMyNFxcdTBjNGRcXHUwYzMwXFx1MGMzZlwiOmU8MTA/XCJcXHUwYzA5XFx1MGMyNlxcdTBjMmZcXHUwYzAyXCI6ZTwxNz9cIlxcdTBjMmVcXHUwYzI3XFx1MGM0ZFxcdTBjMmZcXHUwYzNlXFx1MGMzOVxcdTBjNGRcXHUwYzI4XFx1MGMwMlwiOmU8MjA/XCJcXHUwYzM4XFx1MGMzZVxcdTBjMmZcXHUwYzAyXFx1MGMyNFxcdTBjNGRcXHUwYzMwXFx1MGMwMlwiOlwiXFx1MGMzMFxcdTBjM2VcXHUwYzI0XFx1MGM0ZFxcdTBjMzBcXHUwYzNmXCJ9LHdlZWs6e2RvdzowLGRveTo2fX0pLGUuZGVmaW5lTG9jYWxlKFwidGV0XCIse21vbnRoczpcIkphbmVpcnVfRmV2ZXJlaXJ1X01hcnN1X0FicmlsX01haXVfSnVcXHhmMXVfSnVsbHVfQWd1c3R1X1NldGVtYnJ1X091dHVicnVfTm92ZW1icnVfRGV6ZW1icnVcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJKYW5fRmV2X01hcl9BYnJfTWFpX0p1bl9KdWxfQWdvX1NldF9PdXRfTm92X0RlelwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIkRvbWluZ3VfU2VndW5kYV9UZXJzYV9LdWFydGFfS2ludGFfU2VzdGFfU2FiYWR1XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJEb21fU2VnX1RlcnNfS3VhX0tpbnRfU2VzdF9TYWJcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJEb19TZWdfVGVfS3VfS2lfU2VzX1NhXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltPaGluIGloYV0gTFRcIixuZXh0RGF5OlwiW0FiYW4gaWhhXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbaWhhXSBMVFwiLGxhc3REYXk6XCJbSG9yaXNlaWsgaWhhXSBMVFwiLGxhc3RXZWVrOlwiZGRkZCBbc2VtYW5hIGtvdHVrXSBbaWhhXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcImloYSAlc1wiLHBhc3Q6XCIlcyBsaXViYVwiLHM6XCJtaW51dHUgYmFsdW5cIixzczpcIm1pbnV0dSAlZFwiLG06XCJtaW51dHUgaWRhXCIsbW06XCJtaW51dHUgJWRcIixoOlwib3JhcyBpZGFcIixoaDpcIm9yYXMgJWRcIixkOlwibG9yb24gaWRhXCIsZGQ6XCJsb3JvbiAlZFwiLE06XCJmdWxhbiBpZGFcIixNTTpcImZ1bGFuICVkXCIseTpcInRpbmFuIGlkYVwiLHl5OlwidGluYW4gJWRcIn0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxvcmRpbmFsOmZ1bmN0aW9uKGUpe3ZhciBhPWUlMTA7cmV0dXJuIGUrKDE9PX5+KGUlMTAwLzEwKT9cInRoXCI6MT09PWE/XCJzdFwiOjI9PT1hP1wibmRcIjozPT09YT9cInJkXCI6XCJ0aFwiKX0sd2Vlazp7ZG93OjEsZG95OjR9fSk7dmFyIHNhPXswOlwiLVxcdTA0NDNcXHUwNDNjXCIsMTpcIi1cXHUwNDQzXFx1MDQzY1wiLDI6XCItXFx1MDQ0ZVxcdTA0M2NcIiwzOlwiLVxcdTA0NGVcXHUwNDNjXCIsNDpcIi1cXHUwNDQzXFx1MDQzY1wiLDU6XCItXFx1MDQ0M1xcdTA0M2NcIiw2OlwiLVxcdTA0NDNcXHUwNDNjXCIsNzpcIi1cXHUwNDQzXFx1MDQzY1wiLDg6XCItXFx1MDQ0M1xcdTA0M2NcIiw5OlwiLVxcdTA0NDNcXHUwNDNjXCIsMTA6XCItXFx1MDQ0M1xcdTA0M2NcIiwxMjpcIi1cXHUwNDQzXFx1MDQzY1wiLDEzOlwiLVxcdTA0NDNcXHUwNDNjXCIsMjA6XCItXFx1MDQ0M1xcdTA0M2NcIiwzMDpcIi1cXHUwNDRlXFx1MDQzY1wiLDQwOlwiLVxcdTA0NDNcXHUwNDNjXCIsNTA6XCItXFx1MDQ0M1xcdTA0M2NcIiw2MDpcIi1cXHUwNDQzXFx1MDQzY1wiLDcwOlwiLVxcdTA0NDNcXHUwNDNjXCIsODA6XCItXFx1MDQ0M1xcdTA0M2NcIiw5MDpcIi1cXHUwNDQzXFx1MDQzY1wiLDEwMDpcIi1cXHUwNDQzXFx1MDQzY1wifTtlLmRlZmluZUxvY2FsZShcInRnXCIse21vbnRoczpcIlxcdTA0NGZcXHUwNDNkXFx1MDQzMlxcdTA0MzBcXHUwNDQwX1xcdTA0NDRcXHUwNDM1XFx1MDQzMlxcdTA0NDBcXHUwNDMwXFx1MDQzYl9cXHUwNDNjXFx1MDQzMFxcdTA0NDBcXHUwNDQyX1xcdTA0MzBcXHUwNDNmXFx1MDQ0MFxcdTA0MzVcXHUwNDNiX1xcdTA0M2NcXHUwNDMwXFx1MDQzOV9cXHUwNDM4XFx1MDQ0ZVxcdTA0M2RfXFx1MDQzOFxcdTA0NGVcXHUwNDNiX1xcdTA0MzBcXHUwNDMyXFx1MDQzM1xcdTA0NDNcXHUwNDQxXFx1MDQ0Ml9cXHUwNDQxXFx1MDQzNVxcdTA0M2RcXHUwNDQyXFx1MDQ0ZlxcdTA0MzFcXHUwNDQwX1xcdTA0M2VcXHUwNDNhXFx1MDQ0MlxcdTA0NGZcXHUwNDMxXFx1MDQ0MF9cXHUwNDNkXFx1MDQzZVxcdTA0NGZcXHUwNDMxXFx1MDQ0MF9cXHUwNDM0XFx1MDQzNVxcdTA0M2FcXHUwNDMwXFx1MDQzMVxcdTA0NDBcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJcXHUwNDRmXFx1MDQzZFxcdTA0MzJfXFx1MDQ0NFxcdTA0MzVcXHUwNDMyX1xcdTA0M2NcXHUwNDMwXFx1MDQ0MF9cXHUwNDMwXFx1MDQzZlxcdTA0NDBfXFx1MDQzY1xcdTA0MzBcXHUwNDM5X1xcdTA0MzhcXHUwNDRlXFx1MDQzZF9cXHUwNDM4XFx1MDQ0ZVxcdTA0M2JfXFx1MDQzMFxcdTA0MzJcXHUwNDMzX1xcdTA0NDFcXHUwNDM1XFx1MDQzZF9cXHUwNDNlXFx1MDQzYVxcdTA0NDJfXFx1MDQzZFxcdTA0M2VcXHUwNDRmX1xcdTA0MzRcXHUwNDM1XFx1MDQzYVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIlxcdTA0NGZcXHUwNDNhXFx1MDQ0OFxcdTA0MzBcXHUwNDNkXFx1MDQzMVxcdTA0MzVfXFx1MDQzNFxcdTA0NDNcXHUwNDQ4XFx1MDQzMFxcdTA0M2RcXHUwNDMxXFx1MDQzNV9cXHUwNDQxXFx1MDQzNVxcdTA0NDhcXHUwNDMwXFx1MDQzZFxcdTA0MzFcXHUwNDM1X1xcdTA0NDdcXHUwNDNlXFx1MDQ0MFxcdTA0NDhcXHUwNDMwXFx1MDQzZFxcdTA0MzFcXHUwNDM1X1xcdTA0M2ZcXHUwNDMwXFx1MDQzZFxcdTA0YjdcXHUwNDQ4XFx1MDQzMFxcdTA0M2RcXHUwNDMxXFx1MDQzNV9cXHUwNGI3XFx1MDQ0M1xcdTA0M2NcXHUwNDRhXFx1MDQzMF9cXHUwNDQ4XFx1MDQzMFxcdTA0M2RcXHUwNDMxXFx1MDQzNVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiXFx1MDQ0ZlxcdTA0NDhcXHUwNDMxX1xcdTA0MzRcXHUwNDQ4XFx1MDQzMV9cXHUwNDQxXFx1MDQ0OFxcdTA0MzFfXFx1MDQ0N1xcdTA0NDhcXHUwNDMxX1xcdTA0M2ZcXHUwNDQ4XFx1MDQzMV9cXHUwNGI3XFx1MDQ0M1xcdTA0M2NfXFx1MDQ0OFxcdTA0M2RcXHUwNDMxXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiXFx1MDQ0ZlxcdTA0NDhfXFx1MDQzNFxcdTA0NDhfXFx1MDQ0MVxcdTA0NDhfXFx1MDQ0N1xcdTA0NDhfXFx1MDQzZlxcdTA0NDhfXFx1MDRiN1xcdTA0M2NfXFx1MDQ0OFxcdTA0MzFcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTA0MThcXHUwNDNjXFx1MDQ0MFxcdTA0ZWZcXHUwNDM3IFxcdTA0NDFcXHUwNDNlXFx1MDQzMFxcdTA0NDJcXHUwNDM4XSBMVFwiLG5leHREYXk6XCJbXFx1MDQxZlxcdTA0MzBcXHUwNDMzXFx1MDQzZVxcdTA0YjMgXFx1MDQ0MVxcdTA0M2VcXHUwNDMwXFx1MDQ0MlxcdTA0MzhdIExUXCIsbGFzdERheTpcIltcXHUwNDE0XFx1MDQzOFxcdTA0NDBcXHUwNGVmXFx1MDQzNyBcXHUwNDQxXFx1MDQzZVxcdTA0MzBcXHUwNDQyXFx1MDQzOF0gTFRcIixuZXh0V2VlazpcImRkZGRbXFx1MDQzOF0gW1xcdTA0YjNcXHUwNDMwXFx1MDQ0NFxcdTA0NDJcXHUwNDMwXFx1MDQzOCBcXHUwNDNlXFx1MDQ0ZlxcdTA0M2RcXHUwNDM0XFx1MDQzMCBcXHUwNDQxXFx1MDQzZVxcdTA0MzBcXHUwNDQyXFx1MDQzOF0gTFRcIixsYXN0V2VlazpcImRkZGRbXFx1MDQzOF0gW1xcdTA0YjNcXHUwNDMwXFx1MDQ0NFxcdTA0NDJcXHUwNDMwXFx1MDQzOCBcXHUwNDMzXFx1MDQ0M1xcdTA0MzdcXHUwNDMwXFx1MDQ0OFxcdTA0NDJcXHUwNDMwIFxcdTA0NDFcXHUwNDNlXFx1MDQzMFxcdTA0NDJcXHUwNDM4XSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIlxcdTA0MzFcXHUwNDMwXFx1MDQ0YVxcdTA0MzRcXHUwNDM4ICVzXCIscGFzdDpcIiVzIFxcdTA0M2ZcXHUwNDM1XFx1MDQ0OFwiLHM6XCJcXHUwNDRmXFx1MDQzYVxcdTA0NDdcXHUwNDMwXFx1MDQzZFxcdTA0MzQgXFx1MDQ0MVxcdTA0M2VcXHUwNDNkXFx1MDQzOFxcdTA0NGZcIixtOlwiXFx1MDQ0ZlxcdTA0M2EgXFx1MDQzNFxcdTA0MzBcXHUwNDliXFx1MDQzOFxcdTA0OWJcXHUwNDMwXCIsbW06XCIlZCBcXHUwNDM0XFx1MDQzMFxcdTA0OWJcXHUwNDM4XFx1MDQ5YlxcdTA0MzBcIixoOlwiXFx1MDQ0ZlxcdTA0M2EgXFx1MDQ0MVxcdTA0M2VcXHUwNDMwXFx1MDQ0MlwiLGhoOlwiJWQgXFx1MDQ0MVxcdTA0M2VcXHUwNDMwXFx1MDQ0MlwiLGQ6XCJcXHUwNDRmXFx1MDQzYSBcXHUwNDQwXFx1MDRlZlxcdTA0MzdcIixkZDpcIiVkIFxcdTA0NDBcXHUwNGVmXFx1MDQzN1wiLE06XCJcXHUwNDRmXFx1MDQzYSBcXHUwNDNjXFx1MDQzZVxcdTA0YjNcIixNTTpcIiVkIFxcdTA0M2NcXHUwNDNlXFx1MDRiM1wiLHk6XCJcXHUwNDRmXFx1MDQzYSBcXHUwNDQxXFx1MDQzZVxcdTA0M2JcIix5eTpcIiVkIFxcdTA0NDFcXHUwNDNlXFx1MDQzYlwifSxtZXJpZGllbVBhcnNlOi9cXHUwNDQ4XFx1MDQzMFxcdTA0MzF8XFx1MDQ0MVxcdTA0NDNcXHUwNDMxXFx1MDRiM3xcXHUwNDQwXFx1MDRlZlxcdTA0Mzd8XFx1MDQzMVxcdTA0MzVcXHUwNDMzXFx1MDQzZVxcdTA0YjMvLG1lcmlkaWVtSG91cjpmdW5jdGlvbihlLGEpe3JldHVybiAxMj09PWUmJihlPTApLFwiXFx1MDQ0OFxcdTA0MzBcXHUwNDMxXCI9PT1hP2U8ND9lOmUrMTI6XCJcXHUwNDQxXFx1MDQ0M1xcdTA0MzFcXHUwNGIzXCI9PT1hP2U6XCJcXHUwNDQwXFx1MDRlZlxcdTA0MzdcIj09PWE/ZT49MTE/ZTplKzEyOlwiXFx1MDQzMVxcdTA0MzVcXHUwNDMzXFx1MDQzZVxcdTA0YjNcIj09PWE/ZSsxMjp2b2lkIDB9LG1lcmlkaWVtOmZ1bmN0aW9uKGUsYSxfKXtyZXR1cm4gZTw0P1wiXFx1MDQ0OFxcdTA0MzBcXHUwNDMxXCI6ZTwxMT9cIlxcdTA0NDFcXHUwNDQzXFx1MDQzMVxcdTA0YjNcIjplPDE2P1wiXFx1MDQ0MFxcdTA0ZWZcXHUwNDM3XCI6ZTwxOT9cIlxcdTA0MzFcXHUwNDM1XFx1MDQzM1xcdTA0M2VcXHUwNGIzXCI6XCJcXHUwNDQ4XFx1MDQzMFxcdTA0MzFcIn0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn0tKFxcdTA0NDNcXHUwNDNjfFxcdTA0NGVcXHUwNDNjKS8sb3JkaW5hbDpmdW5jdGlvbihlKXtyZXR1cm4gZSsoc2FbZV18fHNhW2UlMTBdfHxzYVtlPj0xMDA/MTAwOm51bGxdKX0sd2Vlazp7ZG93OjEsZG95Ojd9fSksZS5kZWZpbmVMb2NhbGUoXCJ0aFwiLHttb250aHM6XCJcXHUwZTIxXFx1MGUwMVxcdTBlMjNcXHUwZTMyXFx1MGUwNFxcdTBlMjFfXFx1MGUwMVxcdTBlMzhcXHUwZTIxXFx1MGUyMFxcdTBlMzJcXHUwZTFlXFx1MGUzMVxcdTBlMTlcXHUwZTE4XFx1MGU0Y19cXHUwZTIxXFx1MGUzNVxcdTBlMTlcXHUwZTMyXFx1MGUwNFxcdTBlMjFfXFx1MGU0MFxcdTBlMjFcXHUwZTI5XFx1MGUzMlxcdTBlMjJcXHUwZTE5X1xcdTBlMWVcXHUwZTI0XFx1MGUyOVxcdTBlMjBcXHUwZTMyXFx1MGUwNFxcdTBlMjFfXFx1MGUyMVxcdTBlMzRcXHUwZTE2XFx1MGUzOFxcdTBlMTlcXHUwZTMyXFx1MGUyMlxcdTBlMTlfXFx1MGUwMVxcdTBlMjNcXHUwZTAxXFx1MGUwZVxcdTBlMzJcXHUwZTA0XFx1MGUyMV9cXHUwZTJhXFx1MGUzNFxcdTBlMDdcXHUwZTJiXFx1MGUzMlxcdTBlMDRcXHUwZTIxX1xcdTBlMDFcXHUwZTMxXFx1MGUxOVxcdTBlMjJcXHUwZTMyXFx1MGUyMlxcdTBlMTlfXFx1MGUxNVxcdTBlMzhcXHUwZTI1XFx1MGUzMlxcdTBlMDRcXHUwZTIxX1xcdTBlMWVcXHUwZTI0XFx1MGUyOFxcdTBlMDhcXHUwZTM0XFx1MGUwMVxcdTBlMzJcXHUwZTIyXFx1MGUxOV9cXHUwZTE4XFx1MGUzMVxcdTBlMTlcXHUwZTI3XFx1MGUzMlxcdTBlMDRcXHUwZTIxXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiXFx1MGUyMS5cXHUwZTA0Ll9cXHUwZTAxLlxcdTBlMWUuX1xcdTBlMjFcXHUwZTM1LlxcdTBlMDQuX1xcdTBlNDBcXHUwZTIxLlxcdTBlMjIuX1xcdTBlMWUuXFx1MGUwNC5fXFx1MGUyMVxcdTBlMzQuXFx1MGUyMi5fXFx1MGUwMS5cXHUwZTA0Ll9cXHUwZTJhLlxcdTBlMDQuX1xcdTBlMDEuXFx1MGUyMi5fXFx1MGUxNS5cXHUwZTA0Ll9cXHUwZTFlLlxcdTBlMjIuX1xcdTBlMTguXFx1MGUwNC5cIi5zcGxpdChcIl9cIiksbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czpcIlxcdTBlMmRcXHUwZTMyXFx1MGUxN1xcdTBlMzRcXHUwZTE1XFx1MGUyMlxcdTBlNGNfXFx1MGUwOFxcdTBlMzFcXHUwZTE5XFx1MGUxN1xcdTBlMjNcXHUwZTRjX1xcdTBlMmRcXHUwZTMxXFx1MGUwN1xcdTBlMDRcXHUwZTMyXFx1MGUyM19cXHUwZTFlXFx1MGUzOFxcdTBlMThfXFx1MGUxZVxcdTBlMjRcXHUwZTJiXFx1MGUzMVxcdTBlMmFcXHUwZTFhXFx1MGUxNFxcdTBlMzVfXFx1MGUyOFxcdTBlMzhcXHUwZTAxXFx1MGUyM1xcdTBlNGNfXFx1MGU0MFxcdTBlMmFcXHUwZTMyXFx1MGUyM1xcdTBlNGNcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlxcdTBlMmRcXHUwZTMyXFx1MGUxN1xcdTBlMzRcXHUwZTE1XFx1MGUyMlxcdTBlNGNfXFx1MGUwOFxcdTBlMzFcXHUwZTE5XFx1MGUxN1xcdTBlMjNcXHUwZTRjX1xcdTBlMmRcXHUwZTMxXFx1MGUwN1xcdTBlMDRcXHUwZTMyXFx1MGUyM19cXHUwZTFlXFx1MGUzOFxcdTBlMThfXFx1MGUxZVxcdTBlMjRcXHUwZTJiXFx1MGUzMVxcdTBlMmFfXFx1MGUyOFxcdTBlMzhcXHUwZTAxXFx1MGUyM1xcdTBlNGNfXFx1MGU0MFxcdTBlMmFcXHUwZTMyXFx1MGUyM1xcdTBlNGNcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJcXHUwZTJkXFx1MGUzMi5fXFx1MGUwOC5fXFx1MGUyZC5fXFx1MGUxZS5fXFx1MGUxZVxcdTBlMjQuX1xcdTBlMjguX1xcdTBlMmEuXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJIOm1tXCIsTFRTOlwiSDptbTpzc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIFxcdTBlNDBcXHUwZTI3XFx1MGUyNVxcdTBlMzIgSDptbVwiLExMTEw6XCJcXHUwZTI3XFx1MGUzMVxcdTBlMTlkZGRkXFx1MGUxN1xcdTBlMzVcXHUwZTQ4IEQgTU1NTSBZWVlZIFxcdTBlNDBcXHUwZTI3XFx1MGUyNVxcdTBlMzIgSDptbVwifSxtZXJpZGllbVBhcnNlOi9cXHUwZTAxXFx1MGU0OFxcdTBlMmRcXHUwZTE5XFx1MGU0MFxcdTBlMTdcXHUwZTM1XFx1MGU0OFxcdTBlMjJcXHUwZTA3fFxcdTBlMmJcXHUwZTI1XFx1MGUzMVxcdTBlMDdcXHUwZTQwXFx1MGUxN1xcdTBlMzVcXHUwZTQ4XFx1MGUyMlxcdTBlMDcvLGlzUE06ZnVuY3Rpb24oZSl7cmV0dXJuXCJcXHUwZTJiXFx1MGUyNVxcdTBlMzFcXHUwZTA3XFx1MGU0MFxcdTBlMTdcXHUwZTM1XFx1MGU0OFxcdTBlMjJcXHUwZTA3XCI9PT1lfSxtZXJpZGllbTpmdW5jdGlvbihlLGEsXyl7cmV0dXJuIGU8MTI/XCJcXHUwZTAxXFx1MGU0OFxcdTBlMmRcXHUwZTE5XFx1MGU0MFxcdTBlMTdcXHUwZTM1XFx1MGU0OFxcdTBlMjJcXHUwZTA3XCI6XCJcXHUwZTJiXFx1MGUyNVxcdTBlMzFcXHUwZTA3XFx1MGU0MFxcdTBlMTdcXHUwZTM1XFx1MGU0OFxcdTBlMjJcXHUwZTA3XCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTBlMjdcXHUwZTMxXFx1MGUxOVxcdTBlMTlcXHUwZTM1XFx1MGU0OSBcXHUwZTQwXFx1MGUyN1xcdTBlMjVcXHUwZTMyXSBMVFwiLG5leHREYXk6XCJbXFx1MGUxZVxcdTBlMjNcXHUwZTM4XFx1MGU0OFxcdTBlMDdcXHUwZTE5XFx1MGUzNVxcdTBlNDkgXFx1MGU0MFxcdTBlMjdcXHUwZTI1XFx1MGUzMl0gTFRcIixuZXh0V2VlazpcImRkZGRbXFx1MGUyYlxcdTBlMTlcXHUwZTQ5XFx1MGUzMiBcXHUwZTQwXFx1MGUyN1xcdTBlMjVcXHUwZTMyXSBMVFwiLGxhc3REYXk6XCJbXFx1MGU0MFxcdTBlMjFcXHUwZTM3XFx1MGU0OFxcdTBlMmRcXHUwZTI3XFx1MGUzMlxcdTBlMTlcXHUwZTE5XFx1MGUzNVxcdTBlNDkgXFx1MGU0MFxcdTBlMjdcXHUwZTI1XFx1MGUzMl0gTFRcIixsYXN0V2VlazpcIltcXHUwZTI3XFx1MGUzMVxcdTBlMTldZGRkZFtcXHUwZTE3XFx1MGUzNVxcdTBlNDhcXHUwZTQxXFx1MGUyNVxcdTBlNDlcXHUwZTI3IFxcdTBlNDBcXHUwZTI3XFx1MGUyNVxcdTBlMzJdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiXFx1MGUyZFxcdTBlMzVcXHUwZTAxICVzXCIscGFzdDpcIiVzXFx1MGUxN1xcdTBlMzVcXHUwZTQ4XFx1MGU0MVxcdTBlMjVcXHUwZTQ5XFx1MGUyN1wiLHM6XCJcXHUwZTQ0XFx1MGUyMVxcdTBlNDhcXHUwZTAxXFx1MGUzNVxcdTBlNDhcXHUwZTI3XFx1MGUzNFxcdTBlMTlcXHUwZTMyXFx1MGUxN1xcdTBlMzVcIixzczpcIiVkIFxcdTBlMjdcXHUwZTM0XFx1MGUxOVxcdTBlMzJcXHUwZTE3XFx1MGUzNVwiLG06XCIxIFxcdTBlMTlcXHUwZTMyXFx1MGUxN1xcdTBlMzVcIixtbTpcIiVkIFxcdTBlMTlcXHUwZTMyXFx1MGUxN1xcdTBlMzVcIixoOlwiMSBcXHUwZTBhXFx1MGUzMVxcdTBlNDhcXHUwZTI3XFx1MGU0MlxcdTBlMjFcXHUwZTA3XCIsaGg6XCIlZCBcXHUwZTBhXFx1MGUzMVxcdTBlNDhcXHUwZTI3XFx1MGU0MlxcdTBlMjFcXHUwZTA3XCIsZDpcIjEgXFx1MGUyN1xcdTBlMzFcXHUwZTE5XCIsZGQ6XCIlZCBcXHUwZTI3XFx1MGUzMVxcdTBlMTlcIixNOlwiMSBcXHUwZTQwXFx1MGUxNFxcdTBlMzdcXHUwZTJkXFx1MGUxOVwiLE1NOlwiJWQgXFx1MGU0MFxcdTBlMTRcXHUwZTM3XFx1MGUyZFxcdTBlMTlcIix5OlwiMSBcXHUwZTFiXFx1MGUzNVwiLHl5OlwiJWQgXFx1MGUxYlxcdTBlMzVcIn19KSxlLmRlZmluZUxvY2FsZShcInRsLXBoXCIse21vbnRoczpcIkVuZXJvX1BlYnJlcm9fTWFyc29fQWJyaWxfTWF5b19IdW55b19IdWx5b19BZ29zdG9fU2V0eWVtYnJlX09rdHVicmVfTm9ieWVtYnJlX0Rpc3llbWJyZVwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIkVuZV9QZWJfTWFyX0Ficl9NYXlfSHVuX0h1bF9BZ29fU2V0X09rdF9Ob2JfRGlzXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiTGluZ2dvX0x1bmVzX01hcnRlc19NaXllcmt1bGVzX0h1d2ViZXNfQml5ZXJuZXNfU2FiYWRvXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJMaW5fTHVuX01hcl9NaXlfSHV3X0JpeV9TYWJcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJMaV9MdV9NYV9NaV9IdV9CaV9TYWJcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJNTS9EL1lZWVlcIixMTDpcIk1NTU0gRCwgWVlZWVwiLExMTDpcIk1NTU0gRCwgWVlZWSBISDptbVwiLExMTEw6XCJkZGRkLCBNTU1NIERELCBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiTFQgW25nYXlvbmcgYXJhd11cIixuZXh0RGF5OlwiW0J1a2FzIG5nXSBMVFwiLG5leHRXZWVrOlwiTFQgW3NhIHN1c3Vub2QgbmFdIGRkZGRcIixsYXN0RGF5OlwiTFQgW2thaGFwb25dXCIsbGFzdFdlZWs6XCJMVCBbbm9vbmcgbmFrYXJhYW5nXSBkZGRkXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwic2EgbG9vYiBuZyAlc1wiLHBhc3Q6XCIlcyBhbmcgbmFrYWxpcGFzXCIsczpcImlsYW5nIHNlZ3VuZG9cIixzczpcIiVkIHNlZ3VuZG9cIixtOlwiaXNhbmcgbWludXRvXCIsbW06XCIlZCBtaW51dG9cIixoOlwiaXNhbmcgb3Jhc1wiLGhoOlwiJWQgb3Jhc1wiLGQ6XCJpc2FuZyBhcmF3XCIsZGQ6XCIlZCBhcmF3XCIsTTpcImlzYW5nIGJ1d2FuXCIsTU06XCIlZCBidXdhblwiLHk6XCJpc2FuZyB0YW9uXCIseXk6XCIlZCB0YW9uXCJ9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9LyxvcmRpbmFsOmZ1bmN0aW9uKGUpe3JldHVybiBlfSx3ZWVrOntkb3c6MSxkb3k6NH19KTt2YXIgZGE9XCJwYWdoX3dhXFx1MjAxOV9jaGFcXHUyMDE5X3dlal9sb1NfdmFnaF9qYXZfU29jaF9jaG9yZ2hfSHV0XCIuc3BsaXQoXCJfXCIpO2Z1bmN0aW9uIHRhKGUsYSxfLHMpe3ZhciBkPWZ1bmN0aW9uKGUpe3ZhciBhPU1hdGguZmxvb3IoZSUxZTMvMTAwKSxfPU1hdGguZmxvb3IoZSUxMDAvMTApLHM9ZSUxMCxkPVwiXCI7YT4wJiYoZCs9ZGFbYV0rXCJ2YXRsaFwiKTtfPjAmJihkKz0oXCJcIiE9PWQ/XCIgXCI6XCJcIikrZGFbX10rXCJtYUhcIik7cz4wJiYoZCs9KFwiXCIhPT1kP1wiIFwiOlwiXCIpK2RhW3NdKTtyZXR1cm5cIlwiPT09ZD9cInBhZ2hcIjpkfShlKTtzd2l0Y2goXyl7Y2FzZVwic3NcIjpyZXR1cm4gZCtcIiBsdXBcIjtjYXNlXCJtbVwiOnJldHVybiBkK1wiIHR1cFwiO2Nhc2VcImhoXCI6cmV0dXJuIGQrXCIgcmVwXCI7Y2FzZVwiZGRcIjpyZXR1cm4gZCtcIiBqYWpcIjtjYXNlXCJNTVwiOnJldHVybiBkK1wiIGphclwiO2Nhc2VcInl5XCI6cmV0dXJuIGQrXCIgRElTXCJ9fWUuZGVmaW5lTG9jYWxlKFwidGxoXCIse21vbnRoczpcInRlcmFcXHUyMDE5IGphciB3YVxcdTIwMTlfdGVyYVxcdTIwMTkgamFyIGNoYVxcdTIwMTlfdGVyYVxcdTIwMTkgamFyIHdlal90ZXJhXFx1MjAxOSBqYXIgbG9TX3RlcmFcXHUyMDE5IGphciB2YWdoX3RlcmFcXHUyMDE5IGphciBqYXZfdGVyYVxcdTIwMTkgamFyIFNvY2hfdGVyYVxcdTIwMTkgamFyIGNob3JnaF90ZXJhXFx1MjAxOSBqYXIgSHV0X3RlcmFcXHUyMDE5IGphciB3YVxcdTIwMTltYUhfdGVyYVxcdTIwMTkgamFyIHdhXFx1MjAxOW1hSCB3YVxcdTIwMTlfdGVyYVxcdTIwMTkgamFyIHdhXFx1MjAxOW1hSCBjaGFcXHUyMDE5XCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiamFyIHdhXFx1MjAxOV9qYXIgY2hhXFx1MjAxOV9qYXIgd2VqX2phciBsb1NfamFyIHZhZ2hfamFyIGphdl9qYXIgU29jaF9qYXIgY2hvcmdoX2phciBIdXRfamFyIHdhXFx1MjAxOW1hSF9qYXIgd2FcXHUyMDE5bWFIIHdhXFx1MjAxOV9qYXIgd2FcXHUyMDE5bWFIIGNoYVxcdTIwMTlcIi5zcGxpdChcIl9cIiksbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czpcImxvam1JdGphal9EYVNqYWpfcG92amFqX2doSXRsaGphal9sb2doamFqX2J1cWphal9naEluamFqXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJsb2ptSXRqYWpfRGFTamFqX3Bvdmphal9naEl0bGhqYWpfbG9naGphal9idXFqYWpfZ2hJbmphalwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcImxvam1JdGphal9EYVNqYWpfcG92amFqX2doSXRsaGphal9sb2doamFqX2J1cWphal9naEluamFqXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQuTU0uWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltEYUhqYWpdIExUXCIsbmV4dERheTpcIlt3YVxcdTIwMTlsZVNdIExUXCIsbmV4dFdlZWs6XCJMTExcIixsYXN0RGF5OlwiW3dhXFx1MjAxOUh1XFx1MjAxOV0gTFRcIixsYXN0V2VlazpcIkxMTFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpmdW5jdGlvbihlKXt2YXIgYT1lO3JldHVybiBhPS0xIT09ZS5pbmRleE9mKFwiamFqXCIpP2Euc2xpY2UoMCwtMykrXCJsZVNcIjotMSE9PWUuaW5kZXhPZihcImphclwiKT9hLnNsaWNlKDAsLTMpK1wid2FRXCI6LTEhPT1lLmluZGV4T2YoXCJESVNcIik/YS5zbGljZSgwLC0zKStcIm5lbVwiOmErXCIgcElxXCJ9LHBhc3Q6ZnVuY3Rpb24oZSl7dmFyIGE9ZTtyZXR1cm4gYT0tMSE9PWUuaW5kZXhPZihcImphalwiKT9hLnNsaWNlKDAsLTMpK1wiSHVcXHUyMDE5XCI6LTEhPT1lLmluZGV4T2YoXCJqYXJcIik/YS5zbGljZSgwLC0zKStcIndlblwiOi0xIT09ZS5pbmRleE9mKFwiRElTXCIpP2Euc2xpY2UoMCwtMykrXCJiZW5cIjphK1wiIHJldFwifSxzOlwicHVTIGx1cFwiLHNzOnRhLG06XCJ3YVxcdTIwMTkgdHVwXCIsbW06dGEsaDpcIndhXFx1MjAxOSByZXBcIixoaDp0YSxkOlwid2FcXHUyMDE5IGphalwiLGRkOnRhLE06XCJ3YVxcdTIwMTkgamFyXCIsTU06dGEseTpcIndhXFx1MjAxOSBESVNcIix5eTp0YX0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn1cXC4vLG9yZGluYWw6XCIlZC5cIix3ZWVrOntkb3c6MSxkb3k6NH19KTt2YXIgbmE9ezE6XCInaW5jaVwiLDU6XCInaW5jaVwiLDg6XCInaW5jaVwiLDcwOlwiJ2luY2lcIiw4MDpcIidpbmNpXCIsMjpcIiduY2lcIiw3OlwiJ25jaVwiLDIwOlwiJ25jaVwiLDUwOlwiJ25jaVwiLDM6XCInXFx4ZmNuY1xceGZjXCIsNDpcIidcXHhmY25jXFx4ZmNcIiwxMDA6XCInXFx4ZmNuY1xceGZjXCIsNjpcIiduY1xcdTAxMzFcIiw5OlwiJ3VuY3VcIiwxMDpcIid1bmN1XCIsMzA6XCIndW5jdVwiLDYwOlwiJ1xcdTAxMzFuY1xcdTAxMzFcIiw5MDpcIidcXHUwMTMxbmNcXHUwMTMxXCJ9O2Z1bmN0aW9uIHJhKGUsYSxfLHMpe3ZhciBkPXtzOltcInZpZW5zYXMgc2VjdW5kc1wiLFwiJ2llbnNhcyBzZWN1bmRzXCJdLHNzOltlK1wiIHNlY3VuZHNcIixlK1wiIHNlY3VuZHNcIl0sbTpbXCInbiBtXFx4ZWR1dFwiLFwiJ2llbnMgbVxceGVkdXRcIl0sbW06W2UrXCIgbVxceGVkdXRzXCIsZStcIiBtXFx4ZWR1dHNcIl0saDpbXCInbiBcXHhmZW9yYVwiLFwiJ2llbnNhIFxceGZlb3JhXCJdLGhoOltlK1wiIFxceGZlb3Jhc1wiLGUrXCIgXFx4ZmVvcmFzXCJdLGQ6W1wiJ24geml1YVwiLFwiJ2llbnNhIHppdWFcIl0sZGQ6W2UrXCIgeml1YXNcIixlK1wiIHppdWFzXCJdLE06W1wiJ24gbWVzXCIsXCInaWVucyBtZXNcIl0sTU06W2UrXCIgbWVzZW5cIixlK1wiIG1lc2VuXCJdLHk6W1wiJ24gYXJcIixcIidpZW5zIGFyXCJdLHl5OltlK1wiIGFyc1wiLGUrXCIgYXJzXCJdfTtyZXR1cm4gcz9kW19dWzBdOmE/ZFtfXVswXTpkW19dWzFdfWZ1bmN0aW9uIGlhKGUsYSxfKXt2YXIgcyxkO3JldHVyblwibVwiPT09Xz9hP1wiXFx1MDQ0NVxcdTA0MzJcXHUwNDM4XFx1MDQzYlxcdTA0MzhcXHUwNDNkXFx1MDQzMFwiOlwiXFx1MDQ0NVxcdTA0MzJcXHUwNDM4XFx1MDQzYlxcdTA0MzhcXHUwNDNkXFx1MDQ0M1wiOlwiaFwiPT09Xz9hP1wiXFx1MDQzM1xcdTA0M2VcXHUwNDM0XFx1MDQzOFxcdTA0M2RcXHUwNDMwXCI6XCJcXHUwNDMzXFx1MDQzZVxcdTA0MzRcXHUwNDM4XFx1MDQzZFxcdTA0NDNcIjplK1wiIFwiKyhzPStlLGQ9e3NzOmE/XCJcXHUwNDQxXFx1MDQzNVxcdTA0M2FcXHUwNDQzXFx1MDQzZFxcdTA0MzRcXHUwNDMwX1xcdTA0NDFcXHUwNDM1XFx1MDQzYVxcdTA0NDNcXHUwNDNkXFx1MDQzNFxcdTA0MzhfXFx1MDQ0MVxcdTA0MzVcXHUwNDNhXFx1MDQ0M1xcdTA0M2RcXHUwNDM0XCI6XCJcXHUwNDQxXFx1MDQzNVxcdTA0M2FcXHUwNDQzXFx1MDQzZFxcdTA0MzRcXHUwNDQzX1xcdTA0NDFcXHUwNDM1XFx1MDQzYVxcdTA0NDNcXHUwNDNkXFx1MDQzNFxcdTA0MzhfXFx1MDQ0MVxcdTA0MzVcXHUwNDNhXFx1MDQ0M1xcdTA0M2RcXHUwNDM0XCIsbW06YT9cIlxcdTA0NDVcXHUwNDMyXFx1MDQzOFxcdTA0M2JcXHUwNDM4XFx1MDQzZFxcdTA0MzBfXFx1MDQ0NVxcdTA0MzJcXHUwNDM4XFx1MDQzYlxcdTA0MzhcXHUwNDNkXFx1MDQzOF9cXHUwNDQ1XFx1MDQzMlxcdTA0MzhcXHUwNDNiXFx1MDQzOFxcdTA0M2RcIjpcIlxcdTA0NDVcXHUwNDMyXFx1MDQzOFxcdTA0M2JcXHUwNDM4XFx1MDQzZFxcdTA0NDNfXFx1MDQ0NVxcdTA0MzJcXHUwNDM4XFx1MDQzYlxcdTA0MzhcXHUwNDNkXFx1MDQzOF9cXHUwNDQ1XFx1MDQzMlxcdTA0MzhcXHUwNDNiXFx1MDQzOFxcdTA0M2RcIixoaDphP1wiXFx1MDQzM1xcdTA0M2VcXHUwNDM0XFx1MDQzOFxcdTA0M2RcXHUwNDMwX1xcdTA0MzNcXHUwNDNlXFx1MDQzNFxcdTA0MzhcXHUwNDNkXFx1MDQzOF9cXHUwNDMzXFx1MDQzZVxcdTA0MzRcXHUwNDM4XFx1MDQzZFwiOlwiXFx1MDQzM1xcdTA0M2VcXHUwNDM0XFx1MDQzOFxcdTA0M2RcXHUwNDQzX1xcdTA0MzNcXHUwNDNlXFx1MDQzNFxcdTA0MzhcXHUwNDNkXFx1MDQzOF9cXHUwNDMzXFx1MDQzZVxcdTA0MzRcXHUwNDM4XFx1MDQzZFwiLGRkOlwiXFx1MDQzNFxcdTA0MzVcXHUwNDNkXFx1MDQ0Y19cXHUwNDM0XFx1MDQzZFxcdTA0NTZfXFx1MDQzNFxcdTA0M2RcXHUwNDU2XFx1MDQzMlwiLE1NOlwiXFx1MDQzY1xcdTA0NTZcXHUwNDQxXFx1MDQ0ZlxcdTA0NDZcXHUwNDRjX1xcdTA0M2NcXHUwNDU2XFx1MDQ0MVxcdTA0NGZcXHUwNDQ2XFx1MDQ1Nl9cXHUwNDNjXFx1MDQ1NlxcdTA0NDFcXHUwNDRmXFx1MDQ0NlxcdTA0NTZcXHUwNDMyXCIseXk6XCJcXHUwNDQwXFx1MDQ1NlxcdTA0M2FfXFx1MDQ0MFxcdTA0M2VcXHUwNDNhXFx1MDQzOF9cXHUwNDQwXFx1MDQzZVxcdTA0M2FcXHUwNDU2XFx1MDQzMlwifVtfXS5zcGxpdChcIl9cIikscyUxMD09MSYmcyUxMDAhPTExP2RbMF06cyUxMD49MiYmcyUxMDw9NCYmKHMlMTAwPDEwfHxzJTEwMD49MjApP2RbMV06ZFsyXSl9ZnVuY3Rpb24gbWEoZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUrXCJcXHUwNDNlXCIrKDExPT09dGhpcy5ob3VycygpP1wiXFx1MDQzMVwiOlwiXCIpK1wiXSBMVFwifX1lLmRlZmluZUxvY2FsZShcInRyXCIse21vbnRoczpcIk9jYWtfXFx1MDE1ZXViYXRfTWFydF9OaXNhbl9NYXlcXHUwMTMxc19IYXppcmFuX1RlbW11el9BXFx1MDExZnVzdG9zX0V5bFxceGZjbF9Fa2ltX0thc1xcdTAxMzFtX0FyYWxcXHUwMTMxa1wiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIk9jYV9cXHUwMTVldWJfTWFyX05pc19NYXlfSGF6X1RlbV9BXFx1MDExZnVfRXlsX0VraV9LYXNfQXJhXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiUGF6YXJfUGF6YXJ0ZXNpX1NhbFxcdTAxMzFfXFx4YzdhclxcdTAxNWZhbWJhX1BlclxcdTAxNWZlbWJlX0N1bWFfQ3VtYXJ0ZXNpXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJQYXpfUHRzX1NhbF9cXHhjN2FyX1Blcl9DdW1fQ3RzXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiUHpfUHRfU2FfXFx4YzdhX1BlX0N1X0N0XCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQuTU0uWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltidWdcXHhmY24gc2FhdF0gTFRcIixuZXh0RGF5OlwiW3lhclxcdTAxMzFuIHNhYXRdIExUXCIsbmV4dFdlZWs6XCJbZ2VsZWNla10gZGRkZCBbc2FhdF0gTFRcIixsYXN0RGF5OlwiW2RcXHhmY25dIExUXCIsbGFzdFdlZWs6XCJbZ2VcXHhlN2VuXSBkZGRkIFtzYWF0XSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIiVzIHNvbnJhXCIscGFzdDpcIiVzIFxceGY2bmNlXCIsczpcImJpcmthXFx4ZTcgc2FuaXllXCIsc3M6XCIlZCBzYW5peWVcIixtOlwiYmlyIGRha2lrYVwiLG1tOlwiJWQgZGFraWthXCIsaDpcImJpciBzYWF0XCIsaGg6XCIlZCBzYWF0XCIsZDpcImJpciBnXFx4ZmNuXCIsZGQ6XCIlZCBnXFx4ZmNuXCIsTTpcImJpciBheVwiLE1NOlwiJWQgYXlcIix5OlwiYmlyIHlcXHUwMTMxbFwiLHl5OlwiJWQgeVxcdTAxMzFsXCJ9LG9yZGluYWw6ZnVuY3Rpb24oZSxhKXtzd2l0Y2goYSl7Y2FzZVwiZFwiOmNhc2VcIkRcIjpjYXNlXCJEb1wiOmNhc2VcIkREXCI6cmV0dXJuIGU7ZGVmYXVsdDppZigwPT09ZSlyZXR1cm4gZStcIidcXHUwMTMxbmNcXHUwMTMxXCI7dmFyIF89ZSUxMDtyZXR1cm4gZSsobmFbX118fG5hW2UlMTAwLV9dfHxuYVtlPj0xMDA/MTAwOm51bGxdKX19LHdlZWs6e2RvdzoxLGRveTo3fX0pLGUuZGVmaW5lTG9jYWxlKFwidHpsXCIse21vbnRoczpcIkphbnVhcl9GZXZyYWdsaF9NYXJcXHhlN19BdnJcXHhlZnVfTWFpX0dcXHhmY25fSnVsaWFfR3VzY2h0X1NldGVtdmFyX0xpc3RvcFxceGU0dHNfTm9lbXZhcl9aZWNlbXZhclwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIkphbl9GZXZfTWFyX0F2cl9NYWlfR1xceGZjbl9KdWxfR3VzX1NldF9MaXNfTm9lX1plY1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIlNcXHhmYWxhZGlfTFxceGZhbmVcXHhlN2lfTWFpdHppX01cXHhlMXJjdXJpX1hoXFx4ZmFhZGlfVmlcXHhlOW5lclxceGU3aV9TXFx4ZTF0dXJpXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJTXFx4ZmFsX0xcXHhmYW5fTWFpX01cXHhlMXJfWGhcXHhmYV9WaVxceGU5X1NcXHhlMXRcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJTXFx4ZmFfTFxceGZhX01hX01cXHhlMV9YaF9WaV9TXFx4ZTFcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEgubW1cIixMVFM6XCJISC5tbS5zc1wiLEw6XCJERC5NTS5ZWVlZXCIsTEw6XCJELiBNTU1NIFtkYWxsYXNdIFlZWVlcIixMTEw6XCJELiBNTU1NIFtkYWxsYXNdIFlZWVkgSEgubW1cIixMTExMOlwiZGRkZCwgW2xpXSBELiBNTU1NIFtkYWxsYXNdIFlZWVkgSEgubW1cIn0sbWVyaWRpZW1QYXJzZTovZFxcJ298ZFxcJ2EvaSxpc1BNOmZ1bmN0aW9uKGUpe3JldHVyblwiZCdvXCI9PT1lLnRvTG93ZXJDYXNlKCl9LG1lcmlkaWVtOmZ1bmN0aW9uKGUsYSxfKXtyZXR1cm4gZT4xMT9fP1wiZCdvXCI6XCJEJ09cIjpfP1wiZCdhXCI6XCJEJ0FcIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbb3hoaSBcXHhlMF0gTFRcIixuZXh0RGF5OlwiW2RlbVxceGUwIFxceGUwXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbXFx4ZTBdIExUXCIsbGFzdERheTpcIltpZWlyaSBcXHhlMF0gTFRcIixsYXN0V2VlazpcIltzXFx4ZmNyIGVsXSBkZGRkIFtsYXN0ZXUgXFx4ZTBdIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwib3NwcmVpICVzXCIscGFzdDpcImphJXNcIixzOnJhLHNzOnJhLG06cmEsbW06cmEsaDpyYSxoaDpyYSxkOnJhLGRkOnJhLE06cmEsTU06cmEseTpyYSx5eTpyYX0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFxkezEsMn1cXC4vLG9yZGluYWw6XCIlZC5cIix3ZWVrOntkb3c6MSxkb3k6NH19KSxlLmRlZmluZUxvY2FsZShcInR6bS1sYXRuXCIse21vbnRoczpcImlubmF5cl9iclxcdTAyZTRheXJcXHUwMmU0X21hclxcdTAyZTRzXFx1MDJlNF9pYnJpcl9tYXl5d195d255d195d2x5d3pfXFx1MDI2M3dcXHUwMTYxdF9cXHUwMTYxd3RhbmJpcl9rdFxcdTAyZTR3YnJcXHUwMmU0X253d2FuYmlyX2R3am5iaXJcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCJpbm5heXJfYnJcXHUwMmU0YXlyXFx1MDJlNF9tYXJcXHUwMmU0c1xcdTAyZTRfaWJyaXJfbWF5eXdfeXdueXdfeXdseXd6X1xcdTAyNjN3XFx1MDE2MXRfXFx1MDE2MXd0YW5iaXJfa3RcXHUwMmU0d2JyXFx1MDJlNF9ud3dhbmJpcl9kd2puYmlyXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiYXNhbWFzX2F5bmFzX2FzaW5hc19ha3Jhc19ha3dhc19hc2ltd2FzX2FzaVxcdTFlMGR5YXNcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcImFzYW1hc19heW5hc19hc2luYXNfYWtyYXNfYWt3YXNfYXNpbXdhc19hc2lcXHUxZTBkeWFzXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiYXNhbWFzX2F5bmFzX2FzaW5hc19ha3Jhc19ha3dhc19hc2ltd2FzX2FzaVxcdTFlMGR5YXNcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQgRCBNTU1NIFlZWVkgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbYXNka2ggZ10gTFRcIixuZXh0RGF5OlwiW2Fza2EgZ10gTFRcIixuZXh0V2VlazpcImRkZGQgW2ddIExUXCIsbGFzdERheTpcIlthc3NhbnQgZ10gTFRcIixsYXN0V2VlazpcImRkZGQgW2ddIExUXCIsc2FtZUVsc2U6XCJMXCJ9LHJlbGF0aXZlVGltZTp7ZnV0dXJlOlwiZGFka2ggcyB5YW4gJXNcIixwYXN0OlwieWFuICVzXCIsczpcImltaWtcIixzczpcIiVkIGltaWtcIixtOlwibWludVxcdTFlMGRcIixtbTpcIiVkIG1pbnVcXHUxZTBkXCIsaDpcInNhXFx1MDI1YmFcIixoaDpcIiVkIHRhc3NhXFx1MDI1YmluXCIsZDpcImFzc1wiLGRkOlwiJWQgb3NzYW5cIixNOlwiYXlvd3JcIixNTTpcIiVkIGl5eWlyblwiLHk6XCJhc2dhc1wiLHl5OlwiJWQgaXNnYXNuXCJ9LHdlZWs6e2Rvdzo2LGRveToxMn19KSxlLmRlZmluZUxvY2FsZShcInR6bVwiLHttb250aHM6XCJcXHUyZDQ5XFx1MmQ0ZlxcdTJkNGZcXHUyZDMwXFx1MmQ2MlxcdTJkNTRfXFx1MmQzMVxcdTJkNTVcXHUyZDMwXFx1MmQ2MlxcdTJkNTVfXFx1MmQ0ZVxcdTJkMzBcXHUyZDU1XFx1MmQ1YV9cXHUyZDQ5XFx1MmQzMVxcdTJkNTRcXHUyZDQ5XFx1MmQ1NF9cXHUyZDRlXFx1MmQzMFxcdTJkNjJcXHUyZDYyXFx1MmQ1M19cXHUyZDYyXFx1MmQ1M1xcdTJkNGZcXHUyZDYyXFx1MmQ1M19cXHUyZDYyXFx1MmQ1M1xcdTJkNGRcXHUyZDYyXFx1MmQ1M1xcdTJkNjNfXFx1MmQ1NlxcdTJkNTNcXHUyZDViXFx1MmQ1Y19cXHUyZDViXFx1MmQ1M1xcdTJkNWNcXHUyZDMwXFx1MmQ0ZlxcdTJkMzFcXHUyZDQ5XFx1MmQ1NF9cXHUyZDNkXFx1MmQ1ZlxcdTJkNTNcXHUyZDMxXFx1MmQ1NV9cXHUyZDRmXFx1MmQ1M1xcdTJkNjFcXHUyZDMwXFx1MmQ0ZlxcdTJkMzFcXHUyZDQ5XFx1MmQ1NF9cXHUyZDM3XFx1MmQ1M1xcdTJkNGFcXHUyZDRmXFx1MmQzMVxcdTJkNDlcXHUyZDU0XCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiXFx1MmQ0OVxcdTJkNGZcXHUyZDRmXFx1MmQzMFxcdTJkNjJcXHUyZDU0X1xcdTJkMzFcXHUyZDU1XFx1MmQzMFxcdTJkNjJcXHUyZDU1X1xcdTJkNGVcXHUyZDMwXFx1MmQ1NVxcdTJkNWFfXFx1MmQ0OVxcdTJkMzFcXHUyZDU0XFx1MmQ0OVxcdTJkNTRfXFx1MmQ0ZVxcdTJkMzBcXHUyZDYyXFx1MmQ2MlxcdTJkNTNfXFx1MmQ2MlxcdTJkNTNcXHUyZDRmXFx1MmQ2MlxcdTJkNTNfXFx1MmQ2MlxcdTJkNTNcXHUyZDRkXFx1MmQ2MlxcdTJkNTNcXHUyZDYzX1xcdTJkNTZcXHUyZDUzXFx1MmQ1YlxcdTJkNWNfXFx1MmQ1YlxcdTJkNTNcXHUyZDVjXFx1MmQzMFxcdTJkNGZcXHUyZDMxXFx1MmQ0OVxcdTJkNTRfXFx1MmQzZFxcdTJkNWZcXHUyZDUzXFx1MmQzMVxcdTJkNTVfXFx1MmQ0ZlxcdTJkNTNcXHUyZDYxXFx1MmQzMFxcdTJkNGZcXHUyZDMxXFx1MmQ0OVxcdTJkNTRfXFx1MmQzN1xcdTJkNTNcXHUyZDRhXFx1MmQ0ZlxcdTJkMzFcXHUyZDQ5XFx1MmQ1NFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIlxcdTJkMzBcXHUyZDU5XFx1MmQzMFxcdTJkNGVcXHUyZDMwXFx1MmQ1OV9cXHUyZDMwXFx1MmQ2MlxcdTJkNGZcXHUyZDMwXFx1MmQ1OV9cXHUyZDMwXFx1MmQ1OVxcdTJkNDlcXHUyZDRmXFx1MmQzMFxcdTJkNTlfXFx1MmQzMFxcdTJkM2RcXHUyZDU0XFx1MmQzMFxcdTJkNTlfXFx1MmQzMFxcdTJkM2RcXHUyZDYxXFx1MmQzMFxcdTJkNTlfXFx1MmQzMFxcdTJkNTlcXHUyZDQ5XFx1MmQ0ZVxcdTJkNjFcXHUyZDMwXFx1MmQ1OV9cXHUyZDMwXFx1MmQ1OVxcdTJkNDlcXHUyZDM5XFx1MmQ2MlxcdTJkMzBcXHUyZDU5XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJcXHUyZDMwXFx1MmQ1OVxcdTJkMzBcXHUyZDRlXFx1MmQzMFxcdTJkNTlfXFx1MmQzMFxcdTJkNjJcXHUyZDRmXFx1MmQzMFxcdTJkNTlfXFx1MmQzMFxcdTJkNTlcXHUyZDQ5XFx1MmQ0ZlxcdTJkMzBcXHUyZDU5X1xcdTJkMzBcXHUyZDNkXFx1MmQ1NFxcdTJkMzBcXHUyZDU5X1xcdTJkMzBcXHUyZDNkXFx1MmQ2MVxcdTJkMzBcXHUyZDU5X1xcdTJkMzBcXHUyZDU5XFx1MmQ0OVxcdTJkNGVcXHUyZDYxXFx1MmQzMFxcdTJkNTlfXFx1MmQzMFxcdTJkNTlcXHUyZDQ5XFx1MmQzOVxcdTJkNjJcXHUyZDMwXFx1MmQ1OVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIlxcdTJkMzBcXHUyZDU5XFx1MmQzMFxcdTJkNGVcXHUyZDMwXFx1MmQ1OV9cXHUyZDMwXFx1MmQ2MlxcdTJkNGZcXHUyZDMwXFx1MmQ1OV9cXHUyZDMwXFx1MmQ1OVxcdTJkNDlcXHUyZDRmXFx1MmQzMFxcdTJkNTlfXFx1MmQzMFxcdTJkM2RcXHUyZDU0XFx1MmQzMFxcdTJkNTlfXFx1MmQzMFxcdTJkM2RcXHUyZDYxXFx1MmQzMFxcdTJkNTlfXFx1MmQzMFxcdTJkNTlcXHUyZDQ5XFx1MmQ0ZVxcdTJkNjFcXHUyZDMwXFx1MmQ1OV9cXHUyZDMwXFx1MmQ1OVxcdTJkNDlcXHUyZDM5XFx1MmQ2MlxcdTJkMzBcXHUyZDU5XCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTJkMzBcXHUyZDU5XFx1MmQzN1xcdTJkNDUgXFx1MmQzNF0gTFRcIixuZXh0RGF5OlwiW1xcdTJkMzBcXHUyZDU5XFx1MmQzZFxcdTJkMzAgXFx1MmQzNF0gTFRcIixuZXh0V2VlazpcImRkZGQgW1xcdTJkMzRdIExUXCIsbGFzdERheTpcIltcXHUyZDMwXFx1MmQ1YVxcdTJkMzBcXHUyZDRmXFx1MmQ1YyBcXHUyZDM0XSBMVFwiLGxhc3RXZWVrOlwiZGRkZCBbXFx1MmQzNF0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJcXHUyZDM3XFx1MmQzMFxcdTJkMzdcXHUyZDQ1IFxcdTJkNTkgXFx1MmQ2MlxcdTJkMzBcXHUyZDRmICVzXCIscGFzdDpcIlxcdTJkNjJcXHUyZDMwXFx1MmQ0ZiAlc1wiLHM6XCJcXHUyZDQ5XFx1MmQ0ZVxcdTJkNDlcXHUyZDNkXCIsc3M6XCIlZCBcXHUyZDQ5XFx1MmQ0ZVxcdTJkNDlcXHUyZDNkXCIsbTpcIlxcdTJkNGVcXHUyZDQ5XFx1MmQ0ZlxcdTJkNTNcXHUyZDNhXCIsbW06XCIlZCBcXHUyZDRlXFx1MmQ0OVxcdTJkNGZcXHUyZDUzXFx1MmQzYVwiLGg6XCJcXHUyZDU5XFx1MmQzMFxcdTJkNDRcXHUyZDMwXCIsaGg6XCIlZCBcXHUyZDVjXFx1MmQzMFxcdTJkNTlcXHUyZDU5XFx1MmQzMFxcdTJkNDRcXHUyZDQ5XFx1MmQ0ZlwiLGQ6XCJcXHUyZDMwXFx1MmQ1OVxcdTJkNTlcIixkZDpcIiVkIG9cXHUyZDU5XFx1MmQ1OVxcdTJkMzBcXHUyZDRmXCIsTTpcIlxcdTJkMzBcXHUyZDYyb1xcdTJkNTNcXHUyZDU0XCIsTU06XCIlZCBcXHUyZDQ5XFx1MmQ2MlxcdTJkNjJcXHUyZDQ5XFx1MmQ1NFxcdTJkNGZcIix5OlwiXFx1MmQzMFxcdTJkNTlcXHUyZDMzXFx1MmQzMFxcdTJkNTlcIix5eTpcIiVkIFxcdTJkNDlcXHUyZDU5XFx1MmQzM1xcdTJkMzBcXHUyZDU5XFx1MmQ0ZlwifSx3ZWVrOntkb3c6Nixkb3k6MTJ9fSksZS5kZWZpbmVMb2NhbGUoXCJ1Zy1jblwiLHttb250aHM6XCJcXHUwNjRhXFx1MDYyN1xcdTA2NDZcXHUwNmNiXFx1MDYyN1xcdTA2MzFfXFx1MDY0MVxcdTA2ZDBcXHUwNmNiXFx1MDYzMVxcdTA2MjdcXHUwNjQ0X1xcdTA2NDVcXHUwNjI3XFx1MDYzMVxcdTA2MmFfXFx1MDYyNlxcdTA2MjdcXHUwNjdlXFx1MDYzMVxcdTA2ZDBcXHUwNjQ0X1xcdTA2NDVcXHUwNjI3XFx1MDY0YV9cXHUwNjI2XFx1MDY0OVxcdTA2NGFcXHUwNmM3XFx1MDY0Nl9cXHUwNjI2XFx1MDY0OVxcdTA2NGFcXHUwNmM3XFx1MDY0NF9cXHUwNjI2XFx1MDYyN1xcdTA2Y2JcXHUwNjNhXFx1MDZjN1xcdTA2MzNcXHUwNjJhX1xcdTA2MzNcXHUwNmQwXFx1MDY0NlxcdTA2MmFcXHUwNmQ1XFx1MDYyOFxcdTA2NDlcXHUwNjMxX1xcdTA2MjZcXHUwNmM2XFx1MDY0M1xcdTA2MmFcXHUwNmQ1XFx1MDYyOFxcdTA2NDlcXHUwNjMxX1xcdTA2NDZcXHUwNjQ4XFx1MDY0YVxcdTA2MjdcXHUwNjI4XFx1MDY0OVxcdTA2MzFfXFx1MDYyZlxcdTA2ZDBcXHUwNjQzXFx1MDYyN1xcdTA2MjhcXHUwNjQ5XFx1MDYzMVwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIlxcdTA2NGFcXHUwNjI3XFx1MDY0NlxcdTA2Y2JcXHUwNjI3XFx1MDYzMV9cXHUwNjQxXFx1MDZkMFxcdTA2Y2JcXHUwNjMxXFx1MDYyN1xcdTA2NDRfXFx1MDY0NVxcdTA2MjdcXHUwNjMxXFx1MDYyYV9cXHUwNjI2XFx1MDYyN1xcdTA2N2VcXHUwNjMxXFx1MDZkMFxcdTA2NDRfXFx1MDY0NVxcdTA2MjdcXHUwNjRhX1xcdTA2MjZcXHUwNjQ5XFx1MDY0YVxcdTA2YzdcXHUwNjQ2X1xcdTA2MjZcXHUwNjQ5XFx1MDY0YVxcdTA2YzdcXHUwNjQ0X1xcdTA2MjZcXHUwNjI3XFx1MDZjYlxcdTA2M2FcXHUwNmM3XFx1MDYzM1xcdTA2MmFfXFx1MDYzM1xcdTA2ZDBcXHUwNjQ2XFx1MDYyYVxcdTA2ZDVcXHUwNjI4XFx1MDY0OVxcdTA2MzFfXFx1MDYyNlxcdTA2YzZcXHUwNjQzXFx1MDYyYVxcdTA2ZDVcXHUwNjI4XFx1MDY0OVxcdTA2MzFfXFx1MDY0NlxcdTA2NDhcXHUwNjRhXFx1MDYyN1xcdTA2MjhcXHUwNjQ5XFx1MDYzMV9cXHUwNjJmXFx1MDZkMFxcdTA2NDNcXHUwNjI3XFx1MDYyOFxcdTA2NDlcXHUwNjMxXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiXFx1MDY0YVxcdTA2ZDVcXHUwNjQzXFx1MDYzNFxcdTA2ZDVcXHUwNjQ2XFx1MDYyOFxcdTA2ZDVfXFx1MDYyZlxcdTA2YzhcXHUwNjM0XFx1MDZkNVxcdTA2NDZcXHUwNjI4XFx1MDZkNV9cXHUwNjMzXFx1MDZkNVxcdTA2NGFcXHUwNjM0XFx1MDZkNVxcdTA2NDZcXHUwNjI4XFx1MDZkNV9cXHUwNjg2XFx1MDYyN1xcdTA2MzFcXHUwNjM0XFx1MDZkNVxcdTA2NDZcXHUwNjI4XFx1MDZkNV9cXHUwNjdlXFx1MDZkNVxcdTA2NGFcXHUwNjM0XFx1MDZkNVxcdTA2NDZcXHUwNjI4XFx1MDZkNV9cXHUwNjJjXFx1MDZjOFxcdTA2NDVcXHUwNmQ1X1xcdTA2MzRcXHUwNmQ1XFx1MDY0NlxcdTA2MjhcXHUwNmQ1XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJcXHUwNjRhXFx1MDZkNV9cXHUwNjJmXFx1MDZjOF9cXHUwNjMzXFx1MDZkNV9cXHUwNjg2XFx1MDYyN19cXHUwNjdlXFx1MDZkNV9cXHUwNjJjXFx1MDZjOF9cXHUwNjM0XFx1MDZkNVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIlxcdTA2NGFcXHUwNmQ1X1xcdTA2MmZcXHUwNmM4X1xcdTA2MzNcXHUwNmQ1X1xcdTA2ODZcXHUwNjI3X1xcdTA2N2VcXHUwNmQ1X1xcdTA2MmNcXHUwNmM4X1xcdTA2MzRcXHUwNmQ1XCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiWVlZWS1NTS1ERFwiLExMOlwiWVlZWS1cXHUwNjRhXFx1MDY0OVxcdTA2NDRcXHUwNjQ5TS1cXHUwNjI2XFx1MDYyN1xcdTA2NGFcXHUwNjQ2XFx1MDY0OVxcdTA2YWRELVxcdTA2NDNcXHUwNmM4XFx1MDY0NlxcdTA2NDlcIixMTEw6XCJZWVlZLVxcdTA2NGFcXHUwNjQ5XFx1MDY0NFxcdTA2NDlNLVxcdTA2MjZcXHUwNjI3XFx1MDY0YVxcdTA2NDZcXHUwNjQ5XFx1MDZhZEQtXFx1MDY0M1xcdTA2YzhcXHUwNjQ2XFx1MDY0OVxcdTA2MGMgSEg6bW1cIixMTExMOlwiZGRkZFxcdTA2MGMgWVlZWS1cXHUwNjRhXFx1MDY0OVxcdTA2NDRcXHUwNjQ5TS1cXHUwNjI2XFx1MDYyN1xcdTA2NGFcXHUwNjQ2XFx1MDY0OVxcdTA2YWRELVxcdTA2NDNcXHUwNmM4XFx1MDY0NlxcdTA2NDlcXHUwNjBjIEhIOm1tXCJ9LG1lcmlkaWVtUGFyc2U6L1xcdTA2NGFcXHUwNmQwXFx1MDYzMVxcdTA2NDlcXHUwNjQ1IFxcdTA2NDNcXHUwNmQwXFx1MDY4NlxcdTA2ZDV8XFx1MDYzM1xcdTA2ZDVcXHUwNmJlXFx1MDZkNVxcdTA2MzF8XFx1MDY4NlxcdTA2YzhcXHUwNjM0XFx1MDYyYVxcdTA2NDlcXHUwNjQ2IFxcdTA2MjhcXHUwNmM3XFx1MDYzMVxcdTA2YzdcXHUwNjQ2fFxcdTA2ODZcXHUwNmM4XFx1MDYzNHxcXHUwNjg2XFx1MDZjOFxcdTA2MzRcXHUwNjJhXFx1MDY0OVxcdTA2NDYgXFx1MDY0M1xcdTA2ZDBcXHUwNjRhXFx1MDY0OVxcdTA2NDZ8XFx1MDY0M1xcdTA2ZDVcXHUwNjg2LyxtZXJpZGllbUhvdXI6ZnVuY3Rpb24oZSxhKXtyZXR1cm4gMTI9PT1lJiYoZT0wKSxcIlxcdTA2NGFcXHUwNmQwXFx1MDYzMVxcdTA2NDlcXHUwNjQ1IFxcdTA2NDNcXHUwNmQwXFx1MDY4NlxcdTA2ZDVcIj09PWF8fFwiXFx1MDYzM1xcdTA2ZDVcXHUwNmJlXFx1MDZkNVxcdTA2MzFcIj09PWF8fFwiXFx1MDY4NlxcdTA2YzhcXHUwNjM0XFx1MDYyYVxcdTA2NDlcXHUwNjQ2IFxcdTA2MjhcXHUwNmM3XFx1MDYzMVxcdTA2YzdcXHUwNjQ2XCI9PT1hP2U6XCJcXHUwNjg2XFx1MDZjOFxcdTA2MzRcXHUwNjJhXFx1MDY0OVxcdTA2NDYgXFx1MDY0M1xcdTA2ZDBcXHUwNjRhXFx1MDY0OVxcdTA2NDZcIj09PWF8fFwiXFx1MDY0M1xcdTA2ZDVcXHUwNjg2XCI9PT1hP2UrMTI6ZT49MTE/ZTplKzEyfSxtZXJpZGllbTpmdW5jdGlvbihlLGEsXyl7dmFyIHM9MTAwKmUrYTtyZXR1cm4gczw2MDA/XCJcXHUwNjRhXFx1MDZkMFxcdTA2MzFcXHUwNjQ5XFx1MDY0NSBcXHUwNjQzXFx1MDZkMFxcdTA2ODZcXHUwNmQ1XCI6czw5MDA/XCJcXHUwNjMzXFx1MDZkNVxcdTA2YmVcXHUwNmQ1XFx1MDYzMVwiOnM8MTEzMD9cIlxcdTA2ODZcXHUwNmM4XFx1MDYzNFxcdTA2MmFcXHUwNjQ5XFx1MDY0NiBcXHUwNjI4XFx1MDZjN1xcdTA2MzFcXHUwNmM3XFx1MDY0NlwiOnM8MTIzMD9cIlxcdTA2ODZcXHUwNmM4XFx1MDYzNFwiOnM8MTgwMD9cIlxcdTA2ODZcXHUwNmM4XFx1MDYzNFxcdTA2MmFcXHUwNjQ5XFx1MDY0NiBcXHUwNjQzXFx1MDZkMFxcdTA2NGFcXHUwNjQ5XFx1MDY0NlwiOlwiXFx1MDY0M1xcdTA2ZDVcXHUwNjg2XCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTA2MjhcXHUwNmM4XFx1MDZhZlxcdTA2YzhcXHUwNjQ2IFxcdTA2MzNcXHUwNjI3XFx1MDYyNlxcdTA2ZDVcXHUwNjJhXSBMVFwiLG5leHREYXk6XCJbXFx1MDYyNlxcdTA2ZDVcXHUwNjJhXFx1MDZkNSBcXHUwNjMzXFx1MDYyN1xcdTA2MjZcXHUwNmQ1XFx1MDYyYV0gTFRcIixuZXh0V2VlazpcIltcXHUwNjQzXFx1MDZkMFxcdTA2NDRcXHUwNmQ1XFx1MDYzMVxcdTA2NDNcXHUwNjQ5XSBkZGRkIFtcXHUwNjMzXFx1MDYyN1xcdTA2MjZcXHUwNmQ1XFx1MDYyYV0gTFRcIixsYXN0RGF5OlwiW1xcdTA2MmFcXHUwNmM2XFx1MDY0NlxcdTA2YzhcXHUwNmFmXFx1MDZjOFxcdTA2NDZdIExUXCIsbGFzdFdlZWs6XCJbXFx1MDYyNlxcdTA2MjdcXHUwNjQ0XFx1MDYyZlxcdTA2NDlcXHUwNjQ2XFx1MDY0MlxcdTA2NDldIGRkZGQgW1xcdTA2MzNcXHUwNjI3XFx1MDYyNlxcdTA2ZDVcXHUwNjJhXSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIiVzIFxcdTA2NDNcXHUwNmQwXFx1MDY0YVxcdTA2NDlcXHUwNjQ2XCIscGFzdDpcIiVzIFxcdTA2MjhcXHUwNmM3XFx1MDYzMVxcdTA2YzdcXHUwNjQ2XCIsczpcIlxcdTA2NDZcXHUwNmQ1XFx1MDY4NlxcdTA2ODZcXHUwNmQ1IFxcdTA2MzNcXHUwNmQwXFx1MDY0M1xcdTA2NDhcXHUwNjQ2XFx1MDYyYVwiLHNzOlwiJWQgXFx1MDYzM1xcdTA2ZDBcXHUwNjQzXFx1MDY0OFxcdTA2NDZcXHUwNjJhXCIsbTpcIlxcdTA2MjhcXHUwNjQ5XFx1MDYzMSBcXHUwNjQ1XFx1MDY0OVxcdTA2NDZcXHUwNmM3XFx1MDYyYVwiLG1tOlwiJWQgXFx1MDY0NVxcdTA2NDlcXHUwNjQ2XFx1MDZjN1xcdTA2MmFcIixoOlwiXFx1MDYyOFxcdTA2NDlcXHUwNjMxIFxcdTA2MzNcXHUwNjI3XFx1MDYyNlxcdTA2ZDVcXHUwNjJhXCIsaGg6XCIlZCBcXHUwNjMzXFx1MDYyN1xcdTA2MjZcXHUwNmQ1XFx1MDYyYVwiLGQ6XCJcXHUwNjI4XFx1MDY0OVxcdTA2MzEgXFx1MDY0M1xcdTA2YzhcXHUwNjQ2XCIsZGQ6XCIlZCBcXHUwNjQzXFx1MDZjOFxcdTA2NDZcIixNOlwiXFx1MDYyOFxcdTA2NDlcXHUwNjMxIFxcdTA2MjZcXHUwNjI3XFx1MDY0YVwiLE1NOlwiJWQgXFx1MDYyNlxcdTA2MjdcXHUwNjRhXCIseTpcIlxcdTA2MjhcXHUwNjQ5XFx1MDYzMSBcXHUwNjRhXFx1MDY0OVxcdTA2NDRcIix5eTpcIiVkIFxcdTA2NGFcXHUwNjQ5XFx1MDY0NFwifSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfSgtXFx1MDY0M1xcdTA2YzhcXHUwNjQ2XFx1MDY0OXwtXFx1MDYyNlxcdTA2MjdcXHUwNjRhfC1cXHUwNmJlXFx1MDZkNVxcdTA2N2VcXHUwNjJhXFx1MDZkNSkvLG9yZGluYWw6ZnVuY3Rpb24oZSxhKXtzd2l0Y2goYSl7Y2FzZVwiZFwiOmNhc2VcIkRcIjpjYXNlXCJERERcIjpyZXR1cm4gZStcIi1cXHUwNjQzXFx1MDZjOFxcdTA2NDZcXHUwNjQ5XCI7Y2FzZVwid1wiOmNhc2VcIldcIjpyZXR1cm4gZStcIi1cXHUwNmJlXFx1MDZkNVxcdTA2N2VcXHUwNjJhXFx1MDZkNVwiO2RlZmF1bHQ6cmV0dXJuIGV9fSxwcmVwYXJzZTpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKC9cXHUwNjBjL2csXCIsXCIpfSxwb3N0Zm9ybWF0OmZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoLywvZyxcIlxcdTA2MGNcIil9LHdlZWs6e2RvdzoxLGRveTo3fX0pLGUuZGVmaW5lTG9jYWxlKFwidWtcIix7bW9udGhzOntmb3JtYXQ6XCJcXHUwNDQxXFx1MDQ1NlxcdTA0NDdcXHUwNDNkXFx1MDQ0Zl9cXHUwNDNiXFx1MDQ0ZVxcdTA0NDJcXHUwNDNlXFx1MDQzM1xcdTA0M2VfXFx1MDQzMVxcdTA0MzVcXHUwNDQwXFx1MDQzNVxcdTA0MzdcXHUwNDNkXFx1MDQ0Zl9cXHUwNDNhXFx1MDQzMlxcdTA0NTZcXHUwNDQyXFx1MDQzZFxcdTA0NGZfXFx1MDQ0MlxcdTA0NDBcXHUwNDMwXFx1MDQzMlxcdTA0M2RcXHUwNDRmX1xcdTA0NDdcXHUwNDM1XFx1MDQ0MFxcdTA0MzJcXHUwNDNkXFx1MDQ0Zl9cXHUwNDNiXFx1MDQzOFxcdTA0M2ZcXHUwNDNkXFx1MDQ0Zl9cXHUwNDQxXFx1MDQzNVxcdTA0NDBcXHUwNDNmXFx1MDQzZFxcdTA0NGZfXFx1MDQzMlxcdTA0MzVcXHUwNDQwXFx1MDQzNVxcdTA0NDFcXHUwNDNkXFx1MDQ0Zl9cXHUwNDM2XFx1MDQzZVxcdTA0MzJcXHUwNDQyXFx1MDQzZFxcdTA0NGZfXFx1MDQzYlxcdTA0MzhcXHUwNDQxXFx1MDQ0MlxcdTA0M2VcXHUwNDNmXFx1MDQzMFxcdTA0MzRcXHUwNDMwX1xcdTA0MzNcXHUwNDQwXFx1MDQ0M1xcdTA0MzRcXHUwNDNkXFx1MDQ0ZlwiLnNwbGl0KFwiX1wiKSxzdGFuZGFsb25lOlwiXFx1MDQ0MVxcdTA0NTZcXHUwNDQ3XFx1MDQzNVxcdTA0M2RcXHUwNDRjX1xcdTA0M2JcXHUwNDRlXFx1MDQ0MlxcdTA0MzhcXHUwNDM5X1xcdTA0MzFcXHUwNDM1XFx1MDQ0MFxcdTA0MzVcXHUwNDM3XFx1MDQzNVxcdTA0M2RcXHUwNDRjX1xcdTA0M2FcXHUwNDMyXFx1MDQ1NlxcdTA0NDJcXHUwNDM1XFx1MDQzZFxcdTA0NGNfXFx1MDQ0MlxcdTA0NDBcXHUwNDMwXFx1MDQzMlxcdTA0MzVcXHUwNDNkXFx1MDQ0Y19cXHUwNDQ3XFx1MDQzNVxcdTA0NDBcXHUwNDMyXFx1MDQzNVxcdTA0M2RcXHUwNDRjX1xcdTA0M2JcXHUwNDM4XFx1MDQzZlxcdTA0MzVcXHUwNDNkXFx1MDQ0Y19cXHUwNDQxXFx1MDQzNVxcdTA0NDBcXHUwNDNmXFx1MDQzNVxcdTA0M2RcXHUwNDRjX1xcdTA0MzJcXHUwNDM1XFx1MDQ0MFxcdTA0MzVcXHUwNDQxXFx1MDQzNVxcdTA0M2RcXHUwNDRjX1xcdTA0MzZcXHUwNDNlXFx1MDQzMlxcdTA0NDJcXHUwNDM1XFx1MDQzZFxcdTA0NGNfXFx1MDQzYlxcdTA0MzhcXHUwNDQxXFx1MDQ0MlxcdTA0M2VcXHUwNDNmXFx1MDQzMFxcdTA0MzRfXFx1MDQzM1xcdTA0NDBcXHUwNDQzXFx1MDQzNFxcdTA0MzVcXHUwNDNkXFx1MDQ0Y1wiLnNwbGl0KFwiX1wiKX0sbW9udGhzU2hvcnQ6XCJcXHUwNDQxXFx1MDQ1NlxcdTA0NDdfXFx1MDQzYlxcdTA0NGVcXHUwNDQyX1xcdTA0MzFcXHUwNDM1XFx1MDQ0MF9cXHUwNDNhXFx1MDQzMlxcdTA0NTZcXHUwNDQyX1xcdTA0NDJcXHUwNDQwXFx1MDQzMFxcdTA0MzJfXFx1MDQ0N1xcdTA0MzVcXHUwNDQwXFx1MDQzMl9cXHUwNDNiXFx1MDQzOFxcdTA0M2ZfXFx1MDQ0MVxcdTA0MzVcXHUwNDQwXFx1MDQzZl9cXHUwNDMyXFx1MDQzNVxcdTA0NDBfXFx1MDQzNlxcdTA0M2VcXHUwNDMyXFx1MDQ0Ml9cXHUwNDNiXFx1MDQzOFxcdTA0NDFcXHUwNDQyX1xcdTA0MzNcXHUwNDQwXFx1MDQ0M1xcdTA0MzRcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6ZnVuY3Rpb24oZSxhKXt2YXIgXz17bm9taW5hdGl2ZTpcIlxcdTA0M2RcXHUwNDM1XFx1MDQzNFxcdTA0NTZcXHUwNDNiXFx1MDQ0Zl9cXHUwNDNmXFx1MDQzZVxcdTA0M2RcXHUwNDM1XFx1MDQzNFxcdTA0NTZcXHUwNDNiXFx1MDQzZVxcdTA0M2FfXFx1MDQzMlxcdTA0NTZcXHUwNDMyXFx1MDQ0MlxcdTA0M2VcXHUwNDQwXFx1MDQzZVxcdTA0M2FfXFx1MDQ0MVxcdTA0MzVcXHUwNDQwXFx1MDQzNVxcdTA0MzRcXHUwNDMwX1xcdTA0NDdcXHUwNDM1XFx1MDQ0MlxcdTA0MzJcXHUwNDM1XFx1MDQ0MF9cXHUwNDNmXFx1MjAxOVxcdTA0NGZcXHUwNDQyXFx1MDQzZFxcdTA0MzhcXHUwNDQ2XFx1MDQ0Zl9cXHUwNDQxXFx1MDQ0M1xcdTA0MzFcXHUwNDNlXFx1MDQ0MlxcdTA0MzBcIi5zcGxpdChcIl9cIiksYWNjdXNhdGl2ZTpcIlxcdTA0M2RcXHUwNDM1XFx1MDQzNFxcdTA0NTZcXHUwNDNiXFx1MDQ0ZV9cXHUwNDNmXFx1MDQzZVxcdTA0M2RcXHUwNDM1XFx1MDQzNFxcdTA0NTZcXHUwNDNiXFx1MDQzZVxcdTA0M2FfXFx1MDQzMlxcdTA0NTZcXHUwNDMyXFx1MDQ0MlxcdTA0M2VcXHUwNDQwXFx1MDQzZVxcdTA0M2FfXFx1MDQ0MVxcdTA0MzVcXHUwNDQwXFx1MDQzNVxcdTA0MzRcXHUwNDQzX1xcdTA0NDdcXHUwNDM1XFx1MDQ0MlxcdTA0MzJcXHUwNDM1XFx1MDQ0MF9cXHUwNDNmXFx1MjAxOVxcdTA0NGZcXHUwNDQyXFx1MDQzZFxcdTA0MzhcXHUwNDQ2XFx1MDQ0ZV9cXHUwNDQxXFx1MDQ0M1xcdTA0MzFcXHUwNDNlXFx1MDQ0MlxcdTA0NDNcIi5zcGxpdChcIl9cIiksZ2VuaXRpdmU6XCJcXHUwNDNkXFx1MDQzNVxcdTA0MzRcXHUwNDU2XFx1MDQzYlxcdTA0NTZfXFx1MDQzZlxcdTA0M2VcXHUwNDNkXFx1MDQzNVxcdTA0MzRcXHUwNDU2XFx1MDQzYlxcdTA0M2FcXHUwNDMwX1xcdTA0MzJcXHUwNDU2XFx1MDQzMlxcdTA0NDJcXHUwNDNlXFx1MDQ0MFxcdTA0M2FcXHUwNDMwX1xcdTA0NDFcXHUwNDM1XFx1MDQ0MFxcdTA0MzVcXHUwNDM0XFx1MDQzOF9cXHUwNDQ3XFx1MDQzNVxcdTA0NDJcXHUwNDMyXFx1MDQzNVxcdTA0NDBcXHUwNDMzXFx1MDQzMF9cXHUwNDNmXFx1MjAxOVxcdTA0NGZcXHUwNDQyXFx1MDQzZFxcdTA0MzhcXHUwNDQ2XFx1MDQ1Nl9cXHUwNDQxXFx1MDQ0M1xcdTA0MzFcXHUwNDNlXFx1MDQ0MlxcdTA0MzhcIi5zcGxpdChcIl9cIil9O3JldHVybiBlP19bLyhcXFtbXFx1MDQxMlxcdTA0MzJcXHUwNDIzXFx1MDQ0M11cXF0pID9kZGRkLy50ZXN0KGEpP1wiYWNjdXNhdGl2ZVwiOi9cXFs/KD86XFx1MDQzY1xcdTA0MzhcXHUwNDNkXFx1MDQ0M1xcdTA0M2JcXHUwNDNlXFx1MDQ1N3xcXHUwNDNkXFx1MDQzMFxcdTA0NDFcXHUwNDQyXFx1MDQ0M1xcdTA0M2ZcXHUwNDNkXFx1MDQzZVxcdTA0NTcpPyA/XFxdID9kZGRkLy50ZXN0KGEpP1wiZ2VuaXRpdmVcIjpcIm5vbWluYXRpdmVcIl1bZS5kYXkoKV06Xy5ub21pbmF0aXZlfSx3ZWVrZGF5c1Nob3J0OlwiXFx1MDQzZFxcdTA0MzRfXFx1MDQzZlxcdTA0M2RfXFx1MDQzMlxcdTA0NDJfXFx1MDQ0MVxcdTA0NDBfXFx1MDQ0N1xcdTA0NDJfXFx1MDQzZlxcdTA0NDJfXFx1MDQ0MVxcdTA0MzFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJcXHUwNDNkXFx1MDQzNF9cXHUwNDNmXFx1MDQzZF9cXHUwNDMyXFx1MDQ0Ml9cXHUwNDQxXFx1MDQ0MF9cXHUwNDQ3XFx1MDQ0Ml9cXHUwNDNmXFx1MDQ0Ml9cXHUwNDQxXFx1MDQzMVwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkRELk1NLllZWVlcIixMTDpcIkQgTU1NTSBZWVlZIFxcdTA0NDAuXCIsTExMOlwiRCBNTU1NIFlZWVkgXFx1MDQ0MC4sIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIFxcdTA0NDAuLCBISDptbVwifSxjYWxlbmRhcjp7c2FtZURheTptYShcIltcXHUwNDIxXFx1MDQ0Y1xcdTA0M2VcXHUwNDMzXFx1MDQzZVxcdTA0MzRcXHUwNDNkXFx1MDQ1NiBcIiksbmV4dERheTptYShcIltcXHUwNDE3XFx1MDQzMFxcdTA0MzJcXHUwNDQyXFx1MDQ0MFxcdTA0MzAgXCIpLGxhc3REYXk6bWEoXCJbXFx1MDQxMlxcdTA0NDdcXHUwNDNlXFx1MDQ0MFxcdTA0MzAgXCIpLG5leHRXZWVrOm1hKFwiW1xcdTA0MjNdIGRkZGQgW1wiKSxsYXN0V2VlazpmdW5jdGlvbigpe3N3aXRjaCh0aGlzLmRheSgpKXtjYXNlIDA6Y2FzZSAzOmNhc2UgNTpjYXNlIDY6cmV0dXJuIG1hKFwiW1xcdTA0MWNcXHUwNDM4XFx1MDQzZFxcdTA0NDNcXHUwNDNiXFx1MDQzZVxcdTA0NTddIGRkZGQgW1wiKS5jYWxsKHRoaXMpO2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OnJldHVybiBtYShcIltcXHUwNDFjXFx1MDQzOFxcdTA0M2RcXHUwNDQzXFx1MDQzYlxcdTA0M2VcXHUwNDMzXFx1MDQzZV0gZGRkZCBbXCIpLmNhbGwodGhpcyl9fSxzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJcXHUwNDM3XFx1MDQzMCAlc1wiLHBhc3Q6XCIlcyBcXHUwNDQyXFx1MDQzZVxcdTA0M2NcXHUwNDQzXCIsczpcIlxcdTA0MzRcXHUwNDM1XFx1MDQzYVxcdTA0NTZcXHUwNDNiXFx1MDQ0Y1xcdTA0M2FcXHUwNDMwIFxcdTA0NDFcXHUwNDM1XFx1MDQzYVxcdTA0NDNcXHUwNDNkXFx1MDQzNFwiLHNzOmlhLG06aWEsbW06aWEsaDpcIlxcdTA0MzNcXHUwNDNlXFx1MDQzNFxcdTA0MzhcXHUwNDNkXFx1MDQ0M1wiLGhoOmlhLGQ6XCJcXHUwNDM0XFx1MDQzNVxcdTA0M2RcXHUwNDRjXCIsZGQ6aWEsTTpcIlxcdTA0M2NcXHUwNDU2XFx1MDQ0MVxcdTA0NGZcXHUwNDQ2XFx1MDQ0Y1wiLE1NOmlhLHk6XCJcXHUwNDQwXFx1MDQ1NlxcdTA0M2FcIix5eTppYX0sbWVyaWRpZW1QYXJzZTovXFx1MDQzZFxcdTA0M2VcXHUwNDQ3XFx1MDQ1NnxcXHUwNDQwXFx1MDQzMFxcdTA0M2RcXHUwNDNhXFx1MDQ0M3xcXHUwNDM0XFx1MDQzZFxcdTA0NGZ8XFx1MDQzMlxcdTA0MzVcXHUwNDQ3XFx1MDQzZVxcdTA0NDBcXHUwNDMwLyxpc1BNOmZ1bmN0aW9uKGUpe3JldHVybi9eKFxcdTA0MzRcXHUwNDNkXFx1MDQ0ZnxcXHUwNDMyXFx1MDQzNVxcdTA0NDdcXHUwNDNlXFx1MDQ0MFxcdTA0MzApJC8udGVzdChlKX0sbWVyaWRpZW06ZnVuY3Rpb24oZSxhLF8pe3JldHVybiBlPDQ/XCJcXHUwNDNkXFx1MDQzZVxcdTA0NDdcXHUwNDU2XCI6ZTwxMj9cIlxcdTA0NDBcXHUwNDMwXFx1MDQzZFxcdTA0M2FcXHUwNDQzXCI6ZTwxNz9cIlxcdTA0MzRcXHUwNDNkXFx1MDQ0ZlwiOlwiXFx1MDQzMlxcdTA0MzVcXHUwNDQ3XFx1MDQzZVxcdTA0NDBcXHUwNDMwXCJ9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9LShcXHUwNDM5fFxcdTA0MzNcXHUwNDNlKS8sb3JkaW5hbDpmdW5jdGlvbihlLGEpe3N3aXRjaChhKXtjYXNlXCJNXCI6Y2FzZVwiZFwiOmNhc2VcIkRERFwiOmNhc2VcIndcIjpjYXNlXCJXXCI6cmV0dXJuIGUrXCItXFx1MDQzOVwiO2Nhc2VcIkRcIjpyZXR1cm4gZStcIi1cXHUwNDMzXFx1MDQzZVwiO2RlZmF1bHQ6cmV0dXJuIGV9fSx3ZWVrOntkb3c6MSxkb3k6N319KTt2YXIgb2E9W1wiXFx1MDYyY1xcdTA2NDZcXHUwNjQ4XFx1MDYzMVxcdTA2Y2NcIixcIlxcdTA2NDFcXHUwNjMxXFx1MDY0OFxcdTA2MzFcXHUwNmNjXCIsXCJcXHUwNjQ1XFx1MDYyN1xcdTA2MzFcXHUwNjg2XCIsXCJcXHUwNjI3XFx1MDY3ZVxcdTA2MzFcXHUwNmNjXFx1MDY0NFwiLFwiXFx1MDY0NVxcdTA2MjZcXHUwNmNjXCIsXCJcXHUwNjJjXFx1MDY0OFxcdTA2NDZcIixcIlxcdTA2MmNcXHUwNjQ4XFx1MDY0NFxcdTA2MjdcXHUwNjI2XFx1MDZjY1wiLFwiXFx1MDYyN1xcdTA2YWZcXHUwNjMzXFx1MDYyYVwiLFwiXFx1MDYzM1xcdTA2MmFcXHUwNjQ1XFx1MDYyOFxcdTA2MzFcIixcIlxcdTA2MjdcXHUwNmE5XFx1MDYyYVxcdTA2NDhcXHUwNjI4XFx1MDYzMVwiLFwiXFx1MDY0NlxcdTA2NDhcXHUwNjQ1XFx1MDYyOFxcdTA2MzFcIixcIlxcdTA2MmZcXHUwNjMzXFx1MDY0NVxcdTA2MjhcXHUwNjMxXCJdLHVhPVtcIlxcdTA2MjdcXHUwNjJhXFx1MDY0OFxcdTA2MjdcXHUwNjMxXCIsXCJcXHUwNjdlXFx1MDZjY1xcdTA2MzFcIixcIlxcdTA2NDVcXHUwNjQ2XFx1MDZhZlxcdTA2NDRcIixcIlxcdTA2MjhcXHUwNjJmXFx1MDZiZVwiLFwiXFx1MDYyY1xcdTA2NDVcXHUwNjM5XFx1MDYzMVxcdTA2MjdcXHUwNjJhXCIsXCJcXHUwNjJjXFx1MDY0NVxcdTA2MzlcXHUwNmMxXCIsXCJcXHUwNmMxXFx1MDY0MVxcdTA2MmFcXHUwNmMxXCJdO3JldHVybiBlLmRlZmluZUxvY2FsZShcInVyXCIse21vbnRoczpvYSxtb250aHNTaG9ydDpvYSx3ZWVrZGF5czp1YSx3ZWVrZGF5c1Nob3J0OnVhLHdlZWtkYXlzTWluOnVhLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiREQvTU0vWVlZWVwiLExMOlwiRCBNTU1NIFlZWVlcIixMTEw6XCJEIE1NTU0gWVlZWSBISDptbVwiLExMTEw6XCJkZGRkXFx1MDYwYyBEIE1NTU0gWVlZWSBISDptbVwifSxtZXJpZGllbVBhcnNlOi9cXHUwNjM1XFx1MDYyOFxcdTA2MmR8XFx1MDYzNFxcdTA2MjdcXHUwNjQ1Lyxpc1BNOmZ1bmN0aW9uKGUpe3JldHVyblwiXFx1MDYzNFxcdTA2MjdcXHUwNjQ1XCI9PT1lfSxtZXJpZGllbTpmdW5jdGlvbihlLGEsXyl7cmV0dXJuIGU8MTI/XCJcXHUwNjM1XFx1MDYyOFxcdTA2MmRcIjpcIlxcdTA2MzRcXHUwNjI3XFx1MDY0NVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltcXHUwNjIyXFx1MDYyYyBcXHUwNjI4XFx1MDY0OFxcdTA2NDJcXHUwNjJhXSBMVFwiLG5leHREYXk6XCJbXFx1MDZhOVxcdTA2NDQgXFx1MDYyOFxcdTA2NDhcXHUwNjQyXFx1MDYyYV0gTFRcIixuZXh0V2VlazpcImRkZGQgW1xcdTA2MjhcXHUwNjQ4XFx1MDY0MlxcdTA2MmFdIExUXCIsbGFzdERheTpcIltcXHUwNmFmXFx1MDYzMFxcdTA2MzRcXHUwNjJhXFx1MDZjMSBcXHUwNjMxXFx1MDY0OFxcdTA2MzIgXFx1MDYyOFxcdTA2NDhcXHUwNjQyXFx1MDYyYV0gTFRcIixsYXN0V2VlazpcIltcXHUwNmFmXFx1MDYzMFxcdTA2MzRcXHUwNjJhXFx1MDZjMV0gZGRkZCBbXFx1MDYyOFxcdTA2NDhcXHUwNjQyXFx1MDYyYV0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCIlcyBcXHUwNjI4XFx1MDYzOVxcdTA2MmZcIixwYXN0OlwiJXMgXFx1MDY0MlxcdTA2MjhcXHUwNjQ0XCIsczpcIlxcdTA2ODZcXHUwNjQ2XFx1MDYyZiBcXHUwNjMzXFx1MDZjY1xcdTA2YTlcXHUwNjQ2XFx1MDY4OFwiLHNzOlwiJWQgXFx1MDYzM1xcdTA2Y2NcXHUwNmE5XFx1MDY0NlxcdTA2ODhcIixtOlwiXFx1MDYyN1xcdTA2Y2NcXHUwNmE5IFxcdTA2NDVcXHUwNjQ2XFx1MDY3OVwiLG1tOlwiJWQgXFx1MDY0NVxcdTA2NDZcXHUwNjc5XCIsaDpcIlxcdTA2MjdcXHUwNmNjXFx1MDZhOSBcXHUwNmFmXFx1MDZiZVxcdTA2NDZcXHUwNjc5XFx1MDZjMVwiLGhoOlwiJWQgXFx1MDZhZlxcdTA2YmVcXHUwNjQ2XFx1MDY3OVxcdTA2ZDJcIixkOlwiXFx1MDYyN1xcdTA2Y2NcXHUwNmE5IFxcdTA2MmZcXHUwNjQ2XCIsZGQ6XCIlZCBcXHUwNjJmXFx1MDY0NlwiLE06XCJcXHUwNjI3XFx1MDZjY1xcdTA2YTkgXFx1MDY0NVxcdTA2MjdcXHUwNmMxXCIsTU06XCIlZCBcXHUwNjQ1XFx1MDYyN1xcdTA2YzFcIix5OlwiXFx1MDYyN1xcdTA2Y2NcXHUwNmE5IFxcdTA2MzNcXHUwNjI3XFx1MDY0NFwiLHl5OlwiJWQgXFx1MDYzM1xcdTA2MjdcXHUwNjQ0XCJ9LHByZXBhcnNlOmZ1bmN0aW9uKGUpe3JldHVybiBlLnJlcGxhY2UoL1xcdTA2MGMvZyxcIixcIil9LHBvc3Rmb3JtYXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvLC9nLFwiXFx1MDYwY1wiKX0sd2Vlazp7ZG93OjEsZG95OjR9fSksZS5kZWZpbmVMb2NhbGUoXCJ1ei1sYXRuXCIse21vbnRoczpcIllhbnZhcl9GZXZyYWxfTWFydF9BcHJlbF9NYXlfSXl1bl9JeXVsX0F2Z3VzdF9TZW50YWJyX09rdGFicl9Ob3lhYnJfRGVrYWJyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiWWFuX0Zldl9NYXJfQXByX01heV9JeXVuX0l5dWxfQXZnX1Nlbl9Pa3RfTm95X0Rla1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIllha3NoYW5iYV9EdXNoYW5iYV9TZXNoYW5iYV9DaG9yc2hhbmJhX1BheXNoYW5iYV9KdW1hX1NoYW5iYVwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiWWFrX0R1c2hfU2VzaF9DaG9yX1BheV9KdW1fU2hhblwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIllhX0R1X1NlX0Nob19QYV9KdV9TaGFcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcIkQgTU1NTSBZWVlZLCBkZGRkIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW0J1Z3VuIHNvYXRdIExUIFtkYV1cIixuZXh0RGF5OlwiW0VydGFnYV0gTFQgW2RhXVwiLG5leHRXZWVrOlwiZGRkZCBba3VuaSBzb2F0XSBMVCBbZGFdXCIsbGFzdERheTpcIltLZWNoYSBzb2F0XSBMVCBbZGFdXCIsbGFzdFdlZWs6XCJbTyd0Z2FuXSBkZGRkIFtrdW5pIHNvYXRdIExUIFtkYV1cIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJZYXFpbiAlcyBpY2hpZGFcIixwYXN0OlwiQmlyIG5lY2hhICVzIG9sZGluXCIsczpcInNvbml5YVwiLHNzOlwiJWQgc29uaXlhXCIsbTpcImJpciBkYXFpcWFcIixtbTpcIiVkIGRhcWlxYVwiLGg6XCJiaXIgc29hdFwiLGhoOlwiJWQgc29hdFwiLGQ6XCJiaXIga3VuXCIsZGQ6XCIlZCBrdW5cIixNOlwiYmlyIG95XCIsTU06XCIlZCBveVwiLHk6XCJiaXIgeWlsXCIseXk6XCIlZCB5aWxcIn0sd2Vlazp7ZG93OjEsZG95Ojd9fSksZS5kZWZpbmVMb2NhbGUoXCJ1elwiLHttb250aHM6XCJcXHUwNDRmXFx1MDQzZFxcdTA0MzJcXHUwNDMwXFx1MDQ0MF9cXHUwNDQ0XFx1MDQzNVxcdTA0MzJcXHUwNDQwXFx1MDQzMFxcdTA0M2JfXFx1MDQzY1xcdTA0MzBcXHUwNDQwXFx1MDQ0Ml9cXHUwNDMwXFx1MDQzZlxcdTA0NDBcXHUwNDM1XFx1MDQzYl9cXHUwNDNjXFx1MDQzMFxcdTA0MzlfXFx1MDQzOFxcdTA0NGVcXHUwNDNkX1xcdTA0MzhcXHUwNDRlXFx1MDQzYl9cXHUwNDMwXFx1MDQzMlxcdTA0MzNcXHUwNDQzXFx1MDQ0MVxcdTA0NDJfXFx1MDQ0MVxcdTA0MzVcXHUwNDNkXFx1MDQ0MlxcdTA0NGZcXHUwNDMxXFx1MDQ0MF9cXHUwNDNlXFx1MDQzYVxcdTA0NDJcXHUwNDRmXFx1MDQzMVxcdTA0NDBfXFx1MDQzZFxcdTA0M2VcXHUwNDRmXFx1MDQzMVxcdTA0NDBfXFx1MDQzNFxcdTA0MzVcXHUwNDNhXFx1MDQzMFxcdTA0MzFcXHUwNDQwXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiXFx1MDQ0ZlxcdTA0M2RcXHUwNDMyX1xcdTA0NDRcXHUwNDM1XFx1MDQzMl9cXHUwNDNjXFx1MDQzMFxcdTA0NDBfXFx1MDQzMFxcdTA0M2ZcXHUwNDQwX1xcdTA0M2NcXHUwNDMwXFx1MDQzOV9cXHUwNDM4XFx1MDQ0ZVxcdTA0M2RfXFx1MDQzOFxcdTA0NGVcXHUwNDNiX1xcdTA0MzBcXHUwNDMyXFx1MDQzM19cXHUwNDQxXFx1MDQzNVxcdTA0M2RfXFx1MDQzZVxcdTA0M2FcXHUwNDQyX1xcdTA0M2RcXHUwNDNlXFx1MDQ0Zl9cXHUwNDM0XFx1MDQzNVxcdTA0M2FcIi5zcGxpdChcIl9cIiksd2Vla2RheXM6XCJcXHUwNDJmXFx1MDQzYVxcdTA0NDhcXHUwNDMwXFx1MDQzZFxcdTA0MzFcXHUwNDMwX1xcdTA0MTRcXHUwNDQzXFx1MDQ0OFxcdTA0MzBcXHUwNDNkXFx1MDQzMVxcdTA0MzBfXFx1MDQyMVxcdTA0MzVcXHUwNDQ4XFx1MDQzMFxcdTA0M2RcXHUwNDMxXFx1MDQzMF9cXHUwNDI3XFx1MDQzZVxcdTA0NDBcXHUwNDQ4XFx1MDQzMFxcdTA0M2RcXHUwNDMxXFx1MDQzMF9cXHUwNDFmXFx1MDQzMFxcdTA0MzlcXHUwNDQ4XFx1MDQzMFxcdTA0M2RcXHUwNDMxXFx1MDQzMF9cXHUwNDE2XFx1MDQ0M1xcdTA0M2NcXHUwNDMwX1xcdTA0MjhcXHUwNDMwXFx1MDQzZFxcdTA0MzFcXHUwNDMwXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJcXHUwNDJmXFx1MDQzYVxcdTA0NDhfXFx1MDQxNFxcdTA0NDNcXHUwNDQ4X1xcdTA0MjFcXHUwNDM1XFx1MDQ0OF9cXHUwNDI3XFx1MDQzZVxcdTA0NDBfXFx1MDQxZlxcdTA0MzBcXHUwNDM5X1xcdTA0MTZcXHUwNDQzXFx1MDQzY19cXHUwNDI4XFx1MDQzMFxcdTA0M2RcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJcXHUwNDJmXFx1MDQzYV9cXHUwNDE0XFx1MDQ0M19cXHUwNDIxXFx1MDQzNV9cXHUwNDI3XFx1MDQzZV9cXHUwNDFmXFx1MDQzMF9cXHUwNDE2XFx1MDQ0M19cXHUwNDI4XFx1MDQzMFwiLnNwbGl0KFwiX1wiKSxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLExUUzpcIkhIOm1tOnNzXCIsTDpcIkREL01NL1lZWVlcIixMTDpcIkQgTU1NTSBZWVlZXCIsTExMOlwiRCBNTU1NIFlZWVkgSEg6bW1cIixMTExMOlwiRCBNTU1NIFlZWVksIGRkZGQgSEg6bW1cIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbXFx1MDQxMVxcdTA0NDNcXHUwNDMzXFx1MDQ0M1xcdTA0M2QgXFx1MDQ0MVxcdTA0M2VcXHUwNDMwXFx1MDQ0Ml0gTFQgW1xcdTA0MzRcXHUwNDMwXVwiLG5leHREYXk6XCJbXFx1MDQyZFxcdTA0NDBcXHUwNDQyXFx1MDQzMFxcdTA0MzNcXHUwNDMwXSBMVCBbXFx1MDQzNFxcdTA0MzBdXCIsbmV4dFdlZWs6XCJkZGRkIFtcXHUwNDNhXFx1MDQ0M1xcdTA0M2RcXHUwNDM4IFxcdTA0NDFcXHUwNDNlXFx1MDQzMFxcdTA0NDJdIExUIFtcXHUwNDM0XFx1MDQzMF1cIixsYXN0RGF5OlwiW1xcdTA0MWFcXHUwNDM1XFx1MDQ0N1xcdTA0MzAgXFx1MDQ0MVxcdTA0M2VcXHUwNDMwXFx1MDQ0Ml0gTFQgW1xcdTA0MzRcXHUwNDMwXVwiLGxhc3RXZWVrOlwiW1xcdTA0MjNcXHUwNDQyXFx1MDQzM1xcdTA0MzBcXHUwNDNkXSBkZGRkIFtcXHUwNDNhXFx1MDQ0M1xcdTA0M2RcXHUwNDM4IFxcdTA0NDFcXHUwNDNlXFx1MDQzMFxcdTA0NDJdIExUIFtcXHUwNDM0XFx1MDQzMF1cIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJcXHUwNDJmXFx1MDQzYVxcdTA0MzhcXHUwNDNkICVzIFxcdTA0MzhcXHUwNDQ3XFx1MDQzOFxcdTA0MzRcXHUwNDMwXCIscGFzdDpcIlxcdTA0MTFcXHUwNDM4XFx1MDQ0MCBcXHUwNDNkXFx1MDQzNVxcdTA0NDdcXHUwNDMwICVzIFxcdTA0M2VcXHUwNDNiXFx1MDQzNFxcdTA0MzhcXHUwNDNkXCIsczpcIlxcdTA0NDRcXHUwNDQzXFx1MDQ0MFxcdTA0NDFcXHUwNDMwXFx1MDQ0MlwiLHNzOlwiJWQgXFx1MDQ0NFxcdTA0NDNcXHUwNDQwXFx1MDQ0MVxcdTA0MzBcXHUwNDQyXCIsbTpcIlxcdTA0MzFcXHUwNDM4XFx1MDQ0MCBcXHUwNDM0XFx1MDQzMFxcdTA0M2FcXHUwNDM4XFx1MDQzYVxcdTA0MzBcIixtbTpcIiVkIFxcdTA0MzRcXHUwNDMwXFx1MDQzYVxcdTA0MzhcXHUwNDNhXFx1MDQzMFwiLGg6XCJcXHUwNDMxXFx1MDQzOFxcdTA0NDAgXFx1MDQ0MVxcdTA0M2VcXHUwNDMwXFx1MDQ0MlwiLGhoOlwiJWQgXFx1MDQ0MVxcdTA0M2VcXHUwNDMwXFx1MDQ0MlwiLGQ6XCJcXHUwNDMxXFx1MDQzOFxcdTA0NDAgXFx1MDQzYVxcdTA0NDNcXHUwNDNkXCIsZGQ6XCIlZCBcXHUwNDNhXFx1MDQ0M1xcdTA0M2RcIixNOlwiXFx1MDQzMVxcdTA0MzhcXHUwNDQwIFxcdTA0M2VcXHUwNDM5XCIsTU06XCIlZCBcXHUwNDNlXFx1MDQzOVwiLHk6XCJcXHUwNDMxXFx1MDQzOFxcdTA0NDAgXFx1MDQzOVxcdTA0MzhcXHUwNDNiXCIseXk6XCIlZCBcXHUwNDM5XFx1MDQzOFxcdTA0M2JcIn0sd2Vlazp7ZG93OjEsZG95Ojd9fSksZS5kZWZpbmVMb2NhbGUoXCJ2aVwiLHttb250aHM6XCJ0aFxceGUxbmcgMV90aFxceGUxbmcgMl90aFxceGUxbmcgM190aFxceGUxbmcgNF90aFxceGUxbmcgNV90aFxceGUxbmcgNl90aFxceGUxbmcgN190aFxceGUxbmcgOF90aFxceGUxbmcgOV90aFxceGUxbmcgMTBfdGhcXHhlMW5nIDExX3RoXFx4ZTFuZyAxMlwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIlRoMDFfVGgwMl9UaDAzX1RoMDRfVGgwNV9UaDA2X1RoMDdfVGgwOF9UaDA5X1RoMTBfVGgxMV9UaDEyXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1BhcnNlRXhhY3Q6ITAsd2Vla2RheXM6XCJjaFxcdTFlZTcgbmhcXHUxZWFkdF90aFxcdTFlZTkgaGFpX3RoXFx1MWVlOSBiYV90aFxcdTFlZTkgdFxcdTAxYjBfdGhcXHUxZWU5IG5cXHUwMTAzbV90aFxcdTFlZTkgc1xceGUxdV90aFxcdTFlZTkgYlxcdTFlYTN5XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJDTl9UMl9UM19UNF9UNV9UNl9UN1wiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIkNOX1QyX1QzX1Q0X1Q1X1Q2X1Q3XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxtZXJpZGllbVBhcnNlOi9zYXxjaC9pLGlzUE06ZnVuY3Rpb24oZSl7cmV0dXJuL15jaCQvaS50ZXN0KGUpfSxtZXJpZGllbTpmdW5jdGlvbihlLGEsXyl7cmV0dXJuIGU8MTI/Xz9cInNhXCI6XCJTQVwiOl8/XCJjaFwiOlwiQ0hcIn0sbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gW25cXHUwMTAzbV0gWVlZWVwiLExMTDpcIkQgTU1NTSBbblxcdTAxMDNtXSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBbblxcdTAxMDNtXSBZWVlZIEhIOm1tXCIsbDpcIkREL00vWVlZWVwiLGxsOlwiRCBNTU0gWVlZWVwiLGxsbDpcIkQgTU1NIFlZWVkgSEg6bW1cIixsbGxsOlwiZGRkLCBEIE1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW0hcXHhmNG0gbmF5IGxcXHhmYWNdIExUXCIsbmV4dERheTpcIltOZ1xceGUweSBtYWkgbFxceGZhY10gTFRcIixuZXh0V2VlazpcImRkZGQgW3R1XFx1MWVhN24gdFxcdTFlZGJpIGxcXHhmYWNdIExUXCIsbGFzdERheTpcIltIXFx4ZjRtIHF1YSBsXFx4ZmFjXSBMVFwiLGxhc3RXZWVrOlwiZGRkZCBbdHVcXHUxZWE3biByXFx1MWVkM2kgbFxceGZhY10gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCIlcyB0XFx1MWVkYmlcIixwYXN0OlwiJXMgdHJcXHUwMWIwXFx1MWVkYmNcIixzOlwidlxceGUwaSBnaVxceGUyeVwiLHNzOlwiJWQgZ2lcXHhlMnlcIixtOlwibVxcdTFlZDl0IHBoXFx4ZmF0XCIsbW06XCIlZCBwaFxceGZhdFwiLGg6XCJtXFx1MWVkOXQgZ2lcXHUxZWRkXCIsaGg6XCIlZCBnaVxcdTFlZGRcIixkOlwibVxcdTFlZDl0IG5nXFx4ZTB5XCIsZGQ6XCIlZCBuZ1xceGUweVwiLE06XCJtXFx1MWVkOXQgdGhcXHhlMW5nXCIsTU06XCIlZCB0aFxceGUxbmdcIix5OlwibVxcdTFlZDl0IG5cXHUwMTAzbVwiLHl5OlwiJWQgblxcdTAxMDNtXCJ9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9LyxvcmRpbmFsOmZ1bmN0aW9uKGUpe3JldHVybiBlfSx3ZWVrOntkb3c6MSxkb3k6NH19KSxlLmRlZmluZUxvY2FsZShcIngtcHNldWRvXCIse21vbnRoczpcIkp+XFx4ZTFcXHhmMVxceGZhXFx4ZTF+clxceGZkX0Z+XFx4ZTliclxceGZhflxceGUxclxceGZkX35NXFx4ZTFyY35oX1xceGMxcH5yXFx4ZWRsX35NXFx4ZTFcXHhmZF9+SlxceGZhXFx4ZjFcXHhlOX5fSlxceGZhbH5cXHhmZF9cXHhjMVxceGZhfmdcXHhmYXN0fl9TXFx4ZTlwfnRcXHhlOW1iflxceGU5cl9cXHhkM35jdFxceGYzYn5cXHhlOXJfXFx4ZDF+XFx4ZjN2XFx4ZTltfmJcXHhlOXJffkRcXHhlOWNcXHhlOX5tYlxceGU5clwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIkp+XFx4ZTFcXHhmMV9+RlxceGU5Yl9+TVxceGUxcl9+XFx4YzFwcl9+TVxceGUxXFx4ZmRffkpcXHhmYVxceGYxX35KXFx4ZmFsX35cXHhjMVxceGZhZ19+U1xceGU5cF9+XFx4ZDNjdF9+XFx4ZDFcXHhmM3ZffkRcXHhlOWNcIi5zcGxpdChcIl9cIiksbW9udGhzUGFyc2VFeGFjdDohMCx3ZWVrZGF5czpcIlN+XFx4ZmFcXHhmMWRcXHhlMX5cXHhmZF9NXFx4ZjN+XFx4ZjFkXFx4ZTFcXHhmZH5fVFxceGZhXFx4ZTl+c2RcXHhlMVxceGZkfl9XXFx4ZTlkflxceGYxXFx4ZTlzZH5cXHhlMVxceGZkX1R+aFxceGZhcnN+ZFxceGUxXFx4ZmRffkZyXFx4ZWRkflxceGUxXFx4ZmRfU35cXHhlMXRcXHhmYXJ+ZFxceGUxXFx4ZmRcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIlN+XFx4ZmFcXHhmMV9+TVxceGYzXFx4ZjFfflRcXHhmYVxceGU5X35XXFx4ZTlkX35UaFxceGZhX35GclxceGVkX35TXFx4ZTF0XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiU35cXHhmYV9NXFx4ZjN+X1RcXHhmYV9+V1xceGU5X1R+aF9Gcn5fU1xceGUxXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzUGFyc2VFeGFjdDohMCxsb25nRGF0ZUZvcm1hdDp7TFQ6XCJISDptbVwiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIEhIOm1tXCIsTExMTDpcImRkZGQsIEQgTU1NTSBZWVlZIEhIOm1tXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1R+XFx4ZjNkXFx4ZTF+XFx4ZmQgXFx4ZTF0XSBMVFwiLG5leHREYXk6XCJbVH5cXHhmM21cXHhmM35yclxceGYzfncgXFx4ZTF0XSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbXFx4ZTF0XSBMVFwiLGxhc3REYXk6XCJbXFx4ZGR+XFx4ZTlzdH5cXHhlOXJkXFx4ZTF+XFx4ZmQgXFx4ZTF0XSBMVFwiLGxhc3RXZWVrOlwiW0x+XFx4ZTFzdF0gZGRkZCBbXFx4ZTF0XSBMVFwiLHNhbWVFbHNlOlwiTFwifSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIlxceGVkflxceGYxICVzXCIscGFzdDpcIiVzIFxceGUxfmdcXHhmM1wiLHM6XCJcXHhlMSB+ZlxceGU5dyB+c1xceGU5Y1xceGYzflxceGYxZHNcIixzczpcIiVkIHN+XFx4ZTljXFx4ZjNcXHhmMX5kc1wiLG06XCJcXHhlMSB+bVxceGVkXFx4ZjF+XFx4ZmF0XFx4ZTlcIixtbTpcIiVkIG1+XFx4ZWRcXHhmMVxceGZhfnRcXHhlOXNcIixoOlwiXFx4ZTF+XFx4ZjEgaFxceGYzflxceGZhclwiLGhoOlwiJWQgaH5cXHhmM1xceGZhcnNcIixkOlwiXFx4ZTEgfmRcXHhlMVxceGZkXCIsZGQ6XCIlZCBkflxceGUxXFx4ZmRzXCIsTTpcIlxceGUxIH5tXFx4ZjNcXHhmMX50aFwiLE1NOlwiJWQgbX5cXHhmM1xceGYxdH5oc1wiLHk6XCJcXHhlMSB+XFx4ZmRcXHhlOVxceGUxclwiLHl5OlwiJWQgXFx4ZmR+XFx4ZTlcXHhlMXJzXCJ9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9KHRofHN0fG5kfHJkKS8sb3JkaW5hbDpmdW5jdGlvbihlKXt2YXIgYT1lJTEwO3JldHVybiBlKygxPT1+fihlJTEwMC8xMCk/XCJ0aFwiOjE9PT1hP1wic3RcIjoyPT09YT9cIm5kXCI6Mz09PWE/XCJyZFwiOlwidGhcIil9LHdlZWs6e2RvdzoxLGRveTo0fX0pLGUuZGVmaW5lTG9jYWxlKFwieW9cIix7bW9udGhzOlwiU1xcdTFlYjlcXHUwMzAxclxcdTFlYjlcXHUwMzAxX0VcXHUwMzAwcmVcXHUwMzAwbGVcXHUwMzAwX1xcdTFlYjhyXFx1MWViOVxcdTAzMDBuYVxcdTAzMDBfSVxcdTAzMDBnYmVcXHUwMzAxX0VcXHUwMzAwYmliaV9PXFx1MDMwMGt1XFx1MDMwMGR1X0FnXFx1MWViOW1vX09cXHUwMzAwZ3VcXHUwMzAxbl9Pd2V3ZV9cXHUxZWNjXFx1MDMwMHdhXFx1MDMwMHJhXFx1MDMwMF9CZVxcdTAzMDFsdVxcdTAzMDFfXFx1MWVjY1xcdTAzMDBwXFx1MWViOVxcdTAzMDBcXHUwMzAwXCIuc3BsaXQoXCJfXCIpLG1vbnRoc1Nob3J0OlwiU1xcdTFlYjlcXHUwMzAxcl9FXFx1MDMwMHJsX1xcdTFlYjhybl9JXFx1MDMwMGdiX0VcXHUwMzAwYmlfT1xcdTAzMDBrdVxcdTAzMDBfQWdcXHUxZWI5X09cXHUwMzAwZ3VcXHUwMzAxX093ZV9cXHUxZWNjXFx1MDMwMHdhXFx1MDMwMF9CZVxcdTAzMDFsX1xcdTFlY2NcXHUwMzAwcFxcdTFlYjlcXHUwMzAwXFx1MDMwMFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIkFcXHUwMzAwaVxcdTAzMDBrdVxcdTAzMDFfQWplXFx1MDMwMV9JXFx1MDMwMHNcXHUxZWI5XFx1MDMwMWd1bl9cXHUxZWNjalxcdTFlY2RcXHUwMzAxcnVcXHUwMzAxX1xcdTFlY2NqXFx1MWVjZFxcdTAzMDFiXFx1MWVjZF9cXHUxZWI4dGlcXHUwMzAwX0FcXHUwMzAwYmFcXHUwMzAxbVxcdTFlYjlcXHUwMzAxdGFcIi5zcGxpdChcIl9cIiksd2Vla2RheXNTaG9ydDpcIkFcXHUwMzAwaVxcdTAzMDBrX0FqZVxcdTAzMDFfSVxcdTAzMDBzXFx1MWViOVxcdTAzMDFfXFx1MWVjY2pyX1xcdTFlY2NqYl9cXHUxZWI4dGlcXHUwMzAwX0FcXHUwMzAwYmFcXHUwMzAxXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzTWluOlwiQVxcdTAzMDBpXFx1MDMwMF9Bal9JXFx1MDMwMHNfXFx1MWVjY3JfXFx1MWVjY2JfXFx1MWViOHRfQVxcdTAzMDBiXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcImg6bW0gQVwiLExUUzpcImg6bW06c3MgQVwiLEw6XCJERC9NTS9ZWVlZXCIsTEw6XCJEIE1NTU0gWVlZWVwiLExMTDpcIkQgTU1NTSBZWVlZIGg6bW0gQVwiLExMTEw6XCJkZGRkLCBEIE1NTU0gWVlZWSBoOm1tIEFcIn0sY2FsZW5kYXI6e3NhbWVEYXk6XCJbT1xcdTAzMDBuaVxcdTAzMDAgbmldIExUXCIsbmV4dERheTpcIltcXHUxZWNjXFx1MDMwMGxhIG5pXSBMVFwiLG5leHRXZWVrOlwiZGRkZCBbXFx1MWVjY3NcXHUxZWI5XFx1MDMwMCB0b1xcdTAzMDFuJ2JcXHUxZWNkXSBbbmldIExUXCIsbGFzdERheTpcIltBXFx1MDMwMG5hIG5pXSBMVFwiLGxhc3RXZWVrOlwiZGRkZCBbXFx1MWVjY3NcXHUxZWI5XFx1MDMwMCB0b1xcdTAzMDFsXFx1MWVjZFxcdTAzMDFdIFtuaV0gTFRcIixzYW1lRWxzZTpcIkxcIn0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCJuaVxcdTAzMDEgJXNcIixwYXN0OlwiJXMga1xcdTFlY2RqYVxcdTAzMDFcIixzOlwiaVxcdTAzMDBzXFx1MWViOWp1XFx1MDMwMSBhYXlhXFx1MDMwMSBkaWVcIixzczpcImFheWFcXHUwMzAxICVkXCIsbTpcImlcXHUwMzAwc1xcdTFlYjlqdVxcdTAzMDEga2FuXCIsbW06XCJpXFx1MDMwMHNcXHUxZWI5anVcXHUwMzAxICVkXCIsaDpcIndhXFx1MDMwMWthdGkga2FuXCIsaGg6XCJ3YVxcdTAzMDFrYXRpICVkXCIsZDpcIlxcdTFlY2RqXFx1MWVjZFxcdTAzMDEga2FuXCIsZGQ6XCJcXHUxZWNkalxcdTFlY2RcXHUwMzAxICVkXCIsTTpcIm9zdVxcdTAzMDAga2FuXCIsTU06XCJvc3VcXHUwMzAwICVkXCIseTpcIlxcdTFlY2RkdVxcdTAzMDFuIGthblwiLHl5OlwiXFx1MWVjZGR1XFx1MDMwMW4gJWRcIn0sZGF5T2ZNb250aE9yZGluYWxQYXJzZTovXFx1MWVjZGpcXHUxZWNkXFx1MDMwMVxcc1xcZHsxLDJ9LyxvcmRpbmFsOlwiXFx1MWVjZGpcXHUxZWNkXFx1MDMwMSAlZFwiLHdlZWs6e2RvdzoxLGRveTo0fX0pLGUuZGVmaW5lTG9jYWxlKFwiemgtY25cIix7bW9udGhzOlwiXFx1NGUwMFxcdTY3MDhfXFx1NGU4Y1xcdTY3MDhfXFx1NGUwOVxcdTY3MDhfXFx1NTZkYlxcdTY3MDhfXFx1NGU5NFxcdTY3MDhfXFx1NTE2ZFxcdTY3MDhfXFx1NGUwM1xcdTY3MDhfXFx1NTE2YlxcdTY3MDhfXFx1NGU1ZFxcdTY3MDhfXFx1NTM0MVxcdTY3MDhfXFx1NTM0MVxcdTRlMDBcXHU2NzA4X1xcdTUzNDFcXHU0ZThjXFx1NjcwOFwiLnNwbGl0KFwiX1wiKSxtb250aHNTaG9ydDpcIjFcXHU2NzA4XzJcXHU2NzA4XzNcXHU2NzA4XzRcXHU2NzA4XzVcXHU2NzA4XzZcXHU2NzA4XzdcXHU2NzA4XzhcXHU2NzA4XzlcXHU2NzA4XzEwXFx1NjcwOF8xMVxcdTY3MDhfMTJcXHU2NzA4XCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzOlwiXFx1NjYxZlxcdTY3MWZcXHU2NWU1X1xcdTY2MWZcXHU2NzFmXFx1NGUwMF9cXHU2NjFmXFx1NjcxZlxcdTRlOGNfXFx1NjYxZlxcdTY3MWZcXHU0ZTA5X1xcdTY2MWZcXHU2NzFmXFx1NTZkYl9cXHU2NjFmXFx1NjcxZlxcdTRlOTRfXFx1NjYxZlxcdTY3MWZcXHU1MTZkXCIuc3BsaXQoXCJfXCIpLHdlZWtkYXlzU2hvcnQ6XCJcXHU1NDY4XFx1NjVlNV9cXHU1NDY4XFx1NGUwMF9cXHU1NDY4XFx1NGU4Y19cXHU1NDY4XFx1NGUwOV9cXHU1NDY4XFx1NTZkYl9cXHU1NDY4XFx1NGU5NF9cXHU1NDY4XFx1NTE2ZFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c01pbjpcIlxcdTY1ZTVfXFx1NGUwMF9cXHU0ZThjX1xcdTRlMDlfXFx1NTZkYl9cXHU0ZTk0X1xcdTUxNmRcIi5zcGxpdChcIl9cIiksbG9uZ0RhdGVGb3JtYXQ6e0xUOlwiSEg6bW1cIixMVFM6XCJISDptbTpzc1wiLEw6XCJZWVlZL01NL0REXCIsTEw6XCJZWVlZXFx1NWU3NE1cXHU2NzA4RFxcdTY1ZTVcIixMTEw6XCJZWVlZXFx1NWU3NE1cXHU2NzA4RFxcdTY1ZTVBaFxcdTcwYjltbVxcdTUyMDZcIixMTExMOlwiWVlZWVxcdTVlNzRNXFx1NjcwOERcXHU2NWU1ZGRkZEFoXFx1NzBiOW1tXFx1NTIwNlwiLGw6XCJZWVlZL00vRFwiLGxsOlwiWVlZWVxcdTVlNzRNXFx1NjcwOERcXHU2NWU1XCIsbGxsOlwiWVlZWVxcdTVlNzRNXFx1NjcwOERcXHU2NWU1IEhIOm1tXCIsbGxsbDpcIllZWVlcXHU1ZTc0TVxcdTY3MDhEXFx1NjVlNWRkZGQgSEg6bW1cIn0sbWVyaWRpZW1QYXJzZTovXFx1NTFjY1xcdTY2Njh8XFx1NjVlOVxcdTRlMGF8XFx1NGUwYVxcdTUzNDh8XFx1NGUyZFxcdTUzNDh8XFx1NGUwYlxcdTUzNDh8XFx1NjY1YVxcdTRlMGEvLG1lcmlkaWVtSG91cjpmdW5jdGlvbihlLGEpe3JldHVybiAxMj09PWUmJihlPTApLFwiXFx1NTFjY1xcdTY2NjhcIj09PWF8fFwiXFx1NjVlOVxcdTRlMGFcIj09PWF8fFwiXFx1NGUwYVxcdTUzNDhcIj09PWE/ZTpcIlxcdTRlMGJcXHU1MzQ4XCI9PT1hfHxcIlxcdTY2NWFcXHU0ZTBhXCI9PT1hP2UrMTI6ZT49MTE/ZTplKzEyfSxtZXJpZGllbTpmdW5jdGlvbihlLGEsXyl7dmFyIHM9MTAwKmUrYTtyZXR1cm4gczw2MDA/XCJcXHU1MWNjXFx1NjY2OFwiOnM8OTAwP1wiXFx1NjVlOVxcdTRlMGFcIjpzPDExMzA/XCJcXHU0ZTBhXFx1NTM0OFwiOnM8MTIzMD9cIlxcdTRlMmRcXHU1MzQ4XCI6czwxODAwP1wiXFx1NGUwYlxcdTUzNDhcIjpcIlxcdTY2NWFcXHU0ZTBhXCJ9LGNhbGVuZGFyOntzYW1lRGF5OlwiW1xcdTRlY2FcXHU1OTI5XUxUXCIsbmV4dERheTpcIltcXHU2NjBlXFx1NTkyOV1MVFwiLG5leHRXZWVrOlwiW1xcdTRlMGJdZGRkZExUXCIsbGFzdERheTpcIltcXHU2NjI4XFx1NTkyOV1MVFwiLGxhc3RXZWVrOlwiW1xcdTRlMGFdZGRkZExUXCIsc2FtZUVsc2U6XCJMXCJ9LGRheU9mTW9udGhPcmRpbmFsUGFyc2U6L1xcZHsxLDJ9KFxcdTY1ZTV8XFx1NjcwOHxcXHU1NDY4KS8sb3JkaW5hbDpmdW5jdGlvbihlLGEpe3N3aXRjaChhKXtjYXNlXCJkXCI6Y2FzZVwiRFwiOmNhc2VcIkRERFwiOnJldHVybiBlK1wiXFx1NjVlNVwiO2Nhc2VcIk1cIjpyZXR1cm4gZStcIlxcdTY3MDhcIjtjYXNlXCJ3XCI6Y2FzZVwiV1wiOnJldHVybiBlK1wiXFx1NTQ2OFwiO2RlZmF1bHQ6cmV0dXJuIGV9fSxyZWxhdGl2ZVRpbWU6e2Z1dHVyZTpcIiVzXFx1NTE4NVwiLHBhc3Q6XCIlc1xcdTUyNGRcIixzOlwiXFx1NTFlMFxcdTc5ZDJcIixzczpcIiVkIFxcdTc5ZDJcIixtOlwiMSBcXHU1MjA2XFx1OTQ5ZlwiLG1tOlwiJWQgXFx1NTIwNlxcdTk0OWZcIixoOlwiMSBcXHU1YzBmXFx1NjVmNlwiLGhoOlwiJWQgXFx1NWMwZlxcdTY1ZjZcIixkOlwiMSBcXHU1OTI5XCIsZGQ6XCIlZCBcXHU1OTI5XCIsTTpcIjEgXFx1NGUyYVxcdTY3MDhcIixNTTpcIiVkIFxcdTRlMmFcXHU2NzA4XCIseTpcIjEgXFx1NWU3NFwiLHl5OlwiJWQgXFx1NWU3NFwifSx3ZWVrOntkb3c6MSxkb3k6NH19KSxlLmRlZmluZUxvY2FsZShcInpoLWhrXCIse21vbnRoczpcIlxcdTRlMDBcXHU2NzA4X1xcdTRlOGNcXHU2NzA4X1xcdTRlMDlcXHU2NzA4X1xcdTU2ZGJcXHU2NzA4X1xcdTRlOTRcXHU2NzA4X1xcdTUxNmRcXHU2NzA4X1xcdTRlMDNcXHU2NzA4X1xcdTUxNmJcXHU2NzA4X1xcdTRlNWRcXHU2NzA4X1xcdTUzNDFcXHU2NzA4X1xcdTUzNDFcXHU0ZTAwXFx1NjcwOF9cXHU1MzQxXFx1NGU4Y1xcdTY3MDhcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCIxXFx1NjcwOF8yXFx1NjcwOF8zXFx1NjcwOF80XFx1NjcwOF81XFx1NjcwOF82XFx1NjcwOF83XFx1NjcwOF84XFx1NjcwOF85XFx1NjcwOF8xMFxcdTY3MDhfMTFcXHU2NzA4XzEyXFx1NjcwOFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIlxcdTY2MWZcXHU2NzFmXFx1NjVlNV9cXHU2NjFmXFx1NjcxZlxcdTRlMDBfXFx1NjYxZlxcdTY3MWZcXHU0ZThjX1xcdTY2MWZcXHU2NzFmXFx1NGUwOV9cXHU2NjFmXFx1NjcxZlxcdTU2ZGJfXFx1NjYxZlxcdTY3MWZcXHU0ZTk0X1xcdTY2MWZcXHU2NzFmXFx1NTE2ZFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiXFx1OTAzMVxcdTY1ZTVfXFx1OTAzMVxcdTRlMDBfXFx1OTAzMVxcdTRlOGNfXFx1OTAzMVxcdTRlMDlfXFx1OTAzMVxcdTU2ZGJfXFx1OTAzMVxcdTRlOTRfXFx1OTAzMVxcdTUxNmRcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJcXHU2NWU1X1xcdTRlMDBfXFx1NGU4Y19cXHU0ZTA5X1xcdTU2ZGJfXFx1NGU5NF9cXHU1MTZkXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiWVlZWS9NTS9ERFwiLExMOlwiWVlZWVxcdTVlNzRNXFx1NjcwOERcXHU2NWU1XCIsTExMOlwiWVlZWVxcdTVlNzRNXFx1NjcwOERcXHU2NWU1IEhIOm1tXCIsTExMTDpcIllZWVlcXHU1ZTc0TVxcdTY3MDhEXFx1NjVlNWRkZGQgSEg6bW1cIixsOlwiWVlZWS9NL0RcIixsbDpcIllZWVlcXHU1ZTc0TVxcdTY3MDhEXFx1NjVlNVwiLGxsbDpcIllZWVlcXHU1ZTc0TVxcdTY3MDhEXFx1NjVlNSBISDptbVwiLGxsbGw6XCJZWVlZXFx1NWU3NE1cXHU2NzA4RFxcdTY1ZTVkZGRkIEhIOm1tXCJ9LG1lcmlkaWVtUGFyc2U6L1xcdTUxY2NcXHU2NjY4fFxcdTY1ZTlcXHU0ZTBhfFxcdTRlMGFcXHU1MzQ4fFxcdTRlMmRcXHU1MzQ4fFxcdTRlMGJcXHU1MzQ4fFxcdTY2NWFcXHU0ZTBhLyxtZXJpZGllbUhvdXI6ZnVuY3Rpb24oZSxhKXtyZXR1cm4gMTI9PT1lJiYoZT0wKSxcIlxcdTUxY2NcXHU2NjY4XCI9PT1hfHxcIlxcdTY1ZTlcXHU0ZTBhXCI9PT1hfHxcIlxcdTRlMGFcXHU1MzQ4XCI9PT1hP2U6XCJcXHU0ZTJkXFx1NTM0OFwiPT09YT9lPj0xMT9lOmUrMTI6XCJcXHU0ZTBiXFx1NTM0OFwiPT09YXx8XCJcXHU2NjVhXFx1NGUwYVwiPT09YT9lKzEyOnZvaWQgMH0sbWVyaWRpZW06ZnVuY3Rpb24oZSxhLF8pe3ZhciBzPTEwMCplK2E7cmV0dXJuIHM8NjAwP1wiXFx1NTFjY1xcdTY2NjhcIjpzPDkwMD9cIlxcdTY1ZTlcXHU0ZTBhXCI6czwxMTMwP1wiXFx1NGUwYVxcdTUzNDhcIjpzPDEyMzA/XCJcXHU0ZTJkXFx1NTM0OFwiOnM8MTgwMD9cIlxcdTRlMGJcXHU1MzQ4XCI6XCJcXHU2NjVhXFx1NGUwYVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltcXHU0ZWNhXFx1NTkyOV1MVFwiLG5leHREYXk6XCJbXFx1NjYwZVxcdTU5MjldTFRcIixuZXh0V2VlazpcIltcXHU0ZTBiXWRkZGRMVFwiLGxhc3REYXk6XCJbXFx1NjYyOFxcdTU5MjldTFRcIixsYXN0V2VlazpcIltcXHU0ZTBhXWRkZGRMVFwiLHNhbWVFbHNlOlwiTFwifSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfShcXHU2NWU1fFxcdTY3MDh8XFx1OTAzMSkvLG9yZGluYWw6ZnVuY3Rpb24oZSxhKXtzd2l0Y2goYSl7Y2FzZVwiZFwiOmNhc2VcIkRcIjpjYXNlXCJERERcIjpyZXR1cm4gZStcIlxcdTY1ZTVcIjtjYXNlXCJNXCI6cmV0dXJuIGUrXCJcXHU2NzA4XCI7Y2FzZVwid1wiOmNhc2VcIldcIjpyZXR1cm4gZStcIlxcdTkwMzFcIjtkZWZhdWx0OnJldHVybiBlfX0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCIlc1xcdTUxNjdcIixwYXN0OlwiJXNcXHU1MjRkXCIsczpcIlxcdTVlN2VcXHU3OWQyXCIsc3M6XCIlZCBcXHU3OWQyXCIsbTpcIjEgXFx1NTIwNlxcdTk0MThcIixtbTpcIiVkIFxcdTUyMDZcXHU5NDE4XCIsaDpcIjEgXFx1NWMwZlxcdTY2NDJcIixoaDpcIiVkIFxcdTVjMGZcXHU2NjQyXCIsZDpcIjEgXFx1NTkyOVwiLGRkOlwiJWQgXFx1NTkyOVwiLE06XCIxIFxcdTUwMGJcXHU2NzA4XCIsTU06XCIlZCBcXHU1MDBiXFx1NjcwOFwiLHk6XCIxIFxcdTVlNzRcIix5eTpcIiVkIFxcdTVlNzRcIn19KSxlLmRlZmluZUxvY2FsZShcInpoLXR3XCIse21vbnRoczpcIlxcdTRlMDBcXHU2NzA4X1xcdTRlOGNcXHU2NzA4X1xcdTRlMDlcXHU2NzA4X1xcdTU2ZGJcXHU2NzA4X1xcdTRlOTRcXHU2NzA4X1xcdTUxNmRcXHU2NzA4X1xcdTRlMDNcXHU2NzA4X1xcdTUxNmJcXHU2NzA4X1xcdTRlNWRcXHU2NzA4X1xcdTUzNDFcXHU2NzA4X1xcdTUzNDFcXHU0ZTAwXFx1NjcwOF9cXHU1MzQxXFx1NGU4Y1xcdTY3MDhcIi5zcGxpdChcIl9cIiksbW9udGhzU2hvcnQ6XCIxXFx1NjcwOF8yXFx1NjcwOF8zXFx1NjcwOF80XFx1NjcwOF81XFx1NjcwOF82XFx1NjcwOF83XFx1NjcwOF84XFx1NjcwOF85XFx1NjcwOF8xMFxcdTY3MDhfMTFcXHU2NzA4XzEyXFx1NjcwOFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5czpcIlxcdTY2MWZcXHU2NzFmXFx1NjVlNV9cXHU2NjFmXFx1NjcxZlxcdTRlMDBfXFx1NjYxZlxcdTY3MWZcXHU0ZThjX1xcdTY2MWZcXHU2NzFmXFx1NGUwOV9cXHU2NjFmXFx1NjcxZlxcdTU2ZGJfXFx1NjYxZlxcdTY3MWZcXHU0ZTk0X1xcdTY2MWZcXHU2NzFmXFx1NTE2ZFwiLnNwbGl0KFwiX1wiKSx3ZWVrZGF5c1Nob3J0OlwiXFx1OTAzMVxcdTY1ZTVfXFx1OTAzMVxcdTRlMDBfXFx1OTAzMVxcdTRlOGNfXFx1OTAzMVxcdTRlMDlfXFx1OTAzMVxcdTU2ZGJfXFx1OTAzMVxcdTRlOTRfXFx1OTAzMVxcdTUxNmRcIi5zcGxpdChcIl9cIiksd2Vla2RheXNNaW46XCJcXHU2NWU1X1xcdTRlMDBfXFx1NGU4Y19cXHU0ZTA5X1xcdTU2ZGJfXFx1NGU5NF9cXHU1MTZkXCIuc3BsaXQoXCJfXCIpLGxvbmdEYXRlRm9ybWF0OntMVDpcIkhIOm1tXCIsTFRTOlwiSEg6bW06c3NcIixMOlwiWVlZWS9NTS9ERFwiLExMOlwiWVlZWVxcdTVlNzRNXFx1NjcwOERcXHU2NWU1XCIsTExMOlwiWVlZWVxcdTVlNzRNXFx1NjcwOERcXHU2NWU1IEhIOm1tXCIsTExMTDpcIllZWVlcXHU1ZTc0TVxcdTY3MDhEXFx1NjVlNWRkZGQgSEg6bW1cIixsOlwiWVlZWS9NL0RcIixsbDpcIllZWVlcXHU1ZTc0TVxcdTY3MDhEXFx1NjVlNVwiLGxsbDpcIllZWVlcXHU1ZTc0TVxcdTY3MDhEXFx1NjVlNSBISDptbVwiLGxsbGw6XCJZWVlZXFx1NWU3NE1cXHU2NzA4RFxcdTY1ZTVkZGRkIEhIOm1tXCJ9LG1lcmlkaWVtUGFyc2U6L1xcdTUxY2NcXHU2NjY4fFxcdTY1ZTlcXHU0ZTBhfFxcdTRlMGFcXHU1MzQ4fFxcdTRlMmRcXHU1MzQ4fFxcdTRlMGJcXHU1MzQ4fFxcdTY2NWFcXHU0ZTBhLyxtZXJpZGllbUhvdXI6ZnVuY3Rpb24oZSxhKXtyZXR1cm4gMTI9PT1lJiYoZT0wKSxcIlxcdTUxY2NcXHU2NjY4XCI9PT1hfHxcIlxcdTY1ZTlcXHU0ZTBhXCI9PT1hfHxcIlxcdTRlMGFcXHU1MzQ4XCI9PT1hP2U6XCJcXHU0ZTJkXFx1NTM0OFwiPT09YT9lPj0xMT9lOmUrMTI6XCJcXHU0ZTBiXFx1NTM0OFwiPT09YXx8XCJcXHU2NjVhXFx1NGUwYVwiPT09YT9lKzEyOnZvaWQgMH0sbWVyaWRpZW06ZnVuY3Rpb24oZSxhLF8pe3ZhciBzPTEwMCplK2E7cmV0dXJuIHM8NjAwP1wiXFx1NTFjY1xcdTY2NjhcIjpzPDkwMD9cIlxcdTY1ZTlcXHU0ZTBhXCI6czwxMTMwP1wiXFx1NGUwYVxcdTUzNDhcIjpzPDEyMzA/XCJcXHU0ZTJkXFx1NTM0OFwiOnM8MTgwMD9cIlxcdTRlMGJcXHU1MzQ4XCI6XCJcXHU2NjVhXFx1NGUwYVwifSxjYWxlbmRhcjp7c2FtZURheTpcIltcXHU0ZWNhXFx1NTkyOV1MVFwiLG5leHREYXk6XCJbXFx1NjYwZVxcdTU5MjldTFRcIixuZXh0V2VlazpcIltcXHU0ZTBiXWRkZGRMVFwiLGxhc3REYXk6XCJbXFx1NjYyOFxcdTU5MjldTFRcIixsYXN0V2VlazpcIltcXHU0ZTBhXWRkZGRMVFwiLHNhbWVFbHNlOlwiTFwifSxkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOi9cXGR7MSwyfShcXHU2NWU1fFxcdTY3MDh8XFx1OTAzMSkvLG9yZGluYWw6ZnVuY3Rpb24oZSxhKXtzd2l0Y2goYSl7Y2FzZVwiZFwiOmNhc2VcIkRcIjpjYXNlXCJERERcIjpyZXR1cm4gZStcIlxcdTY1ZTVcIjtjYXNlXCJNXCI6cmV0dXJuIGUrXCJcXHU2NzA4XCI7Y2FzZVwid1wiOmNhc2VcIldcIjpyZXR1cm4gZStcIlxcdTkwMzFcIjtkZWZhdWx0OnJldHVybiBlfX0scmVsYXRpdmVUaW1lOntmdXR1cmU6XCIlc1xcdTUxNjdcIixwYXN0OlwiJXNcXHU1MjRkXCIsczpcIlxcdTVlN2VcXHU3OWQyXCIsc3M6XCIlZCBcXHU3OWQyXCIsbTpcIjEgXFx1NTIwNlxcdTk0MThcIixtbTpcIiVkIFxcdTUyMDZcXHU5NDE4XCIsaDpcIjEgXFx1NWMwZlxcdTY2NDJcIixoaDpcIiVkIFxcdTVjMGZcXHU2NjQyXCIsZDpcIjEgXFx1NTkyOVwiLGRkOlwiJWQgXFx1NTkyOVwiLE06XCIxIFxcdTUwMGJcXHU2NzA4XCIsTU06XCIlZCBcXHU1MDBiXFx1NjcwOFwiLHk6XCIxIFxcdTVlNzRcIix5eTpcIiVkIFxcdTVlNzRcIn19KSxlLmxvY2FsZShcImVuXCIpLGV9KTsiLCIvLyEgbW9tZW50LmpzXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIGdsb2JhbC5tb21lbnQgPSBmYWN0b3J5KClcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG52YXIgaG9va0NhbGxiYWNrO1xuXG5mdW5jdGlvbiBob29rcyAoKSB7XG4gICAgcmV0dXJuIGhvb2tDYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufVxuXG4vLyBUaGlzIGlzIGRvbmUgdG8gcmVnaXN0ZXIgdGhlIG1ldGhvZCBjYWxsZWQgd2l0aCBtb21lbnQoKVxuLy8gd2l0aG91dCBjcmVhdGluZyBjaXJjdWxhciBkZXBlbmRlbmNpZXMuXG5mdW5jdGlvbiBzZXRIb29rQ2FsbGJhY2sgKGNhbGxiYWNrKSB7XG4gICAgaG9va0NhbGxiYWNrID0gY2FsbGJhY2s7XG59XG5cbmZ1bmN0aW9uIGlzQXJyYXkoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBBcnJheSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChpbnB1dCkge1xuICAgIC8vIElFOCB3aWxsIHRyZWF0IHVuZGVmaW5lZCBhbmQgbnVsbCBhcyBvYmplY3QgaWYgaXQgd2Fzbid0IGZvclxuICAgIC8vIGlucHV0ICE9IG51bGxcbiAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cblxuZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHtcbiAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMpIHtcbiAgICAgICAgcmV0dXJuIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCA9PT0gMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGs7XG4gICAgICAgIGZvciAoayBpbiBvYmopIHtcbiAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCA9PT0gdm9pZCAwO1xufVxuXG5mdW5jdGlvbiBpc051bWJlcihpbnB1dCkge1xuICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IE51bWJlcl0nO1xufVxuXG5mdW5jdGlvbiBpc0RhdGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBEYXRlIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuZnVuY3Rpb24gbWFwKGFyciwgZm4pIHtcbiAgICB2YXIgcmVzID0gW10sIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IGFyci5sZW5ndGg7ICsraSkge1xuICAgICAgICByZXMucHVzaChmbihhcnJbaV0sIGkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gaGFzT3duUHJvcChhLCBiKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLCBiKTtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kKGEsIGIpIHtcbiAgICBmb3IgKHZhciBpIGluIGIpIHtcbiAgICAgICAgaWYgKGhhc093blByb3AoYiwgaSkpIHtcbiAgICAgICAgICAgIGFbaV0gPSBiW2ldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGhhc093blByb3AoYiwgJ3RvU3RyaW5nJykpIHtcbiAgICAgICAgYS50b1N0cmluZyA9IGIudG9TdHJpbmc7XG4gICAgfVxuXG4gICAgaWYgKGhhc093blByb3AoYiwgJ3ZhbHVlT2YnKSkge1xuICAgICAgICBhLnZhbHVlT2YgPSBiLnZhbHVlT2Y7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVUQyAoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgdHJ1ZSkudXRjKCk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQYXJzaW5nRmxhZ3MoKSB7XG4gICAgLy8gV2UgbmVlZCB0byBkZWVwIGNsb25lIHRoaXMgb2JqZWN0LlxuICAgIHJldHVybiB7XG4gICAgICAgIGVtcHR5ICAgICAgICAgICA6IGZhbHNlLFxuICAgICAgICB1bnVzZWRUb2tlbnMgICAgOiBbXSxcbiAgICAgICAgdW51c2VkSW5wdXQgICAgIDogW10sXG4gICAgICAgIG92ZXJmbG93ICAgICAgICA6IC0yLFxuICAgICAgICBjaGFyc0xlZnRPdmVyICAgOiAwLFxuICAgICAgICBudWxsSW5wdXQgICAgICAgOiBmYWxzZSxcbiAgICAgICAgaW52YWxpZE1vbnRoICAgIDogbnVsbCxcbiAgICAgICAgaW52YWxpZEZvcm1hdCAgIDogZmFsc2UsXG4gICAgICAgIHVzZXJJbnZhbGlkYXRlZCA6IGZhbHNlLFxuICAgICAgICBpc28gICAgICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgcGFyc2VkRGF0ZVBhcnRzIDogW10sXG4gICAgICAgIG1lcmlkaWVtICAgICAgICA6IG51bGwsXG4gICAgICAgIHJmYzI4MjIgICAgICAgICA6IGZhbHNlLFxuICAgICAgICB3ZWVrZGF5TWlzbWF0Y2ggOiBmYWxzZVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdldFBhcnNpbmdGbGFncyhtKSB7XG4gICAgaWYgKG0uX3BmID09IG51bGwpIHtcbiAgICAgICAgbS5fcGYgPSBkZWZhdWx0UGFyc2luZ0ZsYWdzKCk7XG4gICAgfVxuICAgIHJldHVybiBtLl9wZjtcbn1cblxudmFyIHNvbWU7XG5pZiAoQXJyYXkucHJvdG90eXBlLnNvbWUpIHtcbiAgICBzb21lID0gQXJyYXkucHJvdG90eXBlLnNvbWU7XG59IGVsc2Uge1xuICAgIHNvbWUgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgICAgIHZhciB0ID0gT2JqZWN0KHRoaXMpO1xuICAgICAgICB2YXIgbGVuID0gdC5sZW5ndGggPj4+IDA7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgaW4gdCAmJiBmdW4uY2FsbCh0aGlzLCB0W2ldLCBpLCB0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWQobSkge1xuICAgIGlmIChtLl9pc1ZhbGlkID09IG51bGwpIHtcbiAgICAgICAgdmFyIGZsYWdzID0gZ2V0UGFyc2luZ0ZsYWdzKG0pO1xuICAgICAgICB2YXIgcGFyc2VkUGFydHMgPSBzb21lLmNhbGwoZmxhZ3MucGFyc2VkRGF0ZVBhcnRzLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgcmV0dXJuIGkgIT0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBpc05vd1ZhbGlkID0gIWlzTmFOKG0uX2QuZ2V0VGltZSgpKSAmJlxuICAgICAgICAgICAgZmxhZ3Mub3ZlcmZsb3cgPCAwICYmXG4gICAgICAgICAgICAhZmxhZ3MuZW1wdHkgJiZcbiAgICAgICAgICAgICFmbGFncy5pbnZhbGlkTW9udGggJiZcbiAgICAgICAgICAgICFmbGFncy5pbnZhbGlkV2Vla2RheSAmJlxuICAgICAgICAgICAgIWZsYWdzLndlZWtkYXlNaXNtYXRjaCAmJlxuICAgICAgICAgICAgIWZsYWdzLm51bGxJbnB1dCAmJlxuICAgICAgICAgICAgIWZsYWdzLmludmFsaWRGb3JtYXQgJiZcbiAgICAgICAgICAgICFmbGFncy51c2VySW52YWxpZGF0ZWQgJiZcbiAgICAgICAgICAgICghZmxhZ3MubWVyaWRpZW0gfHwgKGZsYWdzLm1lcmlkaWVtICYmIHBhcnNlZFBhcnRzKSk7XG5cbiAgICAgICAgaWYgKG0uX3N0cmljdCkge1xuICAgICAgICAgICAgaXNOb3dWYWxpZCA9IGlzTm93VmFsaWQgJiZcbiAgICAgICAgICAgICAgICBmbGFncy5jaGFyc0xlZnRPdmVyID09PSAwICYmXG4gICAgICAgICAgICAgICAgZmxhZ3MudW51c2VkVG9rZW5zLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICAgICAgICAgIGZsYWdzLmJpZ0hvdXIgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChPYmplY3QuaXNGcm96ZW4gPT0gbnVsbCB8fCAhT2JqZWN0LmlzRnJvemVuKG0pKSB7XG4gICAgICAgICAgICBtLl9pc1ZhbGlkID0gaXNOb3dWYWxpZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc05vd1ZhbGlkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtLl9pc1ZhbGlkO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJbnZhbGlkIChmbGFncykge1xuICAgIHZhciBtID0gY3JlYXRlVVRDKE5hTik7XG4gICAgaWYgKGZsYWdzICE9IG51bGwpIHtcbiAgICAgICAgZXh0ZW5kKGdldFBhcnNpbmdGbGFncyhtKSwgZmxhZ3MpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLnVzZXJJbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG07XG59XG5cbi8vIFBsdWdpbnMgdGhhdCBhZGQgcHJvcGVydGllcyBzaG91bGQgYWxzbyBhZGQgdGhlIGtleSBoZXJlIChudWxsIHZhbHVlKSxcbi8vIHNvIHdlIGNhbiBwcm9wZXJseSBjbG9uZSBvdXJzZWx2ZXMuXG52YXIgbW9tZW50UHJvcGVydGllcyA9IGhvb2tzLm1vbWVudFByb3BlcnRpZXMgPSBbXTtcblxuZnVuY3Rpb24gY29weUNvbmZpZyh0bywgZnJvbSkge1xuICAgIHZhciBpLCBwcm9wLCB2YWw7XG5cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzQU1vbWVudE9iamVjdCkpIHtcbiAgICAgICAgdG8uX2lzQU1vbWVudE9iamVjdCA9IGZyb20uX2lzQU1vbWVudE9iamVjdDtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pKSkge1xuICAgICAgICB0by5faSA9IGZyb20uX2k7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fZikpIHtcbiAgICAgICAgdG8uX2YgPSBmcm9tLl9mO1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2wpKSB7XG4gICAgICAgIHRvLl9sID0gZnJvbS5fbDtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9zdHJpY3QpKSB7XG4gICAgICAgIHRvLl9zdHJpY3QgPSBmcm9tLl9zdHJpY3Q7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fdHptKSkge1xuICAgICAgICB0by5fdHptID0gZnJvbS5fdHptO1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzVVRDKSkge1xuICAgICAgICB0by5faXNVVEMgPSBmcm9tLl9pc1VUQztcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9vZmZzZXQpKSB7XG4gICAgICAgIHRvLl9vZmZzZXQgPSBmcm9tLl9vZmZzZXQ7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fcGYpKSB7XG4gICAgICAgIHRvLl9wZiA9IGdldFBhcnNpbmdGbGFncyhmcm9tKTtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9sb2NhbGUpKSB7XG4gICAgICAgIHRvLl9sb2NhbGUgPSBmcm9tLl9sb2NhbGU7XG4gICAgfVxuXG4gICAgaWYgKG1vbWVudFByb3BlcnRpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbW9tZW50UHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcHJvcCA9IG1vbWVudFByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICB2YWwgPSBmcm9tW3Byb3BdO1xuICAgICAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh2YWwpKSB7XG4gICAgICAgICAgICAgICAgdG9bcHJvcF0gPSB2YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdG87XG59XG5cbnZhciB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG5cbi8vIE1vbWVudCBwcm90b3R5cGUgb2JqZWN0XG5mdW5jdGlvbiBNb21lbnQoY29uZmlnKSB7XG4gICAgY29weUNvbmZpZyh0aGlzLCBjb25maWcpO1xuICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShjb25maWcuX2QgIT0gbnVsbCA/IGNvbmZpZy5fZC5nZXRUaW1lKCkgOiBOYU4pO1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgdGhpcy5fZCA9IG5ldyBEYXRlKE5hTik7XG4gICAgfVxuICAgIC8vIFByZXZlbnQgaW5maW5pdGUgbG9vcCBpbiBjYXNlIHVwZGF0ZU9mZnNldCBjcmVhdGVzIG5ldyBtb21lbnRcbiAgICAvLyBvYmplY3RzLlxuICAgIGlmICh1cGRhdGVJblByb2dyZXNzID09PSBmYWxzZSkge1xuICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc01vbWVudCAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIE1vbWVudCB8fCAob2JqICE9IG51bGwgJiYgb2JqLl9pc0FNb21lbnRPYmplY3QgIT0gbnVsbCk7XG59XG5cbmZ1bmN0aW9uIGFic0Zsb29yIChudW1iZXIpIHtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAvLyAtMCAtPiAwXG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKSB8fCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB0b0ludChhcmd1bWVudEZvckNvZXJjaW9uKSB7XG4gICAgdmFyIGNvZXJjZWROdW1iZXIgPSArYXJndW1lbnRGb3JDb2VyY2lvbixcbiAgICAgICAgdmFsdWUgPSAwO1xuXG4gICAgaWYgKGNvZXJjZWROdW1iZXIgIT09IDAgJiYgaXNGaW5pdGUoY29lcmNlZE51bWJlcikpIHtcbiAgICAgICAgdmFsdWUgPSBhYnNGbG9vcihjb2VyY2VkTnVtYmVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbi8vIGNvbXBhcmUgdHdvIGFycmF5cywgcmV0dXJuIHRoZSBudW1iZXIgb2YgZGlmZmVyZW5jZXNcbmZ1bmN0aW9uIGNvbXBhcmVBcnJheXMoYXJyYXkxLCBhcnJheTIsIGRvbnRDb252ZXJ0KSB7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKGFycmF5MS5sZW5ndGgsIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICBsZW5ndGhEaWZmID0gTWF0aC5hYnMoYXJyYXkxLmxlbmd0aCAtIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICBkaWZmcyA9IDAsXG4gICAgICAgIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmICgoZG9udENvbnZlcnQgJiYgYXJyYXkxW2ldICE9PSBhcnJheTJbaV0pIHx8XG4gICAgICAgICAgICAoIWRvbnRDb252ZXJ0ICYmIHRvSW50KGFycmF5MVtpXSkgIT09IHRvSW50KGFycmF5MltpXSkpKSB7XG4gICAgICAgICAgICBkaWZmcysrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkaWZmcyArIGxlbmd0aERpZmY7XG59XG5cbmZ1bmN0aW9uIHdhcm4obXNnKSB7XG4gICAgaWYgKGhvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9PT0gZmFsc2UgJiZcbiAgICAgICAgICAgICh0eXBlb2YgY29uc29sZSAhPT0gICd1bmRlZmluZWQnKSAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdEZXByZWNhdGlvbiB3YXJuaW5nOiAnICsgbXNnKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZShtc2csIGZuKSB7XG4gICAgdmFyIGZpcnN0VGltZSA9IHRydWU7XG5cbiAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobnVsbCwgbXNnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmlyc3RUaW1lKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgdmFyIGFyZztcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnID0gJyc7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZyArPSAnXFxuWycgKyBpICsgJ10gJztcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGFyZ3VtZW50c1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnICs9IGtleSArICc6ICcgKyBhcmd1bWVudHNbMF1ba2V5XSArICcsICc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKDAsIC0yKTsgLy8gUmVtb3ZlIHRyYWlsaW5nIGNvbW1hIGFuZCBzcGFjZVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXJncy5wdXNoKGFyZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3YXJuKG1zZyArICdcXG5Bcmd1bWVudHM6ICcgKyBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKS5qb2luKCcnKSArICdcXG4nICsgKG5ldyBFcnJvcigpKS5zdGFjayk7XG4gICAgICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9LCBmbik7XG59XG5cbnZhciBkZXByZWNhdGlvbnMgPSB7fTtcblxuZnVuY3Rpb24gZGVwcmVjYXRlU2ltcGxlKG5hbWUsIG1zZykge1xuICAgIGlmIChob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobmFtZSwgbXNnKTtcbiAgICB9XG4gICAgaWYgKCFkZXByZWNhdGlvbnNbbmFtZV0pIHtcbiAgICAgICAgd2Fybihtc2cpO1xuICAgICAgICBkZXByZWNhdGlvbnNbbmFtZV0gPSB0cnVlO1xuICAgIH1cbn1cblxuaG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID0gZmFsc2U7XG5ob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgPSBudWxsO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgRnVuY3Rpb24gfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuZnVuY3Rpb24gc2V0IChjb25maWcpIHtcbiAgICB2YXIgcHJvcCwgaTtcbiAgICBmb3IgKGkgaW4gY29uZmlnKSB7XG4gICAgICAgIHByb3AgPSBjb25maWdbaV07XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHByb3ApKSB7XG4gICAgICAgICAgICB0aGlzW2ldID0gcHJvcDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXNbJ18nICsgaV0gPSBwcm9wO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgICAvLyBMZW5pZW50IG9yZGluYWwgcGFyc2luZyBhY2NlcHRzIGp1c3QgYSBudW1iZXIgaW4gYWRkaXRpb24gdG9cbiAgICAvLyBudW1iZXIgKyAocG9zc2libHkpIHN0dWZmIGNvbWluZyBmcm9tIF9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLlxuICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICB0aGlzLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICh0aGlzLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLnNvdXJjZSB8fCB0aGlzLl9vcmRpbmFsUGFyc2Uuc291cmNlKSArXG4gICAgICAgICAgICAnfCcgKyAoL1xcZHsxLDJ9Lykuc291cmNlKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY2hpbGRDb25maWcpIHtcbiAgICB2YXIgcmVzID0gZXh0ZW5kKHt9LCBwYXJlbnRDb25maWcpLCBwcm9wO1xuICAgIGZvciAocHJvcCBpbiBjaGlsZENvbmZpZykge1xuICAgICAgICBpZiAoaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkpIHtcbiAgICAgICAgICAgIGlmIChpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pICYmIGlzT2JqZWN0KGNoaWxkQ29uZmlnW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IHt9O1xuICAgICAgICAgICAgICAgIGV4dGVuZChyZXNbcHJvcF0sIHBhcmVudENvbmZpZ1twcm9wXSk7XG4gICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgY2hpbGRDb25maWdbcHJvcF0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaGlsZENvbmZpZ1twcm9wXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzW3Byb3BdID0gY2hpbGRDb25maWdbcHJvcF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSByZXNbcHJvcF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChwcm9wIGluIHBhcmVudENvbmZpZykge1xuICAgICAgICBpZiAoaGFzT3duUHJvcChwYXJlbnRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAgICAgIWhhc093blByb3AoY2hpbGRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAgICAgaXNPYmplY3QocGFyZW50Q29uZmlnW3Byb3BdKSkge1xuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIGNoYW5nZXMgdG8gcHJvcGVydGllcyBkb24ndCBtb2RpZnkgcGFyZW50IGNvbmZpZ1xuICAgICAgICAgICAgcmVzW3Byb3BdID0gZXh0ZW5kKHt9LCByZXNbcHJvcF0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIExvY2FsZShjb25maWcpIHtcbiAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5zZXQoY29uZmlnKTtcbiAgICB9XG59XG5cbnZhciBrZXlzO1xuXG5pZiAoT2JqZWN0LmtleXMpIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXM7XG59IGVsc2Uge1xuICAgIGtleXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHZhciBpLCByZXMgPSBbXTtcbiAgICAgICAgZm9yIChpIGluIG9iaikge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3Aob2JqLCBpKSkge1xuICAgICAgICAgICAgICAgIHJlcy5wdXNoKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfTtcbn1cblxudmFyIGRlZmF1bHRDYWxlbmRhciA9IHtcbiAgICBzYW1lRGF5IDogJ1tUb2RheSBhdF0gTFQnLFxuICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgbmV4dFdlZWsgOiAnZGRkZCBbYXRdIExUJyxcbiAgICBsYXN0RGF5IDogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICBzYW1lRWxzZSA6ICdMJ1xufTtcblxuZnVuY3Rpb24gY2FsZW5kYXIgKGtleSwgbW9tLCBub3cpIHtcbiAgICB2YXIgb3V0cHV0ID0gdGhpcy5fY2FsZW5kYXJba2V5XSB8fCB0aGlzLl9jYWxlbmRhclsnc2FtZUVsc2UnXTtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihvdXRwdXQpID8gb3V0cHV0LmNhbGwobW9tLCBub3cpIDogb3V0cHV0O1xufVxuXG52YXIgZGVmYXVsdExvbmdEYXRlRm9ybWF0ID0ge1xuICAgIExUUyAgOiAnaDptbTpzcyBBJyxcbiAgICBMVCAgIDogJ2g6bW0gQScsXG4gICAgTCAgICA6ICdNTS9ERC9ZWVlZJyxcbiAgICBMTCAgIDogJ01NTU0gRCwgWVlZWScsXG4gICAgTExMICA6ICdNTU1NIEQsIFlZWVkgaDptbSBBJyxcbiAgICBMTExMIDogJ2RkZGQsIE1NTU0gRCwgWVlZWSBoOm1tIEEnXG59O1xuXG5mdW5jdGlvbiBsb25nRGF0ZUZvcm1hdCAoa2V5KSB7XG4gICAgdmFyIGZvcm1hdCA9IHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV0sXG4gICAgICAgIGZvcm1hdFVwcGVyID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5LnRvVXBwZXJDYXNlKCldO1xuXG4gICAgaWYgKGZvcm1hdCB8fCAhZm9ybWF0VXBwZXIpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICB9XG5cbiAgICB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldID0gZm9ybWF0VXBwZXIucmVwbGFjZSgvTU1NTXxNTXxERHxkZGRkL2csIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgcmV0dXJuIHZhbC5zbGljZSgxKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldO1xufVxuXG52YXIgZGVmYXVsdEludmFsaWREYXRlID0gJ0ludmFsaWQgZGF0ZSc7XG5cbmZ1bmN0aW9uIGludmFsaWREYXRlICgpIHtcbiAgICByZXR1cm4gdGhpcy5faW52YWxpZERhdGU7XG59XG5cbnZhciBkZWZhdWx0T3JkaW5hbCA9ICclZCc7XG52YXIgZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UgPSAvXFxkezEsMn0vO1xuXG5mdW5jdGlvbiBvcmRpbmFsIChudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fb3JkaW5hbC5yZXBsYWNlKCclZCcsIG51bWJlcik7XG59XG5cbnZhciBkZWZhdWx0UmVsYXRpdmVUaW1lID0ge1xuICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgcGFzdCAgIDogJyVzIGFnbycsXG4gICAgcyAgOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgc3MgOiAnJWQgc2Vjb25kcycsXG4gICAgbSAgOiAnYSBtaW51dGUnLFxuICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgIGggIDogJ2FuIGhvdXInLFxuICAgIGhoIDogJyVkIGhvdXJzJyxcbiAgICBkICA6ICdhIGRheScsXG4gICAgZGQgOiAnJWQgZGF5cycsXG4gICAgTSAgOiAnYSBtb250aCcsXG4gICAgTU0gOiAnJWQgbW9udGhzJyxcbiAgICB5ICA6ICdhIHllYXInLFxuICAgIHl5IDogJyVkIHllYXJzJ1xufTtcblxuZnVuY3Rpb24gcmVsYXRpdmVUaW1lIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICB2YXIgb3V0cHV0ID0gdGhpcy5fcmVsYXRpdmVUaW1lW3N0cmluZ107XG4gICAgcmV0dXJuIChpc0Z1bmN0aW9uKG91dHB1dCkpID9cbiAgICAgICAgb3V0cHV0KG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkgOlxuICAgICAgICBvdXRwdXQucmVwbGFjZSgvJWQvaSwgbnVtYmVyKTtcbn1cblxuZnVuY3Rpb24gcGFzdEZ1dHVyZSAoZGlmZiwgb3V0cHV0KSB7XG4gICAgdmFyIGZvcm1hdCA9IHRoaXMuX3JlbGF0aXZlVGltZVtkaWZmID4gMCA/ICdmdXR1cmUnIDogJ3Bhc3QnXTtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihmb3JtYXQpID8gZm9ybWF0KG91dHB1dCkgOiBmb3JtYXQucmVwbGFjZSgvJXMvaSwgb3V0cHV0KTtcbn1cblxudmFyIGFsaWFzZXMgPSB7fTtcblxuZnVuY3Rpb24gYWRkVW5pdEFsaWFzICh1bml0LCBzaG9ydGhhbmQpIHtcbiAgICB2YXIgbG93ZXJDYXNlID0gdW5pdC50b0xvd2VyQ2FzZSgpO1xuICAgIGFsaWFzZXNbbG93ZXJDYXNlXSA9IGFsaWFzZXNbbG93ZXJDYXNlICsgJ3MnXSA9IGFsaWFzZXNbc2hvcnRoYW5kXSA9IHVuaXQ7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB1bml0cyA9PT0gJ3N0cmluZycgPyBhbGlhc2VzW3VuaXRzXSB8fCBhbGlhc2VzW3VuaXRzLnRvTG93ZXJDYXNlKCldIDogdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVPYmplY3RVbml0cyhpbnB1dE9iamVjdCkge1xuICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSB7fSxcbiAgICAgICAgbm9ybWFsaXplZFByb3AsXG4gICAgICAgIHByb3A7XG5cbiAgICBmb3IgKHByb3AgaW4gaW5wdXRPYmplY3QpIHtcbiAgICAgICAgaWYgKGhhc093blByb3AoaW5wdXRPYmplY3QsIHByb3ApKSB7XG4gICAgICAgICAgICBub3JtYWxpemVkUHJvcCA9IG5vcm1hbGl6ZVVuaXRzKHByb3ApO1xuICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRQcm9wKSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZElucHV0W25vcm1hbGl6ZWRQcm9wXSA9IGlucHV0T2JqZWN0W3Byb3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vcm1hbGl6ZWRJbnB1dDtcbn1cblxudmFyIHByaW9yaXRpZXMgPSB7fTtcblxuZnVuY3Rpb24gYWRkVW5pdFByaW9yaXR5KHVuaXQsIHByaW9yaXR5KSB7XG4gICAgcHJpb3JpdGllc1t1bml0XSA9IHByaW9yaXR5O1xufVxuXG5mdW5jdGlvbiBnZXRQcmlvcml0aXplZFVuaXRzKHVuaXRzT2JqKSB7XG4gICAgdmFyIHVuaXRzID0gW107XG4gICAgZm9yICh2YXIgdSBpbiB1bml0c09iaikge1xuICAgICAgICB1bml0cy5wdXNoKHt1bml0OiB1LCBwcmlvcml0eTogcHJpb3JpdGllc1t1XX0pO1xuICAgIH1cbiAgICB1bml0cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhLnByaW9yaXR5IC0gYi5wcmlvcml0eTtcbiAgICB9KTtcbiAgICByZXR1cm4gdW5pdHM7XG59XG5cbmZ1bmN0aW9uIHplcm9GaWxsKG51bWJlciwgdGFyZ2V0TGVuZ3RoLCBmb3JjZVNpZ24pIHtcbiAgICB2YXIgYWJzTnVtYmVyID0gJycgKyBNYXRoLmFicyhudW1iZXIpLFxuICAgICAgICB6ZXJvc1RvRmlsbCA9IHRhcmdldExlbmd0aCAtIGFic051bWJlci5sZW5ndGgsXG4gICAgICAgIHNpZ24gPSBudW1iZXIgPj0gMDtcbiAgICByZXR1cm4gKHNpZ24gPyAoZm9yY2VTaWduID8gJysnIDogJycpIDogJy0nKSArXG4gICAgICAgIE1hdGgucG93KDEwLCBNYXRoLm1heCgwLCB6ZXJvc1RvRmlsbCkpLnRvU3RyaW5nKCkuc3Vic3RyKDEpICsgYWJzTnVtYmVyO1xufVxuXG52YXIgZm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhbSGhdbW0oc3MpP3xNb3xNTT9NP00/fERvfERERG98REQ/RD9EP3xkZGQ/ZD98ZG8/fHdbb3x3XT98V1tvfFddP3xRbz98WVlZWVlZfFlZWVlZfFlZWVl8WVl8Z2coZ2dnPyk/fEdHKEdHRz8pP3xlfEV8YXxBfGhoP3xISD98a2s/fG1tP3xzcz98U3sxLDl9fHh8WHx6ej98Wlo/fC4pL2c7XG5cbnZhciBsb2NhbEZvcm1hdHRpbmdUb2tlbnMgPSAvKFxcW1teXFxbXSpcXF0pfChcXFxcKT8oTFRTfExUfExMP0w/TD98bHsxLDR9KS9nO1xuXG52YXIgZm9ybWF0RnVuY3Rpb25zID0ge307XG5cbnZhciBmb3JtYXRUb2tlbkZ1bmN0aW9ucyA9IHt9O1xuXG4vLyB0b2tlbjogICAgJ00nXG4vLyBwYWRkZWQ6ICAgWydNTScsIDJdXG4vLyBvcmRpbmFsOiAgJ01vJ1xuLy8gY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHsgdGhpcy5tb250aCgpICsgMSB9XG5mdW5jdGlvbiBhZGRGb3JtYXRUb2tlbiAodG9rZW4sIHBhZGRlZCwgb3JkaW5hbCwgY2FsbGJhY2spIHtcbiAgICB2YXIgZnVuYyA9IGNhbGxiYWNrO1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1tjYWxsYmFja10oKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHRva2VuKSB7XG4gICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSA9IGZ1bmM7XG4gICAgfVxuICAgIGlmIChwYWRkZWQpIHtcbiAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbcGFkZGVkWzBdXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB6ZXJvRmlsbChmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHBhZGRlZFsxXSwgcGFkZGVkWzJdKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKG9yZGluYWwpIHtcbiAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbb3JkaW5hbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkub3JkaW5hbChmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRva2VuKTtcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQubWF0Y2goL1xcW1tcXHNcXFNdLykpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL15cXFt8XFxdJC9nLCAnJyk7XG4gICAgfVxuICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXFxcL2csICcnKTtcbn1cblxuZnVuY3Rpb24gbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCkge1xuICAgIHZhciBhcnJheSA9IGZvcm1hdC5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSwgaSwgbGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXSkge1xuICAgICAgICAgICAgYXJyYXlbaV0gPSBmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJheVtpXSA9IHJlbW92ZUZvcm1hdHRpbmdUb2tlbnMoYXJyYXlbaV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtb20pIHtcbiAgICAgICAgdmFyIG91dHB1dCA9ICcnLCBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG91dHB1dCArPSBpc0Z1bmN0aW9uKGFycmF5W2ldKSA/IGFycmF5W2ldLmNhbGwobW9tLCBmb3JtYXQpIDogYXJyYXlbaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9O1xufVxuXG4vLyBmb3JtYXQgZGF0ZSB1c2luZyBuYXRpdmUgZGF0ZSBvYmplY3RcbmZ1bmN0aW9uIGZvcm1hdE1vbWVudChtLCBmb3JtYXQpIHtcbiAgICBpZiAoIW0uaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBtLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgIH1cblxuICAgIGZvcm1hdCA9IGV4cGFuZEZvcm1hdChmb3JtYXQsIG0ubG9jYWxlRGF0YSgpKTtcbiAgICBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSA9IGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdIHx8IG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpO1xuXG4gICAgcmV0dXJuIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdKG0pO1xufVxuXG5mdW5jdGlvbiBleHBhbmRGb3JtYXQoZm9ybWF0LCBsb2NhbGUpIHtcbiAgICB2YXIgaSA9IDU7XG5cbiAgICBmdW5jdGlvbiByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5sb25nRGF0ZUZvcm1hdChpbnB1dCkgfHwgaW5wdXQ7XG4gICAgfVxuXG4gICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgd2hpbGUgKGkgPj0gMCAmJiBsb2NhbEZvcm1hdHRpbmdUb2tlbnMudGVzdChmb3JtYXQpKSB7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKGxvY2FsRm9ybWF0dGluZ1Rva2VucywgcmVwbGFjZUxvbmdEYXRlRm9ybWF0VG9rZW5zKTtcbiAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgICAgIGkgLT0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm9ybWF0O1xufVxuXG52YXIgbWF0Y2gxICAgICAgICAgPSAvXFxkLzsgICAgICAgICAgICAvLyAgICAgICAwIC0gOVxudmFyIG1hdGNoMiAgICAgICAgID0gL1xcZFxcZC87ICAgICAgICAgIC8vICAgICAgMDAgLSA5OVxudmFyIG1hdGNoMyAgICAgICAgID0gL1xcZHszfS87ICAgICAgICAgLy8gICAgIDAwMCAtIDk5OVxudmFyIG1hdGNoNCAgICAgICAgID0gL1xcZHs0fS87ICAgICAgICAgLy8gICAgMDAwMCAtIDk5OTlcbnZhciBtYXRjaDYgICAgICAgICA9IC9bKy1dP1xcZHs2fS87ICAgIC8vIC05OTk5OTkgLSA5OTk5OTlcbnZhciBtYXRjaDF0bzIgICAgICA9IC9cXGRcXGQ/LzsgICAgICAgICAvLyAgICAgICAwIC0gOTlcbnZhciBtYXRjaDN0bzQgICAgICA9IC9cXGRcXGRcXGRcXGQ/LzsgICAgIC8vICAgICA5OTkgLSA5OTk5XG52YXIgbWF0Y2g1dG82ICAgICAgPSAvXFxkXFxkXFxkXFxkXFxkXFxkPy87IC8vICAgOTk5OTkgLSA5OTk5OTlcbnZhciBtYXRjaDF0bzMgICAgICA9IC9cXGR7MSwzfS87ICAgICAgIC8vICAgICAgIDAgLSA5OTlcbnZhciBtYXRjaDF0bzQgICAgICA9IC9cXGR7MSw0fS87ICAgICAgIC8vICAgICAgIDAgLSA5OTk5XG52YXIgbWF0Y2gxdG82ICAgICAgPSAvWystXT9cXGR7MSw2fS87ICAvLyAtOTk5OTk5IC0gOTk5OTk5XG5cbnZhciBtYXRjaFVuc2lnbmVkICA9IC9cXGQrLzsgICAgICAgICAgIC8vICAgICAgIDAgLSBpbmZcbnZhciBtYXRjaFNpZ25lZCAgICA9IC9bKy1dP1xcZCsvOyAgICAgIC8vICAgIC1pbmYgLSBpbmZcblxudmFyIG1hdGNoT2Zmc2V0ICAgID0gL1p8WystXVxcZFxcZDo/XFxkXFxkL2dpOyAvLyArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcbnZhciBtYXRjaFNob3J0T2Zmc2V0ID0gL1p8WystXVxcZFxcZCg/Ojo/XFxkXFxkKT8vZ2k7IC8vICswMCAtMDAgKzAwOjAwIC0wMDowMCArMDAwMCAtMDAwMCBvciBaXG5cbnZhciBtYXRjaFRpbWVzdGFtcCA9IC9bKy1dP1xcZCsoXFwuXFxkezEsM30pPy87IC8vIDEyMzQ1Njc4OSAxMjM0NTY3ODkuMTIzXG5cbi8vIGFueSB3b3JkIChvciB0d28pIGNoYXJhY3RlcnMgb3IgbnVtYmVycyBpbmNsdWRpbmcgdHdvL3RocmVlIHdvcmQgbW9udGggaW4gYXJhYmljLlxuLy8gaW5jbHVkZXMgc2NvdHRpc2ggZ2FlbGljIHR3byB3b3JkIGFuZCBoeXBoZW5hdGVkIG1vbnRoc1xudmFyIG1hdGNoV29yZCA9IC9bMC05XXswLDI1Nn1bJ2EtelxcdTAwQTAtXFx1MDVGRlxcdTA3MDAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkYwN1xcdUZGMTAtXFx1RkZFRl17MSwyNTZ9fFtcXHUwNjAwLVxcdTA2RkZcXC9dezEsMjU2fShcXHMqP1tcXHUwNjAwLVxcdTA2RkZdezEsMjU2fSl7MSwyfS9pO1xuXG52YXIgcmVnZXhlcyA9IHt9O1xuXG5mdW5jdGlvbiBhZGRSZWdleFRva2VuICh0b2tlbiwgcmVnZXgsIHN0cmljdFJlZ2V4KSB7XG4gICAgcmVnZXhlc1t0b2tlbl0gPSBpc0Z1bmN0aW9uKHJlZ2V4KSA/IHJlZ2V4IDogZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGVEYXRhKSB7XG4gICAgICAgIHJldHVybiAoaXNTdHJpY3QgJiYgc3RyaWN0UmVnZXgpID8gc3RyaWN0UmVnZXggOiByZWdleDtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4gKHRva2VuLCBjb25maWcpIHtcbiAgICBpZiAoIWhhc093blByb3AocmVnZXhlcywgdG9rZW4pKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVnRXhwKHVuZXNjYXBlRm9ybWF0KHRva2VuKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlZ2V4ZXNbdG9rZW5dKGNvbmZpZy5fc3RyaWN0LCBjb25maWcuX2xvY2FsZSk7XG59XG5cbi8vIENvZGUgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM1NjE0OTMvaXMtdGhlcmUtYS1yZWdleHAtZXNjYXBlLWZ1bmN0aW9uLWluLWphdmFzY3JpcHRcbmZ1bmN0aW9uIHVuZXNjYXBlRm9ybWF0KHMpIHtcbiAgICByZXR1cm4gcmVnZXhFc2NhcGUocy5yZXBsYWNlKCdcXFxcJywgJycpLnJlcGxhY2UoL1xcXFwoXFxbKXxcXFxcKFxcXSl8XFxbKFteXFxdXFxbXSopXFxdfFxcXFwoLikvZywgZnVuY3Rpb24gKG1hdGNoZWQsIHAxLCBwMiwgcDMsIHA0KSB7XG4gICAgICAgIHJldHVybiBwMSB8fCBwMiB8fCBwMyB8fCBwNDtcbiAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIHJlZ2V4RXNjYXBlKHMpIHtcbiAgICByZXR1cm4gcy5yZXBsYWNlKC9bLVxcL1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcbn1cblxudmFyIHRva2VucyA9IHt9O1xuXG5mdW5jdGlvbiBhZGRQYXJzZVRva2VuICh0b2tlbiwgY2FsbGJhY2spIHtcbiAgICB2YXIgaSwgZnVuYyA9IGNhbGxiYWNrO1xuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRva2VuID0gW3Rva2VuXTtcbiAgICB9XG4gICAgaWYgKGlzTnVtYmVyKGNhbGxiYWNrKSkge1xuICAgICAgICBmdW5jID0gZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICAgICAgYXJyYXlbY2FsbGJhY2tdID0gdG9JbnQoaW5wdXQpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdG9rZW5zW3Rva2VuW2ldXSA9IGZ1bmM7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhZGRXZWVrUGFyc2VUb2tlbiAodG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICBjb25maWcuX3cgPSBjb25maWcuX3cgfHwge307XG4gICAgICAgIGNhbGxiYWNrKGlucHV0LCBjb25maWcuX3csIGNvbmZpZywgdG9rZW4pO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbiwgaW5wdXQsIGNvbmZpZykge1xuICAgIGlmIChpbnB1dCAhPSBudWxsICYmIGhhc093blByb3AodG9rZW5zLCB0b2tlbikpIHtcbiAgICAgICAgdG9rZW5zW3Rva2VuXShpbnB1dCwgY29uZmlnLl9hLCBjb25maWcsIHRva2VuKTtcbiAgICB9XG59XG5cbnZhciBZRUFSID0gMDtcbnZhciBNT05USCA9IDE7XG52YXIgREFURSA9IDI7XG52YXIgSE9VUiA9IDM7XG52YXIgTUlOVVRFID0gNDtcbnZhciBTRUNPTkQgPSA1O1xudmFyIE1JTExJU0VDT05EID0gNjtcbnZhciBXRUVLID0gNztcbnZhciBXRUVLREFZID0gODtcblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignWScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgeSA9IHRoaXMueWVhcigpO1xuICAgIHJldHVybiB5IDw9IDk5OTkgPyAnJyArIHkgOiAnKycgKyB5O1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKDAsIFsnWVknLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnllYXIoKSAlIDEwMDtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVknLCAgIDRdLCAgICAgICAwLCAneWVhcicpO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWScsICA1XSwgICAgICAgMCwgJ3llYXInKTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVlZJywgNiwgdHJ1ZV0sIDAsICd5ZWFyJyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCd5ZWFyJywgJ3knKTtcblxuLy8gUFJJT1JJVElFU1xuXG5hZGRVbml0UHJpb3JpdHkoJ3llYXInLCAxKTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdZJywgICAgICBtYXRjaFNpZ25lZCk7XG5hZGRSZWdleFRva2VuKCdZWScsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdZWVlZJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG5hZGRSZWdleFRva2VuKCdZWVlZWScsICBtYXRjaDF0bzYsIG1hdGNoNik7XG5hZGRSZWdleFRva2VuKCdZWVlZWVknLCBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbmFkZFBhcnNlVG9rZW4oWydZWVlZWScsICdZWVlZWVknXSwgWUVBUik7XG5hZGRQYXJzZVRva2VuKCdZWVlZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W1lFQVJdID0gaW5wdXQubGVuZ3RoID09PSAyID8gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpIDogdG9JbnQoaW5wdXQpO1xufSk7XG5hZGRQYXJzZVRva2VuKCdZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICBhcnJheVtZRUFSXSA9IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTtcbn0pO1xuYWRkUGFyc2VUb2tlbignWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICBhcnJheVtZRUFSXSA9IHBhcnNlSW50KGlucHV0LCAxMCk7XG59KTtcblxuLy8gSEVMUEVSU1xuXG5mdW5jdGlvbiBkYXlzSW5ZZWFyKHllYXIpIHtcbiAgICByZXR1cm4gaXNMZWFwWWVhcih5ZWFyKSA/IDM2NiA6IDM2NTtcbn1cblxuZnVuY3Rpb24gaXNMZWFwWWVhcih5ZWFyKSB7XG4gICAgcmV0dXJuICh5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwKSB8fCB5ZWFyICUgNDAwID09PSAwO1xufVxuXG4vLyBIT09LU1xuXG5ob29rcy5wYXJzZVR3b0RpZ2l0WWVhciA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIHJldHVybiB0b0ludChpbnB1dCkgKyAodG9JbnQoaW5wdXQpID4gNjggPyAxOTAwIDogMjAwMCk7XG59O1xuXG4vLyBNT01FTlRTXG5cbnZhciBnZXRTZXRZZWFyID0gbWFrZUdldFNldCgnRnVsbFllYXInLCB0cnVlKTtcblxuZnVuY3Rpb24gZ2V0SXNMZWFwWWVhciAoKSB7XG4gICAgcmV0dXJuIGlzTGVhcFllYXIodGhpcy55ZWFyKCkpO1xufVxuXG5mdW5jdGlvbiBtYWtlR2V0U2V0ICh1bml0LCBrZWVwVGltZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNldCQxKHRoaXMsIHVuaXQsIHZhbHVlKTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCBrZWVwVGltZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQodGhpcywgdW5pdCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXQgKG1vbSwgdW5pdCkge1xuICAgIHJldHVybiBtb20uaXNWYWxpZCgpID9cbiAgICAgICAgbW9tLl9kWydnZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKCkgOiBOYU47XG59XG5cbmZ1bmN0aW9uIHNldCQxIChtb20sIHVuaXQsIHZhbHVlKSB7XG4gICAgaWYgKG1vbS5pc1ZhbGlkKCkgJiYgIWlzTmFOKHZhbHVlKSkge1xuICAgICAgICBpZiAodW5pdCA9PT0gJ0Z1bGxZZWFyJyAmJiBpc0xlYXBZZWFyKG1vbS55ZWFyKCkpICYmIG1vbS5tb250aCgpID09PSAxICYmIG1vbS5kYXRlKCkgPT09IDI5KSB7XG4gICAgICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0odmFsdWUsIG1vbS5tb250aCgpLCBkYXlzSW5Nb250aCh2YWx1ZSwgbW9tLm1vbnRoKCkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG1vbS5fZFsnc2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gc3RyaW5nR2V0ICh1bml0cykge1xuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbdW5pdHNdKSkge1xuICAgICAgICByZXR1cm4gdGhpc1t1bml0c10oKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59XG5cblxuZnVuY3Rpb24gc3RyaW5nU2V0ICh1bml0cywgdmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHVuaXRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKHVuaXRzKTtcbiAgICAgICAgdmFyIHByaW9yaXRpemVkID0gZ2V0UHJpb3JpdGl6ZWRVbml0cyh1bml0cyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJpb3JpdGl6ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXNbcHJpb3JpdGl6ZWRbaV0udW5pdF0odW5pdHNbcHJpb3JpdGl6ZWRbaV0udW5pdF0pO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbdW5pdHNdKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHNdKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gbW9kKG4sIHgpIHtcbiAgICByZXR1cm4gKChuICUgeCkgKyB4KSAlIHg7XG59XG5cbnZhciBpbmRleE9mO1xuXG5pZiAoQXJyYXkucHJvdG90eXBlLmluZGV4T2YpIHtcbiAgICBpbmRleE9mID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2Y7XG59IGVsc2Uge1xuICAgIGluZGV4T2YgPSBmdW5jdGlvbiAobykge1xuICAgICAgICAvLyBJIGtub3dcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAodGhpc1tpXSA9PT0gbykge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBkYXlzSW5Nb250aCh5ZWFyLCBtb250aCkge1xuICAgIGlmIChpc05hTih5ZWFyKSB8fCBpc05hTihtb250aCkpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gICAgdmFyIG1vZE1vbnRoID0gbW9kKG1vbnRoLCAxMik7XG4gICAgeWVhciArPSAobW9udGggLSBtb2RNb250aCkgLyAxMjtcbiAgICByZXR1cm4gbW9kTW9udGggPT09IDEgPyAoaXNMZWFwWWVhcih5ZWFyKSA/IDI5IDogMjgpIDogKDMxIC0gbW9kTW9udGggJSA3ICUgMik7XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ00nLCBbJ01NJywgMl0sICdNbycsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5tb250aCgpICsgMTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignTU1NJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tb250aHNTaG9ydCh0aGlzLCBmb3JtYXQpO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdNTU1NJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tb250aHModGhpcywgZm9ybWF0KTtcbn0pO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygnbW9udGgnLCAnTScpO1xuXG4vLyBQUklPUklUWVxuXG5hZGRVbml0UHJpb3JpdHkoJ21vbnRoJywgOCk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignTScsICAgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdNTScsICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignTU1NJywgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5tb250aHNTaG9ydFJlZ2V4KGlzU3RyaWN0KTtcbn0pO1xuYWRkUmVnZXhUb2tlbignTU1NTScsIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5tb250aHNSZWdleChpc1N0cmljdCk7XG59KTtcblxuYWRkUGFyc2VUb2tlbihbJ00nLCAnTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W01PTlRIXSA9IHRvSW50KGlucHV0KSAtIDE7XG59KTtcblxuYWRkUGFyc2VUb2tlbihbJ01NTScsICdNTU1NJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICB2YXIgbW9udGggPSBjb25maWcuX2xvY2FsZS5tb250aHNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAvLyBpZiB3ZSBkaWRuJ3QgZmluZCBhIG1vbnRoIG5hbWUsIG1hcmsgdGhlIGRhdGUgYXMgaW52YWxpZC5cbiAgICBpZiAobW9udGggIT0gbnVsbCkge1xuICAgICAgICBhcnJheVtNT05USF0gPSBtb250aDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkTW9udGggPSBpbnB1dDtcbiAgICB9XG59KTtcblxuLy8gTE9DQUxFU1xuXG52YXIgTU9OVEhTX0lOX0ZPUk1BVCA9IC9EW29EXT8oXFxbW15cXFtcXF1dKlxcXXxcXHMpK01NTU0/LztcbnZhciBkZWZhdWx0TG9jYWxlTW9udGhzID0gJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KCdfJyk7XG5mdW5jdGlvbiBsb2NhbGVNb250aHMgKG0sIGZvcm1hdCkge1xuICAgIGlmICghbSkge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHMpID8gdGhpcy5fbW9udGhzIDpcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1snc3RhbmRhbG9uZSddO1xuICAgIH1cbiAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHMpID8gdGhpcy5fbW9udGhzW20ubW9udGgoKV0gOlxuICAgICAgICB0aGlzLl9tb250aHNbKHRoaXMuX21vbnRocy5pc0Zvcm1hdCB8fCBNT05USFNfSU5fRk9STUFUKS50ZXN0KGZvcm1hdCkgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ11bbS5tb250aCgpXTtcbn1cblxudmFyIGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCA9ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKTtcbmZ1bmN0aW9uIGxvY2FsZU1vbnRoc1Nob3J0IChtLCBmb3JtYXQpIHtcbiAgICBpZiAoIW0pIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpID8gdGhpcy5fbW9udGhzU2hvcnQgOlxuICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRbJ3N0YW5kYWxvbmUnXTtcbiAgICB9XG4gICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpID8gdGhpcy5fbW9udGhzU2hvcnRbbS5tb250aCgpXSA6XG4gICAgICAgIHRoaXMuX21vbnRoc1Nob3J0W01PTlRIU19JTl9GT1JNQVQudGVzdChmb3JtYXQpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSddW20ubW9udGgoKV07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVN0cmljdFBhcnNlKG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICB2YXIgaSwgaWksIG1vbSwgbGxjID0gbW9udGhOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICAvLyB0aGlzIGlzIG5vdCB1c2VkXG4gICAgICAgIHRoaXMuX21vbnRoc1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgKytpKSB7XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0gPSB0aGlzLm1vbnRocyhtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0cmljdCkge1xuICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ01NTScpIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbG9jYWxlTW9udGhzUGFyc2UgKG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICB2YXIgaSwgbW9tLCByZWdleDtcblxuICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVTdHJpY3RQYXJzZS5jYWxsKHRoaXMsIG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2UpIHtcbiAgICAgICAgdGhpcy5fbW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2UgPSBbXTtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBhZGQgc29ydGluZ1xuICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgbW9udGggKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXJcbiAgICAvLyBzZWUgc29ydGluZyBpbiBjb21wdXRlTW9udGhzUGFyc2VcbiAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgIGlmIChzdHJpY3QgJiYgIXRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLCAnaScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc3RyaWN0ICYmICF0aGlzLl9tb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgcmVnZXggPSAnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKSArICd8XicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpO1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKHJlZ2V4LnJlcGxhY2UoJy4nLCAnJyksICdpJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGVzdCB0aGUgcmVnZXhcbiAgICAgICAgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdNTU1NJyAmJiB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSBlbHNlIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnTU1NJyAmJiB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl9tb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBNT01FTlRTXG5cbmZ1bmN0aW9uIHNldE1vbnRoIChtb20sIHZhbHVlKSB7XG4gICAgdmFyIGRheU9mTW9udGg7XG5cbiAgICBpZiAoIW1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgLy8gTm8gb3BcbiAgICAgICAgcmV0dXJuIG1vbTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoL15cXGQrJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdG9JbnQodmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBtb20ubG9jYWxlRGF0YSgpLm1vbnRoc1BhcnNlKHZhbHVlKTtcbiAgICAgICAgICAgIC8vIFRPRE86IEFub3RoZXIgc2lsZW50IGZhaWx1cmU/XG4gICAgICAgICAgICBpZiAoIWlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb207XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkYXlPZk1vbnRoID0gTWF0aC5taW4obW9tLmRhdGUoKSwgZGF5c0luTW9udGgobW9tLnllYXIoKSwgdmFsdWUpKTtcbiAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgJ01vbnRoJ10odmFsdWUsIGRheU9mTW9udGgpO1xuICAgIHJldHVybiBtb207XG59XG5cbmZ1bmN0aW9uIGdldFNldE1vbnRoICh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHNldE1vbnRoKHRoaXMsIHZhbHVlKTtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZ2V0KHRoaXMsICdNb250aCcpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGF5c0luTW9udGggKCkge1xuICAgIHJldHVybiBkYXlzSW5Nb250aCh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpKTtcbn1cblxudmFyIGRlZmF1bHRNb250aHNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkO1xuZnVuY3Rpb24gbW9udGhzU2hvcnRSZWdleCAoaXNTdHJpY3QpIHtcbiAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNTaG9ydFJlZ2V4JykpIHtcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0UmVnZXggPSBkZWZhdWx0TW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4IDogdGhpcy5fbW9udGhzU2hvcnRSZWdleDtcbiAgICB9XG59XG5cbnZhciBkZWZhdWx0TW9udGhzUmVnZXggPSBtYXRjaFdvcmQ7XG5mdW5jdGlvbiBtb250aHNSZWdleCAoaXNTdHJpY3QpIHtcbiAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1JlZ2V4ID0gZGVmYXVsdE1vbnRoc1JlZ2V4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICB0aGlzLl9tb250aHNTdHJpY3RSZWdleCA6IHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY29tcHV0ZU1vbnRoc1BhcnNlICgpIHtcbiAgICBmdW5jdGlvbiBjbXBMZW5SZXYoYSwgYikge1xuICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICB9XG5cbiAgICB2YXIgc2hvcnRQaWVjZXMgPSBbXSwgbG9uZ1BpZWNlcyA9IFtdLCBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICBpLCBtb207XG4gICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICBzaG9ydFBpZWNlcy5wdXNoKHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykpO1xuICAgICAgICBsb25nUGllY2VzLnB1c2godGhpcy5tb250aHMobW9tLCAnJykpO1xuICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHRoaXMubW9udGhzKG1vbSwgJycpKTtcbiAgICAgICAgbWl4ZWRQaWVjZXMucHVzaCh0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpKTtcbiAgICB9XG4gICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlciBpdFxuICAgIC8vIHdpbGwgbWF0Y2ggdGhlIGxvbmdlciBwaWVjZS5cbiAgICBzaG9ydFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgbWl4ZWRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgIHNob3J0UGllY2VzW2ldID0gcmVnZXhFc2NhcGUoc2hvcnRQaWVjZXNbaV0pO1xuICAgICAgICBsb25nUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobG9uZ1BpZWNlc1tpXSk7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCAyNDsgaSsrKSB7XG4gICAgICAgIG1peGVkUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobWl4ZWRQaWVjZXNbaV0pO1xuICAgIH1cblxuICAgIHRoaXMuX21vbnRoc1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgIHRoaXMuX21vbnRoc1Nob3J0UmVnZXggPSB0aGlzLl9tb250aHNSZWdleDtcbiAgICB0aGlzLl9tb250aHNTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBzaG9ydFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURhdGUgKHksIG0sIGQsIGgsIE0sIHMsIG1zKSB7XG4gICAgLy8gY2FuJ3QganVzdCBhcHBseSgpIHRvIGNyZWF0ZSBhIGRhdGU6XG4gICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xLzE4MTM0OFxuICAgIHZhciBkYXRlID0gbmV3IERhdGUoeSwgbSwgZCwgaCwgTSwgcywgbXMpO1xuXG4gICAgLy8gdGhlIGRhdGUgY29uc3RydWN0b3IgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwICYmIGlzRmluaXRlKGRhdGUuZ2V0RnVsbFllYXIoKSkpIHtcbiAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcih5KTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVUQ0RhdGUgKHkpIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xuXG4gICAgLy8gdGhlIERhdGUuVVRDIGZ1bmN0aW9uIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCAmJiBpc0Zpbml0ZShkYXRlLmdldFVUQ0Z1bGxZZWFyKCkpKSB7XG4gICAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRlO1xufVxuXG4vLyBzdGFydC1vZi1maXJzdC13ZWVrIC0gc3RhcnQtb2YteWVhclxuZnVuY3Rpb24gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSB7XG4gICAgdmFyIC8vIGZpcnN0LXdlZWsgZGF5IC0tIHdoaWNoIGphbnVhcnkgaXMgYWx3YXlzIGluIHRoZSBmaXJzdCB3ZWVrICg0IGZvciBpc28sIDEgZm9yIG90aGVyKVxuICAgICAgICBmd2QgPSA3ICsgZG93IC0gZG95LFxuICAgICAgICAvLyBmaXJzdC13ZWVrIGRheSBsb2NhbCB3ZWVrZGF5IC0tIHdoaWNoIGxvY2FsIHdlZWtkYXkgaXMgZndkXG4gICAgICAgIGZ3ZGx3ID0gKDcgKyBjcmVhdGVVVENEYXRlKHllYXIsIDAsIGZ3ZCkuZ2V0VVRDRGF5KCkgLSBkb3cpICUgNztcblxuICAgIHJldHVybiAtZndkbHcgKyBmd2QgLSAxO1xufVxuXG4vLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlI0NhbGN1bGF0aW5nX2FfZGF0ZV9naXZlbl90aGVfeWVhci4yQ193ZWVrX251bWJlcl9hbmRfd2Vla2RheVxuZnVuY3Rpb24gZGF5T2ZZZWFyRnJvbVdlZWtzKHllYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgdmFyIGxvY2FsV2Vla2RheSA9ICg3ICsgd2Vla2RheSAtIGRvdykgJSA3LFxuICAgICAgICB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSxcbiAgICAgICAgZGF5T2ZZZWFyID0gMSArIDcgKiAod2VlayAtIDEpICsgbG9jYWxXZWVrZGF5ICsgd2Vla09mZnNldCxcbiAgICAgICAgcmVzWWVhciwgcmVzRGF5T2ZZZWFyO1xuXG4gICAgaWYgKGRheU9mWWVhciA8PSAwKSB7XG4gICAgICAgIHJlc1llYXIgPSB5ZWFyIC0gMTtcbiAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5c0luWWVhcihyZXNZZWFyKSArIGRheU9mWWVhcjtcbiAgICB9IGVsc2UgaWYgKGRheU9mWWVhciA+IGRheXNJblllYXIoeWVhcikpIHtcbiAgICAgICAgcmVzWWVhciA9IHllYXIgKyAxO1xuICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXIgLSBkYXlzSW5ZZWFyKHllYXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc1llYXIgPSB5ZWFyO1xuICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgeWVhcjogcmVzWWVhcixcbiAgICAgICAgZGF5T2ZZZWFyOiByZXNEYXlPZlllYXJcbiAgICB9O1xufVxuXG5mdW5jdGlvbiB3ZWVrT2ZZZWFyKG1vbSwgZG93LCBkb3kpIHtcbiAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldChtb20ueWVhcigpLCBkb3csIGRveSksXG4gICAgICAgIHdlZWsgPSBNYXRoLmZsb29yKChtb20uZGF5T2ZZZWFyKCkgLSB3ZWVrT2Zmc2V0IC0gMSkgLyA3KSArIDEsXG4gICAgICAgIHJlc1dlZWssIHJlc1llYXI7XG5cbiAgICBpZiAod2VlayA8IDEpIHtcbiAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCkgLSAxO1xuICAgICAgICByZXNXZWVrID0gd2VlayArIHdlZWtzSW5ZZWFyKHJlc1llYXIsIGRvdywgZG95KTtcbiAgICB9IGVsc2UgaWYgKHdlZWsgPiB3ZWVrc0luWWVhcihtb20ueWVhcigpLCBkb3csIGRveSkpIHtcbiAgICAgICAgcmVzV2VlayA9IHdlZWsgLSB3ZWVrc0luWWVhcihtb20ueWVhcigpLCBkb3csIGRveSk7XG4gICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKTtcbiAgICAgICAgcmVzV2VlayA9IHdlZWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2VlazogcmVzV2VlayxcbiAgICAgICAgeWVhcjogcmVzWWVhclxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHdlZWtzSW5ZZWFyKHllYXIsIGRvdywgZG95KSB7XG4gICAgdmFyIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICB3ZWVrT2Zmc2V0TmV4dCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyICsgMSwgZG93LCBkb3kpO1xuICAgIHJldHVybiAoZGF5c0luWWVhcih5ZWFyKSAtIHdlZWtPZmZzZXQgKyB3ZWVrT2Zmc2V0TmV4dCkgLyA3O1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCd3JywgWyd3dycsIDJdLCAnd28nLCAnd2VlaycpO1xuYWRkRm9ybWF0VG9rZW4oJ1cnLCBbJ1dXJywgMl0sICdXbycsICdpc29XZWVrJyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCd3ZWVrJywgJ3cnKTtcbmFkZFVuaXRBbGlhcygnaXNvV2VlaycsICdXJyk7XG5cbi8vIFBSSU9SSVRJRVNcblxuYWRkVW5pdFByaW9yaXR5KCd3ZWVrJywgNSk7XG5hZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWsnLCA1KTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCd3JywgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCd3dycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ1cnLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ1dXJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG5hZGRXZWVrUGFyc2VUb2tlbihbJ3cnLCAnd3cnLCAnVycsICdXVyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICB3ZWVrW3Rva2VuLnN1YnN0cigwLCAxKV0gPSB0b0ludChpbnB1dCk7XG59KTtcblxuLy8gSEVMUEVSU1xuXG4vLyBMT0NBTEVTXG5cbmZ1bmN0aW9uIGxvY2FsZVdlZWsgKG1vbSkge1xuICAgIHJldHVybiB3ZWVrT2ZZZWFyKG1vbSwgdGhpcy5fd2Vlay5kb3csIHRoaXMuX3dlZWsuZG95KS53ZWVrO1xufVxuXG52YXIgZGVmYXVsdExvY2FsZVdlZWsgPSB7XG4gICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxufTtcblxuZnVuY3Rpb24gbG9jYWxlRmlyc3REYXlPZldlZWsgKCkge1xuICAgIHJldHVybiB0aGlzLl93ZWVrLmRvdztcbn1cblxuZnVuY3Rpb24gbG9jYWxlRmlyc3REYXlPZlllYXIgKCkge1xuICAgIHJldHVybiB0aGlzLl93ZWVrLmRveTtcbn1cblxuLy8gTU9NRU5UU1xuXG5mdW5jdGlvbiBnZXRTZXRXZWVrIChpbnB1dCkge1xuICAgIHZhciB3ZWVrID0gdGhpcy5sb2NhbGVEYXRhKCkud2Vlayh0aGlzKTtcbiAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJyk7XG59XG5cbmZ1bmN0aW9uIGdldFNldElTT1dlZWsgKGlucHV0KSB7XG4gICAgdmFyIHdlZWsgPSB3ZWVrT2ZZZWFyKHRoaXMsIDEsIDQpLndlZWs7XG4gICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpO1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdkJywgMCwgJ2RvJywgJ2RheScpO1xuXG5hZGRGb3JtYXRUb2tlbignZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzTWluKHRoaXMsIGZvcm1hdCk7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oJ2RkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNTaG9ydCh0aGlzLCBmb3JtYXQpO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdkZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5cyh0aGlzLCBmb3JtYXQpO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdlJywgMCwgMCwgJ3dlZWtkYXknKTtcbmFkZEZvcm1hdFRva2VuKCdFJywgMCwgMCwgJ2lzb1dlZWtkYXknKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ2RheScsICdkJyk7XG5hZGRVbml0QWxpYXMoJ3dlZWtkYXknLCAnZScpO1xuYWRkVW5pdEFsaWFzKCdpc29XZWVrZGF5JywgJ0UnKTtcblxuLy8gUFJJT1JJVFlcbmFkZFVuaXRQcmlvcml0eSgnZGF5JywgMTEpO1xuYWRkVW5pdFByaW9yaXR5KCd3ZWVrZGF5JywgMTEpO1xuYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrZGF5JywgMTEpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ2QnLCAgICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignZScsICAgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdFJywgICAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ2RkJywgICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNNaW5SZWdleChpc1N0cmljdCk7XG59KTtcbmFkZFJlZ2V4VG9rZW4oJ2RkZCcsICAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzU2hvcnRSZWdleChpc1N0cmljdCk7XG59KTtcbmFkZFJlZ2V4VG9rZW4oJ2RkZGQnLCAgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1JlZ2V4KGlzU3RyaWN0KTtcbn0pO1xuXG5hZGRXZWVrUGFyc2VUb2tlbihbJ2RkJywgJ2RkZCcsICdkZGRkJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgIHZhciB3ZWVrZGF5ID0gY29uZmlnLl9sb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAvLyBpZiB3ZSBkaWRuJ3QgZ2V0IGEgd2Vla2RheSBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWRcbiAgICBpZiAod2Vla2RheSAhPSBudWxsKSB7XG4gICAgICAgIHdlZWsuZCA9IHdlZWtkYXk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZFdlZWtkYXkgPSBpbnB1dDtcbiAgICB9XG59KTtcblxuYWRkV2Vla1BhcnNlVG9rZW4oWydkJywgJ2UnLCAnRSddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICB3ZWVrW3Rva2VuXSA9IHRvSW50KGlucHV0KTtcbn0pO1xuXG4vLyBIRUxQRVJTXG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cblxuICAgIGlmICghaXNOYU4oaW5wdXQpKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChpbnB1dCwgMTApO1xuICAgIH1cblxuICAgIGlucHV0ID0gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpO1xuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gcGFyc2VJc29XZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpICUgNyB8fCA3O1xuICAgIH1cbiAgICByZXR1cm4gaXNOYU4oaW5wdXQpID8gbnVsbCA6IGlucHV0O1xufVxuXG4vLyBMT0NBTEVTXG5cbnZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXMgPSAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyk7XG5mdW5jdGlvbiBsb2NhbGVXZWVrZGF5cyAobSwgZm9ybWF0KSB7XG4gICAgaWYgKCFtKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX3dlZWtkYXlzKSA/IHRoaXMuX3dlZWtkYXlzIDpcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzWydzdGFuZGFsb25lJ107XG4gICAgfVxuICAgIHJldHVybiBpc0FycmF5KHRoaXMuX3dlZWtkYXlzKSA/IHRoaXMuX3dlZWtkYXlzW20uZGF5KCldIDpcbiAgICAgICAgdGhpcy5fd2Vla2RheXNbdGhpcy5fd2Vla2RheXMuaXNGb3JtYXQudGVzdChmb3JtYXQpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSddW20uZGF5KCldO1xufVxuXG52YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQgPSAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpO1xuZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNTaG9ydCAobSkge1xuICAgIHJldHVybiAobSkgPyB0aGlzLl93ZWVrZGF5c1Nob3J0W20uZGF5KCldIDogdGhpcy5fd2Vla2RheXNTaG9ydDtcbn1cblxudmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbiA9ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKTtcbmZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzTWluIChtKSB7XG4gICAgcmV0dXJuIChtKSA/IHRoaXMuX3dlZWtkYXlzTWluW20uZGF5KCldIDogdGhpcy5fd2Vla2RheXNNaW47XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVN0cmljdFBhcnNlJDEod2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgdmFyIGksIGlpLCBtb20sIGxsYyA9IHdlZWtkYXlOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgKytpKSB7XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5c01pbihtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5cyhtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0cmljdCkge1xuICAgICAgICBpZiAoZm9ybWF0ID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdkZGRkJykge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnZGRkJykge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNQYXJzZSAod2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVTdHJpY3RQYXJzZSQxLmNhbGwodGhpcywgd2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZSA9IFtdO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG5cbiAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMud2Vla2RheXMobW9tLCAnJykucmVwbGFjZSgnLicsICdcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcLj8nKSArICckJywgJ2knKTtcbiAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJykucmVwbGFjZSgnLicsICdcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlW2ldKSB7XG4gICAgICAgICAgICByZWdleCA9ICdeJyArIHRoaXMud2Vla2RheXMobW9tLCAnJykgKyAnfF4nICsgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpICsgJ3xeJyArIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJyk7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnZGRkZCcgJiYgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdkZGQnICYmIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ2RkJyAmJiB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBNT01FTlRTXG5cbmZ1bmN0aW9uIGdldFNldERheU9mV2VlayAoaW5wdXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICB9XG4gICAgdmFyIGRheSA9IHRoaXMuX2lzVVRDID8gdGhpcy5fZC5nZXRVVENEYXkoKSA6IHRoaXMuX2QuZ2V0RGF5KCk7XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaW5wdXQgPSBwYXJzZVdlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKGlucHV0IC0gZGF5LCAnZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkYXk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRTZXRMb2NhbGVEYXlPZldlZWsgKGlucHV0KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgfVxuICAgIHZhciB3ZWVrZGF5ID0gKHRoaXMuZGF5KCkgKyA3IC0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93KSAlIDc7XG4gICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrZGF5IDogdGhpcy5hZGQoaW5wdXQgLSB3ZWVrZGF5LCAnZCcpO1xufVxuXG5mdW5jdGlvbiBnZXRTZXRJU09EYXlPZldlZWsgKGlucHV0KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgfVxuXG4gICAgLy8gYmVoYXZlcyB0aGUgc2FtZSBhcyBtb21lbnQjZGF5IGV4Y2VwdFxuICAgIC8vIGFzIGEgZ2V0dGVyLCByZXR1cm5zIDcgaW5zdGVhZCBvZiAwICgxLTcgcmFuZ2UgaW5zdGVhZCBvZiAwLTYpXG4gICAgLy8gYXMgYSBzZXR0ZXIsIHN1bmRheSBzaG91bGQgYmVsb25nIHRvIHRoZSBwcmV2aW91cyB3ZWVrLlxuXG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgdmFyIHdlZWtkYXkgPSBwYXJzZUlzb1dlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF5KHRoaXMuZGF5KCkgJSA3ID8gd2Vla2RheSA6IHdlZWtkYXkgLSA3KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXkoKSB8fCA3O1xuICAgIH1cbn1cblxudmFyIGRlZmF1bHRXZWVrZGF5c1JlZ2V4ID0gbWF0Y2hXb3JkO1xuZnVuY3Rpb24gd2Vla2RheXNSZWdleCAoaXNTdHJpY3QpIHtcbiAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBkZWZhdWx0V2Vla2RheXNSZWdleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4IDogdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICB9XG59XG5cbnZhciBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkO1xuZnVuY3Rpb24gd2Vla2RheXNTaG9ydFJlZ2V4IChpc1N0cmljdCkge1xuICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1Nob3J0UmVnZXgnKSkge1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCA6IHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleDtcbiAgICB9XG59XG5cbnZhciBkZWZhdWx0V2Vla2RheXNNaW5SZWdleCA9IG1hdGNoV29yZDtcbmZ1bmN0aW9uIHdlZWtkYXlzTWluUmVnZXggKGlzU3RyaWN0KSB7XG4gICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNNaW5SZWdleCcpKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c01pblJlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCA6IHRoaXMuX3dlZWtkYXlzTWluUmVnZXg7XG4gICAgfVxufVxuXG5cbmZ1bmN0aW9uIGNvbXB1dGVXZWVrZGF5c1BhcnNlICgpIHtcbiAgICBmdW5jdGlvbiBjbXBMZW5SZXYoYSwgYikge1xuICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICB9XG5cbiAgICB2YXIgbWluUGllY2VzID0gW10sIHNob3J0UGllY2VzID0gW10sIGxvbmdQaWVjZXMgPSBbXSwgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgaSwgbW9tLCBtaW5wLCBzaG9ydHAsIGxvbmdwO1xuICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgbWlucCA9IHRoaXMud2Vla2RheXNNaW4obW9tLCAnJyk7XG4gICAgICAgIHNob3J0cCA9IHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKTtcbiAgICAgICAgbG9uZ3AgPSB0aGlzLndlZWtkYXlzKG1vbSwgJycpO1xuICAgICAgICBtaW5QaWVjZXMucHVzaChtaW5wKTtcbiAgICAgICAgc2hvcnRQaWVjZXMucHVzaChzaG9ydHApO1xuICAgICAgICBsb25nUGllY2VzLnB1c2gobG9uZ3ApO1xuICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKG1pbnApO1xuICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHNob3J0cCk7XG4gICAgICAgIG1peGVkUGllY2VzLnB1c2gobG9uZ3ApO1xuICAgIH1cbiAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIHdlZWtkYXkgKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXIgaXRcbiAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgbWluUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICBzaG9ydFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgbWl4ZWRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgc2hvcnRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShzaG9ydFBpZWNlc1tpXSk7XG4gICAgICAgIGxvbmdQaWVjZXNbaV0gPSByZWdleEVzY2FwZShsb25nUGllY2VzW2ldKTtcbiAgICAgICAgbWl4ZWRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShtaXhlZFBpZWNlc1tpXSk7XG4gICAgfVxuXG4gICAgdGhpcy5fd2Vla2RheXNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXggPSB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgIHRoaXMuX3dlZWtkYXlzTWluUmVnZXggPSB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuXG4gICAgdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIHNob3J0UGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWluUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbn1cblxuLy8gRk9STUFUVElOR1xuXG5mdW5jdGlvbiBoRm9ybWF0KCkge1xuICAgIHJldHVybiB0aGlzLmhvdXJzKCkgJSAxMiB8fCAxMjtcbn1cblxuZnVuY3Rpb24ga0Zvcm1hdCgpIHtcbiAgICByZXR1cm4gdGhpcy5ob3VycygpIHx8IDI0O1xufVxuXG5hZGRGb3JtYXRUb2tlbignSCcsIFsnSEgnLCAyXSwgMCwgJ2hvdXInKTtcbmFkZEZvcm1hdFRva2VuKCdoJywgWydoaCcsIDJdLCAwLCBoRm9ybWF0KTtcbmFkZEZvcm1hdFRva2VuKCdrJywgWydraycsIDJdLCAwLCBrRm9ybWF0KTtcblxuYWRkRm9ybWF0VG9rZW4oJ2htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJycgKyBoRm9ybWF0LmFwcGx5KHRoaXMpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdobW1zcycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJycgKyBoRm9ybWF0LmFwcGx5KHRoaXMpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdIbW0nLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcnICsgdGhpcy5ob3VycygpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdIbW1zcycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJycgKyB0aGlzLmhvdXJzKCkgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMikgK1xuICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMik7XG59KTtcblxuZnVuY3Rpb24gbWVyaWRpZW0gKHRva2VuLCBsb3dlcmNhc2UpIHtcbiAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubWVyaWRpZW0odGhpcy5ob3VycygpLCB0aGlzLm1pbnV0ZXMoKSwgbG93ZXJjYXNlKTtcbiAgICB9KTtcbn1cblxubWVyaWRpZW0oJ2EnLCB0cnVlKTtcbm1lcmlkaWVtKCdBJywgZmFsc2UpO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygnaG91cicsICdoJyk7XG5cbi8vIFBSSU9SSVRZXG5hZGRVbml0UHJpb3JpdHkoJ2hvdXInLCAxMyk7XG5cbi8vIFBBUlNJTkdcblxuZnVuY3Rpb24gbWF0Y2hNZXJpZGllbSAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUuX21lcmlkaWVtUGFyc2U7XG59XG5cbmFkZFJlZ2V4VG9rZW4oJ2EnLCAgbWF0Y2hNZXJpZGllbSk7XG5hZGRSZWdleFRva2VuKCdBJywgIG1hdGNoTWVyaWRpZW0pO1xuYWRkUmVnZXhUb2tlbignSCcsICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignaCcsICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignaycsICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignSEgnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdoaCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ2trJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG5hZGRSZWdleFRva2VuKCdobW0nLCBtYXRjaDN0bzQpO1xuYWRkUmVnZXhUb2tlbignaG1tc3MnLCBtYXRjaDV0bzYpO1xuYWRkUmVnZXhUb2tlbignSG1tJywgbWF0Y2gzdG80KTtcbmFkZFJlZ2V4VG9rZW4oJ0htbXNzJywgbWF0Y2g1dG82KTtcblxuYWRkUGFyc2VUb2tlbihbJ0gnLCAnSEgnXSwgSE9VUik7XG5hZGRQYXJzZVRva2VuKFsnaycsICdrayddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICB2YXIga0lucHV0ID0gdG9JbnQoaW5wdXQpO1xuICAgIGFycmF5W0hPVVJdID0ga0lucHV0ID09PSAyNCA/IDAgOiBrSW5wdXQ7XG59KTtcbmFkZFBhcnNlVG9rZW4oWydhJywgJ0EnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgY29uZmlnLl9pc1BtID0gY29uZmlnLl9sb2NhbGUuaXNQTShpbnB1dCk7XG4gICAgY29uZmlnLl9tZXJpZGllbSA9IGlucHV0O1xufSk7XG5hZGRQYXJzZVRva2VuKFsnaCcsICdoaCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0KTtcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbn0pO1xuYWRkUGFyc2VUb2tlbignaG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSk7XG4gICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbn0pO1xuYWRkUGFyc2VUb2tlbignaG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQ7XG4gICAgdmFyIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczEsIDIpKTtcbiAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbn0pO1xuYWRkUGFyc2VUb2tlbignSG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSk7XG4gICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbn0pO1xuYWRkUGFyc2VUb2tlbignSG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQ7XG4gICAgdmFyIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczEsIDIpKTtcbiAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbn0pO1xuXG4vLyBMT0NBTEVTXG5cbmZ1bmN0aW9uIGxvY2FsZUlzUE0gKGlucHV0KSB7XG4gICAgLy8gSUU4IFF1aXJrcyBNb2RlICYgSUU3IFN0YW5kYXJkcyBNb2RlIGRvIG5vdCBhbGxvdyBhY2Nlc3Npbmcgc3RyaW5ncyBsaWtlIGFycmF5c1xuICAgIC8vIFVzaW5nIGNoYXJBdCBzaG91bGQgYmUgbW9yZSBjb21wYXRpYmxlLlxuICAgIHJldHVybiAoKGlucHV0ICsgJycpLnRvTG93ZXJDYXNlKCkuY2hhckF0KDApID09PSAncCcpO1xufVxuXG52YXIgZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2UgPSAvW2FwXVxcLj9tP1xcLj8vaTtcbmZ1bmN0aW9uIGxvY2FsZU1lcmlkaWVtIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3BtJyA6ICdQTSc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnYW0nIDogJ0FNJztcbiAgICB9XG59XG5cblxuLy8gTU9NRU5UU1xuXG4vLyBTZXR0aW5nIHRoZSBob3VyIHNob3VsZCBrZWVwIHRoZSB0aW1lLCBiZWNhdXNlIHRoZSB1c2VyIGV4cGxpY2l0bHlcbi8vIHNwZWNpZmllZCB3aGljaCBob3VyIGhlIHdhbnRzLiBTbyB0cnlpbmcgdG8gbWFpbnRhaW4gdGhlIHNhbWUgaG91ciAoaW5cbi8vIGEgbmV3IHRpbWV6b25lKSBtYWtlcyBzZW5zZS4gQWRkaW5nL3N1YnRyYWN0aW5nIGhvdXJzIGRvZXMgbm90IGZvbGxvd1xuLy8gdGhpcyBydWxlLlxudmFyIGdldFNldEhvdXIgPSBtYWtlR2V0U2V0KCdIb3VycycsIHRydWUpO1xuXG52YXIgYmFzZUNvbmZpZyA9IHtcbiAgICBjYWxlbmRhcjogZGVmYXVsdENhbGVuZGFyLFxuICAgIGxvbmdEYXRlRm9ybWF0OiBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQsXG4gICAgaW52YWxpZERhdGU6IGRlZmF1bHRJbnZhbGlkRGF0ZSxcbiAgICBvcmRpbmFsOiBkZWZhdWx0T3JkaW5hbCxcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiBkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSxcbiAgICByZWxhdGl2ZVRpbWU6IGRlZmF1bHRSZWxhdGl2ZVRpbWUsXG5cbiAgICBtb250aHM6IGRlZmF1bHRMb2NhbGVNb250aHMsXG4gICAgbW9udGhzU2hvcnQ6IGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCxcblxuICAgIHdlZWs6IGRlZmF1bHRMb2NhbGVXZWVrLFxuXG4gICAgd2Vla2RheXM6IGRlZmF1bHRMb2NhbGVXZWVrZGF5cyxcbiAgICB3ZWVrZGF5c01pbjogZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluLFxuICAgIHdlZWtkYXlzU2hvcnQ6IGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0LFxuXG4gICAgbWVyaWRpZW1QYXJzZTogZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2Vcbn07XG5cbi8vIGludGVybmFsIHN0b3JhZ2UgZm9yIGxvY2FsZSBjb25maWcgZmlsZXNcbnZhciBsb2NhbGVzID0ge307XG52YXIgbG9jYWxlRmFtaWxpZXMgPSB7fTtcbnZhciBnbG9iYWxMb2NhbGU7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUxvY2FsZShrZXkpIHtcbiAgICByZXR1cm4ga2V5ID8ga2V5LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgnXycsICctJykgOiBrZXk7XG59XG5cbi8vIHBpY2sgdGhlIGxvY2FsZSBmcm9tIHRoZSBhcnJheVxuLy8gdHJ5IFsnZW4tYXUnLCAnZW4tZ2InXSBhcyAnZW4tYXUnLCAnZW4tZ2InLCAnZW4nLCBhcyBpbiBtb3ZlIHRocm91Z2ggdGhlIGxpc3QgdHJ5aW5nIGVhY2hcbi8vIHN1YnN0cmluZyBmcm9tIG1vc3Qgc3BlY2lmaWMgdG8gbGVhc3QsIGJ1dCBtb3ZlIHRvIHRoZSBuZXh0IGFycmF5IGl0ZW0gaWYgaXQncyBhIG1vcmUgc3BlY2lmaWMgdmFyaWFudCB0aGFuIHRoZSBjdXJyZW50IHJvb3RcbmZ1bmN0aW9uIGNob29zZUxvY2FsZShuYW1lcykge1xuICAgIHZhciBpID0gMCwgaiwgbmV4dCwgbG9jYWxlLCBzcGxpdDtcblxuICAgIHdoaWxlIChpIDwgbmFtZXMubGVuZ3RoKSB7XG4gICAgICAgIHNwbGl0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2ldKS5zcGxpdCgnLScpO1xuICAgICAgICBqID0gc3BsaXQubGVuZ3RoO1xuICAgICAgICBuZXh0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2kgKyAxXSk7XG4gICAgICAgIG5leHQgPSBuZXh0ID8gbmV4dC5zcGxpdCgnLScpIDogbnVsbDtcbiAgICAgICAgd2hpbGUgKGogPiAwKSB7XG4gICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKHNwbGl0LnNsaWNlKDAsIGopLmpvaW4oJy0nKSk7XG4gICAgICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQubGVuZ3RoID49IGogJiYgY29tcGFyZUFycmF5cyhzcGxpdCwgbmV4dCwgdHJ1ZSkgPj0gaiAtIDEpIHtcbiAgICAgICAgICAgICAgICAvL3RoZSBuZXh0IGFycmF5IGl0ZW0gaXMgYmV0dGVyIHRoYW4gYSBzaGFsbG93ZXIgc3Vic3RyaW5nIG9mIHRoaXMgb25lXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBqLS07XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gZ2xvYmFsTG9jYWxlO1xufVxuXG5mdW5jdGlvbiBsb2FkTG9jYWxlKG5hbWUpIHtcbiAgICB2YXIgb2xkTG9jYWxlID0gbnVsbDtcbiAgICAvLyBUT0RPOiBGaW5kIGEgYmV0dGVyIHdheSB0byByZWdpc3RlciBhbmQgbG9hZCBhbGwgdGhlIGxvY2FsZXMgaW4gTm9kZVxuICAgIGlmICghbG9jYWxlc1tuYW1lXSAmJiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpICYmXG4gICAgICAgICAgICBtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG9sZExvY2FsZSA9IGdsb2JhbExvY2FsZS5fYWJicjtcbiAgICAgICAgICAgIHZhciBhbGlhc2VkUmVxdWlyZSA9IHJlcXVpcmU7XG4gICAgICAgICAgICBhbGlhc2VkUmVxdWlyZSgnLi9sb2NhbGUvJyArIG5hbWUpO1xuICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG9sZExvY2FsZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIHdpbGwgbG9hZCBsb2NhbGUgYW5kIHRoZW4gc2V0IHRoZSBnbG9iYWwgbG9jYWxlLiAgSWZcbi8vIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGluLCBpdCB3aWxsIHNpbXBseSByZXR1cm4gdGhlIGN1cnJlbnQgZ2xvYmFsXG4vLyBsb2NhbGUga2V5LlxuZnVuY3Rpb24gZ2V0U2V0R2xvYmFsTG9jYWxlIChrZXksIHZhbHVlcykge1xuICAgIHZhciBkYXRhO1xuICAgIGlmIChrZXkpIHtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlcykpIHtcbiAgICAgICAgICAgIGRhdGEgPSBnZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRhdGEgPSBkZWZpbmVMb2NhbGUoa2V5LCB2YWx1ZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgIC8vIG1vbWVudC5kdXJhdGlvbi5fbG9jYWxlID0gbW9tZW50Ll9sb2NhbGUgPSBkYXRhO1xuICAgICAgICAgICAgZ2xvYmFsTG9jYWxlID0gZGF0YTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICgodHlwZW9mIGNvbnNvbGUgIT09ICAndW5kZWZpbmVkJykgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICAgICAgICAgICAgLy93YXJuIHVzZXIgaWYgYXJndW1lbnRzIGFyZSBwYXNzZWQgYnV0IHRoZSBsb2NhbGUgY291bGQgbm90IGJlIHNldFxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTG9jYWxlICcgKyBrZXkgKyAgJyBub3QgZm91bmQuIERpZCB5b3UgZm9yZ2V0IHRvIGxvYWQgaXQ/Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZ2xvYmFsTG9jYWxlLl9hYmJyO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVMb2NhbGUgKG5hbWUsIGNvbmZpZykge1xuICAgIGlmIChjb25maWcgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIGxvY2FsZSwgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZztcbiAgICAgICAgY29uZmlnLmFiYnIgPSBuYW1lO1xuICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUoJ2RlZmluZUxvY2FsZU92ZXJyaWRlJyxcbiAgICAgICAgICAgICAgICAgICAgJ3VzZSBtb21lbnQudXBkYXRlTG9jYWxlKGxvY2FsZU5hbWUsIGNvbmZpZykgdG8gY2hhbmdlICcgK1xuICAgICAgICAgICAgICAgICAgICAnYW4gZXhpc3RpbmcgbG9jYWxlLiBtb21lbnQuZGVmaW5lTG9jYWxlKGxvY2FsZU5hbWUsICcgK1xuICAgICAgICAgICAgICAgICAgICAnY29uZmlnKSBzaG91bGQgb25seSBiZSB1c2VkIGZvciBjcmVhdGluZyBhIG5ldyBsb2NhbGUgJyArXG4gICAgICAgICAgICAgICAgICAgICdTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kZWZpbmUtbG9jYWxlLyBmb3IgbW9yZSBpbmZvLicpO1xuICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tuYW1lXS5fY29uZmlnO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0uX2NvbmZpZztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShjb25maWcucGFyZW50TG9jYWxlKTtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlLl9jb25maWc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IGNvbmZpZ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxvY2FsZXNbbmFtZV0gPSBuZXcgTG9jYWxlKG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNvbmZpZykpO1xuXG4gICAgICAgIGlmIChsb2NhbGVGYW1pbGllc1tuYW1lXSkge1xuICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbbmFtZV0uZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgIGRlZmluZUxvY2FsZSh4Lm5hbWUsIHguY29uZmlnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdCBmb3Igbm93OiBhbHNvIHNldCB0aGUgbG9jYWxlXG4gICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGxvY2FsZSBBRlRFUiBhbGwgY2hpbGQgbG9jYWxlcyBoYXZlIGJlZW5cbiAgICAgICAgLy8gY3JlYXRlZCwgc28gd2Ugd29uJ3QgZW5kIHVwIHdpdGggdGhlIGNoaWxkIGxvY2FsZSBzZXQuXG4gICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcblxuXG4gICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHVzZWZ1bCBmb3IgdGVzdGluZ1xuICAgICAgICBkZWxldGUgbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMb2NhbGUobmFtZSwgY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgIHZhciBsb2NhbGUsIHRtcExvY2FsZSwgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZztcbiAgICAgICAgLy8gTUVSR0VcbiAgICAgICAgdG1wTG9jYWxlID0gbG9hZExvY2FsZShuYW1lKTtcbiAgICAgICAgaWYgKHRtcExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBwYXJlbnRDb25maWcgPSB0bXBMb2NhbGUuX2NvbmZpZztcbiAgICAgICAgfVxuICAgICAgICBjb25maWcgPSBtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjb25maWcpO1xuICAgICAgICBsb2NhbGUgPSBuZXcgTG9jYWxlKGNvbmZpZyk7XG4gICAgICAgIGxvY2FsZS5wYXJlbnRMb2NhbGUgPSBsb2NhbGVzW25hbWVdO1xuICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlO1xuXG4gICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZVxuICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcGFzcyBudWxsIGZvciBjb25maWcgdG8gdW51cGRhdGUsIHVzZWZ1bCBmb3IgdGVzdHNcbiAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxvY2FsZXNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xufVxuXG4vLyByZXR1cm5zIGxvY2FsZSBkYXRhXG5mdW5jdGlvbiBnZXRMb2NhbGUgKGtleSkge1xuICAgIHZhciBsb2NhbGU7XG5cbiAgICBpZiAoa2V5ICYmIGtleS5fbG9jYWxlICYmIGtleS5fbG9jYWxlLl9hYmJyKSB7XG4gICAgICAgIGtleSA9IGtleS5fbG9jYWxlLl9hYmJyO1xuICAgIH1cblxuICAgIGlmICgha2V5KSB7XG4gICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGU7XG4gICAgfVxuXG4gICAgaWYgKCFpc0FycmF5KGtleSkpIHtcbiAgICAgICAgLy9zaG9ydC1jaXJjdWl0IGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKGtleSk7XG4gICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAga2V5ID0gW2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGNob29zZUxvY2FsZShrZXkpO1xufVxuXG5mdW5jdGlvbiBsaXN0TG9jYWxlcygpIHtcbiAgICByZXR1cm4ga2V5cyhsb2NhbGVzKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tPdmVyZmxvdyAobSkge1xuICAgIHZhciBvdmVyZmxvdztcbiAgICB2YXIgYSA9IG0uX2E7XG5cbiAgICBpZiAoYSAmJiBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPT09IC0yKSB7XG4gICAgICAgIG92ZXJmbG93ID1cbiAgICAgICAgICAgIGFbTU9OVEhdICAgICAgIDwgMCB8fCBhW01PTlRIXSAgICAgICA+IDExICA/IE1PTlRIIDpcbiAgICAgICAgICAgIGFbREFURV0gICAgICAgIDwgMSB8fCBhW0RBVEVdICAgICAgICA+IGRheXNJbk1vbnRoKGFbWUVBUl0sIGFbTU9OVEhdKSA/IERBVEUgOlxuICAgICAgICAgICAgYVtIT1VSXSAgICAgICAgPCAwIHx8IGFbSE9VUl0gICAgICAgID4gMjQgfHwgKGFbSE9VUl0gPT09IDI0ICYmIChhW01JTlVURV0gIT09IDAgfHwgYVtTRUNPTkRdICE9PSAwIHx8IGFbTUlMTElTRUNPTkRdICE9PSAwKSkgPyBIT1VSIDpcbiAgICAgICAgICAgIGFbTUlOVVRFXSAgICAgIDwgMCB8fCBhW01JTlVURV0gICAgICA+IDU5ICA/IE1JTlVURSA6XG4gICAgICAgICAgICBhW1NFQ09ORF0gICAgICA8IDAgfHwgYVtTRUNPTkRdICAgICAgPiA1OSAgPyBTRUNPTkQgOlxuICAgICAgICAgICAgYVtNSUxMSVNFQ09ORF0gPCAwIHx8IGFbTUlMTElTRUNPTkRdID4gOTk5ID8gTUlMTElTRUNPTkQgOlxuICAgICAgICAgICAgLTE7XG5cbiAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dEYXlPZlllYXIgJiYgKG92ZXJmbG93IDwgWUVBUiB8fCBvdmVyZmxvdyA+IERBVEUpKSB7XG4gICAgICAgICAgICBvdmVyZmxvdyA9IERBVEU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrcyAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgIG92ZXJmbG93ID0gV0VFSztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtkYXkgJiYgb3ZlcmZsb3cgPT09IC0xKSB7XG4gICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUtEQVk7XG4gICAgICAgIH1cblxuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPSBvdmVyZmxvdztcbiAgICB9XG5cbiAgICByZXR1cm4gbTtcbn1cblxuLy8gUGljayB0aGUgZmlyc3QgZGVmaW5lZCBvZiB0d28gb3IgdGhyZWUgYXJndW1lbnRzLlxuZnVuY3Rpb24gZGVmYXVsdHMoYSwgYiwgYykge1xuICAgIGlmIChhICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxuICAgIGlmIChiICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGI7XG4gICAgfVxuICAgIHJldHVybiBjO1xufVxuXG5mdW5jdGlvbiBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZykge1xuICAgIC8vIGhvb2tzIGlzIGFjdHVhbGx5IHRoZSBleHBvcnRlZCBtb21lbnQgb2JqZWN0XG4gICAgdmFyIG5vd1ZhbHVlID0gbmV3IERhdGUoaG9va3Mubm93KCkpO1xuICAgIGlmIChjb25maWcuX3VzZVVUQykge1xuICAgICAgICByZXR1cm4gW25vd1ZhbHVlLmdldFVUQ0Z1bGxZZWFyKCksIG5vd1ZhbHVlLmdldFVUQ01vbnRoKCksIG5vd1ZhbHVlLmdldFVUQ0RhdGUoKV07XG4gICAgfVxuICAgIHJldHVybiBbbm93VmFsdWUuZ2V0RnVsbFllYXIoKSwgbm93VmFsdWUuZ2V0TW9udGgoKSwgbm93VmFsdWUuZ2V0RGF0ZSgpXTtcbn1cblxuLy8gY29udmVydCBhbiBhcnJheSB0byBhIGRhdGUuXG4vLyB0aGUgYXJyYXkgc2hvdWxkIG1pcnJvciB0aGUgcGFyYW1ldGVycyBiZWxvd1xuLy8gbm90ZTogYWxsIHZhbHVlcyBwYXN0IHRoZSB5ZWFyIGFyZSBvcHRpb25hbCBhbmQgd2lsbCBkZWZhdWx0IHRvIHRoZSBsb3dlc3QgcG9zc2libGUgdmFsdWUuXG4vLyBbeWVhciwgbW9udGgsIGRheSAsIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZF1cbmZ1bmN0aW9uIGNvbmZpZ0Zyb21BcnJheSAoY29uZmlnKSB7XG4gICAgdmFyIGksIGRhdGUsIGlucHV0ID0gW10sIGN1cnJlbnREYXRlLCBleHBlY3RlZFdlZWtkYXksIHllYXJUb1VzZTtcblxuICAgIGlmIChjb25maWcuX2QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGN1cnJlbnREYXRlID0gY3VycmVudERhdGVBcnJheShjb25maWcpO1xuXG4gICAgLy9jb21wdXRlIGRheSBvZiB0aGUgeWVhciBmcm9tIHdlZWtzIGFuZCB3ZWVrZGF5c1xuICAgIGlmIChjb25maWcuX3cgJiYgY29uZmlnLl9hW0RBVEVdID09IG51bGwgJiYgY29uZmlnLl9hW01PTlRIXSA9PSBudWxsKSB7XG4gICAgICAgIGRheU9mWWVhckZyb21XZWVrSW5mbyhjb25maWcpO1xuICAgIH1cblxuICAgIC8vaWYgdGhlIGRheSBvZiB0aGUgeWVhciBpcyBzZXQsIGZpZ3VyZSBvdXQgd2hhdCBpdCBpc1xuICAgIGlmIChjb25maWcuX2RheU9mWWVhciAhPSBudWxsKSB7XG4gICAgICAgIHllYXJUb1VzZSA9IGRlZmF1bHRzKGNvbmZpZy5fYVtZRUFSXSwgY3VycmVudERhdGVbWUVBUl0pO1xuXG4gICAgICAgIGlmIChjb25maWcuX2RheU9mWWVhciA+IGRheXNJblllYXIoeWVhclRvVXNlKSB8fCBjb25maWcuX2RheU9mWWVhciA9PT0gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93RGF5T2ZZZWFyID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGUgPSBjcmVhdGVVVENEYXRlKHllYXJUb1VzZSwgMCwgY29uZmlnLl9kYXlPZlllYXIpO1xuICAgICAgICBjb25maWcuX2FbTU9OVEhdID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgICAgICBjb25maWcuX2FbREFURV0gPSBkYXRlLmdldFVUQ0RhdGUoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgZGF0ZS5cbiAgICAvLyAqIGlmIG5vIHllYXIsIG1vbnRoLCBkYXkgb2YgbW9udGggYXJlIGdpdmVuLCBkZWZhdWx0IHRvIHRvZGF5XG4gICAgLy8gKiBpZiBkYXkgb2YgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgbW9udGggYW5kIHllYXJcbiAgICAvLyAqIGlmIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG9ubHkgeWVhclxuICAgIC8vICogaWYgeWVhciBpcyBnaXZlbiwgZG9uJ3QgZGVmYXVsdCBhbnl0aGluZ1xuICAgIGZvciAoaSA9IDA7IGkgPCAzICYmIGNvbmZpZy5fYVtpXSA9PSBudWxsOyArK2kpIHtcbiAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSBjdXJyZW50RGF0ZVtpXTtcbiAgICB9XG5cbiAgICAvLyBaZXJvIG91dCB3aGF0ZXZlciB3YXMgbm90IGRlZmF1bHRlZCwgaW5jbHVkaW5nIHRpbWVcbiAgICBmb3IgKDsgaSA8IDc7IGkrKykge1xuICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9IChjb25maWcuX2FbaV0gPT0gbnVsbCkgPyAoaSA9PT0gMiA/IDEgOiAwKSA6IGNvbmZpZy5fYVtpXTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgMjQ6MDA6MDAuMDAwXG4gICAgaWYgKGNvbmZpZy5fYVtIT1VSXSA9PT0gMjQgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNSU5VVEVdID09PSAwICYmXG4gICAgICAgICAgICBjb25maWcuX2FbU0VDT05EXSA9PT0gMCAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW01JTExJU0VDT05EXSA9PT0gMCkge1xuICAgICAgICBjb25maWcuX25leHREYXkgPSB0cnVlO1xuICAgICAgICBjb25maWcuX2FbSE9VUl0gPSAwO1xuICAgIH1cblxuICAgIGNvbmZpZy5fZCA9IChjb25maWcuX3VzZVVUQyA/IGNyZWF0ZVVUQ0RhdGUgOiBjcmVhdGVEYXRlKS5hcHBseShudWxsLCBpbnB1dCk7XG4gICAgZXhwZWN0ZWRXZWVrZGF5ID0gY29uZmlnLl91c2VVVEMgPyBjb25maWcuX2QuZ2V0VVRDRGF5KCkgOiBjb25maWcuX2QuZ2V0RGF5KCk7XG5cbiAgICAvLyBBcHBseSB0aW1lem9uZSBvZmZzZXQgZnJvbSBpbnB1dC4gVGhlIGFjdHVhbCB1dGNPZmZzZXQgY2FuIGJlIGNoYW5nZWRcbiAgICAvLyB3aXRoIHBhcnNlWm9uZS5cbiAgICBpZiAoY29uZmlnLl90em0gIT0gbnVsbCkge1xuICAgICAgICBjb25maWcuX2Quc2V0VVRDTWludXRlcyhjb25maWcuX2QuZ2V0VVRDTWludXRlcygpIC0gY29uZmlnLl90em0pO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuX25leHREYXkpIHtcbiAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMjQ7XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgZm9yIG1pc21hdGNoaW5nIGRheSBvZiB3ZWVrXG4gICAgaWYgKGNvbmZpZy5fdyAmJiB0eXBlb2YgY29uZmlnLl93LmQgIT09ICd1bmRlZmluZWQnICYmIGNvbmZpZy5fdy5kICE9PSBleHBlY3RlZFdlZWtkYXkpIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykud2Vla2RheU1pc21hdGNoID0gdHJ1ZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrSW5mbyhjb25maWcpIHtcbiAgICB2YXIgdywgd2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95LCB0ZW1wLCB3ZWVrZGF5T3ZlcmZsb3c7XG5cbiAgICB3ID0gY29uZmlnLl93O1xuICAgIGlmICh3LkdHICE9IG51bGwgfHwgdy5XICE9IG51bGwgfHwgdy5FICE9IG51bGwpIHtcbiAgICAgICAgZG93ID0gMTtcbiAgICAgICAgZG95ID0gNDtcblxuICAgICAgICAvLyBUT0RPOiBXZSBuZWVkIHRvIHRha2UgdGhlIGN1cnJlbnQgaXNvV2Vla1llYXIsIGJ1dCB0aGF0IGRlcGVuZHMgb25cbiAgICAgICAgLy8gaG93IHdlIGludGVycHJldCBub3cgKGxvY2FsLCB1dGMsIGZpeGVkIG9mZnNldCkuIFNvIGNyZWF0ZVxuICAgICAgICAvLyBhIG5vdyB2ZXJzaW9uIG9mIGN1cnJlbnQgY29uZmlnICh0YWtlIGxvY2FsL3V0Yy9vZmZzZXQgZmxhZ3MsIGFuZFxuICAgICAgICAvLyBjcmVhdGUgbm93KS5cbiAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyh3LkdHLCBjb25maWcuX2FbWUVBUl0sIHdlZWtPZlllYXIoY3JlYXRlTG9jYWwoKSwgMSwgNCkueWVhcik7XG4gICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LlcsIDEpO1xuICAgICAgICB3ZWVrZGF5ID0gZGVmYXVsdHMody5FLCAxKTtcbiAgICAgICAgaWYgKHdlZWtkYXkgPCAxIHx8IHdlZWtkYXkgPiA3KSB7XG4gICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZG93ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG93O1xuICAgICAgICBkb3kgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3k7XG5cbiAgICAgICAgdmFyIGN1cldlZWsgPSB3ZWVrT2ZZZWFyKGNyZWF0ZUxvY2FsKCksIGRvdywgZG95KTtcblxuICAgICAgICB3ZWVrWWVhciA9IGRlZmF1bHRzKHcuZ2csIGNvbmZpZy5fYVtZRUFSXSwgY3VyV2Vlay55ZWFyKTtcblxuICAgICAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgd2Vlay5cbiAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcudywgY3VyV2Vlay53ZWVrKTtcblxuICAgICAgICBpZiAody5kICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIHdlZWtkYXkgLS0gbG93IGRheSBudW1iZXJzIGFyZSBjb25zaWRlcmVkIG5leHQgd2Vla1xuICAgICAgICAgICAgd2Vla2RheSA9IHcuZDtcbiAgICAgICAgICAgIGlmICh3ZWVrZGF5IDwgMCB8fCB3ZWVrZGF5ID4gNikge1xuICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAody5lICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGxvY2FsIHdlZWtkYXkgLS0gY291bnRpbmcgc3RhcnRzIGZyb20gYmVnaW5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgd2Vla2RheSA9IHcuZSArIGRvdztcbiAgICAgICAgICAgIGlmICh3LmUgPCAwIHx8IHcuZSA+IDYpIHtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZGVmYXVsdCB0byBiZWdpbmluZyBvZiB3ZWVrXG4gICAgICAgICAgICB3ZWVrZGF5ID0gZG93O1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh3ZWVrIDwgMSB8fCB3ZWVrID4gd2Vla3NJblllYXIod2Vla1llYXIsIGRvdywgZG95KSkge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrcyA9IHRydWU7XG4gICAgfSBlbHNlIGlmICh3ZWVrZGF5T3ZlcmZsb3cgIT0gbnVsbCkge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrZGF5ID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0ZW1wID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSk7XG4gICAgICAgIGNvbmZpZy5fYVtZRUFSXSA9IHRlbXAueWVhcjtcbiAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0ZW1wLmRheU9mWWVhcjtcbiAgICB9XG59XG5cbi8vIGlzbyA4NjAxIHJlZ2V4XG4vLyAwMDAwLTAwLTAwIDAwMDAtVzAwIG9yIDAwMDAtVzAwLTAgKyBUICsgMDAgb3IgMDA6MDAgb3IgMDA6MDA6MDAgb3IgMDA6MDA6MDAuMDAwICsgKzAwOjAwIG9yICswMDAwIG9yICswMClcbnZhciBleHRlbmRlZElzb1JlZ2V4ID0gL15cXHMqKCg/OlsrLV1cXGR7Nn18XFxkezR9KS0oPzpcXGRcXGQtXFxkXFxkfFdcXGRcXGQtXFxkfFdcXGRcXGR8XFxkXFxkXFxkfFxcZFxcZCkpKD86KFR8ICkoXFxkXFxkKD86OlxcZFxcZCg/OjpcXGRcXGQoPzpbLixdXFxkKyk/KT8pPykoW1xcK1xcLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPyQvO1xudmFyIGJhc2ljSXNvUmVnZXggPSAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pKD86XFxkXFxkXFxkXFxkfFdcXGRcXGRcXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkKSkoPzooVHwgKShcXGRcXGQoPzpcXGRcXGQoPzpcXGRcXGQoPzpbLixdXFxkKyk/KT8pPykoW1xcK1xcLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPyQvO1xuXG52YXIgdHpSZWdleCA9IC9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/LztcblxudmFyIGlzb0RhdGVzID0gW1xuICAgIFsnWVlZWVlZLU1NLUREJywgL1srLV1cXGR7Nn0tXFxkXFxkLVxcZFxcZC9dLFxuICAgIFsnWVlZWS1NTS1ERCcsIC9cXGR7NH0tXFxkXFxkLVxcZFxcZC9dLFxuICAgIFsnR0dHRy1bV11XVy1FJywgL1xcZHs0fS1XXFxkXFxkLVxcZC9dLFxuICAgIFsnR0dHRy1bV11XVycsIC9cXGR7NH0tV1xcZFxcZC8sIGZhbHNlXSxcbiAgICBbJ1lZWVktREREJywgL1xcZHs0fS1cXGR7M30vXSxcbiAgICBbJ1lZWVktTU0nLCAvXFxkezR9LVxcZFxcZC8sIGZhbHNlXSxcbiAgICBbJ1lZWVlZWU1NREQnLCAvWystXVxcZHsxMH0vXSxcbiAgICBbJ1lZWVlNTUREJywgL1xcZHs4fS9dLFxuICAgIC8vIFlZWVlNTSBpcyBOT1QgYWxsb3dlZCBieSB0aGUgc3RhbmRhcmRcbiAgICBbJ0dHR0dbV11XV0UnLCAvXFxkezR9V1xcZHszfS9dLFxuICAgIFsnR0dHR1tXXVdXJywgL1xcZHs0fVdcXGR7Mn0vLCBmYWxzZV0sXG4gICAgWydZWVlZREREJywgL1xcZHs3fS9dXG5dO1xuXG4vLyBpc28gdGltZSBmb3JtYXRzIGFuZCByZWdleGVzXG52YXIgaXNvVGltZXMgPSBbXG4gICAgWydISDptbTpzcy5TU1NTJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkXFwuXFxkKy9dLFxuICAgIFsnSEg6bW06c3MsU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZCxcXGQrL10sXG4gICAgWydISDptbTpzcycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZC9dLFxuICAgIFsnSEg6bW0nLCAvXFxkXFxkOlxcZFxcZC9dLFxuICAgIFsnSEhtbXNzLlNTU1MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkXFwuXFxkKy9dLFxuICAgIFsnSEhtbXNzLFNTU1MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkLFxcZCsvXSxcbiAgICBbJ0hIbW1zcycsIC9cXGRcXGRcXGRcXGRcXGRcXGQvXSxcbiAgICBbJ0hIbW0nLCAvXFxkXFxkXFxkXFxkL10sXG4gICAgWydISCcsIC9cXGRcXGQvXVxuXTtcblxudmFyIGFzcE5ldEpzb25SZWdleCA9IC9eXFwvP0RhdGVcXCgoXFwtP1xcZCspL2k7XG5cbi8vIGRhdGUgZnJvbSBpc28gZm9ybWF0XG5mdW5jdGlvbiBjb25maWdGcm9tSVNPKGNvbmZpZykge1xuICAgIHZhciBpLCBsLFxuICAgICAgICBzdHJpbmcgPSBjb25maWcuX2ksXG4gICAgICAgIG1hdGNoID0gZXh0ZW5kZWRJc29SZWdleC5leGVjKHN0cmluZykgfHwgYmFzaWNJc29SZWdleC5leGVjKHN0cmluZyksXG4gICAgICAgIGFsbG93VGltZSwgZGF0ZUZvcm1hdCwgdGltZUZvcm1hdCwgdHpGb3JtYXQ7XG5cbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaXNvID0gdHJ1ZTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvRGF0ZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaXNvRGF0ZXNbaV1bMV0uZXhlYyhtYXRjaFsxXSkpIHtcbiAgICAgICAgICAgICAgICBkYXRlRm9ybWF0ID0gaXNvRGF0ZXNbaV1bMF07XG4gICAgICAgICAgICAgICAgYWxsb3dUaW1lID0gaXNvRGF0ZXNbaV1bMl0gIT09IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRlRm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXRjaFszXSkge1xuICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb1RpbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpc29UaW1lc1tpXVsxXS5leGVjKG1hdGNoWzNdKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBtYXRjaFsyXSBzaG91bGQgYmUgJ1QnIG9yIHNwYWNlXG4gICAgICAgICAgICAgICAgICAgIHRpbWVGb3JtYXQgPSAobWF0Y2hbMl0gfHwgJyAnKSArIGlzb1RpbWVzW2ldWzBdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGltZUZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghYWxsb3dUaW1lICYmIHRpbWVGb3JtYXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hdGNoWzRdKSB7XG4gICAgICAgICAgICBpZiAodHpSZWdleC5leGVjKG1hdGNoWzRdKSkge1xuICAgICAgICAgICAgICAgIHR6Rm9ybWF0ID0gJ1onO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uZmlnLl9mID0gZGF0ZUZvcm1hdCArICh0aW1lRm9ybWF0IHx8ICcnKSArICh0ekZvcm1hdCB8fCAnJyk7XG4gICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICB9XG59XG5cbi8vIFJGQyAyODIyIHJlZ2V4OiBGb3IgZGV0YWlscyBzZWUgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI4MjIjc2VjdGlvbi0zLjNcbnZhciByZmMyODIyID0gL14oPzooTW9ufFR1ZXxXZWR8VGh1fEZyaXxTYXR8U3VuKSw/XFxzKT8oXFxkezEsMn0pXFxzKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKVxccyhcXGR7Miw0fSlcXHMoXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKSk/XFxzKD86KFVUfEdNVHxbRUNNUF1bU0RdVCl8KFtael0pfChbKy1dXFxkezR9KSkkLztcblxuZnVuY3Rpb24gZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyh5ZWFyU3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cikge1xuICAgIHZhciByZXN1bHQgPSBbXG4gICAgICAgIHVudHJ1bmNhdGVZZWFyKHllYXJTdHIpLFxuICAgICAgICBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQuaW5kZXhPZihtb250aFN0ciksXG4gICAgICAgIHBhcnNlSW50KGRheVN0ciwgMTApLFxuICAgICAgICBwYXJzZUludChob3VyU3RyLCAxMCksXG4gICAgICAgIHBhcnNlSW50KG1pbnV0ZVN0ciwgMTApXG4gICAgXTtcblxuICAgIGlmIChzZWNvbmRTdHIpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocGFyc2VJbnQoc2Vjb25kU3RyLCAxMCkpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHVudHJ1bmNhdGVZZWFyKHllYXJTdHIpIHtcbiAgICB2YXIgeWVhciA9IHBhcnNlSW50KHllYXJTdHIsIDEwKTtcbiAgICBpZiAoeWVhciA8PSA0OSkge1xuICAgICAgICByZXR1cm4gMjAwMCArIHllYXI7XG4gICAgfSBlbHNlIGlmICh5ZWFyIDw9IDk5OSkge1xuICAgICAgICByZXR1cm4gMTkwMCArIHllYXI7XG4gICAgfVxuICAgIHJldHVybiB5ZWFyO1xufVxuXG5mdW5jdGlvbiBwcmVwcm9jZXNzUkZDMjgyMihzKSB7XG4gICAgLy8gUmVtb3ZlIGNvbW1lbnRzIGFuZCBmb2xkaW5nIHdoaXRlc3BhY2UgYW5kIHJlcGxhY2UgbXVsdGlwbGUtc3BhY2VzIHdpdGggYSBzaW5nbGUgc3BhY2VcbiAgICByZXR1cm4gcy5yZXBsYWNlKC9cXChbXildKlxcKXxbXFxuXFx0XS9nLCAnICcpLnJlcGxhY2UoLyhcXHNcXHMrKS9nLCAnICcpLnRyaW0oKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tXZWVrZGF5KHdlZWtkYXlTdHIsIHBhcnNlZElucHV0LCBjb25maWcpIHtcbiAgICBpZiAod2Vla2RheVN0cikge1xuICAgICAgICAvLyBUT0RPOiBSZXBsYWNlIHRoZSB2YW5pbGxhIEpTIERhdGUgb2JqZWN0IHdpdGggYW4gaW5kZXBlbnRlbnQgZGF5LW9mLXdlZWsgY2hlY2suXG4gICAgICAgIHZhciB3ZWVrZGF5UHJvdmlkZWQgPSBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydC5pbmRleE9mKHdlZWtkYXlTdHIpLFxuICAgICAgICAgICAgd2Vla2RheUFjdHVhbCA9IG5ldyBEYXRlKHBhcnNlZElucHV0WzBdLCBwYXJzZWRJbnB1dFsxXSwgcGFyc2VkSW5wdXRbMl0pLmdldERheSgpO1xuICAgICAgICBpZiAod2Vla2RheVByb3ZpZGVkICE9PSB3ZWVrZGF5QWN0dWFsKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS53ZWVrZGF5TWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbnZhciBvYnNPZmZzZXRzID0ge1xuICAgIFVUOiAwLFxuICAgIEdNVDogMCxcbiAgICBFRFQ6IC00ICogNjAsXG4gICAgRVNUOiAtNSAqIDYwLFxuICAgIENEVDogLTUgKiA2MCxcbiAgICBDU1Q6IC02ICogNjAsXG4gICAgTURUOiAtNiAqIDYwLFxuICAgIE1TVDogLTcgKiA2MCxcbiAgICBQRFQ6IC03ICogNjAsXG4gICAgUFNUOiAtOCAqIDYwXG59O1xuXG5mdW5jdGlvbiBjYWxjdWxhdGVPZmZzZXQob2JzT2Zmc2V0LCBtaWxpdGFyeU9mZnNldCwgbnVtT2Zmc2V0KSB7XG4gICAgaWYgKG9ic09mZnNldCkge1xuICAgICAgICByZXR1cm4gb2JzT2Zmc2V0c1tvYnNPZmZzZXRdO1xuICAgIH0gZWxzZSBpZiAobWlsaXRhcnlPZmZzZXQpIHtcbiAgICAgICAgLy8gdGhlIG9ubHkgYWxsb3dlZCBtaWxpdGFyeSB0eiBpcyBaXG4gICAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBobSA9IHBhcnNlSW50KG51bU9mZnNldCwgMTApO1xuICAgICAgICB2YXIgbSA9IGhtICUgMTAwLCBoID0gKGhtIC0gbSkgLyAxMDA7XG4gICAgICAgIHJldHVybiBoICogNjAgKyBtO1xuICAgIH1cbn1cblxuLy8gZGF0ZSBhbmQgdGltZSBmcm9tIHJlZiAyODIyIGZvcm1hdFxuZnVuY3Rpb24gY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKSB7XG4gICAgdmFyIG1hdGNoID0gcmZjMjgyMi5leGVjKHByZXByb2Nlc3NSRkMyODIyKGNvbmZpZy5faSkpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgICB2YXIgcGFyc2VkQXJyYXkgPSBleHRyYWN0RnJvbVJGQzI4MjJTdHJpbmdzKG1hdGNoWzRdLCBtYXRjaFszXSwgbWF0Y2hbMl0sIG1hdGNoWzVdLCBtYXRjaFs2XSwgbWF0Y2hbN10pO1xuICAgICAgICBpZiAoIWNoZWNrV2Vla2RheShtYXRjaFsxXSwgcGFyc2VkQXJyYXksIGNvbmZpZykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZy5fYSA9IHBhcnNlZEFycmF5O1xuICAgICAgICBjb25maWcuX3R6bSA9IGNhbGN1bGF0ZU9mZnNldChtYXRjaFs4XSwgbWF0Y2hbOV0sIG1hdGNoWzEwXSk7XG5cbiAgICAgICAgY29uZmlnLl9kID0gY3JlYXRlVVRDRGF0ZS5hcHBseShudWxsLCBjb25maWcuX2EpO1xuICAgICAgICBjb25maWcuX2Quc2V0VVRDTWludXRlcyhjb25maWcuX2QuZ2V0VVRDTWludXRlcygpIC0gY29uZmlnLl90em0pO1xuXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnJmYzI4MjIgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgIH1cbn1cblxuLy8gZGF0ZSBmcm9tIGlzbyBmb3JtYXQgb3IgZmFsbGJhY2tcbmZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmcoY29uZmlnKSB7XG4gICAgdmFyIG1hdGNoZWQgPSBhc3BOZXRKc29uUmVnZXguZXhlYyhjb25maWcuX2kpO1xuXG4gICAgaWYgKG1hdGNoZWQgIT09IG51bGwpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoK21hdGNoZWRbMV0pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uZmlnRnJvbUlTTyhjb25maWcpO1xuICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZyk7XG4gICAgaWYgKGNvbmZpZy5faXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgZGVsZXRlIGNvbmZpZy5faXNWYWxpZDtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRmluYWwgYXR0ZW1wdCwgdXNlIElucHV0IEZhbGxiYWNrXG4gICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKTtcbn1cblxuaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2sgPSBkZXByZWNhdGUoXG4gICAgJ3ZhbHVlIHByb3ZpZGVkIGlzIG5vdCBpbiBhIHJlY29nbml6ZWQgUkZDMjgyMiBvciBJU08gZm9ybWF0LiBtb21lbnQgY29uc3RydWN0aW9uIGZhbGxzIGJhY2sgdG8ganMgRGF0ZSgpLCAnICtcbiAgICAnd2hpY2ggaXMgbm90IHJlbGlhYmxlIGFjcm9zcyBhbGwgYnJvd3NlcnMgYW5kIHZlcnNpb25zLiBOb24gUkZDMjgyMi9JU08gZGF0ZSBmb3JtYXRzIGFyZSAnICtcbiAgICAnZGlzY291cmFnZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhbiB1cGNvbWluZyBtYWpvciByZWxlYXNlLiBQbGVhc2UgcmVmZXIgdG8gJyArXG4gICAgJ2h0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvanMtZGF0ZS8gZm9yIG1vcmUgaW5mby4nLFxuICAgIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoY29uZmlnLl9pICsgKGNvbmZpZy5fdXNlVVRDID8gJyBVVEMnIDogJycpKTtcbiAgICB9XG4pO1xuXG4vLyBjb25zdGFudCB0aGF0IHJlZmVycyB0byB0aGUgSVNPIHN0YW5kYXJkXG5ob29rcy5JU09fODYwMSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4vLyBjb25zdGFudCB0aGF0IHJlZmVycyB0byB0aGUgUkZDIDI4MjIgZm9ybVxuaG9va3MuUkZDXzI4MjIgPSBmdW5jdGlvbiAoKSB7fTtcblxuLy8gZGF0ZSBmcm9tIHN0cmluZyBhbmQgZm9ybWF0IHN0cmluZ1xuZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpIHtcbiAgICAvLyBUT0RPOiBNb3ZlIHRoaXMgdG8gYW5vdGhlciBwYXJ0IG9mIHRoZSBjcmVhdGlvbiBmbG93IHRvIHByZXZlbnQgY2lyY3VsYXIgZGVwc1xuICAgIGlmIChjb25maWcuX2YgPT09IGhvb2tzLklTT184NjAxKSB7XG4gICAgICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5SRkNfMjgyMikge1xuICAgICAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbmZpZy5fYSA9IFtdO1xuICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmVtcHR5ID0gdHJ1ZTtcblxuICAgIC8vIFRoaXMgYXJyYXkgaXMgdXNlZCB0byBtYWtlIGEgRGF0ZSwgZWl0aGVyIHdpdGggYG5ldyBEYXRlYCBvciBgRGF0ZS5VVENgXG4gICAgdmFyIHN0cmluZyA9ICcnICsgY29uZmlnLl9pLFxuICAgICAgICBpLCBwYXJzZWRJbnB1dCwgdG9rZW5zLCB0b2tlbiwgc2tpcHBlZCxcbiAgICAgICAgc3RyaW5nTGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCA9IDA7XG5cbiAgICB0b2tlbnMgPSBleHBhbmRGb3JtYXQoY29uZmlnLl9mLCBjb25maWcuX2xvY2FsZSkubWF0Y2goZm9ybWF0dGluZ1Rva2VucykgfHwgW107XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRva2VuID0gdG9rZW5zW2ldO1xuICAgICAgICBwYXJzZWRJbnB1dCA9IChzdHJpbmcubWF0Y2goZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpKSB8fCBbXSlbMF07XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCd0b2tlbicsIHRva2VuLCAncGFyc2VkSW5wdXQnLCBwYXJzZWRJbnB1dCxcbiAgICAgICAgLy8gICAgICAgICAncmVnZXgnLCBnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4odG9rZW4sIGNvbmZpZykpO1xuICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgIHNraXBwZWQgPSBzdHJpbmcuc3Vic3RyKDAsIHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSk7XG4gICAgICAgICAgICBpZiAoc2tpcHBlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChza2lwcGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5zbGljZShzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkgKyBwYXJzZWRJbnB1dC5sZW5ndGgpO1xuICAgICAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCArPSBwYXJzZWRJbnB1dC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZG9uJ3QgcGFyc2UgaWYgaXQncyBub3QgYSBrbm93biB0b2tlblxuICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW5dKSB7XG4gICAgICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIHBhcnNlZElucHV0LCBjb25maWcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvbmZpZy5fc3RyaWN0ICYmICFwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gYWRkIHJlbWFpbmluZyB1bnBhcnNlZCBpbnB1dCBsZW5ndGggdG8gdGhlIHN0cmluZ1xuICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmNoYXJzTGVmdE92ZXIgPSBzdHJpbmdMZW5ndGggLSB0b3RhbFBhcnNlZElucHV0TGVuZ3RoO1xuICAgIGlmIChzdHJpbmcubGVuZ3RoID4gMCkge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRJbnB1dC5wdXNoKHN0cmluZyk7XG4gICAgfVxuXG4gICAgLy8gY2xlYXIgXzEyaCBmbGFnIGlmIGhvdXIgaXMgPD0gMTJcbiAgICBpZiAoY29uZmlnLl9hW0hPVVJdIDw9IDEyICYmXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPT09IHRydWUgJiZcbiAgICAgICAgY29uZmlnLl9hW0hPVVJdID4gMCkge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnBhcnNlZERhdGVQYXJ0cyA9IGNvbmZpZy5fYS5zbGljZSgwKTtcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5tZXJpZGllbSA9IGNvbmZpZy5fbWVyaWRpZW07XG4gICAgLy8gaGFuZGxlIG1lcmlkaWVtXG4gICAgY29uZmlnLl9hW0hPVVJdID0gbWVyaWRpZW1GaXhXcmFwKGNvbmZpZy5fbG9jYWxlLCBjb25maWcuX2FbSE9VUl0sIGNvbmZpZy5fbWVyaWRpZW0pO1xuXG4gICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgY2hlY2tPdmVyZmxvdyhjb25maWcpO1xufVxuXG5cbmZ1bmN0aW9uIG1lcmlkaWVtRml4V3JhcCAobG9jYWxlLCBob3VyLCBtZXJpZGllbSkge1xuICAgIHZhciBpc1BtO1xuXG4gICAgaWYgKG1lcmlkaWVtID09IG51bGwpIHtcbiAgICAgICAgLy8gbm90aGluZyB0byBkb1xuICAgICAgICByZXR1cm4gaG91cjtcbiAgICB9XG4gICAgaWYgKGxvY2FsZS5tZXJpZGllbUhvdXIgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLm1lcmlkaWVtSG91cihob3VyLCBtZXJpZGllbSk7XG4gICAgfSBlbHNlIGlmIChsb2NhbGUuaXNQTSAhPSBudWxsKSB7XG4gICAgICAgIC8vIEZhbGxiYWNrXG4gICAgICAgIGlzUG0gPSBsb2NhbGUuaXNQTShtZXJpZGllbSk7XG4gICAgICAgIGlmIChpc1BtICYmIGhvdXIgPCAxMikge1xuICAgICAgICAgICAgaG91ciArPSAxMjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzUG0gJiYgaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBob3VyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHRoaXMgaXMgbm90IHN1cHBvc2VkIHRvIGhhcHBlblxuICAgICAgICByZXR1cm4gaG91cjtcbiAgICB9XG59XG5cbi8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGFycmF5IG9mIGZvcm1hdCBzdHJpbmdzXG5mdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKSB7XG4gICAgdmFyIHRlbXBDb25maWcsXG4gICAgICAgIGJlc3RNb21lbnQsXG5cbiAgICAgICAgc2NvcmVUb0JlYXQsXG4gICAgICAgIGksXG4gICAgICAgIGN1cnJlbnRTY29yZTtcblxuICAgIGlmIChjb25maWcuX2YubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRGb3JtYXQgPSB0cnVlO1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShOYU4pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IGNvbmZpZy5fZi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjdXJyZW50U2NvcmUgPSAwO1xuICAgICAgICB0ZW1wQ29uZmlnID0gY29weUNvbmZpZyh7fSwgY29uZmlnKTtcbiAgICAgICAgaWYgKGNvbmZpZy5fdXNlVVRDICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRlbXBDb25maWcuX3VzZVVUQyA9IGNvbmZpZy5fdXNlVVRDO1xuICAgICAgICB9XG4gICAgICAgIHRlbXBDb25maWcuX2YgPSBjb25maWcuX2ZbaV07XG4gICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQodGVtcENvbmZpZyk7XG5cbiAgICAgICAgaWYgKCFpc1ZhbGlkKHRlbXBDb25maWcpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIHRoZXJlIGlzIGFueSBpbnB1dCB0aGF0IHdhcyBub3QgcGFyc2VkIGFkZCBhIHBlbmFsdHkgZm9yIHRoYXQgZm9ybWF0XG4gICAgICAgIGN1cnJlbnRTY29yZSArPSBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykuY2hhcnNMZWZ0T3ZlcjtcblxuICAgICAgICAvL29yIHRva2Vuc1xuICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnVudXNlZFRva2Vucy5sZW5ndGggKiAxMDtcblxuICAgICAgICBnZXRQYXJzaW5nRmxhZ3ModGVtcENvbmZpZykuc2NvcmUgPSBjdXJyZW50U2NvcmU7XG5cbiAgICAgICAgaWYgKHNjb3JlVG9CZWF0ID09IG51bGwgfHwgY3VycmVudFNjb3JlIDwgc2NvcmVUb0JlYXQpIHtcbiAgICAgICAgICAgIHNjb3JlVG9CZWF0ID0gY3VycmVudFNjb3JlO1xuICAgICAgICAgICAgYmVzdE1vbWVudCA9IHRlbXBDb25maWc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleHRlbmQoY29uZmlnLCBiZXN0TW9tZW50IHx8IHRlbXBDb25maWcpO1xufVxuXG5mdW5jdGlvbiBjb25maWdGcm9tT2JqZWN0KGNvbmZpZykge1xuICAgIGlmIChjb25maWcuX2QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBpID0gbm9ybWFsaXplT2JqZWN0VW5pdHMoY29uZmlnLl9pKTtcbiAgICBjb25maWcuX2EgPSBtYXAoW2kueWVhciwgaS5tb250aCwgaS5kYXkgfHwgaS5kYXRlLCBpLmhvdXIsIGkubWludXRlLCBpLnNlY29uZCwgaS5taWxsaXNlY29uZF0sIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiAmJiBwYXJzZUludChvYmosIDEwKTtcbiAgICB9KTtcblxuICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGcm9tQ29uZmlnIChjb25maWcpIHtcbiAgICB2YXIgcmVzID0gbmV3IE1vbWVudChjaGVja092ZXJmbG93KHByZXBhcmVDb25maWcoY29uZmlnKSkpO1xuICAgIGlmIChyZXMuX25leHREYXkpIHtcbiAgICAgICAgLy8gQWRkaW5nIGlzIHNtYXJ0IGVub3VnaCBhcm91bmQgRFNUXG4gICAgICAgIHJlcy5hZGQoMSwgJ2QnKTtcbiAgICAgICAgcmVzLl9uZXh0RGF5ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIHByZXBhcmVDb25maWcgKGNvbmZpZykge1xuICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faSxcbiAgICAgICAgZm9ybWF0ID0gY29uZmlnLl9mO1xuXG4gICAgY29uZmlnLl9sb2NhbGUgPSBjb25maWcuX2xvY2FsZSB8fCBnZXRMb2NhbGUoY29uZmlnLl9sKTtcblxuICAgIGlmIChpbnB1dCA9PT0gbnVsbCB8fCAoZm9ybWF0ID09PSB1bmRlZmluZWQgJiYgaW5wdXQgPT09ICcnKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCh7bnVsbElucHV0OiB0cnVlfSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uZmlnLl9pID0gaW5wdXQgPSBjb25maWcuX2xvY2FsZS5wcmVwYXJzZShpbnB1dCk7XG4gICAgfVxuXG4gICAgaWYgKGlzTW9tZW50KGlucHV0KSkge1xuICAgICAgICByZXR1cm4gbmV3IE1vbWVudChjaGVja092ZXJmbG93KGlucHV0KSk7XG4gICAgfSBlbHNlIGlmIChpc0RhdGUoaW5wdXQpKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IGlucHV0O1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShmb3JtYXQpKSB7XG4gICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheShjb25maWcpO1xuICAgIH0gZWxzZSBpZiAoZm9ybWF0KSB7XG4gICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTtcbiAgICB9ICBlbHNlIHtcbiAgICAgICAgY29uZmlnRnJvbUlucHV0KGNvbmZpZyk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1ZhbGlkKGNvbmZpZykpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gY29uZmlnO1xufVxuXG5mdW5jdGlvbiBjb25maWdGcm9tSW5wdXQoY29uZmlnKSB7XG4gICAgdmFyIGlucHV0ID0gY29uZmlnLl9pO1xuICAgIGlmIChpc1VuZGVmaW5lZChpbnB1dCkpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaG9va3Mubm93KCkpO1xuICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShpbnB1dC52YWx1ZU9mKCkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBjb25maWdGcm9tU3RyaW5nKGNvbmZpZyk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KGlucHV0KSkge1xuICAgICAgICBjb25maWcuX2EgPSBtYXAoaW5wdXQuc2xpY2UoMCksIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludChvYmosIDEwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoaW5wdXQpKSB7XG4gICAgICAgIGNvbmZpZ0Zyb21PYmplY3QoY29uZmlnKTtcbiAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGlucHV0KSkge1xuICAgICAgICAvLyBmcm9tIG1pbGxpc2Vjb25kc1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShpbnB1dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2FsT3JVVEMgKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBpc1VUQykge1xuICAgIHZhciBjID0ge307XG5cbiAgICBpZiAobG9jYWxlID09PSB0cnVlIHx8IGxvY2FsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgc3RyaWN0ID0gbG9jYWxlO1xuICAgICAgICBsb2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKChpc09iamVjdChpbnB1dCkgJiYgaXNPYmplY3RFbXB0eShpbnB1dCkpIHx8XG4gICAgICAgICAgICAoaXNBcnJheShpbnB1dCkgJiYgaW5wdXQubGVuZ3RoID09PSAwKSkge1xuICAgICAgICBpbnB1dCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLy8gb2JqZWN0IGNvbnN0cnVjdGlvbiBtdXN0IGJlIGRvbmUgdGhpcyB3YXkuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE0MjNcbiAgICBjLl9pc0FNb21lbnRPYmplY3QgPSB0cnVlO1xuICAgIGMuX3VzZVVUQyA9IGMuX2lzVVRDID0gaXNVVEM7XG4gICAgYy5fbCA9IGxvY2FsZTtcbiAgICBjLl9pID0gaW5wdXQ7XG4gICAgYy5fZiA9IGZvcm1hdDtcbiAgICBjLl9zdHJpY3QgPSBzdHJpY3Q7XG5cbiAgICByZXR1cm4gY3JlYXRlRnJvbUNvbmZpZyhjKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTG9jYWwgKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0KSB7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIGZhbHNlKTtcbn1cblxudmFyIHByb3RvdHlwZU1pbiA9IGRlcHJlY2F0ZShcbiAgICAnbW9tZW50KCkubWluIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWF4IGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG90aGVyIDwgdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG52YXIgcHJvdG90eXBlTWF4ID0gZGVwcmVjYXRlKFxuICAgICdtb21lbnQoKS5tYXggaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudC5taW4gaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9taW4tbWF4LycsXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gb3RoZXIgPiB0aGlzID8gdGhpcyA6IG90aGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoKTtcbiAgICAgICAgfVxuICAgIH1cbik7XG5cbi8vIFBpY2sgYSBtb21lbnQgbSBmcm9tIG1vbWVudHMgc28gdGhhdCBtW2ZuXShvdGhlcikgaXMgdHJ1ZSBmb3IgYWxsXG4vLyBvdGhlci4gVGhpcyByZWxpZXMgb24gdGhlIGZ1bmN0aW9uIGZuIHRvIGJlIHRyYW5zaXRpdmUuXG4vL1xuLy8gbW9tZW50cyBzaG91bGQgZWl0aGVyIGJlIGFuIGFycmF5IG9mIG1vbWVudCBvYmplY3RzIG9yIGFuIGFycmF5LCB3aG9zZVxuLy8gZmlyc3QgZWxlbWVudCBpcyBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cy5cbmZ1bmN0aW9uIHBpY2tCeShmbiwgbW9tZW50cykge1xuICAgIHZhciByZXMsIGk7XG4gICAgaWYgKG1vbWVudHMubGVuZ3RoID09PSAxICYmIGlzQXJyYXkobW9tZW50c1swXSkpIHtcbiAgICAgICAgbW9tZW50cyA9IG1vbWVudHNbMF07XG4gICAgfVxuICAgIGlmICghbW9tZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKCk7XG4gICAgfVxuICAgIHJlcyA9IG1vbWVudHNbMF07XG4gICAgZm9yIChpID0gMTsgaSA8IG1vbWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKCFtb21lbnRzW2ldLmlzVmFsaWQoKSB8fCBtb21lbnRzW2ldW2ZuXShyZXMpKSB7XG4gICAgICAgICAgICByZXMgPSBtb21lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbi8vIFRPRE86IFVzZSBbXS5zb3J0IGluc3RlYWQ/XG5mdW5jdGlvbiBtaW4gKCkge1xuICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgcmV0dXJuIHBpY2tCeSgnaXNCZWZvcmUnLCBhcmdzKTtcbn1cblxuZnVuY3Rpb24gbWF4ICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgIHJldHVybiBwaWNrQnkoJ2lzQWZ0ZXInLCBhcmdzKTtcbn1cblxudmFyIG5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gRGF0ZS5ub3cgPyBEYXRlLm5vdygpIDogKyhuZXcgRGF0ZSgpKTtcbn07XG5cbnZhciBvcmRlcmluZyA9IFsneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcsICdtaWxsaXNlY29uZCddO1xuXG5mdW5jdGlvbiBpc0R1cmF0aW9uVmFsaWQobSkge1xuICAgIGZvciAodmFyIGtleSBpbiBtKSB7XG4gICAgICAgIGlmICghKGluZGV4T2YuY2FsbChvcmRlcmluZywga2V5KSAhPT0gLTEgJiYgKG1ba2V5XSA9PSBudWxsIHx8ICFpc05hTihtW2tleV0pKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciB1bml0SGFzRGVjaW1hbCA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3JkZXJpbmcubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKG1bb3JkZXJpbmdbaV1dKSB7XG4gICAgICAgICAgICBpZiAodW5pdEhhc0RlY2ltYWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIG9ubHkgYWxsb3cgbm9uLWludGVnZXJzIGZvciBzbWFsbGVzdCB1bml0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFyc2VGbG9hdChtW29yZGVyaW5nW2ldXSkgIT09IHRvSW50KG1bb3JkZXJpbmdbaV1dKSkge1xuICAgICAgICAgICAgICAgIHVuaXRIYXNEZWNpbWFsID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkJDEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzVmFsaWQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUludmFsaWQkMSgpIHtcbiAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oTmFOKTtcbn1cblxuZnVuY3Rpb24gRHVyYXRpb24gKGR1cmF0aW9uKSB7XG4gICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGR1cmF0aW9uKSxcbiAgICAgICAgeWVhcnMgPSBub3JtYWxpemVkSW5wdXQueWVhciB8fCAwLFxuICAgICAgICBxdWFydGVycyA9IG5vcm1hbGl6ZWRJbnB1dC5xdWFydGVyIHx8IDAsXG4gICAgICAgIG1vbnRocyA9IG5vcm1hbGl6ZWRJbnB1dC5tb250aCB8fCAwLFxuICAgICAgICB3ZWVrcyA9IG5vcm1hbGl6ZWRJbnB1dC53ZWVrIHx8IDAsXG4gICAgICAgIGRheXMgPSBub3JtYWxpemVkSW5wdXQuZGF5IHx8IDAsXG4gICAgICAgIGhvdXJzID0gbm9ybWFsaXplZElucHV0LmhvdXIgfHwgMCxcbiAgICAgICAgbWludXRlcyA9IG5vcm1hbGl6ZWRJbnB1dC5taW51dGUgfHwgMCxcbiAgICAgICAgc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5zZWNvbmQgfHwgMCxcbiAgICAgICAgbWlsbGlzZWNvbmRzID0gbm9ybWFsaXplZElucHV0Lm1pbGxpc2Vjb25kIHx8IDA7XG5cbiAgICB0aGlzLl9pc1ZhbGlkID0gaXNEdXJhdGlvblZhbGlkKG5vcm1hbGl6ZWRJbnB1dCk7XG5cbiAgICAvLyByZXByZXNlbnRhdGlvbiBmb3IgZGF0ZUFkZFJlbW92ZVxuICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9ICttaWxsaXNlY29uZHMgK1xuICAgICAgICBzZWNvbmRzICogMWUzICsgLy8gMTAwMFxuICAgICAgICBtaW51dGVzICogNmU0ICsgLy8gMTAwMCAqIDYwXG4gICAgICAgIGhvdXJzICogMTAwMCAqIDYwICogNjA7IC8vdXNpbmcgMTAwMCAqIDYwICogNjAgaW5zdGVhZCBvZiAzNmU1IHRvIGF2b2lkIGZsb2F0aW5nIHBvaW50IHJvdW5kaW5nIGVycm9ycyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjk3OFxuICAgIC8vIEJlY2F1c2Ugb2YgZGF0ZUFkZFJlbW92ZSB0cmVhdHMgMjQgaG91cnMgYXMgZGlmZmVyZW50IGZyb20gYVxuICAgIC8vIGRheSB3aGVuIHdvcmtpbmcgYXJvdW5kIERTVCwgd2UgbmVlZCB0byBzdG9yZSB0aGVtIHNlcGFyYXRlbHlcbiAgICB0aGlzLl9kYXlzID0gK2RheXMgK1xuICAgICAgICB3ZWVrcyAqIDc7XG4gICAgLy8gSXQgaXMgaW1wb3NzaWJsZSB0byB0cmFuc2xhdGUgbW9udGhzIGludG8gZGF5cyB3aXRob3V0IGtub3dpbmdcbiAgICAvLyB3aGljaCBtb250aHMgeW91IGFyZSBhcmUgdGFsa2luZyBhYm91dCwgc28gd2UgaGF2ZSB0byBzdG9yZVxuICAgIC8vIGl0IHNlcGFyYXRlbHkuXG4gICAgdGhpcy5fbW9udGhzID0gK21vbnRocyArXG4gICAgICAgIHF1YXJ0ZXJzICogMyArXG4gICAgICAgIHllYXJzICogMTI7XG5cbiAgICB0aGlzLl9kYXRhID0ge307XG5cbiAgICB0aGlzLl9sb2NhbGUgPSBnZXRMb2NhbGUoKTtcblxuICAgIHRoaXMuX2J1YmJsZSgpO1xufVxuXG5mdW5jdGlvbiBpc0R1cmF0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgRHVyYXRpb247XG59XG5cbmZ1bmN0aW9uIGFic1JvdW5kIChudW1iZXIpIHtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgtMSAqIG51bWJlcikgKiAtMTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChudW1iZXIpO1xuICAgIH1cbn1cblxuLy8gRk9STUFUVElOR1xuXG5mdW5jdGlvbiBvZmZzZXQgKHRva2VuLCBzZXBhcmF0b3IpIHtcbiAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy51dGNPZmZzZXQoKTtcbiAgICAgICAgdmFyIHNpZ24gPSAnKyc7XG4gICAgICAgIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICAgICAgICBvZmZzZXQgPSAtb2Zmc2V0O1xuICAgICAgICAgICAgc2lnbiA9ICctJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2lnbiArIHplcm9GaWxsKH5+KG9mZnNldCAvIDYwKSwgMikgKyBzZXBhcmF0b3IgKyB6ZXJvRmlsbCh+fihvZmZzZXQpICUgNjAsIDIpO1xuICAgIH0pO1xufVxuXG5vZmZzZXQoJ1onLCAnOicpO1xub2Zmc2V0KCdaWicsICcnKTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdaJywgIG1hdGNoU2hvcnRPZmZzZXQpO1xuYWRkUmVnZXhUb2tlbignWlonLCBtYXRjaFNob3J0T2Zmc2V0KTtcbmFkZFBhcnNlVG9rZW4oWydaJywgJ1paJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIGNvbmZpZy5fdXNlVVRDID0gdHJ1ZTtcbiAgICBjb25maWcuX3R6bSA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpO1xufSk7XG5cbi8vIEhFTFBFUlNcblxuLy8gdGltZXpvbmUgY2h1bmtlclxuLy8gJysxMDowMCcgPiBbJzEwJywgICcwMCddXG4vLyAnLTE1MzAnICA+IFsnLTE1JywgJzMwJ11cbnZhciBjaHVua09mZnNldCA9IC8oW1xcK1xcLV18XFxkXFxkKS9naTtcblxuZnVuY3Rpb24gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaGVyLCBzdHJpbmcpIHtcbiAgICB2YXIgbWF0Y2hlcyA9IChzdHJpbmcgfHwgJycpLm1hdGNoKG1hdGNoZXIpO1xuXG4gICAgaWYgKG1hdGNoZXMgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGNodW5rICAgPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0gfHwgW107XG4gICAgdmFyIHBhcnRzICAgPSAoY2h1bmsgKyAnJykubWF0Y2goY2h1bmtPZmZzZXQpIHx8IFsnLScsIDAsIDBdO1xuICAgIHZhciBtaW51dGVzID0gKyhwYXJ0c1sxXSAqIDYwKSArIHRvSW50KHBhcnRzWzJdKTtcblxuICAgIHJldHVybiBtaW51dGVzID09PSAwID9cbiAgICAgIDAgOlxuICAgICAgcGFydHNbMF0gPT09ICcrJyA/IG1pbnV0ZXMgOiAtbWludXRlcztcbn1cblxuLy8gUmV0dXJuIGEgbW9tZW50IGZyb20gaW5wdXQsIHRoYXQgaXMgbG9jYWwvdXRjL3pvbmUgZXF1aXZhbGVudCB0byBtb2RlbC5cbmZ1bmN0aW9uIGNsb25lV2l0aE9mZnNldChpbnB1dCwgbW9kZWwpIHtcbiAgICB2YXIgcmVzLCBkaWZmO1xuICAgIGlmIChtb2RlbC5faXNVVEMpIHtcbiAgICAgICAgcmVzID0gbW9kZWwuY2xvbmUoKTtcbiAgICAgICAgZGlmZiA9IChpc01vbWVudChpbnB1dCkgfHwgaXNEYXRlKGlucHV0KSA/IGlucHV0LnZhbHVlT2YoKSA6IGNyZWF0ZUxvY2FsKGlucHV0KS52YWx1ZU9mKCkpIC0gcmVzLnZhbHVlT2YoKTtcbiAgICAgICAgLy8gVXNlIGxvdy1sZXZlbCBhcGksIGJlY2F1c2UgdGhpcyBmbiBpcyBsb3ctbGV2ZWwgYXBpLlxuICAgICAgICByZXMuX2Quc2V0VGltZShyZXMuX2QudmFsdWVPZigpICsgZGlmZik7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldChyZXMsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoaW5wdXQpLmxvY2FsKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXREYXRlT2Zmc2V0IChtKSB7XG4gICAgLy8gT24gRmlyZWZveC4yNCBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgYSBmbG9hdGluZyBwb2ludC5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9wdWxsLzE4NzFcbiAgICByZXR1cm4gLU1hdGgucm91bmQobS5fZC5nZXRUaW1lem9uZU9mZnNldCgpIC8gMTUpICogMTU7XG59XG5cbi8vIEhPT0tTXG5cbi8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2hlbmV2ZXIgYSBtb21lbnQgaXMgbXV0YXRlZC5cbi8vIEl0IGlzIGludGVuZGVkIHRvIGtlZXAgdGhlIG9mZnNldCBpbiBzeW5jIHdpdGggdGhlIHRpbWV6b25lLlxuaG9va3MudXBkYXRlT2Zmc2V0ID0gZnVuY3Rpb24gKCkge307XG5cbi8vIE1PTUVOVFNcblxuLy8ga2VlcExvY2FsVGltZSA9IHRydWUgbWVhbnMgb25seSBjaGFuZ2UgdGhlIHRpbWV6b25lLCB3aXRob3V0XG4vLyBhZmZlY3RpbmcgdGhlIGxvY2FsIGhvdXIuIFNvIDU6MzE6MjYgKzAzMDAgLS1bdXRjT2Zmc2V0KDIsIHRydWUpXS0tPlxuLy8gNTozMToyNiArMDIwMCBJdCBpcyBwb3NzaWJsZSB0aGF0IDU6MzE6MjYgZG9lc24ndCBleGlzdCB3aXRoIG9mZnNldFxuLy8gKzAyMDAsIHNvIHdlIGFkanVzdCB0aGUgdGltZSBhcyBuZWVkZWQsIHRvIGJlIHZhbGlkLlxuLy9cbi8vIEtlZXBpbmcgdGhlIHRpbWUgYWN0dWFsbHkgYWRkcy9zdWJ0cmFjdHMgKG9uZSBob3VyKVxuLy8gZnJvbSB0aGUgYWN0dWFsIHJlcHJlc2VudGVkIHRpbWUuIFRoYXQgaXMgd2h5IHdlIGNhbGwgdXBkYXRlT2Zmc2V0XG4vLyBhIHNlY29uZCB0aW1lLiBJbiBjYXNlIGl0IHdhbnRzIHVzIHRvIGNoYW5nZSB0aGUgb2Zmc2V0IGFnYWluXG4vLyBfY2hhbmdlSW5Qcm9ncmVzcyA9PSB0cnVlIGNhc2UsIHRoZW4gd2UgaGF2ZSB0byBhZGp1c3QsIGJlY2F1c2Vcbi8vIHRoZXJlIGlzIG5vIHN1Y2ggdGltZSBpbiB0aGUgZ2l2ZW4gdGltZXpvbmUuXG5mdW5jdGlvbiBnZXRTZXRPZmZzZXQgKGlucHV0LCBrZWVwTG9jYWxUaW1lLCBrZWVwTWludXRlcykge1xuICAgIHZhciBvZmZzZXQgPSB0aGlzLl9vZmZzZXQgfHwgMCxcbiAgICAgICAgbG9jYWxBZGp1c3Q7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgfVxuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpbnB1dCA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpO1xuICAgICAgICAgICAgaWYgKGlucHV0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoaW5wdXQpIDwgMTYgJiYgIWtlZXBNaW51dGVzKSB7XG4gICAgICAgICAgICBpbnB1dCA9IGlucHV0ICogNjA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9pc1VUQyAmJiBrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICBsb2NhbEFkanVzdCA9IGdldERhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb2Zmc2V0ID0gaW5wdXQ7XG4gICAgICAgIHRoaXMuX2lzVVRDID0gdHJ1ZTtcbiAgICAgICAgaWYgKGxvY2FsQWRqdXN0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkKGxvY2FsQWRqdXN0LCAnbScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvZmZzZXQgIT09IGlucHV0KSB7XG4gICAgICAgICAgICBpZiAoIWtlZXBMb2NhbFRpbWUgfHwgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIGFkZFN1YnRyYWN0KHRoaXMsIGNyZWF0ZUR1cmF0aW9uKGlucHV0IC0gb2Zmc2V0LCAnbScpLCAxLCBmYWxzZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/IG9mZnNldCA6IGdldERhdGVPZmZzZXQodGhpcyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRTZXRab25lIChpbnB1dCwga2VlcExvY2FsVGltZSkge1xuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpbnB1dCA9IC1pbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXRjT2Zmc2V0KGlucHV0LCBrZWVwTG9jYWxUaW1lKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLXRoaXMudXRjT2Zmc2V0KCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRPZmZzZXRUb1VUQyAoa2VlcExvY2FsVGltZSkge1xuICAgIHJldHVybiB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKTtcbn1cblxuZnVuY3Rpb24gc2V0T2Zmc2V0VG9Mb2NhbCAoa2VlcExvY2FsVGltZSkge1xuICAgIGlmICh0aGlzLl9pc1VUQykge1xuICAgICAgICB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKTtcbiAgICAgICAgdGhpcy5faXNVVEMgPSBmYWxzZTtcblxuICAgICAgICBpZiAoa2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgdGhpcy5zdWJ0cmFjdChnZXREYXRlT2Zmc2V0KHRoaXMpLCAnbScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBzZXRPZmZzZXRUb1BhcnNlZE9mZnNldCAoKSB7XG4gICAgaWYgKHRoaXMuX3R6bSAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMudXRjT2Zmc2V0KHRoaXMuX3R6bSwgZmFsc2UsIHRydWUpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuX2kgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciB0Wm9uZSA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hPZmZzZXQsIHRoaXMuX2kpO1xuICAgICAgICBpZiAodFpvbmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQodFpvbmUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGhhc0FsaWduZWRIb3VyT2Zmc2V0IChpbnB1dCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpbnB1dCA9IGlucHV0ID8gY3JlYXRlTG9jYWwoaW5wdXQpLnV0Y09mZnNldCgpIDogMDtcblxuICAgIHJldHVybiAodGhpcy51dGNPZmZzZXQoKSAtIGlucHV0KSAlIDYwID09PSAwO1xufVxuXG5mdW5jdGlvbiBpc0RheWxpZ2h0U2F2aW5nVGltZSAoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCgwKS51dGNPZmZzZXQoKSB8fFxuICAgICAgICB0aGlzLnV0Y09mZnNldCgpID4gdGhpcy5jbG9uZSgpLm1vbnRoKDUpLnV0Y09mZnNldCgpXG4gICAgKTtcbn1cblxuZnVuY3Rpb24gaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkICgpIHtcbiAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX2lzRFNUU2hpZnRlZCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzRFNUU2hpZnRlZDtcbiAgICB9XG5cbiAgICB2YXIgYyA9IHt9O1xuXG4gICAgY29weUNvbmZpZyhjLCB0aGlzKTtcbiAgICBjID0gcHJlcGFyZUNvbmZpZyhjKTtcblxuICAgIGlmIChjLl9hKSB7XG4gICAgICAgIHZhciBvdGhlciA9IGMuX2lzVVRDID8gY3JlYXRlVVRDKGMuX2EpIDogY3JlYXRlTG9jYWwoYy5fYSk7XG4gICAgICAgIHRoaXMuX2lzRFNUU2hpZnRlZCA9IHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICBjb21wYXJlQXJyYXlzKGMuX2EsIG90aGVyLnRvQXJyYXkoKSkgPiAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lzRFNUU2hpZnRlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG59XG5cbmZ1bmN0aW9uIGlzTG9jYWwgKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/ICF0aGlzLl9pc1VUQyA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1V0Y09mZnNldCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5faXNVVEMgOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNVdGMgKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDICYmIHRoaXMuX29mZnNldCA9PT0gMCA6IGZhbHNlO1xufVxuXG4vLyBBU1AuTkVUIGpzb24gZGF0ZSBmb3JtYXQgcmVnZXhcbnZhciBhc3BOZXRSZWdleCA9IC9eKFxcLXxcXCspPyg/OihcXGQqKVsuIF0pPyhcXGQrKVxcOihcXGQrKSg/OlxcOihcXGQrKShcXC5cXGQqKT8pPyQvO1xuXG4vLyBmcm9tIGh0dHA6Ly9kb2NzLmNsb3N1cmUtbGlicmFyeS5nb29nbGVjb2RlLmNvbS9naXQvY2xvc3VyZV9nb29nX2RhdGVfZGF0ZS5qcy5zb3VyY2UuaHRtbFxuLy8gc29tZXdoYXQgbW9yZSBpbiBsaW5lIHdpdGggNC40LjMuMiAyMDA0IHNwZWMsIGJ1dCBhbGxvd3MgZGVjaW1hbCBhbnl3aGVyZVxuLy8gYW5kIGZ1cnRoZXIgbW9kaWZpZWQgdG8gYWxsb3cgZm9yIHN0cmluZ3MgY29udGFpbmluZyBib3RoIHdlZWsgYW5kIGRheVxudmFyIGlzb1JlZ2V4ID0gL14oLXxcXCspP1AoPzooWy0rXT9bMC05LC5dKilZKT8oPzooWy0rXT9bMC05LC5dKilNKT8oPzooWy0rXT9bMC05LC5dKilXKT8oPzooWy0rXT9bMC05LC5dKilEKT8oPzpUKD86KFstK10/WzAtOSwuXSopSCk/KD86KFstK10/WzAtOSwuXSopTSk/KD86KFstK10/WzAtOSwuXSopUyk/KT8kLztcblxuZnVuY3Rpb24gY3JlYXRlRHVyYXRpb24gKGlucHV0LCBrZXkpIHtcbiAgICB2YXIgZHVyYXRpb24gPSBpbnB1dCxcbiAgICAgICAgLy8gbWF0Y2hpbmcgYWdhaW5zdCByZWdleHAgaXMgZXhwZW5zaXZlLCBkbyBpdCBvbiBkZW1hbmRcbiAgICAgICAgbWF0Y2ggPSBudWxsLFxuICAgICAgICBzaWduLFxuICAgICAgICByZXQsXG4gICAgICAgIGRpZmZSZXM7XG5cbiAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkpIHtcbiAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICBtcyA6IGlucHV0Ll9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICBkICA6IGlucHV0Ll9kYXlzLFxuICAgICAgICAgICAgTSAgOiBpbnB1dC5fbW9udGhzXG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkpIHtcbiAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgZHVyYXRpb25ba2V5XSA9IGlucHV0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZHVyYXRpb24ubWlsbGlzZWNvbmRzID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEhKG1hdGNoID0gYXNwTmV0UmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgIHNpZ24gPSAobWF0Y2hbMV0gPT09ICctJykgPyAtMSA6IDE7XG4gICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgeSAgOiAwLFxuICAgICAgICAgICAgZCAgOiB0b0ludChtYXRjaFtEQVRFXSkgICAgICAgICAgICAgICAgICAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgaCAgOiB0b0ludChtYXRjaFtIT1VSXSkgICAgICAgICAgICAgICAgICAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgbSAgOiB0b0ludChtYXRjaFtNSU5VVEVdKSAgICAgICAgICAgICAgICAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgcyAgOiB0b0ludChtYXRjaFtTRUNPTkRdKSAgICAgICAgICAgICAgICAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgbXMgOiB0b0ludChhYnNSb3VuZChtYXRjaFtNSUxMSVNFQ09ORF0gKiAxMDAwKSkgKiBzaWduIC8vIHRoZSBtaWxsaXNlY29uZCBkZWNpbWFsIHBvaW50IGlzIGluY2x1ZGVkIGluIHRoZSBtYXRjaFxuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoISEobWF0Y2ggPSBpc29SZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgc2lnbiA9IChtYXRjaFsxXSA9PT0gJy0nKSA/IC0xIDogKG1hdGNoWzFdID09PSAnKycpID8gMSA6IDE7XG4gICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgeSA6IHBhcnNlSXNvKG1hdGNoWzJdLCBzaWduKSxcbiAgICAgICAgICAgIE0gOiBwYXJzZUlzbyhtYXRjaFszXSwgc2lnbiksXG4gICAgICAgICAgICB3IDogcGFyc2VJc28obWF0Y2hbNF0sIHNpZ24pLFxuICAgICAgICAgICAgZCA6IHBhcnNlSXNvKG1hdGNoWzVdLCBzaWduKSxcbiAgICAgICAgICAgIGggOiBwYXJzZUlzbyhtYXRjaFs2XSwgc2lnbiksXG4gICAgICAgICAgICBtIDogcGFyc2VJc28obWF0Y2hbN10sIHNpZ24pLFxuICAgICAgICAgICAgcyA6IHBhcnNlSXNvKG1hdGNoWzhdLCBzaWduKVxuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZHVyYXRpb24gPT0gbnVsbCkgey8vIGNoZWNrcyBmb3IgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBkdXJhdGlvbiA9PT0gJ29iamVjdCcgJiYgKCdmcm9tJyBpbiBkdXJhdGlvbiB8fCAndG8nIGluIGR1cmF0aW9uKSkge1xuICAgICAgICBkaWZmUmVzID0gbW9tZW50c0RpZmZlcmVuY2UoY3JlYXRlTG9jYWwoZHVyYXRpb24uZnJvbSksIGNyZWF0ZUxvY2FsKGR1cmF0aW9uLnRvKSk7XG5cbiAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgZHVyYXRpb24ubXMgPSBkaWZmUmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgZHVyYXRpb24uTSA9IGRpZmZSZXMubW9udGhzO1xuICAgIH1cblxuICAgIHJldCA9IG5ldyBEdXJhdGlvbihkdXJhdGlvbik7XG5cbiAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkgJiYgaGFzT3duUHJvcChpbnB1dCwgJ19sb2NhbGUnKSkge1xuICAgICAgICByZXQuX2xvY2FsZSA9IGlucHV0Ll9sb2NhbGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbn1cblxuY3JlYXRlRHVyYXRpb24uZm4gPSBEdXJhdGlvbi5wcm90b3R5cGU7XG5jcmVhdGVEdXJhdGlvbi5pbnZhbGlkID0gY3JlYXRlSW52YWxpZCQxO1xuXG5mdW5jdGlvbiBwYXJzZUlzbyAoaW5wLCBzaWduKSB7XG4gICAgLy8gV2UnZCBub3JtYWxseSB1c2Ugfn5pbnAgZm9yIHRoaXMsIGJ1dCB1bmZvcnR1bmF0ZWx5IGl0IGFsc29cbiAgICAvLyBjb252ZXJ0cyBmbG9hdHMgdG8gaW50cy5cbiAgICAvLyBpbnAgbWF5IGJlIHVuZGVmaW5lZCwgc28gY2FyZWZ1bCBjYWxsaW5nIHJlcGxhY2Ugb24gaXQuXG4gICAgdmFyIHJlcyA9IGlucCAmJiBwYXJzZUZsb2F0KGlucC5yZXBsYWNlKCcsJywgJy4nKSk7XG4gICAgLy8gYXBwbHkgc2lnbiB3aGlsZSB3ZSdyZSBhdCBpdFxuICAgIHJldHVybiAoaXNOYU4ocmVzKSA/IDAgOiByZXMpICogc2lnbjtcbn1cblxuZnVuY3Rpb24gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgIHZhciByZXMgPSB7bWlsbGlzZWNvbmRzOiAwLCBtb250aHM6IDB9O1xuXG4gICAgcmVzLm1vbnRocyA9IG90aGVyLm1vbnRoKCkgLSBiYXNlLm1vbnRoKCkgK1xuICAgICAgICAob3RoZXIueWVhcigpIC0gYmFzZS55ZWFyKCkpICogMTI7XG4gICAgaWYgKGJhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKS5pc0FmdGVyKG90aGVyKSkge1xuICAgICAgICAtLXJlcy5tb250aHM7XG4gICAgfVxuXG4gICAgcmVzLm1pbGxpc2Vjb25kcyA9ICtvdGhlciAtICsoYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpKTtcblxuICAgIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIG1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKSB7XG4gICAgdmFyIHJlcztcbiAgICBpZiAoIShiYXNlLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpKSB7XG4gICAgICAgIHJldHVybiB7bWlsbGlzZWNvbmRzOiAwLCBtb250aHM6IDB9O1xuICAgIH1cblxuICAgIG90aGVyID0gY2xvbmVXaXRoT2Zmc2V0KG90aGVyLCBiYXNlKTtcbiAgICBpZiAoYmFzZS5pc0JlZm9yZShvdGhlcikpIHtcbiAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShvdGhlciwgYmFzZSk7XG4gICAgICAgIHJlcy5taWxsaXNlY29uZHMgPSAtcmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgcmVzLm1vbnRocyA9IC1yZXMubW9udGhzO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG59XG5cbi8vIFRPRE86IHJlbW92ZSAnbmFtZScgYXJnIGFmdGVyIGRlcHJlY2F0aW9uIGlzIHJlbW92ZWRcbmZ1bmN0aW9uIGNyZWF0ZUFkZGVyKGRpcmVjdGlvbiwgbmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodmFsLCBwZXJpb2QpIHtcbiAgICAgICAgdmFyIGR1ciwgdG1wO1xuICAgICAgICAvL2ludmVydCB0aGUgYXJndW1lbnRzLCBidXQgY29tcGxhaW4gYWJvdXQgaXRcbiAgICAgICAgaWYgKHBlcmlvZCAhPT0gbnVsbCAmJiAhaXNOYU4oK3BlcmlvZCkpIHtcbiAgICAgICAgICAgIGRlcHJlY2F0ZVNpbXBsZShuYW1lLCAnbW9tZW50KCkuJyArIG5hbWUgICsgJyhwZXJpb2QsIG51bWJlcikgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBtb21lbnQoKS4nICsgbmFtZSArICcobnVtYmVyLCBwZXJpb2QpLiAnICtcbiAgICAgICAgICAgICdTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9hZGQtaW52ZXJ0ZWQtcGFyYW0vIGZvciBtb3JlIGluZm8uJyk7XG4gICAgICAgICAgICB0bXAgPSB2YWw7IHZhbCA9IHBlcmlvZDsgcGVyaW9kID0gdG1wO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsID0gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgPyArdmFsIDogdmFsO1xuICAgICAgICBkdXIgPSBjcmVhdGVEdXJhdGlvbih2YWwsIHBlcmlvZCk7XG4gICAgICAgIGFkZFN1YnRyYWN0KHRoaXMsIGR1ciwgZGlyZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gYWRkU3VidHJhY3QgKG1vbSwgZHVyYXRpb24sIGlzQWRkaW5nLCB1cGRhdGVPZmZzZXQpIHtcbiAgICB2YXIgbWlsbGlzZWNvbmRzID0gZHVyYXRpb24uX21pbGxpc2Vjb25kcyxcbiAgICAgICAgZGF5cyA9IGFic1JvdW5kKGR1cmF0aW9uLl9kYXlzKSxcbiAgICAgICAgbW9udGhzID0gYWJzUm91bmQoZHVyYXRpb24uX21vbnRocyk7XG5cbiAgICBpZiAoIW1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgLy8gTm8gb3BcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHVwZGF0ZU9mZnNldCA9IHVwZGF0ZU9mZnNldCA9PSBudWxsID8gdHJ1ZSA6IHVwZGF0ZU9mZnNldDtcblxuICAgIGlmIChtb250aHMpIHtcbiAgICAgICAgc2V0TW9udGgobW9tLCBnZXQobW9tLCAnTW9udGgnKSArIG1vbnRocyAqIGlzQWRkaW5nKTtcbiAgICB9XG4gICAgaWYgKGRheXMpIHtcbiAgICAgICAgc2V0JDEobW9tLCAnRGF0ZScsIGdldChtb20sICdEYXRlJykgKyBkYXlzICogaXNBZGRpbmcpO1xuICAgIH1cbiAgICBpZiAobWlsbGlzZWNvbmRzKSB7XG4gICAgICAgIG1vbS5fZC5zZXRUaW1lKG1vbS5fZC52YWx1ZU9mKCkgKyBtaWxsaXNlY29uZHMgKiBpc0FkZGluZyk7XG4gICAgfVxuICAgIGlmICh1cGRhdGVPZmZzZXQpIHtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KG1vbSwgZGF5cyB8fCBtb250aHMpO1xuICAgIH1cbn1cblxudmFyIGFkZCAgICAgID0gY3JlYXRlQWRkZXIoMSwgJ2FkZCcpO1xudmFyIHN1YnRyYWN0ID0gY3JlYXRlQWRkZXIoLTEsICdzdWJ0cmFjdCcpO1xuXG5mdW5jdGlvbiBnZXRDYWxlbmRhckZvcm1hdChteU1vbWVudCwgbm93KSB7XG4gICAgdmFyIGRpZmYgPSBteU1vbWVudC5kaWZmKG5vdywgJ2RheXMnLCB0cnVlKTtcbiAgICByZXR1cm4gZGlmZiA8IC02ID8gJ3NhbWVFbHNlJyA6XG4gICAgICAgICAgICBkaWZmIDwgLTEgPyAnbGFzdFdlZWsnIDpcbiAgICAgICAgICAgIGRpZmYgPCAwID8gJ2xhc3REYXknIDpcbiAgICAgICAgICAgIGRpZmYgPCAxID8gJ3NhbWVEYXknIDpcbiAgICAgICAgICAgIGRpZmYgPCAyID8gJ25leHREYXknIDpcbiAgICAgICAgICAgIGRpZmYgPCA3ID8gJ25leHRXZWVrJyA6ICdzYW1lRWxzZSc7XG59XG5cbmZ1bmN0aW9uIGNhbGVuZGFyJDEgKHRpbWUsIGZvcm1hdHMpIHtcbiAgICAvLyBXZSB3YW50IHRvIGNvbXBhcmUgdGhlIHN0YXJ0IG9mIHRvZGF5LCB2cyB0aGlzLlxuICAgIC8vIEdldHRpbmcgc3RhcnQtb2YtdG9kYXkgZGVwZW5kcyBvbiB3aGV0aGVyIHdlJ3JlIGxvY2FsL3V0Yy9vZmZzZXQgb3Igbm90LlxuICAgIHZhciBub3cgPSB0aW1lIHx8IGNyZWF0ZUxvY2FsKCksXG4gICAgICAgIHNvZCA9IGNsb25lV2l0aE9mZnNldChub3csIHRoaXMpLnN0YXJ0T2YoJ2RheScpLFxuICAgICAgICBmb3JtYXQgPSBob29rcy5jYWxlbmRhckZvcm1hdCh0aGlzLCBzb2QpIHx8ICdzYW1lRWxzZSc7XG5cbiAgICB2YXIgb3V0cHV0ID0gZm9ybWF0cyAmJiAoaXNGdW5jdGlvbihmb3JtYXRzW2Zvcm1hdF0pID8gZm9ybWF0c1tmb3JtYXRdLmNhbGwodGhpcywgbm93KSA6IGZvcm1hdHNbZm9ybWF0XSk7XG5cbiAgICByZXR1cm4gdGhpcy5mb3JtYXQob3V0cHV0IHx8IHRoaXMubG9jYWxlRGF0YSgpLmNhbGVuZGFyKGZvcm1hdCwgdGhpcywgY3JlYXRlTG9jYWwobm93KSkpO1xufVxuXG5mdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgcmV0dXJuIG5ldyBNb21lbnQodGhpcyk7XG59XG5cbmZ1bmN0aW9uIGlzQWZ0ZXIgKGlucHV0LCB1bml0cykge1xuICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyghaXNVbmRlZmluZWQodW5pdHMpID8gdW5pdHMgOiAnbWlsbGlzZWNvbmQnKTtcbiAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpID4gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsSW5wdXQudmFsdWVPZigpIDwgdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpLnZhbHVlT2YoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzQmVmb3JlIChpbnB1dCwgdW5pdHMpIHtcbiAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHMoIWlzVW5kZWZpbmVkKHVuaXRzKSA/IHVuaXRzIDogJ21pbGxpc2Vjb25kJyk7XG4gICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA8IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkuZW5kT2YodW5pdHMpLnZhbHVlT2YoKSA8IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaXNCZXR3ZWVuIChmcm9tLCB0bywgdW5pdHMsIGluY2x1c2l2aXR5KSB7XG4gICAgaW5jbHVzaXZpdHkgPSBpbmNsdXNpdml0eSB8fCAnKCknO1xuICAgIHJldHVybiAoaW5jbHVzaXZpdHlbMF0gPT09ICcoJyA/IHRoaXMuaXNBZnRlcihmcm9tLCB1bml0cykgOiAhdGhpcy5pc0JlZm9yZShmcm9tLCB1bml0cykpICYmXG4gICAgICAgIChpbmNsdXNpdml0eVsxXSA9PT0gJyknID8gdGhpcy5pc0JlZm9yZSh0bywgdW5pdHMpIDogIXRoaXMuaXNBZnRlcih0bywgdW5pdHMpKTtcbn1cblxuZnVuY3Rpb24gaXNTYW1lIChpbnB1dCwgdW5pdHMpIHtcbiAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpLFxuICAgICAgICBpbnB1dE1zO1xuICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMgfHwgJ21pbGxpc2Vjb25kJyk7XG4gICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA9PT0gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaW5wdXRNcyA9IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpLnZhbHVlT2YoKSA8PSBpbnB1dE1zICYmIGlucHV0TXMgPD0gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc1NhbWVPckFmdGVyIChpbnB1dCwgdW5pdHMpIHtcbiAgICByZXR1cm4gdGhpcy5pc1NhbWUoaW5wdXQsIHVuaXRzKSB8fCB0aGlzLmlzQWZ0ZXIoaW5wdXQsdW5pdHMpO1xufVxuXG5mdW5jdGlvbiBpc1NhbWVPckJlZm9yZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0JlZm9yZShpbnB1dCx1bml0cyk7XG59XG5cbmZ1bmN0aW9uIGRpZmYgKGlucHV0LCB1bml0cywgYXNGbG9hdCkge1xuICAgIHZhciB0aGF0LFxuICAgICAgICB6b25lRGVsdGEsXG4gICAgICAgIG91dHB1dDtcblxuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG5cbiAgICB0aGF0ID0gY2xvbmVXaXRoT2Zmc2V0KGlucHV0LCB0aGlzKTtcblxuICAgIGlmICghdGhhdC5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG5cbiAgICB6b25lRGVsdGEgPSAodGhhdC51dGNPZmZzZXQoKSAtIHRoaXMudXRjT2Zmc2V0KCkpICogNmU0O1xuXG4gICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG5cbiAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgIGNhc2UgJ3llYXInOiBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCkgLyAxMjsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ21vbnRoJzogb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpOyBicmVhaztcbiAgICAgICAgY2FzZSAncXVhcnRlcic6IG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KSAvIDM7IGJyZWFrO1xuICAgICAgICBjYXNlICdzZWNvbmQnOiBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gMWUzOyBicmVhazsgLy8gMTAwMFxuICAgICAgICBjYXNlICdtaW51dGUnOiBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gNmU0OyBicmVhazsgLy8gMTAwMCAqIDYwXG4gICAgICAgIGNhc2UgJ2hvdXInOiBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gMzZlNTsgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwXG4gICAgICAgIGNhc2UgJ2RheSc6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCAtIHpvbmVEZWx0YSkgLyA4NjRlNTsgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwICogMjQsIG5lZ2F0ZSBkc3RcbiAgICAgICAgY2FzZSAnd2Vlayc6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCAtIHpvbmVEZWx0YSkgLyA2MDQ4ZTU7IGJyZWFrOyAvLyAxMDAwICogNjAgKiA2MCAqIDI0ICogNywgbmVnYXRlIGRzdFxuICAgICAgICBkZWZhdWx0OiBvdXRwdXQgPSB0aGlzIC0gdGhhdDtcbiAgICB9XG5cbiAgICByZXR1cm4gYXNGbG9hdCA/IG91dHB1dCA6IGFic0Zsb29yKG91dHB1dCk7XG59XG5cbmZ1bmN0aW9uIG1vbnRoRGlmZiAoYSwgYikge1xuICAgIC8vIGRpZmZlcmVuY2UgaW4gbW9udGhzXG4gICAgdmFyIHdob2xlTW9udGhEaWZmID0gKChiLnllYXIoKSAtIGEueWVhcigpKSAqIDEyKSArIChiLm1vbnRoKCkgLSBhLm1vbnRoKCkpLFxuICAgICAgICAvLyBiIGlzIGluIChhbmNob3IgLSAxIG1vbnRoLCBhbmNob3IgKyAxIG1vbnRoKVxuICAgICAgICBhbmNob3IgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmLCAnbW9udGhzJyksXG4gICAgICAgIGFuY2hvcjIsIGFkanVzdDtcblxuICAgIGlmIChiIC0gYW5jaG9yIDwgMCkge1xuICAgICAgICBhbmNob3IyID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiAtIDEsICdtb250aHMnKTtcbiAgICAgICAgLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcbiAgICAgICAgYWRqdXN0ID0gKGIgLSBhbmNob3IpIC8gKGFuY2hvciAtIGFuY2hvcjIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmICsgMSwgJ21vbnRocycpO1xuICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICBhZGp1c3QgPSAoYiAtIGFuY2hvcikgLyAoYW5jaG9yMiAtIGFuY2hvcik7XG4gICAgfVxuXG4gICAgLy9jaGVjayBmb3IgbmVnYXRpdmUgemVybywgcmV0dXJuIHplcm8gaWYgbmVnYXRpdmUgemVyb1xuICAgIHJldHVybiAtKHdob2xlTW9udGhEaWZmICsgYWRqdXN0KSB8fCAwO1xufVxuXG5ob29rcy5kZWZhdWx0Rm9ybWF0ID0gJ1lZWVktTU0tRERUSEg6bW06c3NaJztcbmhvb2tzLmRlZmF1bHRGb3JtYXRVdGMgPSAnWVlZWS1NTS1ERFRISDptbTpzc1taXSc7XG5cbmZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmxvY2FsZSgnZW4nKS5mb3JtYXQoJ2RkZCBNTU0gREQgWVlZWSBISDptbTpzcyBbR01UXVpaJyk7XG59XG5cbmZ1bmN0aW9uIHRvSVNPU3RyaW5nKGtlZXBPZmZzZXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgdXRjID0ga2VlcE9mZnNldCAhPT0gdHJ1ZTtcbiAgICB2YXIgbSA9IHV0YyA/IHRoaXMuY2xvbmUoKS51dGMoKSA6IHRoaXM7XG4gICAgaWYgKG0ueWVhcigpIDwgMCB8fCBtLnllYXIoKSA+IDk5OTkpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChtLCB1dGMgPyAnWVlZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyA6ICdZWVlZWVktTU0tRERbVF1ISDptbTpzcy5TU1NaJyk7XG4gICAgfVxuICAgIGlmIChpc0Z1bmN0aW9uKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKSkge1xuICAgICAgICAvLyBuYXRpdmUgaW1wbGVtZW50YXRpb24gaXMgfjUweCBmYXN0ZXIsIHVzZSBpdCB3aGVuIHdlIGNhblxuICAgICAgICBpZiAodXRjKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50b0RhdGUoKS50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpICsgdGhpcy51dGNPZmZzZXQoKSAqIDYwICogMTAwMCkudG9JU09TdHJpbmcoKS5yZXBsYWNlKCdaJywgZm9ybWF0TW9tZW50KG0sICdaJykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmb3JtYXRNb21lbnQobSwgdXRjID8gJ1lZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nIDogJ1lZWVktTU0tRERbVF1ISDptbTpzcy5TU1NaJyk7XG59XG5cbi8qKlxuICogUmV0dXJuIGEgaHVtYW4gcmVhZGFibGUgcmVwcmVzZW50YXRpb24gb2YgYSBtb21lbnQgdGhhdCBjYW5cbiAqIGFsc28gYmUgZXZhbHVhdGVkIHRvIGdldCBhIG5ldyBtb21lbnQgd2hpY2ggaXMgdGhlIHNhbWVcbiAqXG4gKiBAbGluayBodHRwczovL25vZGVqcy5vcmcvZGlzdC9sYXRlc3QvZG9jcy9hcGkvdXRpbC5odG1sI3V0aWxfY3VzdG9tX2luc3BlY3RfZnVuY3Rpb25fb25fb2JqZWN0c1xuICovXG5mdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiAnbW9tZW50LmludmFsaWQoLyogJyArIHRoaXMuX2kgKyAnICovKSc7XG4gICAgfVxuICAgIHZhciBmdW5jID0gJ21vbWVudCc7XG4gICAgdmFyIHpvbmUgPSAnJztcbiAgICBpZiAoIXRoaXMuaXNMb2NhbCgpKSB7XG4gICAgICAgIGZ1bmMgPSB0aGlzLnV0Y09mZnNldCgpID09PSAwID8gJ21vbWVudC51dGMnIDogJ21vbWVudC5wYXJzZVpvbmUnO1xuICAgICAgICB6b25lID0gJ1onO1xuICAgIH1cbiAgICB2YXIgcHJlZml4ID0gJ1snICsgZnVuYyArICcoXCJdJztcbiAgICB2YXIgeWVhciA9ICgwIDw9IHRoaXMueWVhcigpICYmIHRoaXMueWVhcigpIDw9IDk5OTkpID8gJ1lZWVknIDogJ1lZWVlZWSc7XG4gICAgdmFyIGRhdGV0aW1lID0gJy1NTS1ERFtUXUhIOm1tOnNzLlNTUyc7XG4gICAgdmFyIHN1ZmZpeCA9IHpvbmUgKyAnW1wiKV0nO1xuXG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0KHByZWZpeCArIHllYXIgKyBkYXRldGltZSArIHN1ZmZpeCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdCAoaW5wdXRTdHJpbmcpIHtcbiAgICBpZiAoIWlucHV0U3RyaW5nKSB7XG4gICAgICAgIGlucHV0U3RyaW5nID0gdGhpcy5pc1V0YygpID8gaG9va3MuZGVmYXVsdEZvcm1hdFV0YyA6IGhvb2tzLmRlZmF1bHRGb3JtYXQ7XG4gICAgfVxuICAgIHZhciBvdXRwdXQgPSBmb3JtYXRNb21lbnQodGhpcywgaW5wdXRTdHJpbmcpO1xuICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5wb3N0Zm9ybWF0KG91dHB1dCk7XG59XG5cbmZ1bmN0aW9uIGZyb20gKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8XG4gICAgICAgICAgICAgY3JlYXRlTG9jYWwodGltZSkuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oe3RvOiB0aGlzLCBmcm9tOiB0aW1lfSkubG9jYWxlKHRoaXMubG9jYWxlKCkpLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZyb21Ob3cgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICByZXR1cm4gdGhpcy5mcm9tKGNyZWF0ZUxvY2FsKCksIHdpdGhvdXRTdWZmaXgpO1xufVxuXG5mdW5jdGlvbiB0byAodGltZSwgd2l0aG91dFN1ZmZpeCkge1xuICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgKChpc01vbWVudCh0aW1lKSAmJiB0aW1lLmlzVmFsaWQoKSkgfHxcbiAgICAgICAgICAgICBjcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih7ZnJvbTogdGhpcywgdG86IHRpbWV9KS5sb2NhbGUodGhpcy5sb2NhbGUoKSkuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdG9Ob3cgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICByZXR1cm4gdGhpcy50byhjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbn1cblxuLy8gSWYgcGFzc2VkIGEgbG9jYWxlIGtleSwgaXQgd2lsbCBzZXQgdGhlIGxvY2FsZSBmb3IgdGhpc1xuLy8gaW5zdGFuY2UuICBPdGhlcndpc2UsIGl0IHdpbGwgcmV0dXJuIHRoZSBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8gdmFyaWFibGVzIGZvciB0aGlzIGluc3RhbmNlLlxuZnVuY3Rpb24gbG9jYWxlIChrZXkpIHtcbiAgICB2YXIgbmV3TG9jYWxlRGF0YTtcblxuICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlLl9hYmJyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld0xvY2FsZURhdGEgPSBnZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgaWYgKG5ld0xvY2FsZURhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fbG9jYWxlID0gbmV3TG9jYWxlRGF0YTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5cbnZhciBsYW5nID0gZGVwcmVjYXRlKFxuICAgICdtb21lbnQoKS5sYW5nKCkgaXMgZGVwcmVjYXRlZC4gSW5zdGVhZCwgdXNlIG1vbWVudCgpLmxvY2FsZURhdGEoKSB0byBnZXQgdGhlIGxhbmd1YWdlIGNvbmZpZ3VyYXRpb24uIFVzZSBtb21lbnQoKS5sb2NhbGUoKSB0byBjaGFuZ2UgbGFuZ3VhZ2VzLicsXG4gICAgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZShrZXkpO1xuICAgICAgICB9XG4gICAgfVxuKTtcblxuZnVuY3Rpb24gbG9jYWxlRGF0YSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xvY2FsZTtcbn1cblxuZnVuY3Rpb24gc3RhcnRPZiAodW5pdHMpIHtcbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAvLyB0aGUgZm9sbG93aW5nIHN3aXRjaCBpbnRlbnRpb25hbGx5IG9taXRzIGJyZWFrIGtleXdvcmRzXG4gICAgLy8gdG8gdXRpbGl6ZSBmYWxsaW5nIHRocm91Z2ggdGhlIGNhc2VzLlxuICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICB0aGlzLm1vbnRoKDApO1xuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgdGhpcy5kYXRlKDEpO1xuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgY2FzZSAnaXNvV2Vlayc6XG4gICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgdGhpcy5ob3VycygwKTtcbiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICB0aGlzLm1pbnV0ZXMoMCk7XG4gICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICB0aGlzLnNlY29uZHMoMCk7XG4gICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICB0aGlzLm1pbGxpc2Vjb25kcygwKTtcbiAgICB9XG5cbiAgICAvLyB3ZWVrcyBhcmUgYSBzcGVjaWFsIGNhc2VcbiAgICBpZiAodW5pdHMgPT09ICd3ZWVrJykge1xuICAgICAgICB0aGlzLndlZWtkYXkoMCk7XG4gICAgfVxuICAgIGlmICh1bml0cyA9PT0gJ2lzb1dlZWsnKSB7XG4gICAgICAgIHRoaXMuaXNvV2Vla2RheSgxKTtcbiAgICB9XG5cbiAgICAvLyBxdWFydGVycyBhcmUgYWxzbyBzcGVjaWFsXG4gICAgaWYgKHVuaXRzID09PSAncXVhcnRlcicpIHtcbiAgICAgICAgdGhpcy5tb250aChNYXRoLmZsb29yKHRoaXMubW9udGgoKSAvIDMpICogMyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGVuZE9mICh1bml0cykge1xuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgIGlmICh1bml0cyA9PT0gdW5kZWZpbmVkIHx8IHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vICdkYXRlJyBpcyBhbiBhbGlhcyBmb3IgJ2RheScsIHNvIGl0IHNob3VsZCBiZSBjb25zaWRlcmVkIGFzIHN1Y2guXG4gICAgaWYgKHVuaXRzID09PSAnZGF0ZScpIHtcbiAgICAgICAgdW5pdHMgPSAnZGF5JztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdGFydE9mKHVuaXRzKS5hZGQoMSwgKHVuaXRzID09PSAnaXNvV2VlaycgPyAnd2VlaycgOiB1bml0cykpLnN1YnRyYWN0KDEsICdtcycpO1xufVxuXG5mdW5jdGlvbiB2YWx1ZU9mICgpIHtcbiAgICByZXR1cm4gdGhpcy5fZC52YWx1ZU9mKCkgLSAoKHRoaXMuX29mZnNldCB8fCAwKSAqIDYwMDAwKTtcbn1cblxuZnVuY3Rpb24gdW5peCAoKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy52YWx1ZU9mKCkgLyAxMDAwKTtcbn1cblxuZnVuY3Rpb24gdG9EYXRlICgpIHtcbiAgICByZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkpO1xufVxuXG5mdW5jdGlvbiB0b0FycmF5ICgpIHtcbiAgICB2YXIgbSA9IHRoaXM7XG4gICAgcmV0dXJuIFttLnllYXIoKSwgbS5tb250aCgpLCBtLmRhdGUoKSwgbS5ob3VyKCksIG0ubWludXRlKCksIG0uc2Vjb25kKCksIG0ubWlsbGlzZWNvbmQoKV07XG59XG5cbmZ1bmN0aW9uIHRvT2JqZWN0ICgpIHtcbiAgICB2YXIgbSA9IHRoaXM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeWVhcnM6IG0ueWVhcigpLFxuICAgICAgICBtb250aHM6IG0ubW9udGgoKSxcbiAgICAgICAgZGF0ZTogbS5kYXRlKCksXG4gICAgICAgIGhvdXJzOiBtLmhvdXJzKCksXG4gICAgICAgIG1pbnV0ZXM6IG0ubWludXRlcygpLFxuICAgICAgICBzZWNvbmRzOiBtLnNlY29uZHMoKSxcbiAgICAgICAgbWlsbGlzZWNvbmRzOiBtLm1pbGxpc2Vjb25kcygpXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICAvLyBuZXcgRGF0ZShOYU4pLnRvSlNPTigpID09PSBudWxsXG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy50b0lTT1N0cmluZygpIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZCQyICgpIHtcbiAgICByZXR1cm4gaXNWYWxpZCh0aGlzKTtcbn1cblxuZnVuY3Rpb24gcGFyc2luZ0ZsYWdzICgpIHtcbiAgICByZXR1cm4gZXh0ZW5kKHt9LCBnZXRQYXJzaW5nRmxhZ3ModGhpcykpO1xufVxuXG5mdW5jdGlvbiBpbnZhbGlkQXQgKCkge1xuICAgIHJldHVybiBnZXRQYXJzaW5nRmxhZ3ModGhpcykub3ZlcmZsb3c7XG59XG5cbmZ1bmN0aW9uIGNyZWF0aW9uRGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpbnB1dDogdGhpcy5faSxcbiAgICAgICAgZm9ybWF0OiB0aGlzLl9mLFxuICAgICAgICBsb2NhbGU6IHRoaXMuX2xvY2FsZSxcbiAgICAgICAgaXNVVEM6IHRoaXMuX2lzVVRDLFxuICAgICAgICBzdHJpY3Q6IHRoaXMuX3N0cmljdFxuICAgIH07XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oMCwgWydnZycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMud2Vla1llYXIoKSAlIDEwMDtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbigwLCBbJ0dHJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5pc29XZWVrWWVhcigpICUgMTAwO1xufSk7XG5cbmZ1bmN0aW9uIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4gKHRva2VuLCBnZXR0ZXIpIHtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbdG9rZW4sIHRva2VuLmxlbmd0aF0sIDAsIGdldHRlcik7XG59XG5cbmFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2cnLCAgICAgJ3dlZWtZZWFyJyk7XG5hZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnZycsICAgICd3ZWVrWWVhcicpO1xuYWRkV2Vla1llYXJGb3JtYXRUb2tlbignR0dHRycsICAnaXNvV2Vla1llYXInKTtcbmFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0dHJywgJ2lzb1dlZWtZZWFyJyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCd3ZWVrWWVhcicsICdnZycpO1xuYWRkVW5pdEFsaWFzKCdpc29XZWVrWWVhcicsICdHRycpO1xuXG4vLyBQUklPUklUWVxuXG5hZGRVbml0UHJpb3JpdHkoJ3dlZWtZZWFyJywgMSk7XG5hZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWtZZWFyJywgMSk7XG5cblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdHJywgICAgICBtYXRjaFNpZ25lZCk7XG5hZGRSZWdleFRva2VuKCdnJywgICAgICBtYXRjaFNpZ25lZCk7XG5hZGRSZWdleFRva2VuKCdHRycsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdnZycsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdHR0dHJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG5hZGRSZWdleFRva2VuKCdnZ2dnJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG5hZGRSZWdleFRva2VuKCdHR0dHRycsICBtYXRjaDF0bzYsIG1hdGNoNik7XG5hZGRSZWdleFRva2VuKCdnZ2dnZycsICBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbmFkZFdlZWtQYXJzZVRva2VuKFsnZ2dnZycsICdnZ2dnZycsICdHR0dHJywgJ0dHR0dHJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDIpXSA9IHRvSW50KGlucHV0KTtcbn0pO1xuXG5hZGRXZWVrUGFyc2VUb2tlbihbJ2dnJywgJ0dHJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgIHdlZWtbdG9rZW5dID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xufSk7XG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXIgKGlucHV0KSB7XG4gICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwodGhpcyxcbiAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgdGhpcy53ZWVrKCksXG4gICAgICAgICAgICB0aGlzLndlZWtkYXkoKSxcbiAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdyxcbiAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRveSk7XG59XG5cbmZ1bmN0aW9uIGdldFNldElTT1dlZWtZZWFyIChpbnB1dCkge1xuICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKHRoaXMsXG4gICAgICAgICAgICBpbnB1dCwgdGhpcy5pc29XZWVrKCksIHRoaXMuaXNvV2Vla2RheSgpLCAxLCA0KTtcbn1cblxuZnVuY3Rpb24gZ2V0SVNPV2Vla3NJblllYXIgKCkge1xuICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgMSwgNCk7XG59XG5cbmZ1bmN0aW9uIGdldFdlZWtzSW5ZZWFyICgpIHtcbiAgICB2YXIgd2Vla0luZm8gPSB0aGlzLmxvY2FsZURhdGEoKS5fd2VlaztcbiAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIHdlZWtJbmZvLmRvdywgd2Vla0luZm8uZG95KTtcbn1cblxuZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXJIZWxwZXIoaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgdmFyIHdlZWtzVGFyZ2V0O1xuICAgIGlmIChpbnB1dCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKHRoaXMsIGRvdywgZG95KS55ZWFyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHdlZWtzVGFyZ2V0ID0gd2Vla3NJblllYXIoaW5wdXQsIGRvdywgZG95KTtcbiAgICAgICAgaWYgKHdlZWsgPiB3ZWVrc1RhcmdldCkge1xuICAgICAgICAgICAgd2VlayA9IHdlZWtzVGFyZ2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRXZWVrQWxsLmNhbGwodGhpcywgaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldFdlZWtBbGwod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgdmFyIGRheU9mWWVhckRhdGEgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSxcbiAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoZGF5T2ZZZWFyRGF0YS55ZWFyLCAwLCBkYXlPZlllYXJEYXRhLmRheU9mWWVhcik7XG5cbiAgICB0aGlzLnllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpKTtcbiAgICB0aGlzLm1vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSk7XG4gICAgdGhpcy5kYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpKTtcbiAgICByZXR1cm4gdGhpcztcbn1cblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignUScsIDAsICdRbycsICdxdWFydGVyJyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdxdWFydGVyJywgJ1EnKTtcblxuLy8gUFJJT1JJVFlcblxuYWRkVW5pdFByaW9yaXR5KCdxdWFydGVyJywgNyk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignUScsIG1hdGNoMSk7XG5hZGRQYXJzZVRva2VuKCdRJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W01PTlRIXSA9ICh0b0ludChpbnB1dCkgLSAxKSAqIDM7XG59KTtcblxuLy8gTU9NRU5UU1xuXG5mdW5jdGlvbiBnZXRTZXRRdWFydGVyIChpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gTWF0aC5jZWlsKCh0aGlzLm1vbnRoKCkgKyAxKSAvIDMpIDogdGhpcy5tb250aCgoaW5wdXQgLSAxKSAqIDMgKyB0aGlzLm1vbnRoKCkgJSAzKTtcbn1cblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignRCcsIFsnREQnLCAyXSwgJ0RvJywgJ2RhdGUnKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ2RhdGUnLCAnRCcpO1xuXG4vLyBQUklPUk9JVFlcbmFkZFVuaXRQcmlvcml0eSgnZGF0ZScsIDkpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ0QnLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ0REJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignRG8nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICByZXR1cm4gaXNTdHJpY3QgP1xuICAgICAgKGxvY2FsZS5fZGF5T2ZNb250aE9yZGluYWxQYXJzZSB8fCBsb2NhbGUuX29yZGluYWxQYXJzZSkgOlxuICAgICAgbG9jYWxlLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudDtcbn0pO1xuXG5hZGRQYXJzZVRva2VuKFsnRCcsICdERCddLCBEQVRFKTtcbmFkZFBhcnNlVG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W0RBVEVdID0gdG9JbnQoaW5wdXQubWF0Y2gobWF0Y2gxdG8yKVswXSk7XG59KTtcblxuLy8gTU9NRU5UU1xuXG52YXIgZ2V0U2V0RGF5T2ZNb250aCA9IG1ha2VHZXRTZXQoJ0RhdGUnLCB0cnVlKTtcblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignREREJywgWydEREREJywgM10sICdERERvJywgJ2RheU9mWWVhcicpO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygnZGF5T2ZZZWFyJywgJ0RERCcpO1xuXG4vLyBQUklPUklUWVxuYWRkVW5pdFByaW9yaXR5KCdkYXlPZlllYXInLCA0KTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdEREQnLCAgbWF0Y2gxdG8zKTtcbmFkZFJlZ2V4VG9rZW4oJ0REREQnLCBtYXRjaDMpO1xuYWRkUGFyc2VUb2tlbihbJ0RERCcsICdEREREJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdG9JbnQoaW5wdXQpO1xufSk7XG5cbi8vIEhFTFBFUlNcblxuLy8gTU9NRU5UU1xuXG5mdW5jdGlvbiBnZXRTZXREYXlPZlllYXIgKGlucHV0KSB7XG4gICAgdmFyIGRheU9mWWVhciA9IE1hdGgucm91bmQoKHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKSAtIHRoaXMuY2xvbmUoKS5zdGFydE9mKCd5ZWFyJykpIC8gODY0ZTUpICsgMTtcbiAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IGRheU9mWWVhciA6IHRoaXMuYWRkKChpbnB1dCAtIGRheU9mWWVhciksICdkJyk7XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ20nLCBbJ21tJywgMl0sIDAsICdtaW51dGUnKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ21pbnV0ZScsICdtJyk7XG5cbi8vIFBSSU9SSVRZXG5cbmFkZFVuaXRQcmlvcml0eSgnbWludXRlJywgMTQpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ20nLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ21tJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUGFyc2VUb2tlbihbJ20nLCAnbW0nXSwgTUlOVVRFKTtcblxuLy8gTU9NRU5UU1xuXG52YXIgZ2V0U2V0TWludXRlID0gbWFrZUdldFNldCgnTWludXRlcycsIGZhbHNlKTtcblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbigncycsIFsnc3MnLCAyXSwgMCwgJ3NlY29uZCcpO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygnc2Vjb25kJywgJ3MnKTtcblxuLy8gUFJJT1JJVFlcblxuYWRkVW5pdFByaW9yaXR5KCdzZWNvbmQnLCAxNSk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbigncycsICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignc3MnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRQYXJzZVRva2VuKFsncycsICdzcyddLCBTRUNPTkQpO1xuXG4vLyBNT01FTlRTXG5cbnZhciBnZXRTZXRTZWNvbmQgPSBtYWtlR2V0U2V0KCdTZWNvbmRzJywgZmFsc2UpO1xuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdTJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMDApO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKDAsIFsnU1MnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMCk7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1MnLCAzXSwgMCwgJ21pbGxpc2Vjb25kJyk7XG5hZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1MnLCA0XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDtcbn0pO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTUycsIDVdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDtcbn0pO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1MnLCA2XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwO1xufSk7XG5hZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1MnLCA3XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDtcbn0pO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTUycsIDhdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwMDtcbn0pO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTU1MnLCA5XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDAwO1xufSk7XG5cblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ21pbGxpc2Vjb25kJywgJ21zJyk7XG5cbi8vIFBSSU9SSVRZXG5cbmFkZFVuaXRQcmlvcml0eSgnbWlsbGlzZWNvbmQnLCAxNik7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignUycsICAgIG1hdGNoMXRvMywgbWF0Y2gxKTtcbmFkZFJlZ2V4VG9rZW4oJ1NTJywgICBtYXRjaDF0bzMsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdTU1MnLCAgbWF0Y2gxdG8zLCBtYXRjaDMpO1xuXG52YXIgdG9rZW47XG5mb3IgKHRva2VuID0gJ1NTU1MnOyB0b2tlbi5sZW5ndGggPD0gOTsgdG9rZW4gKz0gJ1MnKSB7XG4gICAgYWRkUmVnZXhUb2tlbih0b2tlbiwgbWF0Y2hVbnNpZ25lZCk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTXMoaW5wdXQsIGFycmF5KSB7XG4gICAgYXJyYXlbTUlMTElTRUNPTkRdID0gdG9JbnQoKCcwLicgKyBpbnB1dCkgKiAxMDAwKTtcbn1cblxuZm9yICh0b2tlbiA9ICdTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgIGFkZFBhcnNlVG9rZW4odG9rZW4sIHBhcnNlTXMpO1xufVxuLy8gTU9NRU5UU1xuXG52YXIgZ2V0U2V0TWlsbGlzZWNvbmQgPSBtYWtlR2V0U2V0KCdNaWxsaXNlY29uZHMnLCBmYWxzZSk7XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ3onLCAgMCwgMCwgJ3pvbmVBYmJyJyk7XG5hZGRGb3JtYXRUb2tlbignenonLCAwLCAwLCAnem9uZU5hbWUnKTtcblxuLy8gTU9NRU5UU1xuXG5mdW5jdGlvbiBnZXRab25lQWJiciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gJ1VUQycgOiAnJztcbn1cblxuZnVuY3Rpb24gZ2V0Wm9uZU5hbWUgKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZScgOiAnJztcbn1cblxudmFyIHByb3RvID0gTW9tZW50LnByb3RvdHlwZTtcblxucHJvdG8uYWRkICAgICAgICAgICAgICAgPSBhZGQ7XG5wcm90by5jYWxlbmRhciAgICAgICAgICA9IGNhbGVuZGFyJDE7XG5wcm90by5jbG9uZSAgICAgICAgICAgICA9IGNsb25lO1xucHJvdG8uZGlmZiAgICAgICAgICAgICAgPSBkaWZmO1xucHJvdG8uZW5kT2YgICAgICAgICAgICAgPSBlbmRPZjtcbnByb3RvLmZvcm1hdCAgICAgICAgICAgID0gZm9ybWF0O1xucHJvdG8uZnJvbSAgICAgICAgICAgICAgPSBmcm9tO1xucHJvdG8uZnJvbU5vdyAgICAgICAgICAgPSBmcm9tTm93O1xucHJvdG8udG8gICAgICAgICAgICAgICAgPSB0bztcbnByb3RvLnRvTm93ICAgICAgICAgICAgID0gdG9Ob3c7XG5wcm90by5nZXQgICAgICAgICAgICAgICA9IHN0cmluZ0dldDtcbnByb3RvLmludmFsaWRBdCAgICAgICAgID0gaW52YWxpZEF0O1xucHJvdG8uaXNBZnRlciAgICAgICAgICAgPSBpc0FmdGVyO1xucHJvdG8uaXNCZWZvcmUgICAgICAgICAgPSBpc0JlZm9yZTtcbnByb3RvLmlzQmV0d2VlbiAgICAgICAgID0gaXNCZXR3ZWVuO1xucHJvdG8uaXNTYW1lICAgICAgICAgICAgPSBpc1NhbWU7XG5wcm90by5pc1NhbWVPckFmdGVyICAgICA9IGlzU2FtZU9yQWZ0ZXI7XG5wcm90by5pc1NhbWVPckJlZm9yZSAgICA9IGlzU2FtZU9yQmVmb3JlO1xucHJvdG8uaXNWYWxpZCAgICAgICAgICAgPSBpc1ZhbGlkJDI7XG5wcm90by5sYW5nICAgICAgICAgICAgICA9IGxhbmc7XG5wcm90by5sb2NhbGUgICAgICAgICAgICA9IGxvY2FsZTtcbnByb3RvLmxvY2FsZURhdGEgICAgICAgID0gbG9jYWxlRGF0YTtcbnByb3RvLm1heCAgICAgICAgICAgICAgID0gcHJvdG90eXBlTWF4O1xucHJvdG8ubWluICAgICAgICAgICAgICAgPSBwcm90b3R5cGVNaW47XG5wcm90by5wYXJzaW5nRmxhZ3MgICAgICA9IHBhcnNpbmdGbGFncztcbnByb3RvLnNldCAgICAgICAgICAgICAgID0gc3RyaW5nU2V0O1xucHJvdG8uc3RhcnRPZiAgICAgICAgICAgPSBzdGFydE9mO1xucHJvdG8uc3VidHJhY3QgICAgICAgICAgPSBzdWJ0cmFjdDtcbnByb3RvLnRvQXJyYXkgICAgICAgICAgID0gdG9BcnJheTtcbnByb3RvLnRvT2JqZWN0ICAgICAgICAgID0gdG9PYmplY3Q7XG5wcm90by50b0RhdGUgICAgICAgICAgICA9IHRvRGF0ZTtcbnByb3RvLnRvSVNPU3RyaW5nICAgICAgID0gdG9JU09TdHJpbmc7XG5wcm90by5pbnNwZWN0ICAgICAgICAgICA9IGluc3BlY3Q7XG5wcm90by50b0pTT04gICAgICAgICAgICA9IHRvSlNPTjtcbnByb3RvLnRvU3RyaW5nICAgICAgICAgID0gdG9TdHJpbmc7XG5wcm90by51bml4ICAgICAgICAgICAgICA9IHVuaXg7XG5wcm90by52YWx1ZU9mICAgICAgICAgICA9IHZhbHVlT2Y7XG5wcm90by5jcmVhdGlvbkRhdGEgICAgICA9IGNyZWF0aW9uRGF0YTtcbnByb3RvLnllYXIgICAgICAgPSBnZXRTZXRZZWFyO1xucHJvdG8uaXNMZWFwWWVhciA9IGdldElzTGVhcFllYXI7XG5wcm90by53ZWVrWWVhciAgICA9IGdldFNldFdlZWtZZWFyO1xucHJvdG8uaXNvV2Vla1llYXIgPSBnZXRTZXRJU09XZWVrWWVhcjtcbnByb3RvLnF1YXJ0ZXIgPSBwcm90by5xdWFydGVycyA9IGdldFNldFF1YXJ0ZXI7XG5wcm90by5tb250aCAgICAgICA9IGdldFNldE1vbnRoO1xucHJvdG8uZGF5c0luTW9udGggPSBnZXREYXlzSW5Nb250aDtcbnByb3RvLndlZWsgICAgICAgICAgID0gcHJvdG8ud2Vla3MgICAgICAgID0gZ2V0U2V0V2VlaztcbnByb3RvLmlzb1dlZWsgICAgICAgID0gcHJvdG8uaXNvV2Vla3MgICAgID0gZ2V0U2V0SVNPV2VlaztcbnByb3RvLndlZWtzSW5ZZWFyICAgID0gZ2V0V2Vla3NJblllYXI7XG5wcm90by5pc29XZWVrc0luWWVhciA9IGdldElTT1dlZWtzSW5ZZWFyO1xucHJvdG8uZGF0ZSAgICAgICA9IGdldFNldERheU9mTW9udGg7XG5wcm90by5kYXkgICAgICAgID0gcHJvdG8uZGF5cyAgICAgICAgICAgICA9IGdldFNldERheU9mV2VlaztcbnByb3RvLndlZWtkYXkgICAgPSBnZXRTZXRMb2NhbGVEYXlPZldlZWs7XG5wcm90by5pc29XZWVrZGF5ID0gZ2V0U2V0SVNPRGF5T2ZXZWVrO1xucHJvdG8uZGF5T2ZZZWFyICA9IGdldFNldERheU9mWWVhcjtcbnByb3RvLmhvdXIgPSBwcm90by5ob3VycyA9IGdldFNldEhvdXI7XG5wcm90by5taW51dGUgPSBwcm90by5taW51dGVzID0gZ2V0U2V0TWludXRlO1xucHJvdG8uc2Vjb25kID0gcHJvdG8uc2Vjb25kcyA9IGdldFNldFNlY29uZDtcbnByb3RvLm1pbGxpc2Vjb25kID0gcHJvdG8ubWlsbGlzZWNvbmRzID0gZ2V0U2V0TWlsbGlzZWNvbmQ7XG5wcm90by51dGNPZmZzZXQgICAgICAgICAgICA9IGdldFNldE9mZnNldDtcbnByb3RvLnV0YyAgICAgICAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9VVEM7XG5wcm90by5sb2NhbCAgICAgICAgICAgICAgICA9IHNldE9mZnNldFRvTG9jYWw7XG5wcm90by5wYXJzZVpvbmUgICAgICAgICAgICA9IHNldE9mZnNldFRvUGFyc2VkT2Zmc2V0O1xucHJvdG8uaGFzQWxpZ25lZEhvdXJPZmZzZXQgPSBoYXNBbGlnbmVkSG91ck9mZnNldDtcbnByb3RvLmlzRFNUICAgICAgICAgICAgICAgID0gaXNEYXlsaWdodFNhdmluZ1RpbWU7XG5wcm90by5pc0xvY2FsICAgICAgICAgICAgICA9IGlzTG9jYWw7XG5wcm90by5pc1V0Y09mZnNldCAgICAgICAgICA9IGlzVXRjT2Zmc2V0O1xucHJvdG8uaXNVdGMgICAgICAgICAgICAgICAgPSBpc1V0YztcbnByb3RvLmlzVVRDICAgICAgICAgICAgICAgID0gaXNVdGM7XG5wcm90by56b25lQWJiciA9IGdldFpvbmVBYmJyO1xucHJvdG8uem9uZU5hbWUgPSBnZXRab25lTmFtZTtcbnByb3RvLmRhdGVzICA9IGRlcHJlY2F0ZSgnZGF0ZXMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIGRhdGUgaW5zdGVhZC4nLCBnZXRTZXREYXlPZk1vbnRoKTtcbnByb3RvLm1vbnRocyA9IGRlcHJlY2F0ZSgnbW9udGhzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb250aCBpbnN0ZWFkJywgZ2V0U2V0TW9udGgpO1xucHJvdG8ueWVhcnMgID0gZGVwcmVjYXRlKCd5ZWFycyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgeWVhciBpbnN0ZWFkJywgZ2V0U2V0WWVhcik7XG5wcm90by56b25lICAgPSBkZXByZWNhdGUoJ21vbWVudCgpLnpvbmUgaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudCgpLnV0Y09mZnNldCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL3pvbmUvJywgZ2V0U2V0Wm9uZSk7XG5wcm90by5pc0RTVFNoaWZ0ZWQgPSBkZXByZWNhdGUoJ2lzRFNUU2hpZnRlZCBpcyBkZXByZWNhdGVkLiBTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kc3Qtc2hpZnRlZC8gZm9yIG1vcmUgaW5mb3JtYXRpb24nLCBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQpO1xuXG5mdW5jdGlvbiBjcmVhdGVVbml4IChpbnB1dCkge1xuICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCAqIDEwMDApO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJblpvbmUgKCkge1xuICAgIHJldHVybiBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpLnBhcnNlWm9uZSgpO1xufVxuXG5mdW5jdGlvbiBwcmVQYXJzZVBvc3RGb3JtYXQgKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmc7XG59XG5cbnZhciBwcm90byQxID0gTG9jYWxlLnByb3RvdHlwZTtcblxucHJvdG8kMS5jYWxlbmRhciAgICAgICAgPSBjYWxlbmRhcjtcbnByb3RvJDEubG9uZ0RhdGVGb3JtYXQgID0gbG9uZ0RhdGVGb3JtYXQ7XG5wcm90byQxLmludmFsaWREYXRlICAgICA9IGludmFsaWREYXRlO1xucHJvdG8kMS5vcmRpbmFsICAgICAgICAgPSBvcmRpbmFsO1xucHJvdG8kMS5wcmVwYXJzZSAgICAgICAgPSBwcmVQYXJzZVBvc3RGb3JtYXQ7XG5wcm90byQxLnBvc3Rmb3JtYXQgICAgICA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbnByb3RvJDEucmVsYXRpdmVUaW1lICAgID0gcmVsYXRpdmVUaW1lO1xucHJvdG8kMS5wYXN0RnV0dXJlICAgICAgPSBwYXN0RnV0dXJlO1xucHJvdG8kMS5zZXQgICAgICAgICAgICAgPSBzZXQ7XG5cbnByb3RvJDEubW9udGhzICAgICAgICAgICAgPSAgICAgICAgbG9jYWxlTW9udGhzO1xucHJvdG8kMS5tb250aHNTaG9ydCAgICAgICA9ICAgICAgICBsb2NhbGVNb250aHNTaG9ydDtcbnByb3RvJDEubW9udGhzUGFyc2UgICAgICAgPSAgICAgICAgbG9jYWxlTW9udGhzUGFyc2U7XG5wcm90byQxLm1vbnRoc1JlZ2V4ICAgICAgID0gbW9udGhzUmVnZXg7XG5wcm90byQxLm1vbnRoc1Nob3J0UmVnZXggID0gbW9udGhzU2hvcnRSZWdleDtcbnByb3RvJDEud2VlayA9IGxvY2FsZVdlZWs7XG5wcm90byQxLmZpcnN0RGF5T2ZZZWFyID0gbG9jYWxlRmlyc3REYXlPZlllYXI7XG5wcm90byQxLmZpcnN0RGF5T2ZXZWVrID0gbG9jYWxlRmlyc3REYXlPZldlZWs7XG5cbnByb3RvJDEud2Vla2RheXMgICAgICAgPSAgICAgICAgbG9jYWxlV2Vla2RheXM7XG5wcm90byQxLndlZWtkYXlzTWluICAgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzTWluO1xucHJvdG8kMS53ZWVrZGF5c1Nob3J0ICA9ICAgICAgICBsb2NhbGVXZWVrZGF5c1Nob3J0O1xucHJvdG8kMS53ZWVrZGF5c1BhcnNlICA9ICAgICAgICBsb2NhbGVXZWVrZGF5c1BhcnNlO1xuXG5wcm90byQxLndlZWtkYXlzUmVnZXggICAgICAgPSAgICAgICAgd2Vla2RheXNSZWdleDtcbnByb3RvJDEud2Vla2RheXNTaG9ydFJlZ2V4ICA9ICAgICAgICB3ZWVrZGF5c1Nob3J0UmVnZXg7XG5wcm90byQxLndlZWtkYXlzTWluUmVnZXggICAgPSAgICAgICAgd2Vla2RheXNNaW5SZWdleDtcblxucHJvdG8kMS5pc1BNID0gbG9jYWxlSXNQTTtcbnByb3RvJDEubWVyaWRpZW0gPSBsb2NhbGVNZXJpZGllbTtcblxuZnVuY3Rpb24gZ2V0JDEgKGZvcm1hdCwgaW5kZXgsIGZpZWxkLCBzZXR0ZXIpIHtcbiAgICB2YXIgbG9jYWxlID0gZ2V0TG9jYWxlKCk7XG4gICAgdmFyIHV0YyA9IGNyZWF0ZVVUQygpLnNldChzZXR0ZXIsIGluZGV4KTtcbiAgICByZXR1cm4gbG9jYWxlW2ZpZWxkXSh1dGMsIGZvcm1hdCk7XG59XG5cbmZ1bmN0aW9uIGxpc3RNb250aHNJbXBsIChmb3JtYXQsIGluZGV4LCBmaWVsZCkge1xuICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuXG4gICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGdldCQxKGZvcm1hdCwgaW5kZXgsIGZpZWxkLCAnbW9udGgnKTtcbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgb3V0ID0gW107XG4gICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgb3V0W2ldID0gZ2V0JDEoZm9ybWF0LCBpLCBmaWVsZCwgJ21vbnRoJyk7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59XG5cbi8vICgpXG4vLyAoNSlcbi8vIChmbXQsIDUpXG4vLyAoZm10KVxuLy8gKHRydWUpXG4vLyAodHJ1ZSwgNSlcbi8vICh0cnVlLCBmbXQsIDUpXG4vLyAodHJ1ZSwgZm10KVxuZnVuY3Rpb24gbGlzdFdlZWtkYXlzSW1wbCAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCBmaWVsZCkge1xuICAgIGlmICh0eXBlb2YgbG9jYWxlU29ydGVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvcm1hdCA9IGxvY2FsZVNvcnRlZDtcbiAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgIGxvY2FsZVNvcnRlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcbiAgICB9XG5cbiAgICB2YXIgbG9jYWxlID0gZ2V0TG9jYWxlKCksXG4gICAgICAgIHNoaWZ0ID0gbG9jYWxlU29ydGVkID8gbG9jYWxlLl93ZWVrLmRvdyA6IDA7XG5cbiAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0LCAoaW5kZXggKyBzaGlmdCkgJSA3LCBmaWVsZCwgJ2RheScpO1xuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBvdXQgPSBbXTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgIG91dFtpXSA9IGdldCQxKGZvcm1hdCwgKGkgKyBzaGlmdCkgJSA3LCBmaWVsZCwgJ2RheScpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuXG5mdW5jdGlvbiBsaXN0TW9udGhzIChmb3JtYXQsIGluZGV4KSB7XG4gICAgcmV0dXJuIGxpc3RNb250aHNJbXBsKGZvcm1hdCwgaW5kZXgsICdtb250aHMnKTtcbn1cblxuZnVuY3Rpb24gbGlzdE1vbnRoc1Nob3J0IChmb3JtYXQsIGluZGV4KSB7XG4gICAgcmV0dXJuIGxpc3RNb250aHNJbXBsKGZvcm1hdCwgaW5kZXgsICdtb250aHNTaG9ydCcpO1xufVxuXG5mdW5jdGlvbiBsaXN0V2Vla2RheXMgKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzJyk7XG59XG5cbmZ1bmN0aW9uIGxpc3RXZWVrZGF5c1Nob3J0IChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c1Nob3J0Jyk7XG59XG5cbmZ1bmN0aW9uIGxpc3RXZWVrZGF5c01pbiAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXNNaW4nKTtcbn1cblxuZ2V0U2V0R2xvYmFsTG9jYWxlKCdlbicsIHtcbiAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0odGh8c3R8bmR8cmQpLyxcbiAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgb3V0cHV0ID0gKHRvSW50KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgIChiID09PSAxKSA/ICdzdCcgOlxuICAgICAgICAgICAgKGIgPT09IDIpID8gJ25kJyA6XG4gICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICB9XG59KTtcblxuLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuXG5ob29rcy5sYW5nID0gZGVwcmVjYXRlKCdtb21lbnQubGFuZyBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZSBpbnN0ZWFkLicsIGdldFNldEdsb2JhbExvY2FsZSk7XG5ob29rcy5sYW5nRGF0YSA9IGRlcHJlY2F0ZSgnbW9tZW50LmxhbmdEYXRhIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlRGF0YSBpbnN0ZWFkLicsIGdldExvY2FsZSk7XG5cbnZhciBtYXRoQWJzID0gTWF0aC5hYnM7XG5cbmZ1bmN0aW9uIGFicyAoKSB7XG4gICAgdmFyIGRhdGEgICAgICAgICAgID0gdGhpcy5fZGF0YTtcblxuICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9IG1hdGhBYnModGhpcy5fbWlsbGlzZWNvbmRzKTtcbiAgICB0aGlzLl9kYXlzICAgICAgICAgPSBtYXRoQWJzKHRoaXMuX2RheXMpO1xuICAgIHRoaXMuX21vbnRocyAgICAgICA9IG1hdGhBYnModGhpcy5fbW9udGhzKTtcblxuICAgIGRhdGEubWlsbGlzZWNvbmRzICA9IG1hdGhBYnMoZGF0YS5taWxsaXNlY29uZHMpO1xuICAgIGRhdGEuc2Vjb25kcyAgICAgICA9IG1hdGhBYnMoZGF0YS5zZWNvbmRzKTtcbiAgICBkYXRhLm1pbnV0ZXMgICAgICAgPSBtYXRoQWJzKGRhdGEubWludXRlcyk7XG4gICAgZGF0YS5ob3VycyAgICAgICAgID0gbWF0aEFicyhkYXRhLmhvdXJzKTtcbiAgICBkYXRhLm1vbnRocyAgICAgICAgPSBtYXRoQWJzKGRhdGEubW9udGhzKTtcbiAgICBkYXRhLnllYXJzICAgICAgICAgPSBtYXRoQWJzKGRhdGEueWVhcnMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGFkZFN1YnRyYWN0JDEgKGR1cmF0aW9uLCBpbnB1dCwgdmFsdWUsIGRpcmVjdGlvbikge1xuICAgIHZhciBvdGhlciA9IGNyZWF0ZUR1cmF0aW9uKGlucHV0LCB2YWx1ZSk7XG5cbiAgICBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9taWxsaXNlY29uZHM7XG4gICAgZHVyYXRpb24uX2RheXMgICAgICAgICArPSBkaXJlY3Rpb24gKiBvdGhlci5fZGF5cztcbiAgICBkdXJhdGlvbi5fbW9udGhzICAgICAgICs9IGRpcmVjdGlvbiAqIG90aGVyLl9tb250aHM7XG5cbiAgICByZXR1cm4gZHVyYXRpb24uX2J1YmJsZSgpO1xufVxuXG4vLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBhZGQoMSwgJ3MnKSBvciBhZGQoZHVyYXRpb24pXG5mdW5jdGlvbiBhZGQkMSAoaW5wdXQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGFkZFN1YnRyYWN0JDEodGhpcywgaW5wdXQsIHZhbHVlLCAxKTtcbn1cblxuLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgc3VidHJhY3QoMSwgJ3MnKSBvciBzdWJ0cmFjdChkdXJhdGlvbilcbmZ1bmN0aW9uIHN1YnRyYWN0JDEgKGlucHV0LCB2YWx1ZSkge1xuICAgIHJldHVybiBhZGRTdWJ0cmFjdCQxKHRoaXMsIGlucHV0LCB2YWx1ZSwgLTEpO1xufVxuXG5mdW5jdGlvbiBhYnNDZWlsIChudW1iZXIpIHtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGJ1YmJsZSAoKSB7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcbiAgICB2YXIgZGF5cyAgICAgICAgID0gdGhpcy5fZGF5cztcbiAgICB2YXIgbW9udGhzICAgICAgID0gdGhpcy5fbW9udGhzO1xuICAgIHZhciBkYXRhICAgICAgICAgPSB0aGlzLl9kYXRhO1xuICAgIHZhciBzZWNvbmRzLCBtaW51dGVzLCBob3VycywgeWVhcnMsIG1vbnRoc0Zyb21EYXlzO1xuXG4gICAgLy8gaWYgd2UgaGF2ZSBhIG1peCBvZiBwb3NpdGl2ZSBhbmQgbmVnYXRpdmUgdmFsdWVzLCBidWJibGUgZG93biBmaXJzdFxuICAgIC8vIGNoZWNrOiBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjE2NlxuICAgIGlmICghKChtaWxsaXNlY29uZHMgPj0gMCAmJiBkYXlzID49IDAgJiYgbW9udGhzID49IDApIHx8XG4gICAgICAgICAgICAobWlsbGlzZWNvbmRzIDw9IDAgJiYgZGF5cyA8PSAwICYmIG1vbnRocyA8PSAwKSkpIHtcbiAgICAgICAgbWlsbGlzZWNvbmRzICs9IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRocykgKyBkYXlzKSAqIDg2NGU1O1xuICAgICAgICBkYXlzID0gMDtcbiAgICAgICAgbW9udGhzID0gMDtcbiAgICB9XG5cbiAgICAvLyBUaGUgZm9sbG93aW5nIGNvZGUgYnViYmxlcyB1cCB2YWx1ZXMsIHNlZSB0aGUgdGVzdHMgZm9yXG4gICAgLy8gZXhhbXBsZXMgb2Ygd2hhdCB0aGF0IG1lYW5zLlxuICAgIGRhdGEubWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzICUgMTAwMDtcblxuICAgIHNlY29uZHMgICAgICAgICAgID0gYWJzRmxvb3IobWlsbGlzZWNvbmRzIC8gMTAwMCk7XG4gICAgZGF0YS5zZWNvbmRzICAgICAgPSBzZWNvbmRzICUgNjA7XG5cbiAgICBtaW51dGVzICAgICAgICAgICA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgZGF0YS5taW51dGVzICAgICAgPSBtaW51dGVzICUgNjA7XG5cbiAgICBob3VycyAgICAgICAgICAgICA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgZGF0YS5ob3VycyAgICAgICAgPSBob3VycyAlIDI0O1xuXG4gICAgZGF5cyArPSBhYnNGbG9vcihob3VycyAvIDI0KTtcblxuICAgIC8vIGNvbnZlcnQgZGF5cyB0byBtb250aHNcbiAgICBtb250aHNGcm9tRGF5cyA9IGFic0Zsb29yKGRheXNUb01vbnRocyhkYXlzKSk7XG4gICAgbW9udGhzICs9IG1vbnRoc0Zyb21EYXlzO1xuICAgIGRheXMgLT0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzRnJvbURheXMpKTtcblxuICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICB5ZWFycyA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICBtb250aHMgJT0gMTI7XG5cbiAgICBkYXRhLmRheXMgICA9IGRheXM7XG4gICAgZGF0YS5tb250aHMgPSBtb250aHM7XG4gICAgZGF0YS55ZWFycyAgPSB5ZWFycztcblxuICAgIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBkYXlzVG9Nb250aHMgKGRheXMpIHtcbiAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxNDYwOTcgZGF5cyAodGFraW5nIGludG8gYWNjb3VudCBsZWFwIHllYXIgcnVsZXMpXG4gICAgLy8gNDAwIHllYXJzIGhhdmUgMTIgbW9udGhzID09PSA0ODAwXG4gICAgcmV0dXJuIGRheXMgKiA0ODAwIC8gMTQ2MDk3O1xufVxuXG5mdW5jdGlvbiBtb250aHNUb0RheXMgKG1vbnRocykge1xuICAgIC8vIHRoZSByZXZlcnNlIG9mIGRheXNUb01vbnRoc1xuICAgIHJldHVybiBtb250aHMgKiAxNDYwOTcgLyA0ODAwO1xufVxuXG5mdW5jdGlvbiBhcyAodW5pdHMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIHZhciBkYXlzO1xuICAgIHZhciBtb250aHM7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcblxuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgaWYgKHVuaXRzID09PSAnbW9udGgnIHx8IHVuaXRzID09PSAneWVhcicpIHtcbiAgICAgICAgZGF5cyAgID0gdGhpcy5fZGF5cyAgICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgIG1vbnRocyA9IHRoaXMuX21vbnRocyArIGRheXNUb01vbnRocyhkYXlzKTtcbiAgICAgICAgcmV0dXJuIHVuaXRzID09PSAnbW9udGgnID8gbW9udGhzIDogbW9udGhzIC8gMTI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaGFuZGxlIG1pbGxpc2Vjb25kcyBzZXBhcmF0ZWx5IGJlY2F1c2Ugb2YgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGlzc3VlICMxODY3KVxuICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIE1hdGgucm91bmQobW9udGhzVG9EYXlzKHRoaXMuX21vbnRocykpO1xuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd3ZWVrJyAgIDogcmV0dXJuIGRheXMgLyA3ICAgICArIG1pbGxpc2Vjb25kcyAvIDYwNDhlNTtcbiAgICAgICAgICAgIGNhc2UgJ2RheScgICAgOiByZXR1cm4gZGF5cyAgICAgICAgICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICBjYXNlICdob3VyJyAgIDogcmV0dXJuIGRheXMgKiAyNCAgICArIG1pbGxpc2Vjb25kcyAvIDM2ZTU7XG4gICAgICAgICAgICBjYXNlICdtaW51dGUnIDogcmV0dXJuIGRheXMgKiAxNDQwICArIG1pbGxpc2Vjb25kcyAvIDZlNDtcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCcgOiByZXR1cm4gZGF5cyAqIDg2NDAwICsgbWlsbGlzZWNvbmRzIC8gMTAwMDtcbiAgICAgICAgICAgIC8vIE1hdGguZmxvb3IgcHJldmVudHMgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgaGVyZVxuICAgICAgICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOiByZXR1cm4gTWF0aC5mbG9vcihkYXlzICogODY0ZTUpICsgbWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHVuaXQgJyArIHVuaXRzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gVE9ETzogVXNlIHRoaXMuYXMoJ21zJyk/XG5mdW5jdGlvbiB2YWx1ZU9mJDEgKCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzICtcbiAgICAgICAgdGhpcy5fZGF5cyAqIDg2NGU1ICtcbiAgICAgICAgKHRoaXMuX21vbnRocyAlIDEyKSAqIDI1OTJlNiArXG4gICAgICAgIHRvSW50KHRoaXMuX21vbnRocyAvIDEyKSAqIDMxNTM2ZTZcbiAgICApO1xufVxuXG5mdW5jdGlvbiBtYWtlQXMgKGFsaWFzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXMoYWxpYXMpO1xuICAgIH07XG59XG5cbnZhciBhc01pbGxpc2Vjb25kcyA9IG1ha2VBcygnbXMnKTtcbnZhciBhc1NlY29uZHMgICAgICA9IG1ha2VBcygncycpO1xudmFyIGFzTWludXRlcyAgICAgID0gbWFrZUFzKCdtJyk7XG52YXIgYXNIb3VycyAgICAgICAgPSBtYWtlQXMoJ2gnKTtcbnZhciBhc0RheXMgICAgICAgICA9IG1ha2VBcygnZCcpO1xudmFyIGFzV2Vla3MgICAgICAgID0gbWFrZUFzKCd3Jyk7XG52YXIgYXNNb250aHMgICAgICAgPSBtYWtlQXMoJ00nKTtcbnZhciBhc1llYXJzICAgICAgICA9IG1ha2VBcygneScpO1xuXG5mdW5jdGlvbiBjbG9uZSQxICgpIHtcbiAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24odGhpcyk7XG59XG5cbmZ1bmN0aW9uIGdldCQyICh1bml0cykge1xuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXNbdW5pdHMgKyAncyddKCkgOiBOYU47XG59XG5cbmZ1bmN0aW9uIG1ha2VHZXR0ZXIobmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2RhdGFbbmFtZV0gOiBOYU47XG4gICAgfTtcbn1cblxudmFyIG1pbGxpc2Vjb25kcyA9IG1ha2VHZXR0ZXIoJ21pbGxpc2Vjb25kcycpO1xudmFyIHNlY29uZHMgICAgICA9IG1ha2VHZXR0ZXIoJ3NlY29uZHMnKTtcbnZhciBtaW51dGVzICAgICAgPSBtYWtlR2V0dGVyKCdtaW51dGVzJyk7XG52YXIgaG91cnMgICAgICAgID0gbWFrZUdldHRlcignaG91cnMnKTtcbnZhciBkYXlzICAgICAgICAgPSBtYWtlR2V0dGVyKCdkYXlzJyk7XG52YXIgbW9udGhzICAgICAgID0gbWFrZUdldHRlcignbW9udGhzJyk7XG52YXIgeWVhcnMgICAgICAgID0gbWFrZUdldHRlcigneWVhcnMnKTtcblxuZnVuY3Rpb24gd2Vla3MgKCkge1xuICAgIHJldHVybiBhYnNGbG9vcih0aGlzLmRheXMoKSAvIDcpO1xufVxuXG52YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xudmFyIHRocmVzaG9sZHMgPSB7XG4gICAgc3M6IDQ0LCAgICAgICAgIC8vIGEgZmV3IHNlY29uZHMgdG8gc2Vjb25kc1xuICAgIHMgOiA0NSwgICAgICAgICAvLyBzZWNvbmRzIHRvIG1pbnV0ZVxuICAgIG0gOiA0NSwgICAgICAgICAvLyBtaW51dGVzIHRvIGhvdXJcbiAgICBoIDogMjIsICAgICAgICAgLy8gaG91cnMgdG8gZGF5XG4gICAgZCA6IDI2LCAgICAgICAgIC8vIGRheXMgdG8gbW9udGhcbiAgICBNIDogMTEgICAgICAgICAgLy8gbW9udGhzIHRvIHllYXJcbn07XG5cbi8vIGhlbHBlciBmdW5jdGlvbiBmb3IgbW9tZW50LmZuLmZyb20sIG1vbWVudC5mbi5mcm9tTm93LCBhbmQgbW9tZW50LmR1cmF0aW9uLmZuLmh1bWFuaXplXG5mdW5jdGlvbiBzdWJzdGl0dXRlVGltZUFnbyhzdHJpbmcsIG51bWJlciwgd2l0aG91dFN1ZmZpeCwgaXNGdXR1cmUsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUucmVsYXRpdmVUaW1lKG51bWJlciB8fCAxLCAhIXdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpO1xufVxuXG5mdW5jdGlvbiByZWxhdGl2ZVRpbWUkMSAocG9zTmVnRHVyYXRpb24sIHdpdGhvdXRTdWZmaXgsIGxvY2FsZSkge1xuICAgIHZhciBkdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uKHBvc05lZ0R1cmF0aW9uKS5hYnMoKTtcbiAgICB2YXIgc2Vjb25kcyAgPSByb3VuZChkdXJhdGlvbi5hcygncycpKTtcbiAgICB2YXIgbWludXRlcyAgPSByb3VuZChkdXJhdGlvbi5hcygnbScpKTtcbiAgICB2YXIgaG91cnMgICAgPSByb3VuZChkdXJhdGlvbi5hcygnaCcpKTtcbiAgICB2YXIgZGF5cyAgICAgPSByb3VuZChkdXJhdGlvbi5hcygnZCcpKTtcbiAgICB2YXIgbW9udGhzICAgPSByb3VuZChkdXJhdGlvbi5hcygnTScpKTtcbiAgICB2YXIgeWVhcnMgICAgPSByb3VuZChkdXJhdGlvbi5hcygneScpKTtcblxuICAgIHZhciBhID0gc2Vjb25kcyA8PSB0aHJlc2hvbGRzLnNzICYmIFsncycsIHNlY29uZHNdICB8fFxuICAgICAgICAgICAgc2Vjb25kcyA8IHRocmVzaG9sZHMucyAgICYmIFsnc3MnLCBzZWNvbmRzXSB8fFxuICAgICAgICAgICAgbWludXRlcyA8PSAxICAgICAgICAgICAgICYmIFsnbSddICAgICAgICAgICB8fFxuICAgICAgICAgICAgbWludXRlcyA8IHRocmVzaG9sZHMubSAgICYmIFsnbW0nLCBtaW51dGVzXSB8fFxuICAgICAgICAgICAgaG91cnMgICA8PSAxICAgICAgICAgICAgICYmIFsnaCddICAgICAgICAgICB8fFxuICAgICAgICAgICAgaG91cnMgICA8IHRocmVzaG9sZHMuaCAgICYmIFsnaGgnLCBob3Vyc10gICB8fFxuICAgICAgICAgICAgZGF5cyAgICA8PSAxICAgICAgICAgICAgICYmIFsnZCddICAgICAgICAgICB8fFxuICAgICAgICAgICAgZGF5cyAgICA8IHRocmVzaG9sZHMuZCAgICYmIFsnZGQnLCBkYXlzXSAgICB8fFxuICAgICAgICAgICAgbW9udGhzICA8PSAxICAgICAgICAgICAgICYmIFsnTSddICAgICAgICAgICB8fFxuICAgICAgICAgICAgbW9udGhzICA8IHRocmVzaG9sZHMuTSAgICYmIFsnTU0nLCBtb250aHNdICB8fFxuICAgICAgICAgICAgeWVhcnMgICA8PSAxICAgICAgICAgICAgICYmIFsneSddICAgICAgICAgICB8fCBbJ3l5JywgeWVhcnNdO1xuXG4gICAgYVsyXSA9IHdpdGhvdXRTdWZmaXg7XG4gICAgYVszXSA9ICtwb3NOZWdEdXJhdGlvbiA+IDA7XG4gICAgYVs0XSA9IGxvY2FsZTtcbiAgICByZXR1cm4gc3Vic3RpdHV0ZVRpbWVBZ28uYXBwbHkobnVsbCwgYSk7XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXQgdGhlIHJvdW5kaW5nIGZ1bmN0aW9uIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbmZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nIChyb3VuZGluZ0Z1bmN0aW9uKSB7XG4gICAgaWYgKHJvdW5kaW5nRnVuY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcm91bmQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2Yocm91bmRpbmdGdW5jdGlvbikgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcm91bmQgPSByb3VuZGluZ0Z1bmN0aW9uO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IGEgdGhyZXNob2xkIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbmZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZCAodGhyZXNob2xkLCBsaW1pdCkge1xuICAgIGlmICh0aHJlc2hvbGRzW3RocmVzaG9sZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChsaW1pdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0aHJlc2hvbGRzW3RocmVzaG9sZF07XG4gICAgfVxuICAgIHRocmVzaG9sZHNbdGhyZXNob2xkXSA9IGxpbWl0O1xuICAgIGlmICh0aHJlc2hvbGQgPT09ICdzJykge1xuICAgICAgICB0aHJlc2hvbGRzLnNzID0gbGltaXQgLSAxO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaHVtYW5pemUgKHdpdGhTdWZmaXgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgIH1cblxuICAgIHZhciBsb2NhbGUgPSB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICB2YXIgb3V0cHV0ID0gcmVsYXRpdmVUaW1lJDEodGhpcywgIXdpdGhTdWZmaXgsIGxvY2FsZSk7XG5cbiAgICBpZiAod2l0aFN1ZmZpeCkge1xuICAgICAgICBvdXRwdXQgPSBsb2NhbGUucGFzdEZ1dHVyZSgrdGhpcywgb3V0cHV0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9jYWxlLnBvc3Rmb3JtYXQob3V0cHV0KTtcbn1cblxudmFyIGFicyQxID0gTWF0aC5hYnM7XG5cbmZ1bmN0aW9uIHNpZ24oeCkge1xuICAgIHJldHVybiAoKHggPiAwKSAtICh4IDwgMCkpIHx8ICt4O1xufVxuXG5mdW5jdGlvbiB0b0lTT1N0cmluZyQxKCkge1xuICAgIC8vIGZvciBJU08gc3RyaW5ncyB3ZSBkbyBub3QgdXNlIHRoZSBub3JtYWwgYnViYmxpbmcgcnVsZXM6XG4gICAgLy8gICogbWlsbGlzZWNvbmRzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSBob3Vyc1xuICAgIC8vICAqIGRheXMgZG8gbm90IGJ1YmJsZSBhdCBhbGxcbiAgICAvLyAgKiBtb250aHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIHllYXJzXG4gICAgLy8gVGhpcyBpcyBiZWNhdXNlIHRoZXJlIGlzIG5vIGNvbnRleHQtZnJlZSBjb252ZXJzaW9uIGJldHdlZW4gaG91cnMgYW5kIGRheXNcbiAgICAvLyAodGhpbmsgb2YgY2xvY2sgY2hhbmdlcylcbiAgICAvLyBhbmQgYWxzbyBub3QgYmV0d2VlbiBkYXlzIGFuZCBtb250aHMgKDI4LTMxIGRheXMgcGVyIG1vbnRoKVxuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgfVxuXG4gICAgdmFyIHNlY29uZHMgPSBhYnMkMSh0aGlzLl9taWxsaXNlY29uZHMpIC8gMTAwMDtcbiAgICB2YXIgZGF5cyAgICAgICAgID0gYWJzJDEodGhpcy5fZGF5cyk7XG4gICAgdmFyIG1vbnRocyAgICAgICA9IGFicyQxKHRoaXMuX21vbnRocyk7XG4gICAgdmFyIG1pbnV0ZXMsIGhvdXJzLCB5ZWFycztcblxuICAgIC8vIDM2MDAgc2Vjb25kcyAtPiA2MCBtaW51dGVzIC0+IDEgaG91clxuICAgIG1pbnV0ZXMgICAgICAgICAgID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICBob3VycyAgICAgICAgICAgICA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgc2Vjb25kcyAlPSA2MDtcbiAgICBtaW51dGVzICU9IDYwO1xuXG4gICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgIHllYXJzICA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICBtb250aHMgJT0gMTI7XG5cblxuICAgIC8vIGluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9kb3JkaWxsZS9tb21lbnQtaXNvZHVyYXRpb24vYmxvYi9tYXN0ZXIvbW9tZW50Lmlzb2R1cmF0aW9uLmpzXG4gICAgdmFyIFkgPSB5ZWFycztcbiAgICB2YXIgTSA9IG1vbnRocztcbiAgICB2YXIgRCA9IGRheXM7XG4gICAgdmFyIGggPSBob3VycztcbiAgICB2YXIgbSA9IG1pbnV0ZXM7XG4gICAgdmFyIHMgPSBzZWNvbmRzID8gc2Vjb25kcy50b0ZpeGVkKDMpLnJlcGxhY2UoL1xcLj8wKyQvLCAnJykgOiAnJztcbiAgICB2YXIgdG90YWwgPSB0aGlzLmFzU2Vjb25kcygpO1xuXG4gICAgaWYgKCF0b3RhbCkge1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSBzYW1lIGFzIEMjJ3MgKE5vZGEpIGFuZCBweXRob24gKGlzb2RhdGUpLi4uXG4gICAgICAgIC8vIGJ1dCBub3Qgb3RoZXIgSlMgKGdvb2cuZGF0ZSlcbiAgICAgICAgcmV0dXJuICdQMEQnO1xuICAgIH1cblxuICAgIHZhciB0b3RhbFNpZ24gPSB0b3RhbCA8IDAgPyAnLScgOiAnJztcbiAgICB2YXIgeW1TaWduID0gc2lnbih0aGlzLl9tb250aHMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuICAgIHZhciBkYXlzU2lnbiA9IHNpZ24odGhpcy5fZGF5cykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG4gICAgdmFyIGhtc1NpZ24gPSBzaWduKHRoaXMuX21pbGxpc2Vjb25kcykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG5cbiAgICByZXR1cm4gdG90YWxTaWduICsgJ1AnICtcbiAgICAgICAgKFkgPyB5bVNpZ24gKyBZICsgJ1knIDogJycpICtcbiAgICAgICAgKE0gPyB5bVNpZ24gKyBNICsgJ00nIDogJycpICtcbiAgICAgICAgKEQgPyBkYXlzU2lnbiArIEQgKyAnRCcgOiAnJykgK1xuICAgICAgICAoKGggfHwgbSB8fCBzKSA/ICdUJyA6ICcnKSArXG4gICAgICAgIChoID8gaG1zU2lnbiArIGggKyAnSCcgOiAnJykgK1xuICAgICAgICAobSA/IGhtc1NpZ24gKyBtICsgJ00nIDogJycpICtcbiAgICAgICAgKHMgPyBobXNTaWduICsgcyArICdTJyA6ICcnKTtcbn1cblxudmFyIHByb3RvJDIgPSBEdXJhdGlvbi5wcm90b3R5cGU7XG5cbnByb3RvJDIuaXNWYWxpZCAgICAgICAgPSBpc1ZhbGlkJDE7XG5wcm90byQyLmFicyAgICAgICAgICAgID0gYWJzO1xucHJvdG8kMi5hZGQgICAgICAgICAgICA9IGFkZCQxO1xucHJvdG8kMi5zdWJ0cmFjdCAgICAgICA9IHN1YnRyYWN0JDE7XG5wcm90byQyLmFzICAgICAgICAgICAgID0gYXM7XG5wcm90byQyLmFzTWlsbGlzZWNvbmRzID0gYXNNaWxsaXNlY29uZHM7XG5wcm90byQyLmFzU2Vjb25kcyAgICAgID0gYXNTZWNvbmRzO1xucHJvdG8kMi5hc01pbnV0ZXMgICAgICA9IGFzTWludXRlcztcbnByb3RvJDIuYXNIb3VycyAgICAgICAgPSBhc0hvdXJzO1xucHJvdG8kMi5hc0RheXMgICAgICAgICA9IGFzRGF5cztcbnByb3RvJDIuYXNXZWVrcyAgICAgICAgPSBhc1dlZWtzO1xucHJvdG8kMi5hc01vbnRocyAgICAgICA9IGFzTW9udGhzO1xucHJvdG8kMi5hc1llYXJzICAgICAgICA9IGFzWWVhcnM7XG5wcm90byQyLnZhbHVlT2YgICAgICAgID0gdmFsdWVPZiQxO1xucHJvdG8kMi5fYnViYmxlICAgICAgICA9IGJ1YmJsZTtcbnByb3RvJDIuY2xvbmUgICAgICAgICAgPSBjbG9uZSQxO1xucHJvdG8kMi5nZXQgICAgICAgICAgICA9IGdldCQyO1xucHJvdG8kMi5taWxsaXNlY29uZHMgICA9IG1pbGxpc2Vjb25kcztcbnByb3RvJDIuc2Vjb25kcyAgICAgICAgPSBzZWNvbmRzO1xucHJvdG8kMi5taW51dGVzICAgICAgICA9IG1pbnV0ZXM7XG5wcm90byQyLmhvdXJzICAgICAgICAgID0gaG91cnM7XG5wcm90byQyLmRheXMgICAgICAgICAgID0gZGF5cztcbnByb3RvJDIud2Vla3MgICAgICAgICAgPSB3ZWVrcztcbnByb3RvJDIubW9udGhzICAgICAgICAgPSBtb250aHM7XG5wcm90byQyLnllYXJzICAgICAgICAgID0geWVhcnM7XG5wcm90byQyLmh1bWFuaXplICAgICAgID0gaHVtYW5pemU7XG5wcm90byQyLnRvSVNPU3RyaW5nICAgID0gdG9JU09TdHJpbmckMTtcbnByb3RvJDIudG9TdHJpbmcgICAgICAgPSB0b0lTT1N0cmluZyQxO1xucHJvdG8kMi50b0pTT04gICAgICAgICA9IHRvSVNPU3RyaW5nJDE7XG5wcm90byQyLmxvY2FsZSAgICAgICAgID0gbG9jYWxlO1xucHJvdG8kMi5sb2NhbGVEYXRhICAgICA9IGxvY2FsZURhdGE7XG5cbnByb3RvJDIudG9Jc29TdHJpbmcgPSBkZXByZWNhdGUoJ3RvSXNvU3RyaW5nKCkgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSB0b0lTT1N0cmluZygpIGluc3RlYWQgKG5vdGljZSB0aGUgY2FwaXRhbHMpJywgdG9JU09TdHJpbmckMSk7XG5wcm90byQyLmxhbmcgPSBsYW5nO1xuXG4vLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ1gnLCAwLCAwLCAndW5peCcpO1xuYWRkRm9ybWF0VG9rZW4oJ3gnLCAwLCAwLCAndmFsdWVPZicpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ3gnLCBtYXRjaFNpZ25lZCk7XG5hZGRSZWdleFRva2VuKCdYJywgbWF0Y2hUaW1lc3RhbXApO1xuYWRkUGFyc2VUb2tlbignWCcsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHBhcnNlRmxvYXQoaW5wdXQsIDEwKSAqIDEwMDApO1xufSk7XG5hZGRQYXJzZVRva2VuKCd4JywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgY29uZmlnLl9kID0gbmV3IERhdGUodG9JbnQoaW5wdXQpKTtcbn0pO1xuXG4vLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5cblxuaG9va3MudmVyc2lvbiA9ICcyLjIxLjAnO1xuXG5zZXRIb29rQ2FsbGJhY2soY3JlYXRlTG9jYWwpO1xuXG5ob29rcy5mbiAgICAgICAgICAgICAgICAgICAgPSBwcm90bztcbmhvb2tzLm1pbiAgICAgICAgICAgICAgICAgICA9IG1pbjtcbmhvb2tzLm1heCAgICAgICAgICAgICAgICAgICA9IG1heDtcbmhvb2tzLm5vdyAgICAgICAgICAgICAgICAgICA9IG5vdztcbmhvb2tzLnV0YyAgICAgICAgICAgICAgICAgICA9IGNyZWF0ZVVUQztcbmhvb2tzLnVuaXggICAgICAgICAgICAgICAgICA9IGNyZWF0ZVVuaXg7XG5ob29rcy5tb250aHMgICAgICAgICAgICAgICAgPSBsaXN0TW9udGhzO1xuaG9va3MuaXNEYXRlICAgICAgICAgICAgICAgID0gaXNEYXRlO1xuaG9va3MubG9jYWxlICAgICAgICAgICAgICAgID0gZ2V0U2V0R2xvYmFsTG9jYWxlO1xuaG9va3MuaW52YWxpZCAgICAgICAgICAgICAgID0gY3JlYXRlSW52YWxpZDtcbmhvb2tzLmR1cmF0aW9uICAgICAgICAgICAgICA9IGNyZWF0ZUR1cmF0aW9uO1xuaG9va3MuaXNNb21lbnQgICAgICAgICAgICAgID0gaXNNb21lbnQ7XG5ob29rcy53ZWVrZGF5cyAgICAgICAgICAgICAgPSBsaXN0V2Vla2RheXM7XG5ob29rcy5wYXJzZVpvbmUgICAgICAgICAgICAgPSBjcmVhdGVJblpvbmU7XG5ob29rcy5sb2NhbGVEYXRhICAgICAgICAgICAgPSBnZXRMb2NhbGU7XG5ob29rcy5pc0R1cmF0aW9uICAgICAgICAgICAgPSBpc0R1cmF0aW9uO1xuaG9va3MubW9udGhzU2hvcnQgICAgICAgICAgID0gbGlzdE1vbnRoc1Nob3J0O1xuaG9va3Mud2Vla2RheXNNaW4gICAgICAgICAgID0gbGlzdFdlZWtkYXlzTWluO1xuaG9va3MuZGVmaW5lTG9jYWxlICAgICAgICAgID0gZGVmaW5lTG9jYWxlO1xuaG9va3MudXBkYXRlTG9jYWxlICAgICAgICAgID0gdXBkYXRlTG9jYWxlO1xuaG9va3MubG9jYWxlcyAgICAgICAgICAgICAgID0gbGlzdExvY2FsZXM7XG5ob29rcy53ZWVrZGF5c1Nob3J0ICAgICAgICAgPSBsaXN0V2Vla2RheXNTaG9ydDtcbmhvb2tzLm5vcm1hbGl6ZVVuaXRzICAgICAgICA9IG5vcm1hbGl6ZVVuaXRzO1xuaG9va3MucmVsYXRpdmVUaW1lUm91bmRpbmcgID0gZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmc7XG5ob29rcy5yZWxhdGl2ZVRpbWVUaHJlc2hvbGQgPSBnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQ7XG5ob29rcy5jYWxlbmRhckZvcm1hdCAgICAgICAgPSBnZXRDYWxlbmRhckZvcm1hdDtcbmhvb2tzLnByb3RvdHlwZSAgICAgICAgICAgICA9IHByb3RvO1xuXG4vLyBjdXJyZW50bHkgSFRNTDUgaW5wdXQgdHlwZSBvbmx5IHN1cHBvcnRzIDI0LWhvdXIgZm9ybWF0c1xuaG9va3MuSFRNTDVfRk1UID0ge1xuICAgIERBVEVUSU1FX0xPQ0FMOiAnWVlZWS1NTS1ERFRISDptbScsICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiAvPlxuICAgIERBVEVUSU1FX0xPQ0FMX1NFQ09ORFM6ICdZWVlZLU1NLUREVEhIOm1tOnNzJywgIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBzdGVwPVwiMVwiIC8+XG4gICAgREFURVRJTUVfTE9DQUxfTVM6ICdZWVlZLU1NLUREVEhIOm1tOnNzLlNTUycsICAgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIHN0ZXA9XCIwLjAwMVwiIC8+XG4gICAgREFURTogJ1lZWVktTU0tREQnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJkYXRlXCIgLz5cbiAgICBUSU1FOiAnSEg6bW0nLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiAvPlxuICAgIFRJTUVfU0VDT05EUzogJ0hIOm1tOnNzJywgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIHN0ZXA9XCIxXCIgLz5cbiAgICBUSU1FX01TOiAnSEg6bW06c3MuU1NTJywgICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiBzdGVwPVwiMC4wMDFcIiAvPlxuICAgIFdFRUs6ICdZWVlZLVtXXVdXJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwid2Vla1wiIC8+XG4gICAgTU9OVEg6ICdZWVlZLU1NJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJtb250aFwiIC8+XG59O1xuXG5yZXR1cm4gaG9va3M7XG5cbn0pKSk7XG4iLCIvKiEgQnJvd3NlciBidW5kbGUgb2YgbnVuanVja3MgMy4wLjEgKHNsaW0sIG9ubHkgd29ya3Mgd2l0aCBwcmVjb21waWxlZCB0ZW1wbGF0ZXMpICovXG4oZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJudW5qdWNrc1wiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJudW5qdWNrc1wiXSA9IGZhY3RvcnkoKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG5cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG5cblxuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBsaWIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHR2YXIgZW52ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIExvYWRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xuXHR2YXIgbG9hZGVycyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdHZhciBwcmVjb21waWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXHRtb2R1bGUuZXhwb3J0cy5FbnZpcm9ubWVudCA9IGVudi5FbnZpcm9ubWVudDtcblx0bW9kdWxlLmV4cG9ydHMuVGVtcGxhdGUgPSBlbnYuVGVtcGxhdGU7XG5cblx0bW9kdWxlLmV4cG9ydHMuTG9hZGVyID0gTG9hZGVyO1xuXHRtb2R1bGUuZXhwb3J0cy5GaWxlU3lzdGVtTG9hZGVyID0gbG9hZGVycy5GaWxlU3lzdGVtTG9hZGVyO1xuXHRtb2R1bGUuZXhwb3J0cy5QcmVjb21waWxlZExvYWRlciA9IGxvYWRlcnMuUHJlY29tcGlsZWRMb2FkZXI7XG5cdG1vZHVsZS5leHBvcnRzLldlYkxvYWRlciA9IGxvYWRlcnMuV2ViTG9hZGVyO1xuXG5cdG1vZHVsZS5leHBvcnRzLmNvbXBpbGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0bW9kdWxlLmV4cG9ydHMucGFyc2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0bW9kdWxlLmV4cG9ydHMubGV4ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRtb2R1bGUuZXhwb3J0cy5ydW50aW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0bW9kdWxlLmV4cG9ydHMubGliID0gbGliO1xuXHRtb2R1bGUuZXhwb3J0cy5ub2RlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cblx0bW9kdWxlLmV4cG9ydHMuaW5zdGFsbEppbmphQ29tcGF0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cblx0Ly8gQSBzaW5nbGUgaW5zdGFuY2Ugb2YgYW4gZW52aXJvbm1lbnQsIHNpbmNlIHRoaXMgaXMgc28gY29tbW9ubHkgdXNlZFxuXG5cdHZhciBlO1xuXHRtb2R1bGUuZXhwb3J0cy5jb25maWd1cmUgPSBmdW5jdGlvbih0ZW1wbGF0ZXNQYXRoLCBvcHRzKSB7XG5cdCAgICBvcHRzID0gb3B0cyB8fCB7fTtcblx0ICAgIGlmKGxpYi5pc09iamVjdCh0ZW1wbGF0ZXNQYXRoKSkge1xuXHQgICAgICAgIG9wdHMgPSB0ZW1wbGF0ZXNQYXRoO1xuXHQgICAgICAgIHRlbXBsYXRlc1BhdGggPSBudWxsO1xuXHQgICAgfVxuXG5cdCAgICB2YXIgVGVtcGxhdGVMb2FkZXI7XG5cdCAgICBpZihsb2FkZXJzLkZpbGVTeXN0ZW1Mb2FkZXIpIHtcblx0ICAgICAgICBUZW1wbGF0ZUxvYWRlciA9IG5ldyBsb2FkZXJzLkZpbGVTeXN0ZW1Mb2FkZXIodGVtcGxhdGVzUGF0aCwge1xuXHQgICAgICAgICAgICB3YXRjaDogb3B0cy53YXRjaCxcblx0ICAgICAgICAgICAgbm9DYWNoZTogb3B0cy5ub0NhY2hlXG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cdCAgICBlbHNlIGlmKGxvYWRlcnMuV2ViTG9hZGVyKSB7XG5cdCAgICAgICAgVGVtcGxhdGVMb2FkZXIgPSBuZXcgbG9hZGVycy5XZWJMb2FkZXIodGVtcGxhdGVzUGF0aCwge1xuXHQgICAgICAgICAgICB1c2VDYWNoZTogb3B0cy53ZWIgJiYgb3B0cy53ZWIudXNlQ2FjaGUsXG5cdCAgICAgICAgICAgIGFzeW5jOiBvcHRzLndlYiAmJiBvcHRzLndlYi5hc3luY1xuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXG5cdCAgICBlID0gbmV3IGVudi5FbnZpcm9ubWVudChUZW1wbGF0ZUxvYWRlciwgb3B0cyk7XG5cblx0ICAgIGlmKG9wdHMgJiYgb3B0cy5leHByZXNzKSB7XG5cdCAgICAgICAgZS5leHByZXNzKG9wdHMuZXhwcmVzcyk7XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBlO1xuXHR9O1xuXG5cdG1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBmdW5jdGlvbihzcmMsIGVudiwgcGF0aCwgZWFnZXJDb21waWxlKSB7XG5cdCAgICBpZighZSkge1xuXHQgICAgICAgIG1vZHVsZS5leHBvcnRzLmNvbmZpZ3VyZSgpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIG5ldyBtb2R1bGUuZXhwb3J0cy5UZW1wbGF0ZShzcmMsIGVudiwgcGF0aCwgZWFnZXJDb21waWxlKTtcblx0fTtcblxuXHRtb2R1bGUuZXhwb3J0cy5yZW5kZXIgPSBmdW5jdGlvbihuYW1lLCBjdHgsIGNiKSB7XG5cdCAgICBpZighZSkge1xuXHQgICAgICAgIG1vZHVsZS5leHBvcnRzLmNvbmZpZ3VyZSgpO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gZS5yZW5kZXIobmFtZSwgY3R4LCBjYik7XG5cdH07XG5cblx0bW9kdWxlLmV4cG9ydHMucmVuZGVyU3RyaW5nID0gZnVuY3Rpb24oc3JjLCBjdHgsIGNiKSB7XG5cdCAgICBpZighZSkge1xuXHQgICAgICAgIG1vZHVsZS5leHBvcnRzLmNvbmZpZ3VyZSgpO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gZS5yZW5kZXJTdHJpbmcoc3JjLCBjdHgsIGNiKTtcblx0fTtcblxuXHRpZihwcmVjb21waWxlKSB7XG5cdCAgICBtb2R1bGUuZXhwb3J0cy5wcmVjb21waWxlID0gcHJlY29tcGlsZS5wcmVjb21waWxlO1xuXHQgICAgbW9kdWxlLmV4cG9ydHMucHJlY29tcGlsZVN0cmluZyA9IHByZWNvbXBpbGUucHJlY29tcGlsZVN0cmluZztcblx0fVxuXG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblx0dmFyIE9ialByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuXHR2YXIgZXNjYXBlTWFwID0ge1xuXHQgICAgJyYnOiAnJmFtcDsnLFxuXHQgICAgJ1wiJzogJyZxdW90OycsXG5cdCAgICAnXFwnJzogJyYjMzk7Jyxcblx0ICAgICc8JzogJyZsdDsnLFxuXHQgICAgJz4nOiAnJmd0Oydcblx0fTtcblxuXHR2YXIgZXNjYXBlUmVnZXggPSAvWyZcIic8Pl0vZztcblxuXHR2YXIgbG9va3VwRXNjYXBlID0gZnVuY3Rpb24oY2gpIHtcblx0ICAgIHJldHVybiBlc2NhcGVNYXBbY2hdO1xuXHR9O1xuXG5cdHZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuXHRleHBvcnRzLnByZXR0aWZ5RXJyb3IgPSBmdW5jdGlvbihwYXRoLCB3aXRoSW50ZXJuYWxzLCBlcnIpIHtcblx0ICAgIC8vIGpzaGludCAtVzAyMlxuXHQgICAgLy8gaHR0cDovL2pzbGludGVycm9ycy5jb20vZG8tbm90LWFzc2lnbi10by10aGUtZXhjZXB0aW9uLXBhcmFtZXRlclxuXHQgICAgaWYgKCFlcnIuVXBkYXRlKSB7XG5cdCAgICAgICAgLy8gbm90IG9uZSBvZiBvdXJzLCBjYXN0IGl0XG5cdCAgICAgICAgZXJyID0gbmV3IGV4cG9ydHMuVGVtcGxhdGVFcnJvcihlcnIpO1xuXHQgICAgfVxuXHQgICAgZXJyLlVwZGF0ZShwYXRoKTtcblxuXHQgICAgLy8gVW5sZXNzIHRoZXkgbWFya2VkIHRoZSBkZXYgZmxhZywgc2hvdyB0aGVtIGEgdHJhY2UgZnJvbSBoZXJlXG5cdCAgICBpZiAoIXdpdGhJbnRlcm5hbHMpIHtcblx0ICAgICAgICB2YXIgb2xkID0gZXJyO1xuXHQgICAgICAgIGVyciA9IG5ldyBFcnJvcihvbGQubWVzc2FnZSk7XG5cdCAgICAgICAgZXJyLm5hbWUgPSBvbGQubmFtZTtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIGVycjtcblx0fTtcblxuXHRleHBvcnRzLlRlbXBsYXRlRXJyb3IgPSBmdW5jdGlvbihtZXNzYWdlLCBsaW5lbm8sIGNvbG5vKSB7XG5cdCAgICB2YXIgZXJyID0gdGhpcztcblxuXHQgICAgaWYgKG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvcikgeyAvLyBmb3IgY2FzdGluZyByZWd1bGFyIGpzIGVycm9yc1xuXHQgICAgICAgIGVyciA9IG1lc3NhZ2U7XG5cdCAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2UubmFtZSArICc6ICcgKyBtZXNzYWdlLm1lc3NhZ2U7XG5cblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICBpZihlcnIubmFtZSA9ICcnKSB7fVxuXHQgICAgICAgIH1cblx0ICAgICAgICBjYXRjaChlKSB7XG5cdCAgICAgICAgICAgIC8vIElmIHdlIGNhbid0IHNldCB0aGUgbmFtZSBvZiB0aGUgZXJyb3Igb2JqZWN0IGluIHRoaXNcblx0ICAgICAgICAgICAgLy8gZW52aXJvbm1lbnQsIGRvbid0IHVzZSBpdFxuXHQgICAgICAgICAgICBlcnIgPSB0aGlzO1xuXHQgICAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgICAgaWYoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcblx0ICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZXJyKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIGVyci5uYW1lID0gJ1RlbXBsYXRlIHJlbmRlciBlcnJvcic7XG5cdCAgICBlcnIubWVzc2FnZSA9IG1lc3NhZ2U7XG5cdCAgICBlcnIubGluZW5vID0gbGluZW5vO1xuXHQgICAgZXJyLmNvbG5vID0gY29sbm87XG5cdCAgICBlcnIuZmlyc3RVcGRhdGUgPSB0cnVlO1xuXG5cdCAgICBlcnIuVXBkYXRlID0gZnVuY3Rpb24ocGF0aCkge1xuXHQgICAgICAgIHZhciBtZXNzYWdlID0gJygnICsgKHBhdGggfHwgJ3Vua25vd24gcGF0aCcpICsgJyknO1xuXG5cdCAgICAgICAgLy8gb25seSBzaG93IGxpbmVubyArIGNvbG5vIG5leHQgdG8gcGF0aCBvZiB0ZW1wbGF0ZVxuXHQgICAgICAgIC8vIHdoZXJlIGVycm9yIG9jY3VycmVkXG5cdCAgICAgICAgaWYgKHRoaXMuZmlyc3RVcGRhdGUpIHtcblx0ICAgICAgICAgICAgaWYodGhpcy5saW5lbm8gJiYgdGhpcy5jb2xubykge1xuXHQgICAgICAgICAgICAgICAgbWVzc2FnZSArPSAnIFtMaW5lICcgKyB0aGlzLmxpbmVubyArICcsIENvbHVtbiAnICsgdGhpcy5jb2xubyArICddJztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmKHRoaXMubGluZW5vKSB7XG5cdCAgICAgICAgICAgICAgICBtZXNzYWdlICs9ICcgW0xpbmUgJyArIHRoaXMubGluZW5vICsgJ10nO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgbWVzc2FnZSArPSAnXFxuICc7XG5cdCAgICAgICAgaWYgKHRoaXMuZmlyc3RVcGRhdGUpIHtcblx0ICAgICAgICAgICAgbWVzc2FnZSArPSAnICc7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZSArICh0aGlzLm1lc3NhZ2UgfHwgJycpO1xuXHQgICAgICAgIHRoaXMuZmlyc3RVcGRhdGUgPSBmYWxzZTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cblx0ICAgIHJldHVybiBlcnI7XG5cdH07XG5cblx0ZXhwb3J0cy5UZW1wbGF0ZUVycm9yLnByb3RvdHlwZSA9IEVycm9yLnByb3RvdHlwZTtcblxuXHRleHBvcnRzLmVzY2FwZSA9IGZ1bmN0aW9uKHZhbCkge1xuXHQgIHJldHVybiB2YWwucmVwbGFjZShlc2NhcGVSZWdleCwgbG9va3VwRXNjYXBlKTtcblx0fTtcblxuXHRleHBvcnRzLmlzRnVuY3Rpb24gPSBmdW5jdGlvbihvYmopIHtcblx0ICAgIHJldHVybiBPYmpQcm90by50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cdH07XG5cblx0ZXhwb3J0cy5pc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbihvYmopIHtcblx0ICAgIHJldHVybiBPYmpQcm90by50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG5cdH07XG5cblx0ZXhwb3J0cy5pc1N0cmluZyA9IGZ1bmN0aW9uKG9iaikge1xuXHQgICAgcmV0dXJuIE9ialByb3RvLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgU3RyaW5nXSc7XG5cdH07XG5cblx0ZXhwb3J0cy5pc09iamVjdCA9IGZ1bmN0aW9uKG9iaikge1xuXHQgICAgcmV0dXJuIE9ialByb3RvLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cdH07XG5cblx0ZXhwb3J0cy5ncm91cEJ5ID0gZnVuY3Rpb24ob2JqLCB2YWwpIHtcblx0ICAgIHZhciByZXN1bHQgPSB7fTtcblx0ICAgIHZhciBpdGVyYXRvciA9IGV4cG9ydHMuaXNGdW5jdGlvbih2YWwpID8gdmFsIDogZnVuY3Rpb24ob2JqKSB7IHJldHVybiBvYmpbdmFsXTsgfTtcblx0ICAgIGZvcih2YXIgaT0wOyBpPG9iai5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIHZhciB2YWx1ZSA9IG9ialtpXTtcblx0ICAgICAgICB2YXIga2V5ID0gaXRlcmF0b3IodmFsdWUsIGkpO1xuXHQgICAgICAgIChyZXN1bHRba2V5XSB8fCAocmVzdWx0W2tleV0gPSBbXSkpLnB1c2godmFsdWUpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHRleHBvcnRzLnRvQXJyYXkgPSBmdW5jdGlvbihvYmopIHtcblx0ICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChvYmopO1xuXHR9O1xuXG5cdGV4cG9ydHMud2l0aG91dCA9IGZ1bmN0aW9uKGFycmF5KSB7XG5cdCAgICB2YXIgcmVzdWx0ID0gW107XG5cdCAgICBpZiAoIWFycmF5KSB7XG5cdCAgICAgICAgcmV0dXJuIHJlc3VsdDtcblx0ICAgIH1cblx0ICAgIHZhciBpbmRleCA9IC0xLFxuXHQgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuXHQgICAgY29udGFpbnMgPSBleHBvcnRzLnRvQXJyYXkoYXJndW1lbnRzKS5zbGljZSgxKTtcblxuXHQgICAgd2hpbGUoKytpbmRleCA8IGxlbmd0aCkge1xuXHQgICAgICAgIGlmKGV4cG9ydHMuaW5kZXhPZihjb250YWlucywgYXJyYXlbaW5kZXhdKSA9PT0gLTEpIHtcblx0ICAgICAgICAgICAgcmVzdWx0LnB1c2goYXJyYXlbaW5kZXhdKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdGV4cG9ydHMuZXh0ZW5kID0gZnVuY3Rpb24ob2JqLCBvYmoyKSB7XG5cdCAgICBmb3IodmFyIGsgaW4gb2JqMikge1xuXHQgICAgICAgIG9ialtrXSA9IG9iajJba107XG5cdCAgICB9XG5cdCAgICByZXR1cm4gb2JqO1xuXHR9O1xuXG5cdGV4cG9ydHMucmVwZWF0ID0gZnVuY3Rpb24oY2hhcl8sIG4pIHtcblx0ICAgIHZhciBzdHIgPSAnJztcblx0ICAgIGZvcih2YXIgaT0wOyBpPG47IGkrKykge1xuXHQgICAgICAgIHN0ciArPSBjaGFyXztcblx0ICAgIH1cblx0ICAgIHJldHVybiBzdHI7XG5cdH07XG5cblx0ZXhwb3J0cy5lYWNoID0gZnVuY3Rpb24ob2JqLCBmdW5jLCBjb250ZXh0KSB7XG5cdCAgICBpZihvYmogPT0gbnVsbCkge1xuXHQgICAgICAgIHJldHVybjtcblx0ICAgIH1cblxuXHQgICAgaWYoQXJyYXlQcm90by5lYWNoICYmIG9iai5lYWNoID09PSBBcnJheVByb3RvLmVhY2gpIHtcblx0ICAgICAgICBvYmouZm9yRWFjaChmdW5jLCBjb250ZXh0KTtcblx0ICAgIH1cblx0ICAgIGVsc2UgaWYob2JqLmxlbmd0aCA9PT0gK29iai5sZW5ndGgpIHtcblx0ICAgICAgICBmb3IodmFyIGk9MCwgbD1vYmoubGVuZ3RoOyBpPGw7IGkrKykge1xuXHQgICAgICAgICAgICBmdW5jLmNhbGwoY29udGV4dCwgb2JqW2ldLCBpLCBvYmopO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fTtcblxuXHRleHBvcnRzLm1hcCA9IGZ1bmN0aW9uKG9iaiwgZnVuYykge1xuXHQgICAgdmFyIHJlc3VsdHMgPSBbXTtcblx0ICAgIGlmKG9iaiA9PSBudWxsKSB7XG5cdCAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG5cdCAgICB9XG5cblx0ICAgIGlmKEFycmF5UHJvdG8ubWFwICYmIG9iai5tYXAgPT09IEFycmF5UHJvdG8ubWFwKSB7XG5cdCAgICAgICAgcmV0dXJuIG9iai5tYXAoZnVuYyk7XG5cdCAgICB9XG5cblx0ICAgIGZvcih2YXIgaT0wOyBpPG9iai5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIHJlc3VsdHNbcmVzdWx0cy5sZW5ndGhdID0gZnVuYyhvYmpbaV0sIGkpO1xuXHQgICAgfVxuXG5cdCAgICBpZihvYmoubGVuZ3RoID09PSArb2JqLmxlbmd0aCkge1xuXHQgICAgICAgIHJlc3VsdHMubGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHJlc3VsdHM7XG5cdH07XG5cblx0ZXhwb3J0cy5hc3luY0l0ZXIgPSBmdW5jdGlvbihhcnIsIGl0ZXIsIGNiKSB7XG5cdCAgICB2YXIgaSA9IC0xO1xuXG5cdCAgICBmdW5jdGlvbiBuZXh0KCkge1xuXHQgICAgICAgIGkrKztcblxuXHQgICAgICAgIGlmKGkgPCBhcnIubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgIGl0ZXIoYXJyW2ldLCBpLCBuZXh0LCBjYik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBjYigpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgbmV4dCgpO1xuXHR9O1xuXG5cdGV4cG9ydHMuYXN5bmNGb3IgPSBmdW5jdGlvbihvYmosIGl0ZXIsIGNiKSB7XG5cdCAgICB2YXIga2V5cyA9IGV4cG9ydHMua2V5cyhvYmopO1xuXHQgICAgdmFyIGxlbiA9IGtleXMubGVuZ3RoO1xuXHQgICAgdmFyIGkgPSAtMTtcblxuXHQgICAgZnVuY3Rpb24gbmV4dCgpIHtcblx0ICAgICAgICBpKys7XG5cdCAgICAgICAgdmFyIGsgPSBrZXlzW2ldO1xuXG5cdCAgICAgICAgaWYoaSA8IGxlbikge1xuXHQgICAgICAgICAgICBpdGVyKGssIG9ialtrXSwgaSwgbGVuLCBuZXh0KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIGNiKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICBuZXh0KCk7XG5cdH07XG5cblx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvaW5kZXhPZiNQb2x5ZmlsbFxuXHRleHBvcnRzLmluZGV4T2YgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA/XG5cdCAgICBmdW5jdGlvbiAoYXJyLCBzZWFyY2hFbGVtZW50LCBmcm9tSW5kZXgpIHtcblx0ICAgICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChhcnIsIHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCk7XG5cdCAgICB9IDpcblx0ICAgIGZ1bmN0aW9uIChhcnIsIHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCkge1xuXHQgICAgICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCA+Pj4gMDsgLy8gSGFjayB0byBjb252ZXJ0IG9iamVjdC5sZW5ndGggdG8gYSBVSW50MzJcblxuXHQgICAgICAgIGZyb21JbmRleCA9ICtmcm9tSW5kZXggfHwgMDtcblxuXHQgICAgICAgIGlmKE1hdGguYWJzKGZyb21JbmRleCkgPT09IEluZmluaXR5KSB7XG5cdCAgICAgICAgICAgIGZyb21JbmRleCA9IDA7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYoZnJvbUluZGV4IDwgMCkge1xuXHQgICAgICAgICAgICBmcm9tSW5kZXggKz0gbGVuZ3RoO1xuXHQgICAgICAgICAgICBpZiAoZnJvbUluZGV4IDwgMCkge1xuXHQgICAgICAgICAgICAgICAgZnJvbUluZGV4ID0gMDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGZvcig7ZnJvbUluZGV4IDwgbGVuZ3RoOyBmcm9tSW5kZXgrKykge1xuXHQgICAgICAgICAgICBpZiAoYXJyW2Zyb21JbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBmcm9tSW5kZXg7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4gLTE7XG5cdCAgICB9O1xuXG5cdGlmKCFBcnJheS5wcm90b3R5cGUubWFwKSB7XG5cdCAgICBBcnJheS5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYXAgaXMgdW5pbXBsZW1lbnRlZCBmb3IgdGhpcyBqcyBlbmdpbmUnKTtcblx0ICAgIH07XG5cdH1cblxuXHRleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmopIHtcblx0ICAgIGlmKE9iamVjdC5wcm90b3R5cGUua2V5cykge1xuXHQgICAgICAgIHJldHVybiBvYmoua2V5cygpO1xuXHQgICAgfVxuXHQgICAgZWxzZSB7XG5cdCAgICAgICAgdmFyIGtleXMgPSBbXTtcblx0ICAgICAgICBmb3IodmFyIGsgaW4gb2JqKSB7XG5cdCAgICAgICAgICAgIGlmKG9iai5oYXNPd25Qcm9wZXJ0eShrKSkge1xuXHQgICAgICAgICAgICAgICAga2V5cy5wdXNoKGspO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBrZXlzO1xuXHQgICAgfVxuXHR9O1xuXG5cdGV4cG9ydHMuaW5PcGVyYXRvciA9IGZ1bmN0aW9uIChrZXksIHZhbCkge1xuXHQgICAgaWYgKGV4cG9ydHMuaXNBcnJheSh2YWwpKSB7XG5cdCAgICAgICAgcmV0dXJuIGV4cG9ydHMuaW5kZXhPZih2YWwsIGtleSkgIT09IC0xO1xuXHQgICAgfSBlbHNlIGlmIChleHBvcnRzLmlzT2JqZWN0KHZhbCkpIHtcblx0ICAgICAgICByZXR1cm4ga2V5IGluIHZhbDtcblx0ICAgIH0gZWxzZSBpZiAoZXhwb3J0cy5pc1N0cmluZyh2YWwpKSB7XG5cdCAgICAgICAgcmV0dXJuIHZhbC5pbmRleE9mKGtleSkgIT09IC0xO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCB1c2UgXCJpblwiIG9wZXJhdG9yIHRvIHNlYXJjaCBmb3IgXCInXG5cdCAgICAgICAgICAgICsga2V5ICsgJ1wiIGluIHVuZXhwZWN0ZWQgdHlwZXMuJyk7XG5cdCAgICB9XG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBwYXRoID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0dmFyIGFzYXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXHR2YXIgbGliID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0dmFyIE9iaiA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cdHZhciBjb21waWxlciA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdHZhciBidWlsdGluX2ZpbHRlcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXHR2YXIgYnVpbHRpbl9sb2FkZXJzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0dmFyIHJ1bnRpbWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgZ2xvYmFscyA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cdHZhciB3YXRlcmZhbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblx0dmFyIEZyYW1lID0gcnVudGltZS5GcmFtZTtcblx0dmFyIFRlbXBsYXRlO1xuXG5cdC8vIFVuY29uZGl0aW9uYWxseSBsb2FkIGluIHRoaXMgbG9hZGVyLCBldmVuIGlmIG5vIG90aGVyIG9uZXMgYXJlXG5cdC8vIGluY2x1ZGVkIChwb3NzaWJsZSBpbiB0aGUgc2xpbSBicm93c2VyIGJ1aWxkKVxuXHRidWlsdGluX2xvYWRlcnMuUHJlY29tcGlsZWRMb2FkZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcblxuXHQvLyBJZiB0aGUgdXNlciBpcyB1c2luZyB0aGUgYXN5bmMgQVBJLCAqYWx3YXlzKiBjYWxsIGl0XG5cdC8vIGFzeW5jaHJvbm91c2x5IGV2ZW4gaWYgdGhlIHRlbXBsYXRlIHdhcyBzeW5jaHJvbm91cy5cblx0ZnVuY3Rpb24gY2FsbGJhY2tBc2FwKGNiLCBlcnIsIHJlcykge1xuXHQgICAgYXNhcChmdW5jdGlvbigpIHsgY2IoZXJyLCByZXMpOyB9KTtcblx0fVxuXG5cdHZhciBFbnZpcm9ubWVudCA9IE9iai5leHRlbmQoe1xuXHQgICAgaW5pdDogZnVuY3Rpb24obG9hZGVycywgb3B0cykge1xuXHQgICAgICAgIC8vIFRoZSBkZXYgZmxhZyBkZXRlcm1pbmVzIHRoZSB0cmFjZSB0aGF0J2xsIGJlIHNob3duIG9uIGVycm9ycy5cblx0ICAgICAgICAvLyBJZiBzZXQgdG8gdHJ1ZSwgcmV0dXJucyB0aGUgZnVsbCB0cmFjZSBmcm9tIHRoZSBlcnJvciBwb2ludCxcblx0ICAgICAgICAvLyBvdGhlcndpc2Ugd2lsbCByZXR1cm4gdHJhY2Ugc3RhcnRpbmcgZnJvbSBUZW1wbGF0ZS5yZW5kZXJcblx0ICAgICAgICAvLyAodGhlIGZ1bGwgdHJhY2UgZnJvbSB3aXRoaW4gbnVuanVja3MgbWF5IGNvbmZ1c2UgZGV2ZWxvcGVycyB1c2luZ1xuXHQgICAgICAgIC8vICB0aGUgbGlicmFyeSlcblx0ICAgICAgICAvLyBkZWZhdWx0cyB0byBmYWxzZVxuXHQgICAgICAgIG9wdHMgPSB0aGlzLm9wdHMgPSBvcHRzIHx8IHt9O1xuXHQgICAgICAgIHRoaXMub3B0cy5kZXYgPSAhIW9wdHMuZGV2O1xuXG5cdCAgICAgICAgLy8gVGhlIGF1dG9lc2NhcGUgZmxhZyBzZXRzIGdsb2JhbCBhdXRvZXNjYXBpbmcuIElmIHRydWUsXG5cdCAgICAgICAgLy8gZXZlcnkgc3RyaW5nIHZhcmlhYmxlIHdpbGwgYmUgZXNjYXBlZCBieSBkZWZhdWx0LlxuXHQgICAgICAgIC8vIElmIGZhbHNlLCBzdHJpbmdzIGNhbiBiZSBtYW51YWxseSBlc2NhcGVkIHVzaW5nIHRoZSBgZXNjYXBlYCBmaWx0ZXIuXG5cdCAgICAgICAgLy8gZGVmYXVsdHMgdG8gdHJ1ZVxuXHQgICAgICAgIHRoaXMub3B0cy5hdXRvZXNjYXBlID0gb3B0cy5hdXRvZXNjYXBlICE9IG51bGwgPyBvcHRzLmF1dG9lc2NhcGUgOiB0cnVlO1xuXG5cdCAgICAgICAgLy8gSWYgdHJ1ZSwgdGhpcyB3aWxsIG1ha2UgdGhlIHN5c3RlbSB0aHJvdyBlcnJvcnMgaWYgdHJ5aW5nXG5cdCAgICAgICAgLy8gdG8gb3V0cHV0IGEgbnVsbCBvciB1bmRlZmluZWQgdmFsdWVcblx0ICAgICAgICB0aGlzLm9wdHMudGhyb3dPblVuZGVmaW5lZCA9ICEhb3B0cy50aHJvd09uVW5kZWZpbmVkO1xuXHQgICAgICAgIHRoaXMub3B0cy50cmltQmxvY2tzID0gISFvcHRzLnRyaW1CbG9ja3M7XG5cdCAgICAgICAgdGhpcy5vcHRzLmxzdHJpcEJsb2NrcyA9ICEhb3B0cy5sc3RyaXBCbG9ja3M7XG5cblx0ICAgICAgICB0aGlzLmxvYWRlcnMgPSBbXTtcblxuXHQgICAgICAgIGlmKCFsb2FkZXJzKSB7XG5cdCAgICAgICAgICAgIC8vIFRoZSBmaWxlc3lzdGVtIGxvYWRlciBpcyBvbmx5IGF2YWlsYWJsZSBzZXJ2ZXItc2lkZVxuXHQgICAgICAgICAgICBpZihidWlsdGluX2xvYWRlcnMuRmlsZVN5c3RlbUxvYWRlcikge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5sb2FkZXJzID0gW25ldyBidWlsdGluX2xvYWRlcnMuRmlsZVN5c3RlbUxvYWRlcigndmlld3MnKV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZihidWlsdGluX2xvYWRlcnMuV2ViTG9hZGVyKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmxvYWRlcnMgPSBbbmV3IGJ1aWx0aW5fbG9hZGVycy5XZWJMb2FkZXIoJy92aWV3cycpXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy5sb2FkZXJzID0gbGliLmlzQXJyYXkobG9hZGVycykgPyBsb2FkZXJzIDogW2xvYWRlcnNdO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIEl0J3MgZWFzeSB0byB1c2UgcHJlY29tcGlsZWQgdGVtcGxhdGVzOiBqdXN0IGluY2x1ZGUgdGhlbVxuXHQgICAgICAgIC8vIGJlZm9yZSB5b3UgY29uZmlndXJlIG51bmp1Y2tzIGFuZCB0aGlzIHdpbGwgYXV0b21hdGljYWxseVxuXHQgICAgICAgIC8vIHBpY2sgaXQgdXAgYW5kIHVzZSBpdFxuXHQgICAgICAgIGlmKCh0cnVlKSAmJiB3aW5kb3cubnVuanVja3NQcmVjb21waWxlZCkge1xuXHQgICAgICAgICAgICB0aGlzLmxvYWRlcnMudW5zaGlmdChcblx0ICAgICAgICAgICAgICAgIG5ldyBidWlsdGluX2xvYWRlcnMuUHJlY29tcGlsZWRMb2FkZXIod2luZG93Lm51bmp1Y2tzUHJlY29tcGlsZWQpXG5cdCAgICAgICAgICAgICk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdGhpcy5pbml0Q2FjaGUoKTtcblxuXHQgICAgICAgIHRoaXMuZ2xvYmFscyA9IGdsb2JhbHMoKTtcblx0ICAgICAgICB0aGlzLmZpbHRlcnMgPSB7fTtcblx0ICAgICAgICB0aGlzLmFzeW5jRmlsdGVycyA9IFtdO1xuXHQgICAgICAgIHRoaXMuZXh0ZW5zaW9ucyA9IHt9O1xuXHQgICAgICAgIHRoaXMuZXh0ZW5zaW9uc0xpc3QgPSBbXTtcblxuXHQgICAgICAgIGZvcih2YXIgbmFtZSBpbiBidWlsdGluX2ZpbHRlcnMpIHtcblx0ICAgICAgICAgICAgdGhpcy5hZGRGaWx0ZXIobmFtZSwgYnVpbHRpbl9maWx0ZXJzW25hbWVdKTtcblx0ICAgICAgICB9XG5cdCAgICB9LFxuXG5cdCAgICBpbml0Q2FjaGU6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIC8vIENhY2hpbmcgYW5kIGNhY2hlIGJ1c3Rpbmdcblx0ICAgICAgICBsaWIuZWFjaCh0aGlzLmxvYWRlcnMsIGZ1bmN0aW9uKGxvYWRlcikge1xuXHQgICAgICAgICAgICBsb2FkZXIuY2FjaGUgPSB7fTtcblxuXHQgICAgICAgICAgICBpZih0eXBlb2YgbG9hZGVyLm9uID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgICAgICBsb2FkZXIub24oJ3VwZGF0ZScsIGZ1bmN0aW9uKHRlbXBsYXRlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgbG9hZGVyLmNhY2hlW3RlbXBsYXRlXSA9IG51bGw7XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgfSxcblxuXHQgICAgYWRkRXh0ZW5zaW9uOiBmdW5jdGlvbihuYW1lLCBleHRlbnNpb24pIHtcblx0ICAgICAgICBleHRlbnNpb24uX25hbWUgPSBuYW1lO1xuXHQgICAgICAgIHRoaXMuZXh0ZW5zaW9uc1tuYW1lXSA9IGV4dGVuc2lvbjtcblx0ICAgICAgICB0aGlzLmV4dGVuc2lvbnNMaXN0LnB1c2goZXh0ZW5zaW9uKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH0sXG5cblx0ICAgIHJlbW92ZUV4dGVuc2lvbjogZnVuY3Rpb24obmFtZSkge1xuXHQgICAgICAgIHZhciBleHRlbnNpb24gPSB0aGlzLmdldEV4dGVuc2lvbihuYW1lKTtcblx0ICAgICAgICBpZiAoIWV4dGVuc2lvbikgcmV0dXJuO1xuXG5cdCAgICAgICAgdGhpcy5leHRlbnNpb25zTGlzdCA9IGxpYi53aXRob3V0KHRoaXMuZXh0ZW5zaW9uc0xpc3QsIGV4dGVuc2lvbik7XG5cdCAgICAgICAgZGVsZXRlIHRoaXMuZXh0ZW5zaW9uc1tuYW1lXTtcblx0ICAgIH0sXG5cblx0ICAgIGdldEV4dGVuc2lvbjogZnVuY3Rpb24obmFtZSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLmV4dGVuc2lvbnNbbmFtZV07XG5cdCAgICB9LFxuXG5cdCAgICBoYXNFeHRlbnNpb246IGZ1bmN0aW9uKG5hbWUpIHtcblx0ICAgICAgICByZXR1cm4gISF0aGlzLmV4dGVuc2lvbnNbbmFtZV07XG5cdCAgICB9LFxuXG5cdCAgICBhZGRHbG9iYWw6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG5cdCAgICAgICAgdGhpcy5nbG9iYWxzW25hbWVdID0gdmFsdWU7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9LFxuXG5cdCAgICBnZXRHbG9iYWw6IGZ1bmN0aW9uKG5hbWUpIHtcblx0ICAgICAgICBpZih0eXBlb2YgdGhpcy5nbG9iYWxzW25hbWVdID09PSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2dsb2JhbCBub3QgZm91bmQ6ICcgKyBuYW1lKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZ2xvYmFsc1tuYW1lXTtcblx0ICAgIH0sXG5cblx0ICAgIGFkZEZpbHRlcjogZnVuY3Rpb24obmFtZSwgZnVuYywgYXN5bmMpIHtcblx0ICAgICAgICB2YXIgd3JhcHBlZCA9IGZ1bmM7XG5cblx0ICAgICAgICBpZihhc3luYykge1xuXHQgICAgICAgICAgICB0aGlzLmFzeW5jRmlsdGVycy5wdXNoKG5hbWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmZpbHRlcnNbbmFtZV0gPSB3cmFwcGVkO1xuXHQgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgfSxcblxuXHQgICAgZ2V0RmlsdGVyOiBmdW5jdGlvbihuYW1lKSB7XG5cdCAgICAgICAgaWYoIXRoaXMuZmlsdGVyc1tuYW1lXSkge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZpbHRlciBub3QgZm91bmQ6ICcgKyBuYW1lKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyc1tuYW1lXTtcblx0ICAgIH0sXG5cblx0ICAgIHJlc29sdmVUZW1wbGF0ZTogZnVuY3Rpb24obG9hZGVyLCBwYXJlbnROYW1lLCBmaWxlbmFtZSkge1xuXHQgICAgICAgIHZhciBpc1JlbGF0aXZlID0gKGxvYWRlci5pc1JlbGF0aXZlICYmIHBhcmVudE5hbWUpPyBsb2FkZXIuaXNSZWxhdGl2ZShmaWxlbmFtZSkgOiBmYWxzZTtcblx0ICAgICAgICByZXR1cm4gKGlzUmVsYXRpdmUgJiYgbG9hZGVyLnJlc29sdmUpPyBsb2FkZXIucmVzb2x2ZShwYXJlbnROYW1lLCBmaWxlbmFtZSkgOiBmaWxlbmFtZTtcblx0ICAgIH0sXG5cblx0ICAgIGdldFRlbXBsYXRlOiBmdW5jdGlvbihuYW1lLCBlYWdlckNvbXBpbGUsIHBhcmVudE5hbWUsIGlnbm9yZU1pc3NpbmcsIGNiKSB7XG5cdCAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuXHQgICAgICAgIHZhciB0bXBsID0gbnVsbDtcblx0ICAgICAgICBpZihuYW1lICYmIG5hbWUucmF3KSB7XG5cdCAgICAgICAgICAgIC8vIHRoaXMgZml4ZXMgYXV0b2VzY2FwZSBmb3IgdGVtcGxhdGVzIHJlZmVyZW5jZWQgaW4gc3ltYm9sc1xuXHQgICAgICAgICAgICBuYW1lID0gbmFtZS5yYXc7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYobGliLmlzRnVuY3Rpb24ocGFyZW50TmFtZSkpIHtcblx0ICAgICAgICAgICAgY2IgPSBwYXJlbnROYW1lO1xuXHQgICAgICAgICAgICBwYXJlbnROYW1lID0gbnVsbDtcblx0ICAgICAgICAgICAgZWFnZXJDb21waWxlID0gZWFnZXJDb21waWxlIHx8IGZhbHNlO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmKGxpYi5pc0Z1bmN0aW9uKGVhZ2VyQ29tcGlsZSkpIHtcblx0ICAgICAgICAgICAgY2IgPSBlYWdlckNvbXBpbGU7XG5cdCAgICAgICAgICAgIGVhZ2VyQ29tcGlsZSA9IGZhbHNlO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmIChuYW1lIGluc3RhbmNlb2YgVGVtcGxhdGUpIHtcblx0ICAgICAgICAgICAgIHRtcGwgPSBuYW1lO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RlbXBsYXRlIG5hbWVzIG11c3QgYmUgYSBzdHJpbmc6ICcgKyBuYW1lKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sb2FkZXJzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgX25hbWUgPSB0aGlzLnJlc29sdmVUZW1wbGF0ZSh0aGlzLmxvYWRlcnNbaV0sIHBhcmVudE5hbWUsIG5hbWUpO1xuXHQgICAgICAgICAgICAgICAgdG1wbCA9IHRoaXMubG9hZGVyc1tpXS5jYWNoZVtfbmFtZV07XG5cdCAgICAgICAgICAgICAgICBpZiAodG1wbCkgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZih0bXBsKSB7XG5cdCAgICAgICAgICAgIGlmKGVhZ2VyQ29tcGlsZSkge1xuXHQgICAgICAgICAgICAgICAgdG1wbC5jb21waWxlKCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBpZihjYikge1xuXHQgICAgICAgICAgICAgICAgY2IobnVsbCwgdG1wbCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdG1wbDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHZhciBzeW5jUmVzdWx0O1xuXHQgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdCAgICAgICAgICAgIHZhciBjcmVhdGVUZW1wbGF0ZSA9IGZ1bmN0aW9uKGVyciwgaW5mbykge1xuXHQgICAgICAgICAgICAgICAgaWYoIWluZm8gJiYgIWVycikge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmKCFpZ25vcmVNaXNzaW5nKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVyciA9IG5ldyBFcnJvcigndGVtcGxhdGUgbm90IGZvdW5kOiAnICsgbmFtZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYoY2IpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2IoZXJyKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdG1wbDtcblx0ICAgICAgICAgICAgICAgICAgICBpZihpbmZvKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRtcGwgPSBuZXcgVGVtcGxhdGUoaW5mby5zcmMsIF90aGlzLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm8ucGF0aCwgZWFnZXJDb21waWxlKTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZighaW5mby5ub0NhY2hlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvLmxvYWRlci5jYWNoZVtuYW1lXSA9IHRtcGw7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRtcGwgPSBuZXcgVGVtcGxhdGUoJycsIF90aGlzLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcnLCBlYWdlckNvbXBpbGUpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgICAgIGlmKGNiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNiKG51bGwsIHRtcGwpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3luY1Jlc3VsdCA9IHRtcGw7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9O1xuXG5cdCAgICAgICAgICAgIGxpYi5hc3luY0l0ZXIodGhpcy5sb2FkZXJzLCBmdW5jdGlvbihsb2FkZXIsIGksIG5leHQsIGRvbmUpIHtcblx0ICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZShlcnIsIHNyYykge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmKGVycikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb25lKGVycik7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoc3JjKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHNyYy5sb2FkZXIgPSBsb2FkZXI7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUobnVsbCwgc3JjKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlc29sdmUgbmFtZSByZWxhdGl2ZSB0byBwYXJlbnROYW1lXG5cdCAgICAgICAgICAgICAgICBuYW1lID0gdGhhdC5yZXNvbHZlVGVtcGxhdGUobG9hZGVyLCBwYXJlbnROYW1lLCBuYW1lKTtcblxuXHQgICAgICAgICAgICAgICAgaWYobG9hZGVyLmFzeW5jKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgbG9hZGVyLmdldFNvdXJjZShuYW1lLCBoYW5kbGUpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaGFuZGxlKG51bGwsIGxvYWRlci5nZXRTb3VyY2UobmFtZSkpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LCBjcmVhdGVUZW1wbGF0ZSk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIHN5bmNSZXN1bHQ7XG5cdCAgICAgICAgfVxuXHQgICAgfSxcblxuXHQgICAgZXhwcmVzczogZnVuY3Rpb24oYXBwKSB7XG5cdCAgICAgICAgdmFyIGVudiA9IHRoaXM7XG5cblx0ICAgICAgICBmdW5jdGlvbiBOdW5qdWNrc1ZpZXcobmFtZSwgb3B0cykge1xuXHQgICAgICAgICAgICB0aGlzLm5hbWUgICAgICAgICAgPSBuYW1lO1xuXHQgICAgICAgICAgICB0aGlzLnBhdGggICAgICAgICAgPSBuYW1lO1xuXHQgICAgICAgICAgICB0aGlzLmRlZmF1bHRFbmdpbmUgPSBvcHRzLmRlZmF1bHRFbmdpbmU7XG5cdCAgICAgICAgICAgIHRoaXMuZXh0ICAgICAgICAgICA9IHBhdGguZXh0bmFtZShuYW1lKTtcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLmV4dCAmJiAhdGhpcy5kZWZhdWx0RW5naW5lKSB0aHJvdyBuZXcgRXJyb3IoJ05vIGRlZmF1bHQgZW5naW5lIHdhcyBzcGVjaWZpZWQgYW5kIG5vIGV4dGVuc2lvbiB3YXMgcHJvdmlkZWQuJyk7XG5cdCAgICAgICAgICAgIGlmICghdGhpcy5leHQpIHRoaXMubmFtZSArPSAodGhpcy5leHQgPSAoJy4nICE9PSB0aGlzLmRlZmF1bHRFbmdpbmVbMF0gPyAnLicgOiAnJykgKyB0aGlzLmRlZmF1bHRFbmdpbmUpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIE51bmp1Y2tzVmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24ob3B0cywgY2IpIHtcblx0ICAgICAgICAgIGVudi5yZW5kZXIodGhpcy5uYW1lLCBvcHRzLCBjYik7XG5cdCAgICAgICAgfTtcblxuXHQgICAgICAgIGFwcC5zZXQoJ3ZpZXcnLCBOdW5qdWNrc1ZpZXcpO1xuXHQgICAgICAgIGFwcC5zZXQoJ251bmp1Y2tzRW52JywgdGhpcyk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICB9LFxuXG5cdCAgICByZW5kZXI6IGZ1bmN0aW9uKG5hbWUsIGN0eCwgY2IpIHtcblx0ICAgICAgICBpZihsaWIuaXNGdW5jdGlvbihjdHgpKSB7XG5cdCAgICAgICAgICAgIGNiID0gY3R4O1xuXHQgICAgICAgICAgICBjdHggPSBudWxsO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIFdlIHN1cHBvcnQgYSBzeW5jaHJvbm91cyBBUEkgdG8gbWFrZSBpdCBlYXNpZXIgdG8gbWlncmF0ZVxuXHQgICAgICAgIC8vIGV4aXN0aW5nIGNvZGUgdG8gYXN5bmMuIFRoaXMgd29ya3MgYmVjYXVzZSBpZiB5b3UgZG9uJ3QgZG9cblx0ICAgICAgICAvLyBhbnl0aGluZyBhc3luYyB3b3JrLCB0aGUgd2hvbGUgdGhpbmcgaXMgYWN0dWFsbHkgcnVuXG5cdCAgICAgICAgLy8gc3luY2hyb25vdXNseS5cblx0ICAgICAgICB2YXIgc3luY1Jlc3VsdCA9IG51bGw7XG5cblx0ICAgICAgICB0aGlzLmdldFRlbXBsYXRlKG5hbWUsIGZ1bmN0aW9uKGVyciwgdG1wbCkge1xuXHQgICAgICAgICAgICBpZihlcnIgJiYgY2IpIHtcblx0ICAgICAgICAgICAgICAgIGNhbGxiYWNrQXNhcChjYiwgZXJyKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmKGVycikge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgc3luY1Jlc3VsdCA9IHRtcGwucmVuZGVyKGN0eCwgY2IpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cblx0ICAgICAgICByZXR1cm4gc3luY1Jlc3VsdDtcblx0ICAgIH0sXG5cblx0ICAgIHJlbmRlclN0cmluZzogZnVuY3Rpb24oc3JjLCBjdHgsIG9wdHMsIGNiKSB7XG5cdCAgICAgICAgaWYobGliLmlzRnVuY3Rpb24ob3B0cykpIHtcblx0ICAgICAgICAgICAgY2IgPSBvcHRzO1xuXHQgICAgICAgICAgICBvcHRzID0ge307XG5cdCAgICAgICAgfVxuXHQgICAgICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuXG5cdCAgICAgICAgdmFyIHRtcGwgPSBuZXcgVGVtcGxhdGUoc3JjLCB0aGlzLCBvcHRzLnBhdGgpO1xuXHQgICAgICAgIHJldHVybiB0bXBsLnJlbmRlcihjdHgsIGNiKTtcblx0ICAgIH0sXG5cblx0ICAgIHdhdGVyZmFsbDogd2F0ZXJmYWxsXG5cdH0pO1xuXG5cdHZhciBDb250ZXh0ID0gT2JqLmV4dGVuZCh7XG5cdCAgICBpbml0OiBmdW5jdGlvbihjdHgsIGJsb2NrcywgZW52KSB7XG5cdCAgICAgICAgLy8gSGFzIHRvIGJlIHRpZWQgdG8gYW4gZW52aXJvbm1lbnQgc28gd2UgY2FuIHRhcCBpbnRvIGl0cyBnbG9iYWxzLlxuXHQgICAgICAgIHRoaXMuZW52ID0gZW52IHx8IG5ldyBFbnZpcm9ubWVudCgpO1xuXG5cdCAgICAgICAgLy8gTWFrZSBhIGR1cGxpY2F0ZSBvZiBjdHhcblx0ICAgICAgICB0aGlzLmN0eCA9IHt9O1xuXHQgICAgICAgIGZvcih2YXIgayBpbiBjdHgpIHtcblx0ICAgICAgICAgICAgaWYoY3R4Lmhhc093blByb3BlcnR5KGspKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmN0eFtrXSA9IGN0eFtrXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHRoaXMuYmxvY2tzID0ge307XG5cdCAgICAgICAgdGhpcy5leHBvcnRlZCA9IFtdO1xuXG5cdCAgICAgICAgZm9yKHZhciBuYW1lIGluIGJsb2Nrcykge1xuXHQgICAgICAgICAgICB0aGlzLmFkZEJsb2NrKG5hbWUsIGJsb2Nrc1tuYW1lXSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSxcblxuXHQgICAgbG9va3VwOiBmdW5jdGlvbihuYW1lKSB7XG5cdCAgICAgICAgLy8gVGhpcyBpcyBvbmUgb2YgdGhlIG1vc3QgY2FsbGVkIGZ1bmN0aW9ucywgc28gb3B0aW1pemUgZm9yXG5cdCAgICAgICAgLy8gdGhlIHR5cGljYWwgY2FzZSB3aGVyZSB0aGUgbmFtZSBpc24ndCBpbiB0aGUgZ2xvYmFsc1xuXHQgICAgICAgIGlmKG5hbWUgaW4gdGhpcy5lbnYuZ2xvYmFscyAmJiAhKG5hbWUgaW4gdGhpcy5jdHgpKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLmVudi5nbG9iYWxzW25hbWVdO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3R4W25hbWVdO1xuXHQgICAgICAgIH1cblx0ICAgIH0sXG5cblx0ICAgIHNldFZhcmlhYmxlOiBmdW5jdGlvbihuYW1lLCB2YWwpIHtcblx0ICAgICAgICB0aGlzLmN0eFtuYW1lXSA9IHZhbDtcblx0ICAgIH0sXG5cblx0ICAgIGdldFZhcmlhYmxlczogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuY3R4O1xuXHQgICAgfSxcblxuXHQgICAgYWRkQmxvY2s6IGZ1bmN0aW9uKG5hbWUsIGJsb2NrKSB7XG5cdCAgICAgICAgdGhpcy5ibG9ja3NbbmFtZV0gPSB0aGlzLmJsb2Nrc1tuYW1lXSB8fCBbXTtcblx0ICAgICAgICB0aGlzLmJsb2Nrc1tuYW1lXS5wdXNoKGJsb2NrKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH0sXG5cblx0ICAgIGdldEJsb2NrOiBmdW5jdGlvbihuYW1lKSB7XG5cdCAgICAgICAgaWYoIXRoaXMuYmxvY2tzW25hbWVdKSB7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBibG9jayBcIicgKyBuYW1lICsgJ1wiJyk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIHRoaXMuYmxvY2tzW25hbWVdWzBdO1xuXHQgICAgfSxcblxuXHQgICAgZ2V0U3VwZXI6IGZ1bmN0aW9uKGVudiwgbmFtZSwgYmxvY2ssIGZyYW1lLCBydW50aW1lLCBjYikge1xuXHQgICAgICAgIHZhciBpZHggPSBsaWIuaW5kZXhPZih0aGlzLmJsb2Nrc1tuYW1lXSB8fCBbXSwgYmxvY2spO1xuXHQgICAgICAgIHZhciBibGsgPSB0aGlzLmJsb2Nrc1tuYW1lXVtpZHggKyAxXTtcblx0ICAgICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG5cblx0ICAgICAgICBpZihpZHggPT09IC0xIHx8ICFibGspIHtcblx0ICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdubyBzdXBlciBibG9jayBhdmFpbGFibGUgZm9yIFwiJyArIG5hbWUgKyAnXCInKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBibGsoZW52LCBjb250ZXh0LCBmcmFtZSwgcnVudGltZSwgY2IpO1xuXHQgICAgfSxcblxuXHQgICAgYWRkRXhwb3J0OiBmdW5jdGlvbihuYW1lKSB7XG5cdCAgICAgICAgdGhpcy5leHBvcnRlZC5wdXNoKG5hbWUpO1xuXHQgICAgfSxcblxuXHQgICAgZ2V0RXhwb3J0ZWQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIHZhciBleHBvcnRlZCA9IHt9O1xuXHQgICAgICAgIGZvcih2YXIgaT0wOyBpPHRoaXMuZXhwb3J0ZWQubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIG5hbWUgPSB0aGlzLmV4cG9ydGVkW2ldO1xuXHQgICAgICAgICAgICBleHBvcnRlZFtuYW1lXSA9IHRoaXMuY3R4W25hbWVdO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gZXhwb3J0ZWQ7XG5cdCAgICB9XG5cdH0pO1xuXG5cdFRlbXBsYXRlID0gT2JqLmV4dGVuZCh7XG5cdCAgICBpbml0OiBmdW5jdGlvbiAoc3JjLCBlbnYsIHBhdGgsIGVhZ2VyQ29tcGlsZSkge1xuXHQgICAgICAgIHRoaXMuZW52ID0gZW52IHx8IG5ldyBFbnZpcm9ubWVudCgpO1xuXG5cdCAgICAgICAgaWYobGliLmlzT2JqZWN0KHNyYykpIHtcblx0ICAgICAgICAgICAgc3dpdGNoKHNyYy50eXBlKSB7XG5cdCAgICAgICAgICAgIGNhc2UgJ2NvZGUnOiB0aGlzLnRtcGxQcm9wcyA9IHNyYy5vYmo7IGJyZWFrO1xuXHQgICAgICAgICAgICBjYXNlICdzdHJpbmcnOiB0aGlzLnRtcGxTdHIgPSBzcmMub2JqOyBicmVhaztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmKGxpYi5pc1N0cmluZyhzcmMpKSB7XG5cdCAgICAgICAgICAgIHRoaXMudG1wbFN0ciA9IHNyYztcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc3JjIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gb2JqZWN0IGRlc2NyaWJpbmcgJyArXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGhlIHNvdXJjZScpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHRoaXMucGF0aCA9IHBhdGg7XG5cblx0ICAgICAgICBpZihlYWdlckNvbXBpbGUpIHtcblx0ICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblx0ICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgIF90aGlzLl9jb21waWxlKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgY2F0Y2goZXJyKSB7XG5cdCAgICAgICAgICAgICAgICB0aHJvdyBsaWIucHJldHRpZnlFcnJvcih0aGlzLnBhdGgsIHRoaXMuZW52Lm9wdHMuZGV2LCBlcnIpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLmNvbXBpbGVkID0gZmFsc2U7XG5cdCAgICAgICAgfVxuXHQgICAgfSxcblxuXHQgICAgcmVuZGVyOiBmdW5jdGlvbihjdHgsIHBhcmVudEZyYW1lLCBjYikge1xuXHQgICAgICAgIGlmICh0eXBlb2YgY3R4ID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgIGNiID0gY3R4O1xuXHQgICAgICAgICAgICBjdHggPSB7fTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAodHlwZW9mIHBhcmVudEZyYW1lID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgIGNiID0gcGFyZW50RnJhbWU7XG5cdCAgICAgICAgICAgIHBhcmVudEZyYW1lID0gbnVsbDtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICB2YXIgZm9yY2VBc3luYyA9IHRydWU7XG5cdCAgICAgICAgaWYocGFyZW50RnJhbWUpIHtcblx0ICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSBmcmFtZSwgd2UgYXJlIGJlaW5nIGNhbGxlZCBmcm9tIGludGVybmFsXG5cdCAgICAgICAgICAgIC8vIGNvZGUgb2YgYW5vdGhlciB0ZW1wbGF0ZSwgYW5kIHRoZSBpbnRlcm5hbCBzeXN0ZW1cblx0ICAgICAgICAgICAgLy8gZGVwZW5kcyBvbiB0aGUgc3luYy9hc3luYyBuYXR1cmUgb2YgdGhlIHBhcmVudCB0ZW1wbGF0ZVxuXHQgICAgICAgICAgICAvLyB0byBiZSBpbmhlcml0ZWQsIHNvIGZvcmNlIGFuIGFzeW5jIGNhbGxiYWNrXG5cdCAgICAgICAgICAgIGZvcmNlQXN5bmMgPSBmYWxzZTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXHQgICAgICAgIC8vIENhdGNoIGNvbXBpbGUgZXJyb3JzIGZvciBhc3luYyByZW5kZXJpbmdcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICBfdGhpcy5jb21waWxlKCk7XG5cdCAgICAgICAgfSBjYXRjaCAoX2Vycikge1xuXHQgICAgICAgICAgICB2YXIgZXJyID0gbGliLnByZXR0aWZ5RXJyb3IodGhpcy5wYXRoLCB0aGlzLmVudi5vcHRzLmRldiwgX2Vycik7XG5cdCAgICAgICAgICAgIGlmIChjYikgcmV0dXJuIGNhbGxiYWNrQXNhcChjYiwgZXJyKTtcblx0ICAgICAgICAgICAgZWxzZSB0aHJvdyBlcnI7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dChjdHggfHwge30sIF90aGlzLmJsb2NrcywgX3RoaXMuZW52KTtcblx0ICAgICAgICB2YXIgZnJhbWUgPSBwYXJlbnRGcmFtZSA/IHBhcmVudEZyYW1lLnB1c2godHJ1ZSkgOiBuZXcgRnJhbWUoKTtcblx0ICAgICAgICBmcmFtZS50b3BMZXZlbCA9IHRydWU7XG5cdCAgICAgICAgdmFyIHN5bmNSZXN1bHQgPSBudWxsO1xuXG5cdCAgICAgICAgX3RoaXMucm9vdFJlbmRlckZ1bmMoXG5cdCAgICAgICAgICAgIF90aGlzLmVudixcblx0ICAgICAgICAgICAgY29udGV4dCxcblx0ICAgICAgICAgICAgZnJhbWUgfHwgbmV3IEZyYW1lKCksXG5cdCAgICAgICAgICAgIHJ1bnRpbWUsXG5cdCAgICAgICAgICAgIGZ1bmN0aW9uKGVyciwgcmVzKSB7XG5cdCAgICAgICAgICAgICAgICBpZihlcnIpIHtcblx0ICAgICAgICAgICAgICAgICAgICBlcnIgPSBsaWIucHJldHRpZnlFcnJvcihfdGhpcy5wYXRoLCBfdGhpcy5lbnYub3B0cy5kZXYsIGVycik7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIGlmKGNiKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYoZm9yY2VBc3luYykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja0FzYXAoY2IsIGVyciwgcmVzKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNiKGVyciwgcmVzKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZihlcnIpIHsgdGhyb3cgZXJyOyB9XG5cdCAgICAgICAgICAgICAgICAgICAgc3luY1Jlc3VsdCA9IHJlcztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICk7XG5cblx0ICAgICAgICByZXR1cm4gc3luY1Jlc3VsdDtcblx0ICAgIH0sXG5cblxuXHQgICAgZ2V0RXhwb3J0ZWQ6IGZ1bmN0aW9uKGN0eCwgcGFyZW50RnJhbWUsIGNiKSB7XG5cdCAgICAgICAgaWYgKHR5cGVvZiBjdHggPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICAgICAgY2IgPSBjdHg7XG5cdCAgICAgICAgICAgIGN0eCA9IHt9O1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmICh0eXBlb2YgcGFyZW50RnJhbWUgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICAgICAgY2IgPSBwYXJlbnRGcmFtZTtcblx0ICAgICAgICAgICAgcGFyZW50RnJhbWUgPSBudWxsO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIENhdGNoIGNvbXBpbGUgZXJyb3JzIGZvciBhc3luYyByZW5kZXJpbmdcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICB0aGlzLmNvbXBpbGUoKTtcblx0ICAgICAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAgIGlmIChjYikgcmV0dXJuIGNiKGUpO1xuXHQgICAgICAgICAgICBlbHNlIHRocm93IGU7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdmFyIGZyYW1lID0gcGFyZW50RnJhbWUgPyBwYXJlbnRGcmFtZS5wdXNoKCkgOiBuZXcgRnJhbWUoKTtcblx0ICAgICAgICBmcmFtZS50b3BMZXZlbCA9IHRydWU7XG5cblx0ICAgICAgICAvLyBSdW4gdGhlIHJvb3RSZW5kZXJGdW5jIHRvIHBvcHVsYXRlIHRoZSBjb250ZXh0IHdpdGggZXhwb3J0ZWQgdmFyc1xuXHQgICAgICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQoY3R4IHx8IHt9LCB0aGlzLmJsb2NrcywgdGhpcy5lbnYpO1xuXHQgICAgICAgIHRoaXMucm9vdFJlbmRlckZ1bmModGhpcy5lbnYsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWUsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oZXJyKSB7XG5cdCAgICAgICAgXHRcdCAgICAgICAgaWYgKCBlcnIgKSB7XG5cdCAgICAgICAgXHRcdFx0ICAgIGNiKGVyciwgbnVsbCk7XG5cdCAgICAgICAgXHRcdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBcdFx0XHQgICAgY2IobnVsbCwgY29udGV4dC5nZXRFeHBvcnRlZCgpKTtcblx0ICAgICAgICBcdFx0ICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgIH0sXG5cblx0ICAgIGNvbXBpbGU6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgIGlmKCF0aGlzLmNvbXBpbGVkKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2NvbXBpbGUoKTtcblx0ICAgICAgICB9XG5cdCAgICB9LFxuXG5cdCAgICBfY29tcGlsZTogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgdmFyIHByb3BzO1xuXG5cdCAgICAgICAgaWYodGhpcy50bXBsUHJvcHMpIHtcblx0ICAgICAgICAgICAgcHJvcHMgPSB0aGlzLnRtcGxQcm9wcztcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHZhciBzb3VyY2UgPSBjb21waWxlci5jb21waWxlKHRoaXMudG1wbFN0cixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnYuYXN5bmNGaWx0ZXJzLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudi5leHRlbnNpb25zTGlzdCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXRoLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudi5vcHRzKTtcblxuXHQgICAgICAgICAgICAvKiBqc2xpbnQgZXZpbDogdHJ1ZSAqL1xuXHQgICAgICAgICAgICB2YXIgZnVuYyA9IG5ldyBGdW5jdGlvbihzb3VyY2UpO1xuXHQgICAgICAgICAgICBwcm9wcyA9IGZ1bmMoKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICB0aGlzLmJsb2NrcyA9IHRoaXMuX2dldEJsb2Nrcyhwcm9wcyk7XG5cdCAgICAgICAgdGhpcy5yb290UmVuZGVyRnVuYyA9IHByb3BzLnJvb3Q7XG5cdCAgICAgICAgdGhpcy5jb21waWxlZCA9IHRydWU7XG5cdCAgICB9LFxuXG5cdCAgICBfZ2V0QmxvY2tzOiBmdW5jdGlvbihwcm9wcykge1xuXHQgICAgICAgIHZhciBibG9ja3MgPSB7fTtcblxuXHQgICAgICAgIGZvcih2YXIgayBpbiBwcm9wcykge1xuXHQgICAgICAgICAgICBpZihrLnNsaWNlKDAsIDIpID09PSAnYl8nKSB7XG5cdCAgICAgICAgICAgICAgICBibG9ja3Nbay5zbGljZSgyKV0gPSBwcm9wc1trXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBibG9ja3M7XG5cdCAgICB9XG5cdH0pO1xuXG5cdG1vZHVsZS5leHBvcnRzID0ge1xuXHQgICAgRW52aXJvbm1lbnQ6IEVudmlyb25tZW50LFxuXHQgICAgVGVtcGxhdGU6IFRlbXBsYXRlXG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XG5cbi8qKiovIH0pLFxuLyogNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdC8vIHJhd0FzYXAgcHJvdmlkZXMgZXZlcnl0aGluZyB3ZSBuZWVkIGV4Y2VwdCBleGNlcHRpb24gbWFuYWdlbWVudC5cblx0dmFyIHJhd0FzYXAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXHQvLyBSYXdUYXNrcyBhcmUgcmVjeWNsZWQgdG8gcmVkdWNlIEdDIGNodXJuLlxuXHR2YXIgZnJlZVRhc2tzID0gW107XG5cdC8vIFdlIHF1ZXVlIGVycm9ycyB0byBlbnN1cmUgdGhleSBhcmUgdGhyb3duIGluIHJpZ2h0IG9yZGVyIChGSUZPKS5cblx0Ly8gQXJyYXktYXMtcXVldWUgaXMgZ29vZCBlbm91Z2ggaGVyZSwgc2luY2Ugd2UgYXJlIGp1c3QgZGVhbGluZyB3aXRoIGV4Y2VwdGlvbnMuXG5cdHZhciBwZW5kaW5nRXJyb3JzID0gW107XG5cdHZhciByZXF1ZXN0RXJyb3JUaHJvdyA9IHJhd0FzYXAubWFrZVJlcXVlc3RDYWxsRnJvbVRpbWVyKHRocm93Rmlyc3RFcnJvcik7XG5cblx0ZnVuY3Rpb24gdGhyb3dGaXJzdEVycm9yKCkge1xuXHQgICAgaWYgKHBlbmRpbmdFcnJvcnMubGVuZ3RoKSB7XG5cdCAgICAgICAgdGhyb3cgcGVuZGluZ0Vycm9ycy5zaGlmdCgpO1xuXHQgICAgfVxuXHR9XG5cblx0LyoqXG5cdCAqIENhbGxzIGEgdGFzayBhcyBzb29uIGFzIHBvc3NpYmxlIGFmdGVyIHJldHVybmluZywgaW4gaXRzIG93biBldmVudCwgd2l0aCBwcmlvcml0eVxuXHQgKiBvdmVyIG90aGVyIGV2ZW50cyBsaWtlIGFuaW1hdGlvbiwgcmVmbG93LCBhbmQgcmVwYWludC4gQW4gZXJyb3IgdGhyb3duIGZyb20gYW5cblx0ICogZXZlbnQgd2lsbCBub3QgaW50ZXJydXB0LCBub3IgZXZlbiBzdWJzdGFudGlhbGx5IHNsb3cgZG93biB0aGUgcHJvY2Vzc2luZyBvZlxuXHQgKiBvdGhlciBldmVudHMsIGJ1dCB3aWxsIGJlIHJhdGhlciBwb3N0cG9uZWQgdG8gYSBsb3dlciBwcmlvcml0eSBldmVudC5cblx0ICogQHBhcmFtIHt7Y2FsbH19IHRhc2sgQSBjYWxsYWJsZSBvYmplY3QsIHR5cGljYWxseSBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgbm9cblx0ICogYXJndW1lbnRzLlxuXHQgKi9cblx0bW9kdWxlLmV4cG9ydHMgPSBhc2FwO1xuXHRmdW5jdGlvbiBhc2FwKHRhc2spIHtcblx0ICAgIHZhciByYXdUYXNrO1xuXHQgICAgaWYgKGZyZWVUYXNrcy5sZW5ndGgpIHtcblx0ICAgICAgICByYXdUYXNrID0gZnJlZVRhc2tzLnBvcCgpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgICByYXdUYXNrID0gbmV3IFJhd1Rhc2soKTtcblx0ICAgIH1cblx0ICAgIHJhd1Rhc2sudGFzayA9IHRhc2s7XG5cdCAgICByYXdBc2FwKHJhd1Rhc2spO1xuXHR9XG5cblx0Ly8gV2Ugd3JhcCB0YXNrcyB3aXRoIHJlY3ljbGFibGUgdGFzayBvYmplY3RzLiAgQSB0YXNrIG9iamVjdCBpbXBsZW1lbnRzXG5cdC8vIGBjYWxsYCwganVzdCBsaWtlIGEgZnVuY3Rpb24uXG5cdGZ1bmN0aW9uIFJhd1Rhc2soKSB7XG5cdCAgICB0aGlzLnRhc2sgPSBudWxsO1xuXHR9XG5cblx0Ly8gVGhlIHNvbGUgcHVycG9zZSBvZiB3cmFwcGluZyB0aGUgdGFzayBpcyB0byBjYXRjaCB0aGUgZXhjZXB0aW9uIGFuZCByZWN5Y2xlXG5cdC8vIHRoZSB0YXNrIG9iamVjdCBhZnRlciBpdHMgc2luZ2xlIHVzZS5cblx0UmF3VGFzay5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHRyeSB7XG5cdCAgICAgICAgdGhpcy50YXNrLmNhbGwoKTtcblx0ICAgIH0gY2F0Y2ggKGVycm9yKSB7XG5cdCAgICAgICAgaWYgKGFzYXAub25lcnJvcikge1xuXHQgICAgICAgICAgICAvLyBUaGlzIGhvb2sgZXhpc3RzIHB1cmVseSBmb3IgdGVzdGluZyBwdXJwb3Nlcy5cblx0ICAgICAgICAgICAgLy8gSXRzIG5hbWUgd2lsbCBiZSBwZXJpb2RpY2FsbHkgcmFuZG9taXplZCB0byBicmVhayBhbnkgY29kZSB0aGF0XG5cdCAgICAgICAgICAgIC8vIGRlcGVuZHMgb24gaXRzIGV4aXN0ZW5jZS5cblx0ICAgICAgICAgICAgYXNhcC5vbmVycm9yKGVycm9yKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAvLyBJbiBhIHdlYiBicm93c2VyLCBleGNlcHRpb25zIGFyZSBub3QgZmF0YWwuIEhvd2V2ZXIsIHRvIGF2b2lkXG5cdCAgICAgICAgICAgIC8vIHNsb3dpbmcgZG93biB0aGUgcXVldWUgb2YgcGVuZGluZyB0YXNrcywgd2UgcmV0aHJvdyB0aGUgZXJyb3IgaW4gYVxuXHQgICAgICAgICAgICAvLyBsb3dlciBwcmlvcml0eSB0dXJuLlxuXHQgICAgICAgICAgICBwZW5kaW5nRXJyb3JzLnB1c2goZXJyb3IpO1xuXHQgICAgICAgICAgICByZXF1ZXN0RXJyb3JUaHJvdygpO1xuXHQgICAgICAgIH1cblx0ICAgIH0gZmluYWxseSB7XG5cdCAgICAgICAgdGhpcy50YXNrID0gbnVsbDtcblx0ICAgICAgICBmcmVlVGFza3NbZnJlZVRhc2tzLmxlbmd0aF0gPSB0aGlzO1xuXHQgICAgfVxuXHR9O1xuXG5cbi8qKiovIH0pLFxuLyogNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHtcInVzZSBzdHJpY3RcIjtcblxuXHQvLyBVc2UgdGhlIGZhc3Rlc3QgbWVhbnMgcG9zc2libGUgdG8gZXhlY3V0ZSBhIHRhc2sgaW4gaXRzIG93biB0dXJuLCB3aXRoXG5cdC8vIHByaW9yaXR5IG92ZXIgb3RoZXIgZXZlbnRzIGluY2x1ZGluZyBJTywgYW5pbWF0aW9uLCByZWZsb3csIGFuZCByZWRyYXdcblx0Ly8gZXZlbnRzIGluIGJyb3dzZXJzLlxuXHQvL1xuXHQvLyBBbiBleGNlcHRpb24gdGhyb3duIGJ5IGEgdGFzayB3aWxsIHBlcm1hbmVudGx5IGludGVycnVwdCB0aGUgcHJvY2Vzc2luZyBvZlxuXHQvLyBzdWJzZXF1ZW50IHRhc2tzLiBUaGUgaGlnaGVyIGxldmVsIGBhc2FwYCBmdW5jdGlvbiBlbnN1cmVzIHRoYXQgaWYgYW5cblx0Ly8gZXhjZXB0aW9uIGlzIHRocm93biBieSBhIHRhc2ssIHRoYXQgdGhlIHRhc2sgcXVldWUgd2lsbCBjb250aW51ZSBmbHVzaGluZyBhc1xuXHQvLyBzb29uIGFzIHBvc3NpYmxlLCBidXQgaWYgeW91IHVzZSBgcmF3QXNhcGAgZGlyZWN0bHksIHlvdSBhcmUgcmVzcG9uc2libGUgdG9cblx0Ly8gZWl0aGVyIGVuc3VyZSB0aGF0IG5vIGV4Y2VwdGlvbnMgYXJlIHRocm93biBmcm9tIHlvdXIgdGFzaywgb3IgdG8gbWFudWFsbHlcblx0Ly8gY2FsbCBgcmF3QXNhcC5yZXF1ZXN0Rmx1c2hgIGlmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24uXG5cdG1vZHVsZS5leHBvcnRzID0gcmF3QXNhcDtcblx0ZnVuY3Rpb24gcmF3QXNhcCh0YXNrKSB7XG5cdCAgICBpZiAoIXF1ZXVlLmxlbmd0aCkge1xuXHQgICAgICAgIHJlcXVlc3RGbHVzaCgpO1xuXHQgICAgICAgIGZsdXNoaW5nID0gdHJ1ZTtcblx0ICAgIH1cblx0ICAgIC8vIEVxdWl2YWxlbnQgdG8gcHVzaCwgYnV0IGF2b2lkcyBhIGZ1bmN0aW9uIGNhbGwuXG5cdCAgICBxdWV1ZVtxdWV1ZS5sZW5ndGhdID0gdGFzaztcblx0fVxuXG5cdHZhciBxdWV1ZSA9IFtdO1xuXHQvLyBPbmNlIGEgZmx1c2ggaGFzIGJlZW4gcmVxdWVzdGVkLCBubyBmdXJ0aGVyIGNhbGxzIHRvIGByZXF1ZXN0Rmx1c2hgIGFyZVxuXHQvLyBuZWNlc3NhcnkgdW50aWwgdGhlIG5leHQgYGZsdXNoYCBjb21wbGV0ZXMuXG5cdHZhciBmbHVzaGluZyA9IGZhbHNlO1xuXHQvLyBgcmVxdWVzdEZsdXNoYCBpcyBhbiBpbXBsZW1lbnRhdGlvbi1zcGVjaWZpYyBtZXRob2QgdGhhdCBhdHRlbXB0cyB0byBraWNrXG5cdC8vIG9mZiBhIGBmbHVzaGAgZXZlbnQgYXMgcXVpY2tseSBhcyBwb3NzaWJsZS4gYGZsdXNoYCB3aWxsIGF0dGVtcHQgdG8gZXhoYXVzdFxuXHQvLyB0aGUgZXZlbnQgcXVldWUgYmVmb3JlIHlpZWxkaW5nIHRvIHRoZSBicm93c2VyJ3Mgb3duIGV2ZW50IGxvb3AuXG5cdHZhciByZXF1ZXN0Rmx1c2g7XG5cdC8vIFRoZSBwb3NpdGlvbiBvZiB0aGUgbmV4dCB0YXNrIHRvIGV4ZWN1dGUgaW4gdGhlIHRhc2sgcXVldWUuIFRoaXMgaXNcblx0Ly8gcHJlc2VydmVkIGJldHdlZW4gY2FsbHMgdG8gYGZsdXNoYCBzbyB0aGF0IGl0IGNhbiBiZSByZXN1bWVkIGlmXG5cdC8vIGEgdGFzayB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuXHR2YXIgaW5kZXggPSAwO1xuXHQvLyBJZiBhIHRhc2sgc2NoZWR1bGVzIGFkZGl0aW9uYWwgdGFza3MgcmVjdXJzaXZlbHksIHRoZSB0YXNrIHF1ZXVlIGNhbiBncm93XG5cdC8vIHVuYm91bmRlZC4gVG8gcHJldmVudCBtZW1vcnkgZXhoYXVzdGlvbiwgdGhlIHRhc2sgcXVldWUgd2lsbCBwZXJpb2RpY2FsbHlcblx0Ly8gdHJ1bmNhdGUgYWxyZWFkeS1jb21wbGV0ZWQgdGFza3MuXG5cdHZhciBjYXBhY2l0eSA9IDEwMjQ7XG5cblx0Ly8gVGhlIGZsdXNoIGZ1bmN0aW9uIHByb2Nlc3NlcyBhbGwgdGFza3MgdGhhdCBoYXZlIGJlZW4gc2NoZWR1bGVkIHdpdGhcblx0Ly8gYHJhd0FzYXBgIHVubGVzcyBhbmQgdW50aWwgb25lIG9mIHRob3NlIHRhc2tzIHRocm93cyBhbiBleGNlcHRpb24uXG5cdC8vIElmIGEgdGFzayB0aHJvd3MgYW4gZXhjZXB0aW9uLCBgZmx1c2hgIGVuc3VyZXMgdGhhdCBpdHMgc3RhdGUgd2lsbCByZW1haW5cblx0Ly8gY29uc2lzdGVudCBhbmQgd2lsbCByZXN1bWUgd2hlcmUgaXQgbGVmdCBvZmYgd2hlbiBjYWxsZWQgYWdhaW4uXG5cdC8vIEhvd2V2ZXIsIGBmbHVzaGAgZG9lcyBub3QgbWFrZSBhbnkgYXJyYW5nZW1lbnRzIHRvIGJlIGNhbGxlZCBhZ2FpbiBpZiBhblxuXHQvLyBleGNlcHRpb24gaXMgdGhyb3duLlxuXHRmdW5jdGlvbiBmbHVzaCgpIHtcblx0ICAgIHdoaWxlIChpbmRleCA8IHF1ZXVlLmxlbmd0aCkge1xuXHQgICAgICAgIHZhciBjdXJyZW50SW5kZXggPSBpbmRleDtcblx0ICAgICAgICAvLyBBZHZhbmNlIHRoZSBpbmRleCBiZWZvcmUgY2FsbGluZyB0aGUgdGFzay4gVGhpcyBlbnN1cmVzIHRoYXQgd2Ugd2lsbFxuXHQgICAgICAgIC8vIGJlZ2luIGZsdXNoaW5nIG9uIHRoZSBuZXh0IHRhc2sgdGhlIHRhc2sgdGhyb3dzIGFuIGVycm9yLlxuXHQgICAgICAgIGluZGV4ID0gaW5kZXggKyAxO1xuXHQgICAgICAgIHF1ZXVlW2N1cnJlbnRJbmRleF0uY2FsbCgpO1xuXHQgICAgICAgIC8vIFByZXZlbnQgbGVha2luZyBtZW1vcnkgZm9yIGxvbmcgY2hhaW5zIG9mIHJlY3Vyc2l2ZSBjYWxscyB0byBgYXNhcGAuXG5cdCAgICAgICAgLy8gSWYgd2UgY2FsbCBgYXNhcGAgd2l0aGluIHRhc2tzIHNjaGVkdWxlZCBieSBgYXNhcGAsIHRoZSBxdWV1ZSB3aWxsXG5cdCAgICAgICAgLy8gZ3JvdywgYnV0IHRvIGF2b2lkIGFuIE8obikgd2FsayBmb3IgZXZlcnkgdGFzayB3ZSBleGVjdXRlLCB3ZSBkb24ndFxuXHQgICAgICAgIC8vIHNoaWZ0IHRhc2tzIG9mZiB0aGUgcXVldWUgYWZ0ZXIgdGhleSBoYXZlIGJlZW4gZXhlY3V0ZWQuXG5cdCAgICAgICAgLy8gSW5zdGVhZCwgd2UgcGVyaW9kaWNhbGx5IHNoaWZ0IDEwMjQgdGFza3Mgb2ZmIHRoZSBxdWV1ZS5cblx0ICAgICAgICBpZiAoaW5kZXggPiBjYXBhY2l0eSkge1xuXHQgICAgICAgICAgICAvLyBNYW51YWxseSBzaGlmdCBhbGwgdmFsdWVzIHN0YXJ0aW5nIGF0IHRoZSBpbmRleCBiYWNrIHRvIHRoZVxuXHQgICAgICAgICAgICAvLyBiZWdpbm5pbmcgb2YgdGhlIHF1ZXVlLlxuXHQgICAgICAgICAgICBmb3IgKHZhciBzY2FuID0gMCwgbmV3TGVuZ3RoID0gcXVldWUubGVuZ3RoIC0gaW5kZXg7IHNjYW4gPCBuZXdMZW5ndGg7IHNjYW4rKykge1xuXHQgICAgICAgICAgICAgICAgcXVldWVbc2Nhbl0gPSBxdWV1ZVtzY2FuICsgaW5kZXhdO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHF1ZXVlLmxlbmd0aCAtPSBpbmRleDtcblx0ICAgICAgICAgICAgaW5kZXggPSAwO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0ICAgIHF1ZXVlLmxlbmd0aCA9IDA7XG5cdCAgICBpbmRleCA9IDA7XG5cdCAgICBmbHVzaGluZyA9IGZhbHNlO1xuXHR9XG5cblx0Ly8gYHJlcXVlc3RGbHVzaGAgaXMgaW1wbGVtZW50ZWQgdXNpbmcgYSBzdHJhdGVneSBiYXNlZCBvbiBkYXRhIGNvbGxlY3RlZCBmcm9tXG5cdC8vIGV2ZXJ5IGF2YWlsYWJsZSBTYXVjZUxhYnMgU2VsZW5pdW0gd2ViIGRyaXZlciB3b3JrZXIgYXQgdGltZSBvZiB3cml0aW5nLlxuXHQvLyBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9zcHJlYWRzaGVldHMvZC8xbUctNVVZR3VwNXF4R2RFTVdraFA2QldDejA1M05VYjJFMVFvVVRVMTZ1QS9lZGl0I2dpZD03ODM3MjQ1OTNcblxuXHQvLyBTYWZhcmkgNiBhbmQgNi4xIGZvciBkZXNrdG9wLCBpUGFkLCBhbmQgaVBob25lIGFyZSB0aGUgb25seSBicm93c2VycyB0aGF0XG5cdC8vIGhhdmUgV2ViS2l0TXV0YXRpb25PYnNlcnZlciBidXQgbm90IHVuLXByZWZpeGVkIE11dGF0aW9uT2JzZXJ2ZXIuXG5cdC8vIE11c3QgdXNlIGBnbG9iYWxgIG9yIGBzZWxmYCBpbnN0ZWFkIG9mIGB3aW5kb3dgIHRvIHdvcmsgaW4gYm90aCBmcmFtZXMgYW5kIHdlYlxuXHQvLyB3b3JrZXJzLiBgZ2xvYmFsYCBpcyBhIHByb3Zpc2lvbiBvZiBCcm93c2VyaWZ5LCBNciwgTXJzLCBvciBNb3AuXG5cblx0LyogZ2xvYmFscyBzZWxmICovXG5cdHZhciBzY29wZSA9IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiBzZWxmO1xuXHR2YXIgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIgPSBzY29wZS5NdXRhdGlvbk9ic2VydmVyIHx8IHNjb3BlLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG5cblx0Ly8gTXV0YXRpb25PYnNlcnZlcnMgYXJlIGRlc2lyYWJsZSBiZWNhdXNlIHRoZXkgaGF2ZSBoaWdoIHByaW9yaXR5IGFuZCB3b3JrXG5cdC8vIHJlbGlhYmx5IGV2ZXJ5d2hlcmUgdGhleSBhcmUgaW1wbGVtZW50ZWQuXG5cdC8vIFRoZXkgYXJlIGltcGxlbWVudGVkIGluIGFsbCBtb2Rlcm4gYnJvd3NlcnMuXG5cdC8vXG5cdC8vIC0gQW5kcm9pZCA0LTQuM1xuXHQvLyAtIENocm9tZSAyNi0zNFxuXHQvLyAtIEZpcmVmb3ggMTQtMjlcblx0Ly8gLSBJbnRlcm5ldCBFeHBsb3JlciAxMVxuXHQvLyAtIGlQYWQgU2FmYXJpIDYtNy4xXG5cdC8vIC0gaVBob25lIFNhZmFyaSA3LTcuMVxuXHQvLyAtIFNhZmFyaSA2LTdcblx0aWYgKHR5cGVvZiBCcm93c2VyTXV0YXRpb25PYnNlcnZlciA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdCAgICByZXF1ZXN0Rmx1c2ggPSBtYWtlUmVxdWVzdENhbGxGcm9tTXV0YXRpb25PYnNlcnZlcihmbHVzaCk7XG5cblx0Ly8gTWVzc2FnZUNoYW5uZWxzIGFyZSBkZXNpcmFibGUgYmVjYXVzZSB0aGV5IGdpdmUgZGlyZWN0IGFjY2VzcyB0byB0aGUgSFRNTFxuXHQvLyB0YXNrIHF1ZXVlLCBhcmUgaW1wbGVtZW50ZWQgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTAsIFNhZmFyaSA1LjAtMSwgYW5kIE9wZXJhXG5cdC8vIDExLTEyLCBhbmQgaW4gd2ViIHdvcmtlcnMgaW4gbWFueSBlbmdpbmVzLlxuXHQvLyBBbHRob3VnaCBtZXNzYWdlIGNoYW5uZWxzIHlpZWxkIHRvIGFueSBxdWV1ZWQgcmVuZGVyaW5nIGFuZCBJTyB0YXNrcywgdGhleVxuXHQvLyB3b3VsZCBiZSBiZXR0ZXIgdGhhbiBpbXBvc2luZyB0aGUgNG1zIGRlbGF5IG9mIHRpbWVycy5cblx0Ly8gSG93ZXZlciwgdGhleSBkbyBub3Qgd29yayByZWxpYWJseSBpbiBJbnRlcm5ldCBFeHBsb3JlciBvciBTYWZhcmkuXG5cblx0Ly8gSW50ZXJuZXQgRXhwbG9yZXIgMTAgaXMgdGhlIG9ubHkgYnJvd3NlciB0aGF0IGhhcyBzZXRJbW1lZGlhdGUgYnV0IGRvZXNcblx0Ly8gbm90IGhhdmUgTXV0YXRpb25PYnNlcnZlcnMuXG5cdC8vIEFsdGhvdWdoIHNldEltbWVkaWF0ZSB5aWVsZHMgdG8gdGhlIGJyb3dzZXIncyByZW5kZXJlciwgaXQgd291bGQgYmVcblx0Ly8gcHJlZmVycmFibGUgdG8gZmFsbGluZyBiYWNrIHRvIHNldFRpbWVvdXQgc2luY2UgaXQgZG9lcyBub3QgaGF2ZVxuXHQvLyB0aGUgbWluaW11bSA0bXMgcGVuYWx0eS5cblx0Ly8gVW5mb3J0dW5hdGVseSB0aGVyZSBhcHBlYXJzIHRvIGJlIGEgYnVnIGluIEludGVybmV0IEV4cGxvcmVyIDEwIE1vYmlsZSAoYW5kXG5cdC8vIERlc2t0b3AgdG8gYSBsZXNzZXIgZXh0ZW50KSB0aGF0IHJlbmRlcnMgYm90aCBzZXRJbW1lZGlhdGUgYW5kXG5cdC8vIE1lc3NhZ2VDaGFubmVsIHVzZWxlc3MgZm9yIHRoZSBwdXJwb3NlcyBvZiBBU0FQLlxuXHQvLyBodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3EvaXNzdWVzLzM5NlxuXG5cdC8vIFRpbWVycyBhcmUgaW1wbGVtZW50ZWQgdW5pdmVyc2FsbHkuXG5cdC8vIFdlIGZhbGwgYmFjayB0byB0aW1lcnMgaW4gd29ya2VycyBpbiBtb3N0IGVuZ2luZXMsIGFuZCBpbiBmb3JlZ3JvdW5kXG5cdC8vIGNvbnRleHRzIGluIHRoZSBmb2xsb3dpbmcgYnJvd3NlcnMuXG5cdC8vIEhvd2V2ZXIsIG5vdGUgdGhhdCBldmVuIHRoaXMgc2ltcGxlIGNhc2UgcmVxdWlyZXMgbnVhbmNlcyB0byBvcGVyYXRlIGluIGFcblx0Ly8gYnJvYWQgc3BlY3RydW0gb2YgYnJvd3NlcnMuXG5cdC8vXG5cdC8vIC0gRmlyZWZveCAzLTEzXG5cdC8vIC0gSW50ZXJuZXQgRXhwbG9yZXIgNi05XG5cdC8vIC0gaVBhZCBTYWZhcmkgNC4zXG5cdC8vIC0gTHlueCAyLjguN1xuXHR9IGVsc2Uge1xuXHQgICAgcmVxdWVzdEZsdXNoID0gbWFrZVJlcXVlc3RDYWxsRnJvbVRpbWVyKGZsdXNoKTtcblx0fVxuXG5cdC8vIGByZXF1ZXN0Rmx1c2hgIHJlcXVlc3RzIHRoYXQgdGhlIGhpZ2ggcHJpb3JpdHkgZXZlbnQgcXVldWUgYmUgZmx1c2hlZCBhc1xuXHQvLyBzb29uIGFzIHBvc3NpYmxlLlxuXHQvLyBUaGlzIGlzIHVzZWZ1bCB0byBwcmV2ZW50IGFuIGVycm9yIHRocm93biBpbiBhIHRhc2sgZnJvbSBzdGFsbGluZyB0aGUgZXZlbnRcblx0Ly8gcXVldWUgaWYgdGhlIGV4Y2VwdGlvbiBoYW5kbGVkIGJ5IE5vZGUuanPigJlzXG5cdC8vIGBwcm9jZXNzLm9uKFwidW5jYXVnaHRFeGNlcHRpb25cIilgIG9yIGJ5IGEgZG9tYWluLlxuXHRyYXdBc2FwLnJlcXVlc3RGbHVzaCA9IHJlcXVlc3RGbHVzaDtcblxuXHQvLyBUbyByZXF1ZXN0IGEgaGlnaCBwcmlvcml0eSBldmVudCwgd2UgaW5kdWNlIGEgbXV0YXRpb24gb2JzZXJ2ZXIgYnkgdG9nZ2xpbmdcblx0Ly8gdGhlIHRleHQgb2YgYSB0ZXh0IG5vZGUgYmV0d2VlbiBcIjFcIiBhbmQgXCItMVwiLlxuXHRmdW5jdGlvbiBtYWtlUmVxdWVzdENhbGxGcm9tTXV0YXRpb25PYnNlcnZlcihjYWxsYmFjaykge1xuXHQgICAgdmFyIHRvZ2dsZSA9IDE7XG5cdCAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIoY2FsbGJhY2spO1xuXHQgICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKTtcblx0ICAgIG9ic2VydmVyLm9ic2VydmUobm9kZSwge2NoYXJhY3RlckRhdGE6IHRydWV9KTtcblx0ICAgIHJldHVybiBmdW5jdGlvbiByZXF1ZXN0Q2FsbCgpIHtcblx0ICAgICAgICB0b2dnbGUgPSAtdG9nZ2xlO1xuXHQgICAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZTtcblx0ICAgIH07XG5cdH1cblxuXHQvLyBUaGUgbWVzc2FnZSBjaGFubmVsIHRlY2huaXF1ZSB3YXMgZGlzY292ZXJlZCBieSBNYWx0ZSBVYmwgYW5kIHdhcyB0aGVcblx0Ly8gb3JpZ2luYWwgZm91bmRhdGlvbiBmb3IgdGhpcyBsaWJyYXJ5LlxuXHQvLyBodHRwOi8vd3d3Lm5vbmJsb2NraW5nLmlvLzIwMTEvMDYvd2luZG93bmV4dHRpY2suaHRtbFxuXG5cdC8vIFNhZmFyaSA2LjAuNSAoYXQgbGVhc3QpIGludGVybWl0dGVudGx5IGZhaWxzIHRvIGNyZWF0ZSBtZXNzYWdlIHBvcnRzIG9uIGFcblx0Ly8gcGFnZSdzIGZpcnN0IGxvYWQuIFRoYW5rZnVsbHksIHRoaXMgdmVyc2lvbiBvZiBTYWZhcmkgc3VwcG9ydHNcblx0Ly8gTXV0YXRpb25PYnNlcnZlcnMsIHNvIHdlIGRvbid0IG5lZWQgdG8gZmFsbCBiYWNrIGluIHRoYXQgY2FzZS5cblxuXHQvLyBmdW5jdGlvbiBtYWtlUmVxdWVzdENhbGxGcm9tTWVzc2FnZUNoYW5uZWwoY2FsbGJhY2spIHtcblx0Ly8gICAgIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG5cdC8vICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGNhbGxiYWNrO1xuXHQvLyAgICAgcmV0dXJuIGZ1bmN0aW9uIHJlcXVlc3RDYWxsKCkge1xuXHQvLyAgICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoMCk7XG5cdC8vICAgICB9O1xuXHQvLyB9XG5cblx0Ly8gRm9yIHJlYXNvbnMgZXhwbGFpbmVkIGFib3ZlLCB3ZSBhcmUgYWxzbyB1bmFibGUgdG8gdXNlIGBzZXRJbW1lZGlhdGVgXG5cdC8vIHVuZGVyIGFueSBjaXJjdW1zdGFuY2VzLlxuXHQvLyBFdmVuIGlmIHdlIHdlcmUsIHRoZXJlIGlzIGFub3RoZXIgYnVnIGluIEludGVybmV0IEV4cGxvcmVyIDEwLlxuXHQvLyBJdCBpcyBub3Qgc3VmZmljaWVudCB0byBhc3NpZ24gYHNldEltbWVkaWF0ZWAgdG8gYHJlcXVlc3RGbHVzaGAgYmVjYXVzZVxuXHQvLyBgc2V0SW1tZWRpYXRlYCBtdXN0IGJlIGNhbGxlZCAqYnkgbmFtZSogYW5kIHRoZXJlZm9yZSBtdXN0IGJlIHdyYXBwZWQgaW4gYVxuXHQvLyBjbG9zdXJlLlxuXHQvLyBOZXZlciBmb3JnZXQuXG5cblx0Ly8gZnVuY3Rpb24gbWFrZVJlcXVlc3RDYWxsRnJvbVNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuXHQvLyAgICAgcmV0dXJuIGZ1bmN0aW9uIHJlcXVlc3RDYWxsKCkge1xuXHQvLyAgICAgICAgIHNldEltbWVkaWF0ZShjYWxsYmFjayk7XG5cdC8vICAgICB9O1xuXHQvLyB9XG5cblx0Ly8gU2FmYXJpIDYuMCBoYXMgYSBwcm9ibGVtIHdoZXJlIHRpbWVycyB3aWxsIGdldCBsb3N0IHdoaWxlIHRoZSB1c2VyIGlzXG5cdC8vIHNjcm9sbGluZy4gVGhpcyBwcm9ibGVtIGRvZXMgbm90IGltcGFjdCBBU0FQIGJlY2F1c2UgU2FmYXJpIDYuMCBzdXBwb3J0c1xuXHQvLyBtdXRhdGlvbiBvYnNlcnZlcnMsIHNvIHRoYXQgaW1wbGVtZW50YXRpb24gaXMgdXNlZCBpbnN0ZWFkLlxuXHQvLyBIb3dldmVyLCBpZiB3ZSBldmVyIGVsZWN0IHRvIHVzZSB0aW1lcnMgaW4gU2FmYXJpLCB0aGUgcHJldmFsZW50IHdvcmstYXJvdW5kXG5cdC8vIGlzIHRvIGFkZCBhIHNjcm9sbCBldmVudCBsaXN0ZW5lciB0aGF0IGNhbGxzIGZvciBhIGZsdXNoLlxuXG5cdC8vIGBzZXRUaW1lb3V0YCBkb2VzIG5vdCBjYWxsIHRoZSBwYXNzZWQgY2FsbGJhY2sgaWYgdGhlIGRlbGF5IGlzIGxlc3MgdGhhblxuXHQvLyBhcHByb3hpbWF0ZWx5IDcgaW4gd2ViIHdvcmtlcnMgaW4gRmlyZWZveCA4IHRocm91Z2ggMTgsIGFuZCBzb21ldGltZXMgbm90XG5cdC8vIGV2ZW4gdGhlbi5cblxuXHRmdW5jdGlvbiBtYWtlUmVxdWVzdENhbGxGcm9tVGltZXIoY2FsbGJhY2spIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbiByZXF1ZXN0Q2FsbCgpIHtcblx0ICAgICAgICAvLyBXZSBkaXNwYXRjaCBhIHRpbWVvdXQgd2l0aCBhIHNwZWNpZmllZCBkZWxheSBvZiAwIGZvciBlbmdpbmVzIHRoYXRcblx0ICAgICAgICAvLyBjYW4gcmVsaWFibHkgYWNjb21tb2RhdGUgdGhhdCByZXF1ZXN0LiBUaGlzIHdpbGwgdXN1YWxseSBiZSBzbmFwcGVkXG5cdCAgICAgICAgLy8gdG8gYSA0IG1pbGlzZWNvbmQgZGVsYXksIGJ1dCBvbmNlIHdlJ3JlIGZsdXNoaW5nLCB0aGVyZSdzIG5vIGRlbGF5XG5cdCAgICAgICAgLy8gYmV0d2VlbiBldmVudHMuXG5cdCAgICAgICAgdmFyIHRpbWVvdXRIYW5kbGUgPSBzZXRUaW1lb3V0KGhhbmRsZVRpbWVyLCAwKTtcblx0ICAgICAgICAvLyBIb3dldmVyLCBzaW5jZSB0aGlzIHRpbWVyIGdldHMgZnJlcXVlbnRseSBkcm9wcGVkIGluIEZpcmVmb3hcblx0ICAgICAgICAvLyB3b3JrZXJzLCB3ZSBlbmxpc3QgYW4gaW50ZXJ2YWwgaGFuZGxlIHRoYXQgd2lsbCB0cnkgdG8gZmlyZVxuXHQgICAgICAgIC8vIGFuIGV2ZW50IDIwIHRpbWVzIHBlciBzZWNvbmQgdW50aWwgaXQgc3VjY2VlZHMuXG5cdCAgICAgICAgdmFyIGludGVydmFsSGFuZGxlID0gc2V0SW50ZXJ2YWwoaGFuZGxlVGltZXIsIDUwKTtcblxuXHQgICAgICAgIGZ1bmN0aW9uIGhhbmRsZVRpbWVyKCkge1xuXHQgICAgICAgICAgICAvLyBXaGljaGV2ZXIgdGltZXIgc3VjY2VlZHMgd2lsbCBjYW5jZWwgYm90aCB0aW1lcnMgYW5kXG5cdCAgICAgICAgICAgIC8vIGV4ZWN1dGUgdGhlIGNhbGxiYWNrLlxuXHQgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dEhhbmRsZSk7XG5cdCAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxIYW5kbGUpO1xuXHQgICAgICAgICAgICBjYWxsYmFjaygpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdH1cblxuXHQvLyBUaGlzIGlzIGZvciBgYXNhcC5qc2Agb25seS5cblx0Ly8gSXRzIG5hbWUgd2lsbCBiZSBwZXJpb2RpY2FsbHkgcmFuZG9taXplZCB0byBicmVhayBhbnkgY29kZSB0aGF0IGRlcGVuZHMgb25cblx0Ly8gaXRzIGV4aXN0ZW5jZS5cblx0cmF3QXNhcC5tYWtlUmVxdWVzdENhbGxGcm9tVGltZXIgPSBtYWtlUmVxdWVzdENhbGxGcm9tVGltZXI7XG5cblx0Ly8gQVNBUCB3YXMgb3JpZ2luYWxseSBhIG5leHRUaWNrIHNoaW0gaW5jbHVkZWQgaW4gUS4gVGhpcyB3YXMgZmFjdG9yZWQgb3V0XG5cdC8vIGludG8gdGhpcyBBU0FQIHBhY2thZ2UuIEl0IHdhcyBsYXRlciBhZGFwdGVkIHRvIFJTVlAgd2hpY2ggbWFkZSBmdXJ0aGVyXG5cdC8vIGFtZW5kbWVudHMuIFRoZXNlIGRlY2lzaW9ucywgcGFydGljdWxhcmx5IHRvIG1hcmdpbmFsaXplIE1lc3NhZ2VDaGFubmVsIGFuZFxuXHQvLyB0byBjYXB0dXJlIHRoZSBNdXRhdGlvbk9ic2VydmVyIGltcGxlbWVudGF0aW9uIGluIGEgY2xvc3VyZSwgd2VyZSBpbnRlZ3JhdGVkXG5cdC8vIGJhY2sgaW50byBBU0FQIHByb3Blci5cblx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL3RpbGRlaW8vcnN2cC5qcy9ibG9iL2NkZGY3MjMyNTQ2YTljZjg1ODUyNGI3NWNkZTZmOWVkZjcyNjIwYTcvbGliL3JzdnAvYXNhcC5qc1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KCkpKSlcblxuLyoqKi8gfSksXG4vKiA2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdC8vIEEgc2ltcGxlIGNsYXNzIHN5c3RlbSwgbW9yZSBkb2N1bWVudGF0aW9uIHRvIGNvbWVcblxuXHRmdW5jdGlvbiBleHRlbmQoY2xzLCBuYW1lLCBwcm9wcykge1xuXHQgICAgLy8gVGhpcyBkb2VzIHRoYXQgc2FtZSB0aGluZyBhcyBPYmplY3QuY3JlYXRlLCBidXQgd2l0aCBzdXBwb3J0IGZvciBJRThcblx0ICAgIHZhciBGID0gZnVuY3Rpb24oKSB7fTtcblx0ICAgIEYucHJvdG90eXBlID0gY2xzLnByb3RvdHlwZTtcblx0ICAgIHZhciBwcm90b3R5cGUgPSBuZXcgRigpO1xuXG5cdCAgICAvLyBqc2hpbnQgdW5kZWY6IGZhbHNlXG5cdCAgICB2YXIgZm5UZXN0ID0gL3h5ei8udGVzdChmdW5jdGlvbigpeyB4eXo7IH0pID8gL1xcYnBhcmVudFxcYi8gOiAvLiovO1xuXHQgICAgcHJvcHMgPSBwcm9wcyB8fCB7fTtcblxuXHQgICAgZm9yKHZhciBrIGluIHByb3BzKSB7XG5cdCAgICAgICAgdmFyIHNyYyA9IHByb3BzW2tdO1xuXHQgICAgICAgIHZhciBwYXJlbnQgPSBwcm90b3R5cGVba107XG5cblx0ICAgICAgICBpZih0eXBlb2YgcGFyZW50ID09PSAnZnVuY3Rpb24nICYmXG5cdCAgICAgICAgICAgdHlwZW9mIHNyYyA9PT0gJ2Z1bmN0aW9uJyAmJlxuXHQgICAgICAgICAgIGZuVGVzdC50ZXN0KHNyYykpIHtcblx0ICAgICAgICAgICAgLypqc2hpbnQgLVcwODMgKi9cblx0ICAgICAgICAgICAgcHJvdG90eXBlW2tdID0gKGZ1bmN0aW9uIChzcmMsIHBhcmVudCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIFNhdmUgdGhlIGN1cnJlbnQgcGFyZW50IG1ldGhvZFxuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0bXAgPSB0aGlzLnBhcmVudDtcblxuXHQgICAgICAgICAgICAgICAgICAgIC8vIFNldCBwYXJlbnQgdG8gdGhlIHByZXZpb3VzIG1ldGhvZCwgY2FsbCwgYW5kIHJlc3RvcmVcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgcmVzID0gc3JjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSB0bXA7XG5cblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuXHQgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgfSkoc3JjLCBwYXJlbnQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgcHJvdG90eXBlW2tdID0gc3JjO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgcHJvdG90eXBlLnR5cGVuYW1lID0gbmFtZTtcblxuXHQgICAgdmFyIG5ld19jbHMgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICBpZihwcm90b3R5cGUuaW5pdCkge1xuXHQgICAgICAgICAgICBwcm90b3R5cGUuaW5pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIG5ld19jbHMucHJvdG90eXBlID0gcHJvdG90eXBlO1xuXHQgICAgbmV3X2Nscy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBuZXdfY2xzO1xuXG5cdCAgICBuZXdfY2xzLmV4dGVuZCA9IGZ1bmN0aW9uKG5hbWUsIHByb3BzKSB7XG5cdCAgICAgICAgaWYodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSB7XG5cdCAgICAgICAgICAgIHByb3BzID0gbmFtZTtcblx0ICAgICAgICAgICAgbmFtZSA9ICdhbm9ueW1vdXMnO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gZXh0ZW5kKG5ld19jbHMsIG5hbWUsIHByb3BzKTtcblx0ICAgIH07XG5cblx0ICAgIHJldHVybiBuZXdfY2xzO1xuXHR9XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBleHRlbmQoT2JqZWN0LCAnT2JqZWN0Jywge30pO1xuXG5cbi8qKiovIH0pLFxuLyogNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgbGliID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0dmFyIHIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG5cdGZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG5cdCAgICBpZih2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBmYWxzZSkge1xuXHQgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdmFsdWU7XG5cdH1cblxuXHR2YXIgZmlsdGVycyA9IHtcblx0ICAgIGFiczogTWF0aC5hYnMsXG5cblx0ICAgIGJhdGNoOiBmdW5jdGlvbihhcnIsIGxpbmVjb3VudCwgZmlsbF93aXRoKSB7XG5cdCAgICAgICAgdmFyIGk7XG5cdCAgICAgICAgdmFyIHJlcyA9IFtdO1xuXHQgICAgICAgIHZhciB0bXAgPSBbXTtcblxuXHQgICAgICAgIGZvcihpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICBpZihpICUgbGluZWNvdW50ID09PSAwICYmIHRtcC5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgICAgIHJlcy5wdXNoKHRtcCk7XG5cdCAgICAgICAgICAgICAgICB0bXAgPSBbXTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHRtcC5wdXNoKGFycltpXSk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYodG1wLmxlbmd0aCkge1xuXHQgICAgICAgICAgICBpZihmaWxsX3dpdGgpIHtcblx0ICAgICAgICAgICAgICAgIGZvcihpID0gdG1wLmxlbmd0aDsgaSA8IGxpbmVjb3VudDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdG1wLnB1c2goZmlsbF93aXRoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJlcy5wdXNoKHRtcCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIHJlcztcblx0ICAgIH0sXG5cblx0ICAgIGNhcGl0YWxpemU6IGZ1bmN0aW9uKHN0cikge1xuXHQgICAgICAgIHN0ciA9IG5vcm1hbGl6ZShzdHIsICcnKTtcblx0ICAgICAgICB2YXIgcmV0ID0gc3RyLnRvTG93ZXJDYXNlKCk7XG5cdCAgICAgICAgcmV0dXJuIHIuY29weVNhZmVuZXNzKHN0ciwgcmV0LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcmV0LnNsaWNlKDEpKTtcblx0ICAgIH0sXG5cblx0ICAgIGNlbnRlcjogZnVuY3Rpb24oc3RyLCB3aWR0aCkge1xuXHQgICAgICAgIHN0ciA9IG5vcm1hbGl6ZShzdHIsICcnKTtcblx0ICAgICAgICB3aWR0aCA9IHdpZHRoIHx8IDgwO1xuXG5cdCAgICAgICAgaWYoc3RyLmxlbmd0aCA+PSB3aWR0aCkge1xuXHQgICAgICAgICAgICByZXR1cm4gc3RyO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHZhciBzcGFjZXMgPSB3aWR0aCAtIHN0ci5sZW5ndGg7XG5cdCAgICAgICAgdmFyIHByZSA9IGxpYi5yZXBlYXQoJyAnLCBzcGFjZXMvMiAtIHNwYWNlcyAlIDIpO1xuXHQgICAgICAgIHZhciBwb3N0ID0gbGliLnJlcGVhdCgnICcsIHNwYWNlcy8yKTtcblx0ICAgICAgICByZXR1cm4gci5jb3B5U2FmZW5lc3Moc3RyLCBwcmUgKyBzdHIgKyBwb3N0KTtcblx0ICAgIH0sXG5cblx0ICAgICdkZWZhdWx0JzogZnVuY3Rpb24odmFsLCBkZWYsIGJvb2wpIHtcblx0ICAgICAgICBpZihib29sKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB2YWwgPyB2YWwgOiBkZWY7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICByZXR1cm4gKHZhbCAhPT0gdW5kZWZpbmVkKSA/IHZhbCA6IGRlZjtcblx0ICAgICAgICB9XG5cdCAgICB9LFxuXG5cdCAgICBkaWN0c29ydDogZnVuY3Rpb24odmFsLCBjYXNlX3NlbnNpdGl2ZSwgYnkpIHtcblx0ICAgICAgICBpZiAoIWxpYi5pc09iamVjdCh2YWwpKSB7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBsaWIuVGVtcGxhdGVFcnJvcignZGljdHNvcnQgZmlsdGVyOiB2YWwgbXVzdCBiZSBhbiBvYmplY3QnKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICB2YXIgYXJyYXkgPSBbXTtcblx0ICAgICAgICBmb3IgKHZhciBrIGluIHZhbCkge1xuXHQgICAgICAgICAgICAvLyBkZWxpYmVyYXRlbHkgaW5jbHVkZSBwcm9wZXJ0aWVzIGZyb20gdGhlIG9iamVjdCdzIHByb3RvdHlwZVxuXHQgICAgICAgICAgICBhcnJheS5wdXNoKFtrLHZhbFtrXV0pO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHZhciBzaTtcblx0ICAgICAgICBpZiAoYnkgPT09IHVuZGVmaW5lZCB8fCBieSA9PT0gJ2tleScpIHtcblx0ICAgICAgICAgICAgc2kgPSAwO1xuXHQgICAgICAgIH0gZWxzZSBpZiAoYnkgPT09ICd2YWx1ZScpIHtcblx0ICAgICAgICAgICAgc2kgPSAxO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBsaWIuVGVtcGxhdGVFcnJvcihcblx0ICAgICAgICAgICAgICAgICdkaWN0c29ydCBmaWx0ZXI6IFlvdSBjYW4gb25seSBzb3J0IGJ5IGVpdGhlciBrZXkgb3IgdmFsdWUnKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBhcnJheS5zb3J0KGZ1bmN0aW9uKHQxLCB0Mikge1xuXHQgICAgICAgICAgICB2YXIgYSA9IHQxW3NpXTtcblx0ICAgICAgICAgICAgdmFyIGIgPSB0MltzaV07XG5cblx0ICAgICAgICAgICAgaWYgKCFjYXNlX3NlbnNpdGl2ZSkge1xuXHQgICAgICAgICAgICAgICAgaWYgKGxpYi5pc1N0cmluZyhhKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGEgPSBhLnRvVXBwZXJDYXNlKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBpZiAobGliLmlzU3RyaW5nKGIpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYiA9IGIudG9VcHBlckNhc2UoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBhID4gYiA/IDEgOiAoYSA9PT0gYiA/IDAgOiAtMSk7XG5cdCAgICAgICAgfSk7XG5cblx0ICAgICAgICByZXR1cm4gYXJyYXk7XG5cdCAgICB9LFxuXG5cdCAgICBkdW1wOiBmdW5jdGlvbihvYmosIHNwYWNlcykge1xuXHQgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmosIG51bGwsIHNwYWNlcyk7XG5cdCAgICB9LFxuXG5cdCAgICBlc2NhcGU6IGZ1bmN0aW9uKHN0cikge1xuXHQgICAgICAgIGlmKHN0ciBpbnN0YW5jZW9mIHIuU2FmZVN0cmluZykge1xuXHQgICAgICAgICAgICByZXR1cm4gc3RyO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBzdHIgPSAoc3RyID09PSBudWxsIHx8IHN0ciA9PT0gdW5kZWZpbmVkKSA/ICcnIDogc3RyO1xuXHQgICAgICAgIHJldHVybiByLm1hcmtTYWZlKGxpYi5lc2NhcGUoc3RyLnRvU3RyaW5nKCkpKTtcblx0ICAgIH0sXG5cblx0ICAgIHNhZmU6IGZ1bmN0aW9uKHN0cikge1xuXHQgICAgICAgIGlmIChzdHIgaW5zdGFuY2VvZiByLlNhZmVTdHJpbmcpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHN0cjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgc3RyID0gKHN0ciA9PT0gbnVsbCB8fCBzdHIgPT09IHVuZGVmaW5lZCkgPyAnJyA6IHN0cjtcblx0ICAgICAgICByZXR1cm4gci5tYXJrU2FmZShzdHIudG9TdHJpbmcoKSk7XG5cdCAgICB9LFxuXG5cdCAgICBmaXJzdDogZnVuY3Rpb24oYXJyKSB7XG5cdCAgICAgICAgcmV0dXJuIGFyclswXTtcblx0ICAgIH0sXG5cblx0ICAgIGdyb3VwYnk6IGZ1bmN0aW9uKGFyciwgYXR0cikge1xuXHQgICAgICAgIHJldHVybiBsaWIuZ3JvdXBCeShhcnIsIGF0dHIpO1xuXHQgICAgfSxcblxuXHQgICAgaW5kZW50OiBmdW5jdGlvbihzdHIsIHdpZHRoLCBpbmRlbnRmaXJzdCkge1xuXHQgICAgICAgIHN0ciA9IG5vcm1hbGl6ZShzdHIsICcnKTtcblxuXHQgICAgICAgIGlmIChzdHIgPT09ICcnKSByZXR1cm4gJyc7XG5cblx0ICAgICAgICB3aWR0aCA9IHdpZHRoIHx8IDQ7XG5cdCAgICAgICAgdmFyIHJlcyA9ICcnO1xuXHQgICAgICAgIHZhciBsaW5lcyA9IHN0ci5zcGxpdCgnXFxuJyk7XG5cdCAgICAgICAgdmFyIHNwID0gbGliLnJlcGVhdCgnICcsIHdpZHRoKTtcblxuXHQgICAgICAgIGZvcih2YXIgaT0wOyBpPGxpbmVzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIGlmKGkgPT09IDAgJiYgIWluZGVudGZpcnN0KSB7XG5cdCAgICAgICAgICAgICAgICByZXMgKz0gbGluZXNbaV0gKyAnXFxuJztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJlcyArPSBzcCArIGxpbmVzW2ldICsgJ1xcbic7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4gci5jb3B5U2FmZW5lc3Moc3RyLCByZXMpO1xuXHQgICAgfSxcblxuXHQgICAgam9pbjogZnVuY3Rpb24oYXJyLCBkZWwsIGF0dHIpIHtcblx0ICAgICAgICBkZWwgPSBkZWwgfHwgJyc7XG5cblx0ICAgICAgICBpZihhdHRyKSB7XG5cdCAgICAgICAgICAgIGFyciA9IGxpYi5tYXAoYXJyLCBmdW5jdGlvbih2KSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdlthdHRyXTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIGFyci5qb2luKGRlbCk7XG5cdCAgICB9LFxuXG5cdCAgICBsYXN0OiBmdW5jdGlvbihhcnIpIHtcblx0ICAgICAgICByZXR1cm4gYXJyW2Fyci5sZW5ndGgtMV07XG5cdCAgICB9LFxuXG5cdCAgICBsZW5ndGg6IGZ1bmN0aW9uKHZhbCkge1xuXHQgICAgICAgIHZhciB2YWx1ZSA9IG5vcm1hbGl6ZSh2YWwsICcnKTtcblxuXHQgICAgICAgIGlmKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgaWYoXG5cdCAgICAgICAgICAgICAgICAodHlwZW9mIE1hcCA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIE1hcCkgfHxcblx0ICAgICAgICAgICAgICAgICh0eXBlb2YgU2V0ID09PSAnZnVuY3Rpb24nICYmIHZhbHVlIGluc3RhbmNlb2YgU2V0KVxuXHQgICAgICAgICAgICApIHtcblx0ICAgICAgICAgICAgICAgIC8vIEVDTUFTY3JpcHQgMjAxNSBNYXBzIGFuZCBTZXRzXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuc2l6ZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBpZihsaWIuaXNPYmplY3QodmFsdWUpICYmICEodmFsdWUgaW5zdGFuY2VvZiByLlNhZmVTdHJpbmcpKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBPYmplY3RzIChiZXNpZGVzIFNhZmVTdHJpbmdzKSwgbm9uLXByaW1hdGl2ZSBBcnJheXNcblx0ICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiB2YWx1ZS5sZW5ndGg7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiAwO1xuXHQgICAgfSxcblxuXHQgICAgbGlzdDogZnVuY3Rpb24odmFsKSB7XG5cdCAgICAgICAgaWYobGliLmlzU3RyaW5nKHZhbCkpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHZhbC5zcGxpdCgnJyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYobGliLmlzT2JqZWN0KHZhbCkpIHtcblx0ICAgICAgICAgICAgdmFyIGtleXMgPSBbXTtcblxuXHQgICAgICAgICAgICBpZihPYmplY3Qua2V5cykge1xuXHQgICAgICAgICAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBmb3IodmFyIGsgaW4gdmFsKSB7XG5cdCAgICAgICAgICAgICAgICAgICAga2V5cy5wdXNoKGspO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGxpYi5tYXAoa2V5cywgZnVuY3Rpb24oaykge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHsga2V5OiBrLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbFtrXSB9O1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZihsaWIuaXNBcnJheSh2YWwpKSB7XG5cdCAgICAgICAgICByZXR1cm4gdmFsO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgdGhyb3cgbmV3IGxpYi5UZW1wbGF0ZUVycm9yKCdsaXN0IGZpbHRlcjogdHlwZSBub3QgaXRlcmFibGUnKTtcblx0ICAgICAgICB9XG5cdCAgICB9LFxuXG5cdCAgICBsb3dlcjogZnVuY3Rpb24oc3RyKSB7XG5cdCAgICAgICAgc3RyID0gbm9ybWFsaXplKHN0ciwgJycpO1xuXHQgICAgICAgIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKTtcblx0ICAgIH0sXG5cblx0ICAgIG5sMmJyOiBmdW5jdGlvbihzdHIpIHtcblx0ICAgICAgICBpZiAoc3RyID09PSBudWxsIHx8IHN0ciA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAnJztcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHIuY29weVNhZmVuZXNzKHN0ciwgc3RyLnJlcGxhY2UoL1xcclxcbnxcXG4vZywgJzxiciAvPlxcbicpKTtcblx0ICAgIH0sXG5cblx0ICAgIHJhbmRvbTogZnVuY3Rpb24oYXJyKSB7XG5cdCAgICAgICAgcmV0dXJuIGFycltNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhcnIubGVuZ3RoKV07XG5cdCAgICB9LFxuXG5cdCAgICByZWplY3RhdHRyOiBmdW5jdGlvbihhcnIsIGF0dHIpIHtcblx0ICAgICAgcmV0dXJuIGFyci5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICByZXR1cm4gIWl0ZW1bYXR0cl07XG5cdCAgICAgIH0pO1xuXHQgICAgfSxcblxuXHQgICAgc2VsZWN0YXR0cjogZnVuY3Rpb24oYXJyLCBhdHRyKSB7XG5cdCAgICAgIHJldHVybiBhcnIuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICAgICAgcmV0dXJuICEhaXRlbVthdHRyXTtcblx0ICAgICAgfSk7XG5cdCAgICB9LFxuXG5cdCAgICByZXBsYWNlOiBmdW5jdGlvbihzdHIsIG9sZCwgbmV3XywgbWF4Q291bnQpIHtcblx0ICAgICAgICB2YXIgb3JpZ2luYWxTdHIgPSBzdHI7XG5cblx0ICAgICAgICBpZiAob2xkIGluc3RhbmNlb2YgUmVnRXhwKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZShvbGQsIG5ld18pO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmKHR5cGVvZiBtYXhDb3VudCA9PT0gJ3VuZGVmaW5lZCcpe1xuXHQgICAgICAgICAgICBtYXhDb3VudCA9IC0xO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHZhciByZXMgPSAnJzsgIC8vIE91dHB1dFxuXG5cdCAgICAgICAgLy8gQ2FzdCBOdW1iZXJzIGluIHRoZSBzZWFyY2ggdGVybSB0byBzdHJpbmdcblx0ICAgICAgICBpZih0eXBlb2Ygb2xkID09PSAnbnVtYmVyJyl7XG5cdCAgICAgICAgICAgIG9sZCA9IG9sZCArICcnO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmKHR5cGVvZiBvbGQgIT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgIC8vIElmIGl0IGlzIHNvbWV0aGluZyBvdGhlciB0aGFuIG51bWJlciBvciBzdHJpbmcsXG5cdCAgICAgICAgICAgIC8vIHJldHVybiB0aGUgb3JpZ2luYWwgc3RyaW5nXG5cdCAgICAgICAgICAgIHJldHVybiBzdHI7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gQ2FzdCBudW1iZXJzIGluIHRoZSByZXBsYWNlbWVudCB0byBzdHJpbmdcblx0ICAgICAgICBpZih0eXBlb2Ygc3RyID09PSAnbnVtYmVyJyl7XG5cdCAgICAgICAgICAgIHN0ciA9IHN0ciArICcnO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIElmIGJ5IG5vdywgd2UgZG9uJ3QgaGF2ZSBhIHN0cmluZywgdGhyb3cgaXQgYmFja1xuXHQgICAgICAgIGlmKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnICYmICEoc3RyIGluc3RhbmNlb2Ygci5TYWZlU3RyaW5nKSl7XG5cdCAgICAgICAgICAgIHJldHVybiBzdHI7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gU2hvcnRDaXJjdWl0c1xuXHQgICAgICAgIGlmKG9sZCA9PT0gJycpe1xuXHQgICAgICAgICAgICAvLyBNaW1pYyB0aGUgcHl0aG9uIGJlaGF2aW91cjogZW1wdHkgc3RyaW5nIGlzIHJlcGxhY2VkXG5cdCAgICAgICAgICAgIC8vIGJ5IHJlcGxhY2VtZW50IGUuZy4gXCJhYmNcInxyZXBsYWNlKFwiXCIsIFwiLlwiKSAtPiAuYS5iLmMuXG5cdCAgICAgICAgICAgIHJlcyA9IG5ld18gKyBzdHIuc3BsaXQoJycpLmpvaW4obmV3XykgKyBuZXdfO1xuXHQgICAgICAgICAgICByZXR1cm4gci5jb3B5U2FmZW5lc3Moc3RyLCByZXMpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHZhciBuZXh0SW5kZXggPSBzdHIuaW5kZXhPZihvbGQpO1xuXHQgICAgICAgIC8vIGlmICMgb2YgcmVwbGFjZW1lbnRzIHRvIHBlcmZvcm0gaXMgMCwgb3IgdGhlIHN0cmluZyB0byBkb2VzXG5cdCAgICAgICAgLy8gbm90IGNvbnRhaW4gdGhlIG9sZCB2YWx1ZSwgcmV0dXJuIHRoZSBzdHJpbmdcblx0ICAgICAgICBpZihtYXhDb3VudCA9PT0gMCB8fCBuZXh0SW5kZXggPT09IC0xKXtcblx0ICAgICAgICAgICAgcmV0dXJuIHN0cjtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICB2YXIgcG9zID0gMDtcblx0ICAgICAgICB2YXIgY291bnQgPSAwOyAvLyAjIG9mIHJlcGxhY2VtZW50cyBtYWRlXG5cblx0ICAgICAgICB3aGlsZShuZXh0SW5kZXggID4gLTEgJiYgKG1heENvdW50ID09PSAtMSB8fCBjb3VudCA8IG1heENvdW50KSl7XG5cdCAgICAgICAgICAgIC8vIEdyYWIgdGhlIG5leHQgY2h1bmsgb2Ygc3JjIHN0cmluZyBhbmQgYWRkIGl0IHdpdGggdGhlXG5cdCAgICAgICAgICAgIC8vIHJlcGxhY2VtZW50LCB0byB0aGUgcmVzdWx0XG5cdCAgICAgICAgICAgIHJlcyArPSBzdHIuc3Vic3RyaW5nKHBvcywgbmV4dEluZGV4KSArIG5ld187XG5cdCAgICAgICAgICAgIC8vIEluY3JlbWVudCBvdXIgcG9pbnRlciBpbiB0aGUgc3JjIHN0cmluZ1xuXHQgICAgICAgICAgICBwb3MgPSBuZXh0SW5kZXggKyBvbGQubGVuZ3RoO1xuXHQgICAgICAgICAgICBjb3VudCsrO1xuXHQgICAgICAgICAgICAvLyBTZWUgaWYgdGhlcmUgYXJlIGFueSBtb3JlIHJlcGxhY2VtZW50cyB0byBiZSBtYWRlXG5cdCAgICAgICAgICAgIG5leHRJbmRleCA9IHN0ci5pbmRleE9mKG9sZCwgcG9zKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvLyBXZSd2ZSBlaXRoZXIgcmVhY2hlZCB0aGUgZW5kLCBvciBkb25lIHRoZSBtYXggIyBvZlxuXHQgICAgICAgIC8vIHJlcGxhY2VtZW50cywgdGFjayBvbiBhbnkgcmVtYWluaW5nIHN0cmluZ1xuXHQgICAgICAgIGlmKHBvcyA8IHN0ci5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgcmVzICs9IHN0ci5zdWJzdHJpbmcocG9zKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4gci5jb3B5U2FmZW5lc3Mob3JpZ2luYWxTdHIsIHJlcyk7XG5cdCAgICB9LFxuXG5cdCAgICByZXZlcnNlOiBmdW5jdGlvbih2YWwpIHtcblx0ICAgICAgICB2YXIgYXJyO1xuXHQgICAgICAgIGlmKGxpYi5pc1N0cmluZyh2YWwpKSB7XG5cdCAgICAgICAgICAgIGFyciA9IGZpbHRlcnMubGlzdCh2YWwpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgLy8gQ29weSBpdFxuXHQgICAgICAgICAgICBhcnIgPSBsaWIubWFwKHZhbCwgZnVuY3Rpb24odikgeyByZXR1cm4gdjsgfSk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgYXJyLnJldmVyc2UoKTtcblxuXHQgICAgICAgIGlmKGxpYi5pc1N0cmluZyh2YWwpKSB7XG5cdCAgICAgICAgICAgIHJldHVybiByLmNvcHlTYWZlbmVzcyh2YWwsIGFyci5qb2luKCcnKSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBhcnI7XG5cdCAgICB9LFxuXG5cdCAgICByb3VuZDogZnVuY3Rpb24odmFsLCBwcmVjaXNpb24sIG1ldGhvZCkge1xuXHQgICAgICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiB8fCAwO1xuXHQgICAgICAgIHZhciBmYWN0b3IgPSBNYXRoLnBvdygxMCwgcHJlY2lzaW9uKTtcblx0ICAgICAgICB2YXIgcm91bmRlcjtcblxuXHQgICAgICAgIGlmKG1ldGhvZCA9PT0gJ2NlaWwnKSB7XG5cdCAgICAgICAgICAgIHJvdW5kZXIgPSBNYXRoLmNlaWw7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYobWV0aG9kID09PSAnZmxvb3InKSB7XG5cdCAgICAgICAgICAgIHJvdW5kZXIgPSBNYXRoLmZsb29yO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgcm91bmRlciA9IE1hdGgucm91bmQ7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIHJvdW5kZXIodmFsICogZmFjdG9yKSAvIGZhY3Rvcjtcblx0ICAgIH0sXG5cblx0ICAgIHNsaWNlOiBmdW5jdGlvbihhcnIsIHNsaWNlcywgZmlsbFdpdGgpIHtcblx0ICAgICAgICB2YXIgc2xpY2VMZW5ndGggPSBNYXRoLmZsb29yKGFyci5sZW5ndGggLyBzbGljZXMpO1xuXHQgICAgICAgIHZhciBleHRyYSA9IGFyci5sZW5ndGggJSBzbGljZXM7XG5cdCAgICAgICAgdmFyIG9mZnNldCA9IDA7XG5cdCAgICAgICAgdmFyIHJlcyA9IFtdO1xuXG5cdCAgICAgICAgZm9yKHZhciBpPTA7IGk8c2xpY2VzOyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIHN0YXJ0ID0gb2Zmc2V0ICsgaSAqIHNsaWNlTGVuZ3RoO1xuXHQgICAgICAgICAgICBpZihpIDwgZXh0cmEpIHtcblx0ICAgICAgICAgICAgICAgIG9mZnNldCsrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHZhciBlbmQgPSBvZmZzZXQgKyAoaSArIDEpICogc2xpY2VMZW5ndGg7XG5cblx0ICAgICAgICAgICAgdmFyIHNsaWNlID0gYXJyLnNsaWNlKHN0YXJ0LCBlbmQpO1xuXHQgICAgICAgICAgICBpZihmaWxsV2l0aCAmJiBpID49IGV4dHJhKSB7XG5cdCAgICAgICAgICAgICAgICBzbGljZS5wdXNoKGZpbGxXaXRoKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXMucHVzaChzbGljZSk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIHJlcztcblx0ICAgIH0sXG5cblx0ICAgIHN1bTogZnVuY3Rpb24oYXJyLCBhdHRyLCBzdGFydCkge1xuXHQgICAgICAgIHZhciBzdW0gPSAwO1xuXG5cdCAgICAgICAgaWYodHlwZW9mIHN0YXJ0ID09PSAnbnVtYmVyJyl7XG5cdCAgICAgICAgICAgIHN1bSArPSBzdGFydDtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZihhdHRyKSB7XG5cdCAgICAgICAgICAgIGFyciA9IGxpYi5tYXAoYXJyLCBmdW5jdGlvbih2KSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdlthdHRyXTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICBzdW0gKz0gYXJyW2ldO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBzdW07XG5cdCAgICB9LFxuXG5cdCAgICBzb3J0OiByLm1ha2VNYWNybyhbJ3ZhbHVlJywgJ3JldmVyc2UnLCAnY2FzZV9zZW5zaXRpdmUnLCAnYXR0cmlidXRlJ10sIFtdLCBmdW5jdGlvbihhcnIsIHJldmVyc2UsIGNhc2VTZW5zLCBhdHRyKSB7XG5cdCAgICAgICAgIC8vIENvcHkgaXRcblx0ICAgICAgICBhcnIgPSBsaWIubWFwKGFyciwgZnVuY3Rpb24odikgeyByZXR1cm4gdjsgfSk7XG5cblx0ICAgICAgICBhcnIuc29ydChmdW5jdGlvbihhLCBiKSB7XG5cdCAgICAgICAgICAgIHZhciB4LCB5O1xuXG5cdCAgICAgICAgICAgIGlmKGF0dHIpIHtcblx0ICAgICAgICAgICAgICAgIHggPSBhW2F0dHJdO1xuXHQgICAgICAgICAgICAgICAgeSA9IGJbYXR0cl07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB4ID0gYTtcblx0ICAgICAgICAgICAgICAgIHkgPSBiO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgaWYoIWNhc2VTZW5zICYmIGxpYi5pc1N0cmluZyh4KSAmJiBsaWIuaXNTdHJpbmcoeSkpIHtcblx0ICAgICAgICAgICAgICAgIHggPSB4LnRvTG93ZXJDYXNlKCk7XG5cdCAgICAgICAgICAgICAgICB5ID0geS50b0xvd2VyQ2FzZSgpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgaWYoeCA8IHkpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiByZXZlcnNlID8gMSA6IC0xO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYoeCA+IHkpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiByZXZlcnNlID8gLTE6IDE7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gMDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXG5cdCAgICAgICAgcmV0dXJuIGFycjtcblx0ICAgIH0pLFxuXG5cdCAgICBzdHJpbmc6IGZ1bmN0aW9uKG9iaikge1xuXHQgICAgICAgIHJldHVybiByLmNvcHlTYWZlbmVzcyhvYmosIG9iaik7XG5cdCAgICB9LFxuXG5cdCAgICBzdHJpcHRhZ3M6IGZ1bmN0aW9uKGlucHV0LCBwcmVzZXJ2ZV9saW5lYnJlYWtzKSB7XG5cdCAgICAgICAgaW5wdXQgPSBub3JtYWxpemUoaW5wdXQsICcnKTtcblx0ICAgICAgICBwcmVzZXJ2ZV9saW5lYnJlYWtzID0gcHJlc2VydmVfbGluZWJyZWFrcyB8fCBmYWxzZTtcblx0ICAgICAgICB2YXIgdGFncyA9IC88XFwvPyhbYS16XVthLXowLTldKilcXGJbXj5dKj58PCEtLVtcXHNcXFNdKj8tLT4vZ2k7XG5cdCAgICAgICAgdmFyIHRyaW1tZWRJbnB1dCA9IGZpbHRlcnMudHJpbShpbnB1dC5yZXBsYWNlKHRhZ3MsICcnKSk7XG5cdCAgICAgICAgdmFyIHJlcyA9ICcnO1xuXHQgICAgICAgIGlmIChwcmVzZXJ2ZV9saW5lYnJlYWtzKSB7XG5cdCAgICAgICAgICAgIHJlcyA9IHRyaW1tZWRJbnB1dFxuXHQgICAgICAgICAgICAgICAgLnJlcGxhY2UoL14gK3wgKyQvZ20sICcnKSAgICAgLy8gcmVtb3ZlIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNwYWNlc1xuXHQgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyArL2csICcgJykgICAgICAgICAgLy8gc3F1YXNoIGFkamFjZW50IHNwYWNlc1xuXHQgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyhcXHJcXG4pL2csICdcXG4nKSAgICAgLy8gbm9ybWFsaXplIGxpbmVicmVha3MgKENSTEYgLT4gTEYpXG5cdCAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxuXFxuXFxuKy9nLCAnXFxuXFxuJyk7IC8vIHNxdWFzaCBhYm5vcm1hbCBhZGphY2VudCBsaW5lYnJlYWtzXG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgcmVzID0gdHJpbW1lZElucHV0LnJlcGxhY2UoL1xccysvZ2ksICcgJyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiByLmNvcHlTYWZlbmVzcyhpbnB1dCwgcmVzKTtcblx0ICAgIH0sXG5cblx0ICAgIHRpdGxlOiBmdW5jdGlvbihzdHIpIHtcblx0ICAgICAgICBzdHIgPSBub3JtYWxpemUoc3RyLCAnJyk7XG5cdCAgICAgICAgdmFyIHdvcmRzID0gc3RyLnNwbGl0KCcgJyk7XG5cdCAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHdvcmRzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIHdvcmRzW2ldID0gZmlsdGVycy5jYXBpdGFsaXplKHdvcmRzW2ldKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHIuY29weVNhZmVuZXNzKHN0ciwgd29yZHMuam9pbignICcpKTtcblx0ICAgIH0sXG5cblx0ICAgIHRyaW06IGZ1bmN0aW9uKHN0cikge1xuXHQgICAgICAgIHJldHVybiByLmNvcHlTYWZlbmVzcyhzdHIsIHN0ci5yZXBsYWNlKC9eXFxzKnxcXHMqJC9nLCAnJykpO1xuXHQgICAgfSxcblxuXHQgICAgdHJ1bmNhdGU6IGZ1bmN0aW9uKGlucHV0LCBsZW5ndGgsIGtpbGx3b3JkcywgZW5kKSB7XG5cdCAgICAgICAgdmFyIG9yaWcgPSBpbnB1dDtcblx0ICAgICAgICBpbnB1dCA9IG5vcm1hbGl6ZShpbnB1dCwgJycpO1xuXHQgICAgICAgIGxlbmd0aCA9IGxlbmd0aCB8fCAyNTU7XG5cblx0ICAgICAgICBpZiAoaW5wdXQubGVuZ3RoIDw9IGxlbmd0aClcblx0ICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuXG5cdCAgICAgICAgaWYgKGtpbGx3b3Jkcykge1xuXHQgICAgICAgICAgICBpbnB1dCA9IGlucHV0LnN1YnN0cmluZygwLCBsZW5ndGgpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHZhciBpZHggPSBpbnB1dC5sYXN0SW5kZXhPZignICcsIGxlbmd0aCk7XG5cdCAgICAgICAgICAgIGlmKGlkeCA9PT0gLTEpIHtcblx0ICAgICAgICAgICAgICAgIGlkeCA9IGxlbmd0aDtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGlucHV0ID0gaW5wdXQuc3Vic3RyaW5nKDAsIGlkeCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaW5wdXQgKz0gKGVuZCAhPT0gdW5kZWZpbmVkICYmIGVuZCAhPT0gbnVsbCkgPyBlbmQgOiAnLi4uJztcblx0ICAgICAgICByZXR1cm4gci5jb3B5U2FmZW5lc3Mob3JpZywgaW5wdXQpO1xuXHQgICAgfSxcblxuXHQgICAgdXBwZXI6IGZ1bmN0aW9uKHN0cikge1xuXHQgICAgICAgIHN0ciA9IG5vcm1hbGl6ZShzdHIsICcnKTtcblx0ICAgICAgICByZXR1cm4gc3RyLnRvVXBwZXJDYXNlKCk7XG5cdCAgICB9LFxuXG5cdCAgICB1cmxlbmNvZGU6IGZ1bmN0aW9uKG9iaikge1xuXHQgICAgICAgIHZhciBlbmMgPSBlbmNvZGVVUklDb21wb25lbnQ7XG5cdCAgICAgICAgaWYgKGxpYi5pc1N0cmluZyhvYmopKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBlbmMob2JqKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB2YXIgcGFydHM7XG5cdCAgICAgICAgICAgIGlmIChsaWIuaXNBcnJheShvYmopKSB7XG5cdCAgICAgICAgICAgICAgICBwYXJ0cyA9IG9iai5tYXAoZnVuY3Rpb24oaXRlbSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbmMoaXRlbVswXSkgKyAnPScgKyBlbmMoaXRlbVsxXSk7XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHBhcnRzID0gW107XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBrIGluIG9iaikge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaykpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcGFydHMucHVzaChlbmMoaykgKyAnPScgKyBlbmMob2JqW2tdKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcmJyk7XG5cdCAgICAgICAgfVxuXHQgICAgfSxcblxuXHQgICAgdXJsaXplOiBmdW5jdGlvbihzdHIsIGxlbmd0aCwgbm9mb2xsb3cpIHtcblx0ICAgICAgICBpZiAoaXNOYU4obGVuZ3RoKSkgbGVuZ3RoID0gSW5maW5pdHk7XG5cblx0ICAgICAgICB2YXIgbm9Gb2xsb3dBdHRyID0gKG5vZm9sbG93ID09PSB0cnVlID8gJyByZWw9XCJub2ZvbGxvd1wiJyA6ICcnKTtcblxuXHQgICAgICAgIC8vIEZvciB0aGUgamluamEgcmVnZXhwLCBzZWVcblx0ICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWl0c3VoaWtvL2ppbmphMi9ibG9iL2YxNWI4MTRkY2JhNmFhMTJiYzc0ZDFmN2QwYzg4MWQ1NWY3MTI2YmUvamluamEyL3V0aWxzLnB5I0wyMC1MMjNcblx0ICAgICAgICB2YXIgcHVuY1JFID0gL14oPzpcXCh8PHwmbHQ7KT8oLio/KSg/OlxcLnwsfFxcKXxcXG58Jmd0Oyk/JC87XG5cdCAgICAgICAgLy8gZnJvbSBodHRwOi8vYmxvZy5nZXJ2Lm5ldC8yMDExLzA1L2h0bWw1X2VtYWlsX2FkZHJlc3NfcmVnZXhwL1xuXHQgICAgICAgIHZhciBlbWFpbFJFID0gL15bXFx3LiEjJCUmJyorXFwtXFwvPT9cXF5ge3x9fl0rQFthLXpcXGRcXC1dKyhcXC5bYS16XFxkXFwtXSspKyQvaTtcblx0ICAgICAgICB2YXIgaHR0cEh0dHBzUkUgPSAvXmh0dHBzPzpcXC9cXC8uKiQvO1xuXHQgICAgICAgIHZhciB3d3dSRSA9IC9ed3d3XFwuLztcblx0ICAgICAgICB2YXIgdGxkUkUgPSAvXFwuKD86b3JnfG5ldHxjb20pKD86XFw6fFxcL3wkKS87XG5cblx0ICAgICAgICB2YXIgd29yZHMgPSBzdHIuc3BsaXQoLyhcXHMrKS8pLmZpbHRlcihmdW5jdGlvbih3b3JkKSB7XG5cdCAgICAgICAgICAvLyBJZiB0aGUgd29yZCBoYXMgbm8gbGVuZ3RoLCBiYWlsLiBUaGlzIGNhbiBoYXBwZW4gZm9yIHN0ciB3aXRoXG5cdCAgICAgICAgICAvLyB0cmFpbGluZyB3aGl0ZXNwYWNlLlxuXHQgICAgICAgICAgcmV0dXJuIHdvcmQgJiYgd29yZC5sZW5ndGg7XG5cdCAgICAgICAgfSkubWFwKGZ1bmN0aW9uKHdvcmQpIHtcblx0ICAgICAgICAgIHZhciBtYXRjaGVzID0gd29yZC5tYXRjaChwdW5jUkUpO1xuXHQgICAgICAgICAgdmFyIHBvc3NpYmxlVXJsID0gbWF0Y2hlcyAmJiBtYXRjaGVzWzFdIHx8IHdvcmQ7XG5cblx0ICAgICAgICAgIC8vIHVybCB0aGF0IHN0YXJ0cyB3aXRoIGh0dHAgb3IgaHR0cHNcblx0ICAgICAgICAgIGlmIChodHRwSHR0cHNSRS50ZXN0KHBvc3NpYmxlVXJsKSlcblx0ICAgICAgICAgICAgcmV0dXJuICc8YSBocmVmPVwiJyArIHBvc3NpYmxlVXJsICsgJ1wiJyArIG5vRm9sbG93QXR0ciArICc+JyArIHBvc3NpYmxlVXJsLnN1YnN0cigwLCBsZW5ndGgpICsgJzwvYT4nO1xuXG5cdCAgICAgICAgICAvLyB1cmwgdGhhdCBzdGFydHMgd2l0aCB3d3cuXG5cdCAgICAgICAgICBpZiAod3d3UkUudGVzdChwb3NzaWJsZVVybCkpXG5cdCAgICAgICAgICAgIHJldHVybiAnPGEgaHJlZj1cImh0dHA6Ly8nICsgcG9zc2libGVVcmwgKyAnXCInICsgbm9Gb2xsb3dBdHRyICsgJz4nICsgcG9zc2libGVVcmwuc3Vic3RyKDAsIGxlbmd0aCkgKyAnPC9hPic7XG5cblx0ICAgICAgICAgIC8vIGFuIGVtYWlsIGFkZHJlc3Mgb2YgdGhlIGZvcm0gdXNlcm5hbWVAZG9tYWluLnRsZFxuXHQgICAgICAgICAgaWYgKGVtYWlsUkUudGVzdChwb3NzaWJsZVVybCkpXG5cdCAgICAgICAgICAgIHJldHVybiAnPGEgaHJlZj1cIm1haWx0bzonICsgcG9zc2libGVVcmwgKyAnXCI+JyArIHBvc3NpYmxlVXJsICsgJzwvYT4nO1xuXG5cdCAgICAgICAgICAvLyB1cmwgdGhhdCBlbmRzIGluIC5jb20sIC5vcmcgb3IgLm5ldCB0aGF0IGlzIG5vdCBhbiBlbWFpbCBhZGRyZXNzXG5cdCAgICAgICAgICBpZiAodGxkUkUudGVzdChwb3NzaWJsZVVybCkpXG5cdCAgICAgICAgICAgIHJldHVybiAnPGEgaHJlZj1cImh0dHA6Ly8nICsgcG9zc2libGVVcmwgKyAnXCInICsgbm9Gb2xsb3dBdHRyICsgJz4nICsgcG9zc2libGVVcmwuc3Vic3RyKDAsIGxlbmd0aCkgKyAnPC9hPic7XG5cblx0ICAgICAgICAgIHJldHVybiB3b3JkO1xuXG5cdCAgICAgICAgfSk7XG5cblx0ICAgICAgICByZXR1cm4gd29yZHMuam9pbignJyk7XG5cdCAgICB9LFxuXG5cdCAgICB3b3JkY291bnQ6IGZ1bmN0aW9uKHN0cikge1xuXHQgICAgICAgIHN0ciA9IG5vcm1hbGl6ZShzdHIsICcnKTtcblx0ICAgICAgICB2YXIgd29yZHMgPSAoc3RyKSA/IHN0ci5tYXRjaCgvXFx3Ky9nKSA6IG51bGw7XG5cdCAgICAgICAgcmV0dXJuICh3b3JkcykgPyB3b3Jkcy5sZW5ndGggOiBudWxsO1xuXHQgICAgfSxcblxuXHQgICAgJ2Zsb2F0JzogZnVuY3Rpb24odmFsLCBkZWYpIHtcblx0ICAgICAgICB2YXIgcmVzID0gcGFyc2VGbG9hdCh2YWwpO1xuXHQgICAgICAgIHJldHVybiBpc05hTihyZXMpID8gZGVmIDogcmVzO1xuXHQgICAgfSxcblxuXHQgICAgJ2ludCc6IGZ1bmN0aW9uKHZhbCwgZGVmKSB7XG5cdCAgICAgICAgdmFyIHJlcyA9IHBhcnNlSW50KHZhbCwgMTApO1xuXHQgICAgICAgIHJldHVybiBpc05hTihyZXMpID8gZGVmIDogcmVzO1xuXHQgICAgfVxuXHR9O1xuXG5cdC8vIEFsaWFzZXNcblx0ZmlsdGVycy5kID0gZmlsdGVyc1snZGVmYXVsdCddO1xuXHRmaWx0ZXJzLmUgPSBmaWx0ZXJzLmVzY2FwZTtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZpbHRlcnM7XG5cblxuLyoqKi8gfSksXG4vKiA4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBsaWIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHR2YXIgT2JqID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxuXHQvLyBGcmFtZXMga2VlcCB0cmFjayBvZiBzY29waW5nIGJvdGggYXQgY29tcGlsZS10aW1lIGFuZCBydW4tdGltZSBzb1xuXHQvLyB3ZSBrbm93IGhvdyB0byBhY2Nlc3MgdmFyaWFibGVzLiBCbG9jayB0YWdzIGNhbiBpbnRyb2R1Y2Ugc3BlY2lhbFxuXHQvLyB2YXJpYWJsZXMsIGZvciBleGFtcGxlLlxuXHR2YXIgRnJhbWUgPSBPYmouZXh0ZW5kKHtcblx0ICAgIGluaXQ6IGZ1bmN0aW9uKHBhcmVudCwgaXNvbGF0ZVdyaXRlcykge1xuXHQgICAgICAgIHRoaXMudmFyaWFibGVzID0ge307XG5cdCAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG5cdCAgICAgICAgdGhpcy50b3BMZXZlbCA9IGZhbHNlO1xuXHQgICAgICAgIC8vIGlmIHRoaXMgaXMgdHJ1ZSwgd3JpdGVzIChzZXQpIHNob3VsZCBuZXZlciBwcm9wYWdhdGUgdXB3YXJkcyBwYXN0XG5cdCAgICAgICAgLy8gdGhpcyBmcmFtZSB0byBpdHMgcGFyZW50ICh0aG91Z2ggcmVhZHMgbWF5KS5cblx0ICAgICAgICB0aGlzLmlzb2xhdGVXcml0ZXMgPSBpc29sYXRlV3JpdGVzO1xuXHQgICAgfSxcblxuXHQgICAgc2V0OiBmdW5jdGlvbihuYW1lLCB2YWwsIHJlc29sdmVVcCkge1xuXHQgICAgICAgIC8vIEFsbG93IHZhcmlhYmxlcyB3aXRoIGRvdHMgYnkgYXV0b21hdGljYWxseSBjcmVhdGluZyB0aGVcblx0ICAgICAgICAvLyBuZXN0ZWQgc3RydWN0dXJlXG5cdCAgICAgICAgdmFyIHBhcnRzID0gbmFtZS5zcGxpdCgnLicpO1xuXHQgICAgICAgIHZhciBvYmogPSB0aGlzLnZhcmlhYmxlcztcblx0ICAgICAgICB2YXIgZnJhbWUgPSB0aGlzO1xuXG5cdCAgICAgICAgaWYocmVzb2x2ZVVwKSB7XG5cdCAgICAgICAgICAgIGlmKChmcmFtZSA9IHRoaXMucmVzb2x2ZShwYXJ0c1swXSwgdHJ1ZSkpKSB7XG5cdCAgICAgICAgICAgICAgICBmcmFtZS5zZXQobmFtZSwgdmFsKTtcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGZvcih2YXIgaT0wOyBpPHBhcnRzLmxlbmd0aCAtIDE7IGkrKykge1xuXHQgICAgICAgICAgICB2YXIgaWQgPSBwYXJ0c1tpXTtcblxuXHQgICAgICAgICAgICBpZighb2JqW2lkXSkge1xuXHQgICAgICAgICAgICAgICAgb2JqW2lkXSA9IHt9O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIG9iaiA9IG9ialtpZF07XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgb2JqW3BhcnRzW3BhcnRzLmxlbmd0aCAtIDFdXSA9IHZhbDtcblx0ICAgIH0sXG5cblx0ICAgIGdldDogZnVuY3Rpb24obmFtZSkge1xuXHQgICAgICAgIHZhciB2YWwgPSB0aGlzLnZhcmlhYmxlc1tuYW1lXTtcblx0ICAgICAgICBpZih2YWwgIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICByZXR1cm4gdmFsO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gbnVsbDtcblx0ICAgIH0sXG5cblx0ICAgIGxvb2t1cDogZnVuY3Rpb24obmFtZSkge1xuXHQgICAgICAgIHZhciBwID0gdGhpcy5wYXJlbnQ7XG5cdCAgICAgICAgdmFyIHZhbCA9IHRoaXMudmFyaWFibGVzW25hbWVdO1xuXHQgICAgICAgIGlmKHZhbCAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB2YWw7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBwICYmIHAubG9va3VwKG5hbWUpO1xuXHQgICAgfSxcblxuXHQgICAgcmVzb2x2ZTogZnVuY3Rpb24obmFtZSwgZm9yV3JpdGUpIHtcblx0ICAgICAgICB2YXIgcCA9IChmb3JXcml0ZSAmJiB0aGlzLmlzb2xhdGVXcml0ZXMpID8gdW5kZWZpbmVkIDogdGhpcy5wYXJlbnQ7XG5cdCAgICAgICAgdmFyIHZhbCA9IHRoaXMudmFyaWFibGVzW25hbWVdO1xuXHQgICAgICAgIGlmKHZhbCAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gcCAmJiBwLnJlc29sdmUobmFtZSk7XG5cdCAgICB9LFxuXG5cdCAgICBwdXNoOiBmdW5jdGlvbihpc29sYXRlV3JpdGVzKSB7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBGcmFtZSh0aGlzLCBpc29sYXRlV3JpdGVzKTtcblx0ICAgIH0sXG5cblx0ICAgIHBvcDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50O1xuXHQgICAgfVxuXHR9KTtcblxuXHRmdW5jdGlvbiBtYWtlTWFjcm8oYXJnTmFtZXMsIGt3YXJnTmFtZXMsIGZ1bmMpIHtcblx0ICAgIHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgYXJnQ291bnQgPSBudW1BcmdzKGFyZ3VtZW50cyk7XG5cdCAgICAgICAgdmFyIGFyZ3M7XG5cdCAgICAgICAgdmFyIGt3YXJncyA9IGdldEtleXdvcmRBcmdzKGFyZ3VtZW50cyk7XG5cdCAgICAgICAgdmFyIGk7XG5cblx0ICAgICAgICBpZihhcmdDb3VudCA+IGFyZ05hbWVzLmxlbmd0aCkge1xuXHQgICAgICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwLCBhcmdOYW1lcy5sZW5ndGgpO1xuXG5cdCAgICAgICAgICAgIC8vIFBvc2l0aW9uYWwgYXJndW1lbnRzIHRoYXQgc2hvdWxkIGJlIHBhc3NlZCBpbiBhc1xuXHQgICAgICAgICAgICAvLyBrZXl3b3JkIGFyZ3VtZW50cyAoZXNzZW50aWFsbHkgZGVmYXVsdCB2YWx1ZXMpXG5cdCAgICAgICAgICAgIHZhciB2YWxzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCBhcmdzLmxlbmd0aCwgYXJnQ291bnQpO1xuXHQgICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCB2YWxzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBpZihpIDwga3dhcmdOYW1lcy5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgICAgICAgICBrd2FyZ3Nba3dhcmdOYW1lc1tpXV0gPSB2YWxzW2ldO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgYXJncy5wdXNoKGt3YXJncyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYoYXJnQ291bnQgPCBhcmdOYW1lcy5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCwgYXJnQ291bnQpO1xuXG5cdCAgICAgICAgICAgIGZvcihpID0gYXJnQ291bnQ7IGkgPCBhcmdOYW1lcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGFyZyA9IGFyZ05hbWVzW2ldO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBLZXl3b3JkIGFyZ3VtZW50cyB0aGF0IHNob3VsZCBiZSBwYXNzZWQgYXNcblx0ICAgICAgICAgICAgICAgIC8vIHBvc2l0aW9uYWwgYXJndW1lbnRzLCBpLmUuIHRoZSBjYWxsZXIgZXhwbGljaXRseVxuXHQgICAgICAgICAgICAgICAgLy8gdXNlZCB0aGUgbmFtZSBvZiBhIHBvc2l0aW9uYWwgYXJnXG5cdCAgICAgICAgICAgICAgICBhcmdzLnB1c2goa3dhcmdzW2FyZ10pO1xuXHQgICAgICAgICAgICAgICAgZGVsZXRlIGt3YXJnc1thcmddO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgYXJncy5wdXNoKGt3YXJncyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHQgICAgfTtcblx0fVxuXG5cdGZ1bmN0aW9uIG1ha2VLZXl3b3JkQXJncyhvYmopIHtcblx0ICAgIG9iai5fX2tleXdvcmRzID0gdHJ1ZTtcblx0ICAgIHJldHVybiBvYmo7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRLZXl3b3JkQXJncyhhcmdzKSB7XG5cdCAgICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG5cdCAgICBpZihsZW4pIHtcblx0ICAgICAgICB2YXIgbGFzdEFyZyA9IGFyZ3NbbGVuIC0gMV07XG5cdCAgICAgICAgaWYobGFzdEFyZyAmJiBsYXN0QXJnLmhhc093blByb3BlcnR5KCdfX2tleXdvcmRzJykpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGxhc3RBcmc7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIHt9O1xuXHR9XG5cblx0ZnVuY3Rpb24gbnVtQXJncyhhcmdzKSB7XG5cdCAgICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG5cdCAgICBpZihsZW4gPT09IDApIHtcblx0ICAgICAgICByZXR1cm4gMDtcblx0ICAgIH1cblxuXHQgICAgdmFyIGxhc3RBcmcgPSBhcmdzW2xlbiAtIDFdO1xuXHQgICAgaWYobGFzdEFyZyAmJiBsYXN0QXJnLmhhc093blByb3BlcnR5KCdfX2tleXdvcmRzJykpIHtcblx0ICAgICAgICByZXR1cm4gbGVuIC0gMTtcblx0ICAgIH1cblx0ICAgIGVsc2Uge1xuXHQgICAgICAgIHJldHVybiBsZW47XG5cdCAgICB9XG5cdH1cblxuXHQvLyBBIFNhZmVTdHJpbmcgb2JqZWN0IGluZGljYXRlcyB0aGF0IHRoZSBzdHJpbmcgc2hvdWxkIG5vdCBiZVxuXHQvLyBhdXRvZXNjYXBlZC4gVGhpcyBoYXBwZW5zIG1hZ2ljYWxseSBiZWNhdXNlIGF1dG9lc2NhcGluZyBvbmx5XG5cdC8vIG9jY3VycyBvbiBwcmltaXRpdmUgc3RyaW5nIG9iamVjdHMuXG5cdGZ1bmN0aW9uIFNhZmVTdHJpbmcodmFsKSB7XG5cdCAgICBpZih0eXBlb2YgdmFsICE9PSAnc3RyaW5nJykge1xuXHQgICAgICAgIHJldHVybiB2YWw7XG5cdCAgICB9XG5cblx0ICAgIHRoaXMudmFsID0gdmFsO1xuXHQgICAgdGhpcy5sZW5ndGggPSB2YWwubGVuZ3RoO1xuXHR9XG5cblx0U2FmZVN0cmluZy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN0cmluZy5wcm90b3R5cGUsIHtcblx0ICAgIGxlbmd0aDogeyB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogMCB9XG5cdH0pO1xuXHRTYWZlU3RyaW5nLnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gdGhpcy52YWw7XG5cdH07XG5cdFNhZmVTdHJpbmcucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG5cdCAgICByZXR1cm4gdGhpcy52YWw7XG5cdH07XG5cblx0ZnVuY3Rpb24gY29weVNhZmVuZXNzKGRlc3QsIHRhcmdldCkge1xuXHQgICAgaWYoZGVzdCBpbnN0YW5jZW9mIFNhZmVTdHJpbmcpIHtcblx0ICAgICAgICByZXR1cm4gbmV3IFNhZmVTdHJpbmcodGFyZ2V0KTtcblx0ICAgIH1cblx0ICAgIHJldHVybiB0YXJnZXQudG9TdHJpbmcoKTtcblx0fVxuXG5cdGZ1bmN0aW9uIG1hcmtTYWZlKHZhbCkge1xuXHQgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuXG5cdCAgICBpZih0eXBlID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgIHJldHVybiBuZXcgU2FmZVN0cmluZyh2YWwpO1xuXHQgICAgfVxuXHQgICAgZWxzZSBpZih0eXBlICE9PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgcmV0dXJuIHZhbDtcblx0ICAgIH1cblx0ICAgIGVsc2Uge1xuXHQgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgdmFyIHJldCA9IHZhbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG5cdCAgICAgICAgICAgIGlmKHR5cGVvZiByZXQgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNhZmVTdHJpbmcocmV0KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiByZXQ7XG5cdCAgICAgICAgfTtcblx0ICAgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIHN1cHByZXNzVmFsdWUodmFsLCBhdXRvZXNjYXBlKSB7XG5cdCAgICB2YWwgPSAodmFsICE9PSB1bmRlZmluZWQgJiYgdmFsICE9PSBudWxsKSA/IHZhbCA6ICcnO1xuXG5cdCAgICBpZihhdXRvZXNjYXBlICYmICEodmFsIGluc3RhbmNlb2YgU2FmZVN0cmluZykpIHtcblx0ICAgICAgICB2YWwgPSBsaWIuZXNjYXBlKHZhbC50b1N0cmluZygpKTtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHZhbDtcblx0fVxuXG5cdGZ1bmN0aW9uIGVuc3VyZURlZmluZWQodmFsLCBsaW5lbm8sIGNvbG5vKSB7XG5cdCAgICBpZih2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgbGliLlRlbXBsYXRlRXJyb3IoXG5cdCAgICAgICAgICAgICdhdHRlbXB0ZWQgdG8gb3V0cHV0IG51bGwgb3IgdW5kZWZpbmVkIHZhbHVlJyxcblx0ICAgICAgICAgICAgbGluZW5vICsgMSxcblx0ICAgICAgICAgICAgY29sbm8gKyAxXG5cdCAgICAgICAgKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiB2YWw7XG5cdH1cblxuXHRmdW5jdGlvbiBtZW1iZXJMb29rdXAob2JqLCB2YWwpIHtcblx0ICAgIG9iaiA9IG9iaiB8fCB7fTtcblxuXHQgICAgaWYodHlwZW9mIG9ialt2YWxdID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gb2JqW3ZhbF0uYXBwbHkob2JqLCBhcmd1bWVudHMpO1xuXHQgICAgICAgIH07XG5cdCAgICB9XG5cblx0ICAgIHJldHVybiBvYmpbdmFsXTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNhbGxXcmFwKG9iaiwgbmFtZSwgY29udGV4dCwgYXJncykge1xuXHQgICAgaWYoIW9iaikge1xuXHQgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGNhbGwgYCcgKyBuYW1lICsgJ2AsIHdoaWNoIGlzIHVuZGVmaW5lZCBvciBmYWxzZXknKTtcblx0ICAgIH1cblx0ICAgIGVsc2UgaWYodHlwZW9mIG9iaiAhPT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGNhbGwgYCcgKyBuYW1lICsgJ2AsIHdoaWNoIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG5cdCAgICB9XG5cblx0ICAgIC8vIGpzaGludCB2YWxpZHRoaXM6IHRydWVcblx0ICAgIHJldHVybiBvYmouYXBwbHkoY29udGV4dCwgYXJncyk7XG5cdH1cblxuXHRmdW5jdGlvbiBjb250ZXh0T3JGcmFtZUxvb2t1cChjb250ZXh0LCBmcmFtZSwgbmFtZSkge1xuXHQgICAgdmFyIHZhbCA9IGZyYW1lLmxvb2t1cChuYW1lKTtcblx0ICAgIHJldHVybiAodmFsICE9PSB1bmRlZmluZWQpID9cblx0ICAgICAgICB2YWwgOlxuXHQgICAgICAgIGNvbnRleHQubG9va3VwKG5hbWUpO1xuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyb3IsIGxpbmVubywgY29sbm8pIHtcblx0ICAgIGlmKGVycm9yLmxpbmVubykge1xuXHQgICAgICAgIHJldHVybiBlcnJvcjtcblx0ICAgIH1cblx0ICAgIGVsc2Uge1xuXHQgICAgICAgIHJldHVybiBuZXcgbGliLlRlbXBsYXRlRXJyb3IoZXJyb3IsIGxpbmVubywgY29sbm8pO1xuXHQgICAgfVxuXHR9XG5cblx0ZnVuY3Rpb24gYXN5bmNFYWNoKGFyciwgZGltZW4sIGl0ZXIsIGNiKSB7XG5cdCAgICBpZihsaWIuaXNBcnJheShhcnIpKSB7XG5cdCAgICAgICAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XG5cblx0ICAgICAgICBsaWIuYXN5bmNJdGVyKGFyciwgZnVuY3Rpb24oaXRlbSwgaSwgbmV4dCkge1xuXHQgICAgICAgICAgICBzd2l0Y2goZGltZW4pIHtcblx0ICAgICAgICAgICAgY2FzZSAxOiBpdGVyKGl0ZW0sIGksIGxlbiwgbmV4dCk7IGJyZWFrO1xuXHQgICAgICAgICAgICBjYXNlIDI6IGl0ZXIoaXRlbVswXSwgaXRlbVsxXSwgaSwgbGVuLCBuZXh0KTsgYnJlYWs7XG5cdCAgICAgICAgICAgIGNhc2UgMzogaXRlcihpdGVtWzBdLCBpdGVtWzFdLCBpdGVtWzJdLCBpLCBsZW4sIG5leHQpOyBicmVhaztcblx0ICAgICAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgICAgIGl0ZW0ucHVzaChpLCBuZXh0KTtcblx0ICAgICAgICAgICAgICAgIGl0ZXIuYXBwbHkodGhpcywgaXRlbSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LCBjYik7XG5cdCAgICB9XG5cdCAgICBlbHNlIHtcblx0ICAgICAgICBsaWIuYXN5bmNGb3IoYXJyLCBmdW5jdGlvbihrZXksIHZhbCwgaSwgbGVuLCBuZXh0KSB7XG5cdCAgICAgICAgICAgIGl0ZXIoa2V5LCB2YWwsIGksIGxlbiwgbmV4dCk7XG5cdCAgICAgICAgfSwgY2IpO1xuXHQgICAgfVxuXHR9XG5cblx0ZnVuY3Rpb24gYXN5bmNBbGwoYXJyLCBkaW1lbiwgZnVuYywgY2IpIHtcblx0ICAgIHZhciBmaW5pc2hlZCA9IDA7XG5cdCAgICB2YXIgbGVuLCBpO1xuXHQgICAgdmFyIG91dHB1dEFycjtcblxuXHQgICAgZnVuY3Rpb24gZG9uZShpLCBvdXRwdXQpIHtcblx0ICAgICAgICBmaW5pc2hlZCsrO1xuXHQgICAgICAgIG91dHB1dEFycltpXSA9IG91dHB1dDtcblxuXHQgICAgICAgIGlmKGZpbmlzaGVkID09PSBsZW4pIHtcblx0ICAgICAgICAgICAgY2IobnVsbCwgb3V0cHV0QXJyLmpvaW4oJycpKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIGlmKGxpYi5pc0FycmF5KGFycikpIHtcblx0ICAgICAgICBsZW4gPSBhcnIubGVuZ3RoO1xuXHQgICAgICAgIG91dHB1dEFyciA9IG5ldyBBcnJheShsZW4pO1xuXG5cdCAgICAgICAgaWYobGVuID09PSAwKSB7XG5cdCAgICAgICAgICAgIGNiKG51bGwsICcnKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSBhcnJbaV07XG5cblx0ICAgICAgICAgICAgICAgIHN3aXRjaChkaW1lbikge1xuXHQgICAgICAgICAgICAgICAgY2FzZSAxOiBmdW5jKGl0ZW0sIGksIGxlbiwgZG9uZSk7IGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAyOiBmdW5jKGl0ZW1bMF0sIGl0ZW1bMV0sIGksIGxlbiwgZG9uZSk7IGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAzOiBmdW5jKGl0ZW1bMF0sIGl0ZW1bMV0sIGl0ZW1bMl0sIGksIGxlbiwgZG9uZSk7IGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgICAgICAgICBpdGVtLnB1c2goaSwgZG9uZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8ganNoaW50IHZhbGlkdGhpczogdHJ1ZVxuXHQgICAgICAgICAgICAgICAgICAgIGZ1bmMuYXBwbHkodGhpcywgaXRlbSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICBlbHNlIHtcblx0ICAgICAgICB2YXIga2V5cyA9IGxpYi5rZXlzKGFycik7XG5cdCAgICAgICAgbGVuID0ga2V5cy5sZW5ndGg7XG5cdCAgICAgICAgb3V0cHV0QXJyID0gbmV3IEFycmF5KGxlbik7XG5cblx0ICAgICAgICBpZihsZW4gPT09IDApIHtcblx0ICAgICAgICAgICAgY2IobnVsbCwgJycpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGsgPSBrZXlzW2ldO1xuXHQgICAgICAgICAgICAgICAgZnVuYyhrLCBhcnJba10sIGksIGxlbiwgZG9uZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9XG5cdH1cblxuXHRtb2R1bGUuZXhwb3J0cyA9IHtcblx0ICAgIEZyYW1lOiBGcmFtZSxcblx0ICAgIG1ha2VNYWNybzogbWFrZU1hY3JvLFxuXHQgICAgbWFrZUtleXdvcmRBcmdzOiBtYWtlS2V5d29yZEFyZ3MsXG5cdCAgICBudW1BcmdzOiBudW1BcmdzLFxuXHQgICAgc3VwcHJlc3NWYWx1ZTogc3VwcHJlc3NWYWx1ZSxcblx0ICAgIGVuc3VyZURlZmluZWQ6IGVuc3VyZURlZmluZWQsXG5cdCAgICBtZW1iZXJMb29rdXA6IG1lbWJlckxvb2t1cCxcblx0ICAgIGNvbnRleHRPckZyYW1lTG9va3VwOiBjb250ZXh0T3JGcmFtZUxvb2t1cCxcblx0ICAgIGNhbGxXcmFwOiBjYWxsV3JhcCxcblx0ICAgIGhhbmRsZUVycm9yOiBoYW5kbGVFcnJvcixcblx0ICAgIGlzQXJyYXk6IGxpYi5pc0FycmF5LFxuXHQgICAga2V5czogbGliLmtleXMsXG5cdCAgICBTYWZlU3RyaW5nOiBTYWZlU3RyaW5nLFxuXHQgICAgY29weVNhZmVuZXNzOiBjb3B5U2FmZW5lc3MsXG5cdCAgICBtYXJrU2FmZTogbWFya1NhZmUsXG5cdCAgICBhc3luY0VhY2g6IGFzeW5jRWFjaCxcblx0ICAgIGFzeW5jQWxsOiBhc3luY0FsbCxcblx0ICAgIGluT3BlcmF0b3I6IGxpYi5pbk9wZXJhdG9yXG5cdH07XG5cblxuLyoqKi8gfSksXG4vKiA5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdGZ1bmN0aW9uIGN5Y2xlcihpdGVtcykge1xuXHQgICAgdmFyIGluZGV4ID0gLTE7XG5cblx0ICAgIHJldHVybiB7XG5cdCAgICAgICAgY3VycmVudDogbnVsbCxcblx0ICAgICAgICByZXNldDogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgIGluZGV4ID0gLTE7XG5cdCAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IG51bGw7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICBpbmRleCsrO1xuXHQgICAgICAgICAgICBpZihpbmRleCA+PSBpdGVtcy5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgICAgIGluZGV4ID0gMDtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IGl0ZW1zW2luZGV4XTtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudDtcblx0ICAgICAgICB9LFxuXHQgICAgfTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gam9pbmVyKHNlcCkge1xuXHQgICAgc2VwID0gc2VwIHx8ICcsJztcblx0ICAgIHZhciBmaXJzdCA9IHRydWU7XG5cblx0ICAgIHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgdmFsID0gZmlyc3QgPyAnJyA6IHNlcDtcblx0ICAgICAgICBmaXJzdCA9IGZhbHNlO1xuXHQgICAgICAgIHJldHVybiB2YWw7XG5cdCAgICB9O1xuXHR9XG5cblx0Ly8gTWFraW5nIHRoaXMgYSBmdW5jdGlvbiBpbnN0ZWFkIHNvIGl0IHJldHVybnMgYSBuZXcgb2JqZWN0XG5cdC8vIGVhY2ggdGltZSBpdCdzIGNhbGxlZC4gVGhhdCB3YXksIGlmIHNvbWV0aGluZyBsaWtlIGFuIGVudmlyb25tZW50XG5cdC8vIHVzZXMgaXQsIHRoZXkgd2lsbCBlYWNoIGhhdmUgdGhlaXIgb3duIGNvcHkuXG5cdGZ1bmN0aW9uIGdsb2JhbHMoKSB7XG5cdCAgICByZXR1cm4ge1xuXHQgICAgICAgIHJhbmdlOiBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuXHQgICAgICAgICAgICBpZih0eXBlb2Ygc3RvcCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICAgICAgICAgIHN0b3AgPSBzdGFydDtcblx0ICAgICAgICAgICAgICAgIHN0YXJ0ID0gMDtcblx0ICAgICAgICAgICAgICAgIHN0ZXAgPSAxO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYoIXN0ZXApIHtcblx0ICAgICAgICAgICAgICAgIHN0ZXAgPSAxO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgdmFyIGFyciA9IFtdO1xuXHQgICAgICAgICAgICB2YXIgaTtcblx0ICAgICAgICAgICAgaWYgKHN0ZXAgPiAwKSB7XG5cdCAgICAgICAgICAgICAgICBmb3IgKGk9c3RhcnQ7IGk8c3RvcDsgaSs9c3RlcCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKGkpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgZm9yIChpPXN0YXJ0OyBpPnN0b3A7IGkrPXN0ZXApIHtcblx0ICAgICAgICAgICAgICAgICAgICBhcnIucHVzaChpKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gYXJyO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvLyBsaXBzdW06IGZ1bmN0aW9uKG4sIGh0bWwsIG1pbiwgbWF4KSB7XG5cdCAgICAgICAgLy8gfSxcblxuXHQgICAgICAgIGN5Y2xlcjogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBjeWNsZXIoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGpvaW5lcjogZnVuY3Rpb24oc2VwKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBqb2luZXIoc2VwKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHR9XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWxzO1xuXG5cbi8qKiovIH0pLFxuLyogMTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHNldEltbWVkaWF0ZSwgcHJvY2Vzcykgey8vIE1JVCBsaWNlbnNlIChieSBFbGFuIFNoYW5rZXIpLlxuXHQoZnVuY3Rpb24oZ2xvYmFscykge1xuXHQgICd1c2Ugc3RyaWN0JztcblxuXHQgIHZhciBleGVjdXRlU3luYyA9IGZ1bmN0aW9uKCl7XG5cdCAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdCAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdmdW5jdGlvbicpe1xuXHQgICAgICBhcmdzWzBdLmFwcGx5KG51bGwsIGFyZ3Muc3BsaWNlKDEpKTtcblx0ICAgIH1cblx0ICB9O1xuXG5cdCAgdmFyIGV4ZWN1dGVBc3luYyA9IGZ1bmN0aW9uKGZuKXtcblx0ICAgIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgIHNldEltbWVkaWF0ZShmbik7XG5cdCAgICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLm5leHRUaWNrKSB7XG5cdCAgICAgIHByb2Nlc3MubmV4dFRpY2soZm4pO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgc2V0VGltZW91dChmbiwgMCk7XG5cdCAgICB9XG5cdCAgfTtcblxuXHQgIHZhciBtYWtlSXRlcmF0b3IgPSBmdW5jdGlvbiAodGFza3MpIHtcblx0ICAgIHZhciBtYWtlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoaW5kZXgpIHtcblx0ICAgICAgdmFyIGZuID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICh0YXNrcy5sZW5ndGgpIHtcblx0ICAgICAgICAgIHRhc2tzW2luZGV4XS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gZm4ubmV4dCgpO1xuXHQgICAgICB9O1xuXHQgICAgICBmbi5uZXh0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHJldHVybiAoaW5kZXggPCB0YXNrcy5sZW5ndGggLSAxKSA/IG1ha2VDYWxsYmFjayhpbmRleCArIDEpOiBudWxsO1xuXHQgICAgICB9O1xuXHQgICAgICByZXR1cm4gZm47XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIG1ha2VDYWxsYmFjaygwKTtcblx0ICB9O1xuXHQgIFxuXHQgIHZhciBfaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24obWF5YmVBcnJheSl7XG5cdCAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG1heWJlQXJyYXkpID09PSAnW29iamVjdCBBcnJheV0nO1xuXHQgIH07XG5cblx0ICB2YXIgd2F0ZXJmYWxsID0gZnVuY3Rpb24gKHRhc2tzLCBjYWxsYmFjaywgZm9yY2VBc3luYykge1xuXHQgICAgdmFyIG5leHRUaWNrID0gZm9yY2VBc3luYyA/IGV4ZWN1dGVBc3luYyA6IGV4ZWN1dGVTeW5jO1xuXHQgICAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcblx0ICAgIGlmICghX2lzQXJyYXkodGFza3MpKSB7XG5cdCAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IHRvIHdhdGVyZmFsbCBtdXN0IGJlIGFuIGFycmF5IG9mIGZ1bmN0aW9ucycpO1xuXHQgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcblx0ICAgIH1cblx0ICAgIGlmICghdGFza3MubGVuZ3RoKSB7XG5cdCAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuXHQgICAgfVxuXHQgICAgdmFyIHdyYXBJdGVyYXRvciA9IGZ1bmN0aW9uIChpdGVyYXRvcikge1xuXHQgICAgICByZXR1cm4gZnVuY3Rpb24gKGVycikge1xuXHQgICAgICAgIGlmIChlcnIpIHtcblx0ICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG5cdCAgICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uICgpIHt9O1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cdCAgICAgICAgICB2YXIgbmV4dCA9IGl0ZXJhdG9yLm5leHQoKTtcblx0ICAgICAgICAgIGlmIChuZXh0KSB7XG5cdCAgICAgICAgICAgIGFyZ3MucHVzaCh3cmFwSXRlcmF0b3IobmV4dCkpO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgYXJncy5wdXNoKGNhbGxiYWNrKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgaXRlcmF0b3IuYXBwbHkobnVsbCwgYXJncyk7XG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdCAgICAgIH07XG5cdCAgICB9O1xuXHQgICAgd3JhcEl0ZXJhdG9yKG1ha2VJdGVyYXRvcih0YXNrcykpKCk7XG5cdCAgfTtcblxuXHQgIGlmICh0cnVlKSB7XG5cdCAgICAhKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHJldHVybiB3YXRlcmZhbGw7XG5cdCAgICB9LmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7IC8vIFJlcXVpcmVKU1xuXHQgIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0ICAgIG1vZHVsZS5leHBvcnRzID0gd2F0ZXJmYWxsOyAvLyBDb21tb25KU1xuXHQgIH0gZWxzZSB7XG5cdCAgICBnbG9iYWxzLndhdGVyZmFsbCA9IHdhdGVyZmFsbDsgLy8gPHNjcmlwdD5cblx0ICB9XG5cdH0pKHRoaXMpO1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKS5zZXRJbW1lZGlhdGUsIF9fd2VicGFja19yZXF1aXJlX18oMTMpKSlcblxuLyoqKi8gfSksXG4vKiAxMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuXHQvLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5cdGV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuXHQgIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHdpbmRvdywgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcblx0fTtcblx0ZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuXHQgIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCB3aW5kb3csIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xuXHR9O1xuXHRleHBvcnRzLmNsZWFyVGltZW91dCA9XG5cdGV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcblx0ICBpZiAodGltZW91dCkge1xuXHQgICAgdGltZW91dC5jbG9zZSgpO1xuXHQgIH1cblx0fTtcblxuXHRmdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG5cdCAgdGhpcy5faWQgPSBpZDtcblx0ICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcblx0fVxuXHRUaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5cdFRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG5cdCAgdGhpcy5fY2xlYXJGbi5jYWxsKHdpbmRvdywgdGhpcy5faWQpO1xuXHR9O1xuXG5cdC8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuXHRleHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG5cdCAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXHQgIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG5cdH07XG5cblx0ZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcblx0ICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cdCAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcblx0fTtcblxuXHRleHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuXHQgIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuXHQgIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuXHQgIGlmIChtc2VjcyA+PSAwKSB7XG5cdCAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG5cdCAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG5cdCAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG5cdCAgICB9LCBtc2Vjcyk7XG5cdCAgfVxuXHR9O1xuXG5cdC8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3Rcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cdGV4cG9ydHMuc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuXHRleHBvcnRzLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG5cblxuLyoqKi8gfSksXG4vKiAxMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwsIHByb2Nlc3MpIHsoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG5cdCAgICBcInVzZSBzdHJpY3RcIjtcblxuXHQgICAgaWYgKGdsb2JhbC5zZXRJbW1lZGlhdGUpIHtcblx0ICAgICAgICByZXR1cm47XG5cdCAgICB9XG5cblx0ICAgIHZhciBuZXh0SGFuZGxlID0gMTsgLy8gU3BlYyBzYXlzIGdyZWF0ZXIgdGhhbiB6ZXJvXG5cdCAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuXHQgICAgdmFyIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuXHQgICAgdmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcblx0ICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuXHQgICAgZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XG5cdCAgICAgIC8vIENhbGxiYWNrIGNhbiBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhIHN0cmluZ1xuXHQgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcblx0ICAgICAgICBjYWxsYmFjayA9IG5ldyBGdW5jdGlvbihcIlwiICsgY2FsbGJhY2spO1xuXHQgICAgICB9XG5cdCAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG5cdCAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcblx0ICAgICAgfVxuXHQgICAgICAvLyBTdG9yZSBhbmQgcmVnaXN0ZXIgdGhlIHRhc2tcblx0ICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuXHQgICAgICB0YXNrc0J5SGFuZGxlW25leHRIYW5kbGVdID0gdGFzaztcblx0ICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUobmV4dEhhbmRsZSk7XG5cdCAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGhhbmRsZSkge1xuXHQgICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIHJ1bih0YXNrKSB7XG5cdCAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcblx0ICAgICAgICB2YXIgYXJncyA9IHRhc2suYXJncztcblx0ICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG5cdCAgICAgICAgY2FzZSAwOlxuXHQgICAgICAgICAgICBjYWxsYmFjaygpO1xuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICBjYXNlIDE6XG5cdCAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0pO1xuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICBjYXNlIDI6XG5cdCAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICBjYXNlIDM6XG5cdCAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICBjYWxsYmFjay5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIHJ1bklmUHJlc2VudChoYW5kbGUpIHtcblx0ICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG5cdCAgICAgICAgLy8gU28gaWYgd2UncmUgY3VycmVudGx5IHJ1bm5pbmcgYSB0YXNrLCB3ZSdsbCBuZWVkIHRvIGRlbGF5IHRoaXMgaW52b2NhdGlvbi5cblx0ICAgICAgICBpZiAoY3VycmVudGx5UnVubmluZ0FUYXNrKSB7XG5cdCAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG5cdCAgICAgICAgICAgIC8vIFwidG9vIG11Y2ggcmVjdXJzaW9uXCIgZXJyb3IuXG5cdCAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHZhciB0YXNrID0gdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuXHQgICAgICAgICAgICBpZiAodGFzaykge1xuXHQgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcnVuKHRhc2spO1xuXHQgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICAgICAgICAgICAgICBjbGVhckltbWVkaWF0ZShoYW5kbGUpO1xuXHQgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpIHtcblx0ICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuXHQgICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuXHQgICAgICAgIH07XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuXHQgICAgICAgIC8vIFRoZSB0ZXN0IGFnYWluc3QgYGltcG9ydFNjcmlwdHNgIHByZXZlbnRzIHRoaXMgaW1wbGVtZW50YXRpb24gZnJvbSBiZWluZyBpbnN0YWxsZWQgaW5zaWRlIGEgd2ViIHdvcmtlcixcblx0ICAgICAgICAvLyB3aGVyZSBgZ2xvYmFsLnBvc3RNZXNzYWdlYCBtZWFucyBzb21ldGhpbmcgY29tcGxldGVseSBkaWZmZXJlbnQgYW5kIGNhbid0IGJlIHVzZWQgZm9yIHRoaXMgcHVycG9zZS5cblx0ICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuXHQgICAgICAgICAgICB2YXIgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IHRydWU7XG5cdCAgICAgICAgICAgIHZhciBvbGRPbk1lc3NhZ2UgPSBnbG9iYWwub25tZXNzYWdlO1xuXHQgICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gZmFsc2U7XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG5cdCAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBvbGRPbk1lc3NhZ2U7XG5cdCAgICAgICAgICAgIHJldHVybiBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKSB7XG5cdCAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG5cdCAgICAgICAgLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vd2luZG93LnBvc3RNZXNzYWdlXG5cdCAgICAgICAgLy8gKiBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9jb21tcy5odG1sI2Nyb3NzRG9jdW1lbnRNZXNzYWdlc1xuXG5cdCAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcblx0ICAgICAgICB2YXIgb25HbG9iYWxNZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0ICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gZ2xvYmFsICYmXG5cdCAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHQgICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleE9mKG1lc3NhZ2VQcmVmaXgpID09PSAwKSB7XG5cdCAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoK2V2ZW50LmRhdGEuc2xpY2UobWVzc2FnZVByZWZpeC5sZW5ndGgpKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH07XG5cblx0ICAgICAgICBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHtcblx0ICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGdsb2JhbC5hdHRhY2hFdmVudChcIm9ubWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG5cdCAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShtZXNzYWdlUHJlZml4ICsgaGFuZGxlLCBcIipcIik7XG5cdCAgICAgICAgfTtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKSB7XG5cdCAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcblx0ICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdCAgICAgICAgICAgIHZhciBoYW5kbGUgPSBldmVudC5kYXRhO1xuXHQgICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcblx0ICAgICAgICB9O1xuXG5cdCAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcblx0ICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuXHQgICAgICAgIH07XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG5cdCAgICAgICAgdmFyIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHQgICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG5cdCAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuXHQgICAgICAgICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuXHQgICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG5cdCAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcblx0ICAgICAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXHQgICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHQgICAgICAgICAgICAgICAgc2NyaXB0ID0gbnVsbDtcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuXHQgICAgICAgIH07XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG5cdCAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcblx0ICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG5cdCAgICAgICAgfTtcblx0ICAgIH1cblxuXHQgICAgLy8gSWYgc3VwcG9ydGVkLCB3ZSBzaG91bGQgYXR0YWNoIHRvIHRoZSBwcm90b3R5cGUgb2YgZ2xvYmFsLCBzaW5jZSB0aGF0IGlzIHdoZXJlIHNldFRpbWVvdXQgZXQgYWwuIGxpdmUuXG5cdCAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG5cdCAgICBhdHRhY2hUbyA9IGF0dGFjaFRvICYmIGF0dGFjaFRvLnNldFRpbWVvdXQgPyBhdHRhY2hUbyA6IGdsb2JhbDtcblxuXHQgICAgLy8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBlLmcuIGJyb3dzZXJpZnkgZW52aXJvbm1lbnRzLlxuXHQgICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuXHQgICAgICAgIC8vIEZvciBOb2RlLmpzIGJlZm9yZSAwLjlcblx0ICAgICAgICBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpO1xuXG5cdCAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcblx0ICAgICAgICAvLyBGb3Igbm9uLUlFMTAgbW9kZXJuIGJyb3dzZXJzXG5cdCAgICAgICAgaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKTtcblxuXHQgICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcblx0ICAgICAgICAvLyBGb3Igd2ViIHdvcmtlcnMsIHdoZXJlIHN1cHBvcnRlZFxuXHQgICAgICAgIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCk7XG5cblx0ICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcblx0ICAgICAgICAvLyBGb3IgSUUgNuKAkzhcblx0ICAgICAgICBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCk7XG5cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgICAgLy8gRm9yIG9sZGVyIGJyb3dzZXJzXG5cdCAgICAgICAgaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpO1xuXHQgICAgfVxuXG5cdCAgICBhdHRhY2hUby5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG5cdCAgICBhdHRhY2hUby5jbGVhckltbWVkaWF0ZSA9IGNsZWFySW1tZWRpYXRlO1xuXHR9KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0oKSksIF9fd2VicGFja19yZXF1aXJlX18oMTMpKSlcblxuLyoqKi8gfSksXG4vKiAxMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFxuXG4vKioqLyB9KSxcbi8qIDE0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBMb2FkZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcblxuXHR2YXIgUHJlY29tcGlsZWRMb2FkZXIgPSBMb2FkZXIuZXh0ZW5kKHtcblx0ICAgIGluaXQ6IGZ1bmN0aW9uKGNvbXBpbGVkVGVtcGxhdGVzKSB7XG5cdCAgICAgICAgdGhpcy5wcmVjb21waWxlZCA9IGNvbXBpbGVkVGVtcGxhdGVzIHx8IHt9O1xuXHQgICAgfSxcblxuXHQgICAgZ2V0U291cmNlOiBmdW5jdGlvbihuYW1lKSB7XG5cdCAgICAgICAgaWYgKHRoaXMucHJlY29tcGlsZWRbbmFtZV0pIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgICAgIHNyYzogeyB0eXBlOiAnY29kZScsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgb2JqOiB0aGlzLnByZWNvbXBpbGVkW25hbWVdIH0sXG5cdCAgICAgICAgICAgICAgICBwYXRoOiBuYW1lXG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgfVxuXHR9KTtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IFByZWNvbXBpbGVkTG9hZGVyO1xuXG5cbi8qKiovIH0pLFxuLyogMTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIHBhdGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHR2YXIgT2JqID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0dmFyIGxpYiA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cblx0dmFyIExvYWRlciA9IE9iai5leHRlbmQoe1xuXHQgICAgb246IGZ1bmN0aW9uKG5hbWUsIGZ1bmMpIHtcblx0ICAgICAgICB0aGlzLmxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzIHx8IHt9O1xuXHQgICAgICAgIHRoaXMubGlzdGVuZXJzW25hbWVdID0gdGhpcy5saXN0ZW5lcnNbbmFtZV0gfHwgW107XG5cdCAgICAgICAgdGhpcy5saXN0ZW5lcnNbbmFtZV0ucHVzaChmdW5jKTtcblx0ICAgIH0sXG5cblx0ICAgIGVtaXQ6IGZ1bmN0aW9uKG5hbWUgLyosIGFyZzEsIGFyZzIsIC4uLiovKSB7XG5cdCAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXG5cdCAgICAgICAgaWYodGhpcy5saXN0ZW5lcnMgJiYgdGhpcy5saXN0ZW5lcnNbbmFtZV0pIHtcblx0ICAgICAgICAgICAgbGliLmVhY2godGhpcy5saXN0ZW5lcnNbbmFtZV0sIGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG5cdCAgICAgICAgICAgICAgICBsaXN0ZW5lci5hcHBseShudWxsLCBhcmdzKTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSxcblxuXHQgICAgcmVzb2x2ZTogZnVuY3Rpb24oZnJvbSwgdG8pIHtcblx0ICAgICAgICByZXR1cm4gcGF0aC5yZXNvbHZlKHBhdGguZGlybmFtZShmcm9tKSwgdG8pO1xuXHQgICAgfSxcblxuXHQgICAgaXNSZWxhdGl2ZTogZnVuY3Rpb24oZmlsZW5hbWUpIHtcblx0ICAgICAgICByZXR1cm4gKGZpbGVuYW1lLmluZGV4T2YoJy4vJykgPT09IDAgfHwgZmlsZW5hbWUuaW5kZXhPZignLi4vJykgPT09IDApO1xuXHQgICAgfVxuXHR9KTtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IExvYWRlcjtcblxuXG4vKioqLyB9KSxcbi8qIDE2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0ZnVuY3Rpb24gaW5zdGFsbENvbXBhdCgpIHtcblx0ICAgICd1c2Ugc3RyaWN0JztcblxuXHQgICAgLy8gVGhpcyBtdXN0IGJlIGNhbGxlZCBsaWtlIGBudW5qdWNrcy5pbnN0YWxsQ29tcGF0YCBzbyB0aGF0IGB0aGlzYFxuXHQgICAgLy8gcmVmZXJlbmNlcyB0aGUgbnVuanVja3MgaW5zdGFuY2Vcblx0ICAgIHZhciBydW50aW1lID0gdGhpcy5ydW50aW1lOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcblx0ICAgIHZhciBsaWIgPSB0aGlzLmxpYjsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG5cdCAgICB2YXIgQ29tcGlsZXIgPSB0aGlzLmNvbXBpbGVyLkNvbXBpbGVyOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcblx0ICAgIHZhciBQYXJzZXIgPSB0aGlzLnBhcnNlci5QYXJzZXI7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuXHQgICAgdmFyIG5vZGVzID0gdGhpcy5ub2RlczsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG5cdCAgICB2YXIgbGV4ZXIgPSB0aGlzLmxleGVyOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcblxuXHQgICAgdmFyIG9yaWdfY29udGV4dE9yRnJhbWVMb29rdXAgPSBydW50aW1lLmNvbnRleHRPckZyYW1lTG9va3VwO1xuXHQgICAgdmFyIG9yaWdfQ29tcGlsZXJfYXNzZXJ0VHlwZSA9IENvbXBpbGVyLnByb3RvdHlwZS5hc3NlcnRUeXBlO1xuXHQgICAgdmFyIG9yaWdfUGFyc2VyX3BhcnNlQWdncmVnYXRlID0gUGFyc2VyLnByb3RvdHlwZS5wYXJzZUFnZ3JlZ2F0ZTtcblx0ICAgIHZhciBvcmlnX21lbWJlckxvb2t1cCA9IHJ1bnRpbWUubWVtYmVyTG9va3VwO1xuXG5cdCAgICBmdW5jdGlvbiB1bmluc3RhbGwoKSB7XG5cdCAgICAgICAgcnVudGltZS5jb250ZXh0T3JGcmFtZUxvb2t1cCA9IG9yaWdfY29udGV4dE9yRnJhbWVMb29rdXA7XG5cdCAgICAgICAgQ29tcGlsZXIucHJvdG90eXBlLmFzc2VydFR5cGUgPSBvcmlnX0NvbXBpbGVyX2Fzc2VydFR5cGU7XG5cdCAgICAgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUFnZ3JlZ2F0ZSA9IG9yaWdfUGFyc2VyX3BhcnNlQWdncmVnYXRlO1xuXHQgICAgICAgIHJ1bnRpbWUubWVtYmVyTG9va3VwID0gb3JpZ19tZW1iZXJMb29rdXA7XG5cdCAgICB9XG5cblx0ICAgIHJ1bnRpbWUuY29udGV4dE9yRnJhbWVMb29rdXAgPSBmdW5jdGlvbihjb250ZXh0LCBmcmFtZSwga2V5KSB7XG5cdCAgICAgICAgdmFyIHZhbCA9IG9yaWdfY29udGV4dE9yRnJhbWVMb29rdXAuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgICBpZiAodmFsID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgc3dpdGNoIChrZXkpIHtcblx0ICAgICAgICAgICAgY2FzZSAnVHJ1ZSc6XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICAgICAgY2FzZSAnRmFsc2UnOlxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgICAgICBjYXNlICdOb25lJzpcblx0ICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIHZhbDtcblx0ICAgIH07XG5cblx0ICAgIHZhciBTbGljZSA9IG5vZGVzLk5vZGUuZXh0ZW5kKCdTbGljZScsIHtcblx0ICAgICAgICBmaWVsZHM6IFsnc3RhcnQnLCAnc3RvcCcsICdzdGVwJ10sXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24obGluZW5vLCBjb2xubywgc3RhcnQsIHN0b3AsIHN0ZXApIHtcblx0ICAgICAgICAgICAgc3RhcnQgPSBzdGFydCB8fCBuZXcgbm9kZXMuTGl0ZXJhbChsaW5lbm8sIGNvbG5vLCBudWxsKTtcblx0ICAgICAgICAgICAgc3RvcCA9IHN0b3AgfHwgbmV3IG5vZGVzLkxpdGVyYWwobGluZW5vLCBjb2xubywgbnVsbCk7XG5cdCAgICAgICAgICAgIHN0ZXAgPSBzdGVwIHx8IG5ldyBub2Rlcy5MaXRlcmFsKGxpbmVubywgY29sbm8sIDEpO1xuXHQgICAgICAgICAgICB0aGlzLnBhcmVudChsaW5lbm8sIGNvbG5vLCBzdGFydCwgc3RvcCwgc3RlcCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIENvbXBpbGVyLnByb3RvdHlwZS5hc3NlcnRUeXBlID0gZnVuY3Rpb24obm9kZSkge1xuXHQgICAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgU2xpY2UpIHtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gb3JpZ19Db21waWxlcl9hc3NlcnRUeXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdCAgICB9O1xuXHQgICAgQ29tcGlsZXIucHJvdG90eXBlLmNvbXBpbGVTbGljZSA9IGZ1bmN0aW9uKG5vZGUsIGZyYW1lKSB7XG5cdCAgICAgICAgdGhpcy5lbWl0KCcoJyk7XG5cdCAgICAgICAgdGhpcy5fY29tcGlsZUV4cHJlc3Npb24obm9kZS5zdGFydCwgZnJhbWUpO1xuXHQgICAgICAgIHRoaXMuZW1pdCgnKSwoJyk7XG5cdCAgICAgICAgdGhpcy5fY29tcGlsZUV4cHJlc3Npb24obm9kZS5zdG9wLCBmcmFtZSk7XG5cdCAgICAgICAgdGhpcy5lbWl0KCcpLCgnKTtcblx0ICAgICAgICB0aGlzLl9jb21waWxlRXhwcmVzc2lvbihub2RlLnN0ZXAsIGZyYW1lKTtcblx0ICAgICAgICB0aGlzLmVtaXQoJyknKTtcblx0ICAgIH07XG5cblx0ICAgIGZ1bmN0aW9uIGdldFRva2Vuc1N0YXRlKHRva2Vucykge1xuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIGluZGV4OiB0b2tlbnMuaW5kZXgsXG5cdCAgICAgICAgICAgIGxpbmVubzogdG9rZW5zLmxpbmVubyxcblx0ICAgICAgICAgICAgY29sbm86IHRva2Vucy5jb2xub1xuXHQgICAgICAgIH07XG5cdCAgICB9XG5cblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VBZ2dyZWdhdGUgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cdCAgICAgICAgdmFyIG9yaWdTdGF0ZSA9IGdldFRva2Vuc1N0YXRlKHRoaXMudG9rZW5zKTtcblx0ICAgICAgICAvLyBTZXQgYmFjayBvbmUgYWNjb3VudGluZyBmb3Igb3BlbmluZyBicmFja2V0L3BhcmVuc1xuXHQgICAgICAgIG9yaWdTdGF0ZS5jb2xuby0tO1xuXHQgICAgICAgIG9yaWdTdGF0ZS5pbmRleC0tO1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIHJldHVybiBvcmlnX1BhcnNlcl9wYXJzZUFnZ3JlZ2F0ZS5hcHBseSh0aGlzKTtcblx0ICAgICAgICB9IGNhdGNoKGUpIHtcblx0ICAgICAgICAgICAgdmFyIGVyclN0YXRlID0gZ2V0VG9rZW5zU3RhdGUodGhpcy50b2tlbnMpO1xuXHQgICAgICAgICAgICB2YXIgcmV0aHJvdyA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAgICAgICAgICAgbGliLmV4dGVuZChzZWxmLnRva2VucywgZXJyU3RhdGUpO1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGU7XG5cdCAgICAgICAgICAgIH07XG5cblx0ICAgICAgICAgICAgLy8gUmVzZXQgdG8gc3RhdGUgYmVmb3JlIG9yaWdpbmFsIHBhcnNlQWdncmVnYXRlIGNhbGxlZFxuXHQgICAgICAgICAgICBsaWIuZXh0ZW5kKHRoaXMudG9rZW5zLCBvcmlnU3RhdGUpO1xuXHQgICAgICAgICAgICB0aGlzLnBlZWtlZCA9IGZhbHNlO1xuXG5cdCAgICAgICAgICAgIHZhciB0b2sgPSB0aGlzLnBlZWtUb2tlbigpO1xuXHQgICAgICAgICAgICBpZiAodG9rLnR5cGUgIT09IGxleGVyLlRPS0VOX0xFRlRfQlJBQ0tFVCkge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgcmV0aHJvdygpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHZhciBub2RlID0gbmV3IFNsaWNlKHRvay5saW5lbm8sIHRvay5jb2xubyk7XG5cblx0ICAgICAgICAgICAgLy8gSWYgd2UgZG9uJ3QgZW5jb3VudGVyIGEgY29sb24gd2hpbGUgcGFyc2luZywgdGhpcyBpcyBub3QgYSBzbGljZSxcblx0ICAgICAgICAgICAgLy8gc28gcmUtcmFpc2UgdGhlIG9yaWdpbmFsIGV4Y2VwdGlvbi5cblx0ICAgICAgICAgICAgdmFyIGlzU2xpY2UgPSBmYWxzZTtcblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBub2RlLmZpZWxkcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2tpcChsZXhlci5UT0tFTl9SSUdIVF9CUkFDS0VUKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKGkgPT09IG5vZGUuZmllbGRzLmxlbmd0aCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChpc1NsaWNlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmFpbCgncGFyc2VTbGljZTogdG9vIG1hbnkgc2xpY2UgY29tcG9uZW50cycsIHRvay5saW5lbm8sIHRvay5jb2xubyk7XG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2tpcChsZXhlci5UT0tFTl9DT0xPTikpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpc1NsaWNlID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGZpZWxkID0gbm9kZS5maWVsZHNbaV07XG5cdCAgICAgICAgICAgICAgICAgICAgbm9kZVtmaWVsZF0gPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xuXHQgICAgICAgICAgICAgICAgICAgIGlzU2xpY2UgPSB0aGlzLnNraXAobGV4ZXIuVE9LRU5fQ09MT04pIHx8IGlzU2xpY2U7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKCFpc1NsaWNlKSB7XG5cdCAgICAgICAgICAgICAgICB0aHJvdyByZXRocm93KCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBub2Rlcy5BcnJheSh0b2subGluZW5vLCB0b2suY29sbm8sIFtub2RlXSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgZnVuY3Rpb24gc2xpY2VMb29rdXAob2JqLCBzdGFydCwgc3RvcCwgc3RlcCkge1xuXHQgICAgICAgIG9iaiA9IG9iaiB8fCBbXTtcblx0ICAgICAgICBpZiAoc3RhcnQgPT09IG51bGwpIHtcblx0ICAgICAgICAgICAgc3RhcnQgPSAoc3RlcCA8IDApID8gKG9iai5sZW5ndGggLSAxKSA6IDA7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChzdG9wID09PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHN0b3AgPSAoc3RlcCA8IDApID8gLTEgOiBvYmoubGVuZ3RoO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGlmIChzdG9wIDwgMCkge1xuXHQgICAgICAgICAgICAgICAgc3RvcCArPSBvYmoubGVuZ3RoO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuXHQgICAgICAgICAgICBzdGFydCArPSBvYmoubGVuZ3RoO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHZhciByZXN1bHRzID0gW107XG5cblx0ICAgICAgICBmb3IgKHZhciBpID0gc3RhcnQ7IDsgaSArPSBzdGVwKSB7XG5cdCAgICAgICAgICAgIGlmIChpIDwgMCB8fCBpID4gb2JqLmxlbmd0aCkge1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKHN0ZXAgPiAwICYmIGkgPj0gc3RvcCkge1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKHN0ZXAgPCAwICYmIGkgPD0gc3RvcCkge1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHJ1bnRpbWUubWVtYmVyTG9va3VwKG9iaiwgaSkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gcmVzdWx0cztcblx0ICAgIH1cblxuXHQgICAgdmFyIEFSUkFZX01FTUJFUlMgPSB7XG5cdCAgICAgICAgcG9wOiBmdW5jdGlvbihpbmRleCkge1xuXHQgICAgICAgICAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9wKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKGluZGV4ID49IHRoaXMubGVuZ3RoIHx8IGluZGV4IDwgMCkge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdLZXlFcnJvcicpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLnNwbGljZShpbmRleCwgMSk7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBhcHBlbmQ6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnB1c2goZWxlbWVudCk7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpc1tpXSA9PT0gZWxlbWVudCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNwbGljZShpLCAxKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1ZhbHVlRXJyb3InKTtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGNvdW50OiBmdW5jdGlvbihlbGVtZW50KSB7XG5cdCAgICAgICAgICAgIHZhciBjb3VudCA9IDA7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXNbaV0gPT09IGVsZW1lbnQpIHtcblx0ICAgICAgICAgICAgICAgICAgICBjb3VudCsrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiBjb3VudDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGluZGV4OiBmdW5jdGlvbihlbGVtZW50KSB7XG5cdCAgICAgICAgICAgIHZhciBpO1xuXHQgICAgICAgICAgICBpZiAoKGkgPSB0aGlzLmluZGV4T2YoZWxlbWVudCkpID09PSAtMSkge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdWYWx1ZUVycm9yJyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIGk7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBmaW5kOiBmdW5jdGlvbihlbGVtZW50KSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLmluZGV4T2YoZWxlbWVudCk7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBpbnNlcnQ6IGZ1bmN0aW9uKGluZGV4LCBlbGVtKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLnNwbGljZShpbmRleCwgMCwgZWxlbSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHZhciBPQkpFQ1RfTUVNQkVSUyA9IHtcblx0ICAgICAgICBpdGVtczogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgIHZhciByZXQgPSBbXTtcblx0ICAgICAgICAgICAgZm9yKHZhciBrIGluIHRoaXMpIHtcblx0ICAgICAgICAgICAgICAgIHJldC5wdXNoKFtrLCB0aGlzW2tdXSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIHJldDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHZhbHVlczogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgIHZhciByZXQgPSBbXTtcblx0ICAgICAgICAgICAgZm9yKHZhciBrIGluIHRoaXMpIHtcblx0ICAgICAgICAgICAgICAgIHJldC5wdXNoKHRoaXNba10pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiByZXQ7XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBrZXlzOiBmdW5jdGlvbigpIHtcblx0ICAgICAgICAgICAgdmFyIHJldCA9IFtdO1xuXHQgICAgICAgICAgICBmb3IodmFyIGsgaW4gdGhpcykge1xuXHQgICAgICAgICAgICAgICAgcmV0LnB1c2goayk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIHJldDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGdldDogZnVuY3Rpb24oa2V5LCBkZWYpIHtcblx0ICAgICAgICAgICAgdmFyIG91dHB1dCA9IHRoaXNba2V5XTtcblx0ICAgICAgICAgICAgaWYgKG91dHB1dCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICBvdXRwdXQgPSBkZWY7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcblx0ICAgICAgICB9LFxuXHQgICAgICAgIGhhc19rZXk6IGZ1bmN0aW9uKGtleSkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5oYXNPd25Qcm9wZXJ0eShrZXkpO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgcG9wOiBmdW5jdGlvbihrZXksIGRlZikge1xuXHQgICAgICAgICAgICB2YXIgb3V0cHV0ID0gdGhpc1trZXldO1xuXHQgICAgICAgICAgICBpZiAob3V0cHV0ID09PSB1bmRlZmluZWQgJiYgZGVmICE9PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgICAgIG91dHB1dCA9IGRlZjtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChvdXRwdXQgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdLZXlFcnJvcicpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXNba2V5XTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gb3V0cHV0O1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgcG9waXRlbTogZnVuY3Rpb24oKSB7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGsgaW4gdGhpcykge1xuXHQgICAgICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBmaXJzdCBvYmplY3QgcGFpci5cblx0ICAgICAgICAgICAgICAgIHZhciB2YWwgPSB0aGlzW2tdO1xuXHQgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXNba107XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gW2ssIHZhbF07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdLZXlFcnJvcicpO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgc2V0ZGVmYXVsdDogZnVuY3Rpb24oa2V5LCBkZWYpIHtcblx0ICAgICAgICAgICAgaWYgKGtleSBpbiB0aGlzKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1trZXldO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmIChkZWYgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICAgICAgZGVmID0gbnVsbDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gdGhpc1trZXldID0gZGVmO1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgdXBkYXRlOiBmdW5jdGlvbihrd2FyZ3MpIHtcblx0ICAgICAgICAgICAgZm9yICh2YXIgayBpbiBrd2FyZ3MpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXNba10gPSBrd2FyZ3Nba107XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIG51bGw7ICAgIC8vIEFsd2F5cyByZXR1cm5zIE5vbmVcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgT0JKRUNUX01FTUJFUlMuaXRlcml0ZW1zID0gT0JKRUNUX01FTUJFUlMuaXRlbXM7XG5cdCAgICBPQkpFQ1RfTUVNQkVSUy5pdGVydmFsdWVzID0gT0JKRUNUX01FTUJFUlMudmFsdWVzO1xuXHQgICAgT0JKRUNUX01FTUJFUlMuaXRlcmtleXMgPSBPQkpFQ1RfTUVNQkVSUy5rZXlzO1xuXHQgICAgcnVudGltZS5tZW1iZXJMb29rdXAgPSBmdW5jdGlvbihvYmosIHZhbCwgYXV0b2VzY2FwZSkgeyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcblx0ICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gNCkge1xuXHQgICAgICAgICAgICByZXR1cm4gc2xpY2VMb29rdXAuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgb2JqID0gb2JqIHx8IHt9O1xuXG5cdCAgICAgICAgLy8gSWYgdGhlIG9iamVjdCBpcyBhbiBvYmplY3QsIHJldHVybiBhbnkgb2YgdGhlIG1ldGhvZHMgdGhhdCBQeXRob24gd291bGRcblx0ICAgICAgICAvLyBvdGhlcndpc2UgcHJvdmlkZS5cblx0ICAgICAgICBpZiAobGliLmlzQXJyYXkob2JqKSAmJiBBUlJBWV9NRU1CRVJTLmhhc093blByb3BlcnR5KHZhbCkpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge3JldHVybiBBUlJBWV9NRU1CRVJTW3ZhbF0uYXBwbHkob2JqLCBhcmd1bWVudHMpO307XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKGxpYi5pc09iamVjdChvYmopICYmIE9CSkVDVF9NRU1CRVJTLmhhc093blByb3BlcnR5KHZhbCkpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge3JldHVybiBPQkpFQ1RfTUVNQkVSU1t2YWxdLmFwcGx5KG9iaiwgYXJndW1lbnRzKTt9O1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBvcmlnX21lbWJlckxvb2t1cC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgfTtcblxuXHQgICAgcmV0dXJuIHVuaW5zdGFsbDtcblx0fVxuXG5cdG1vZHVsZS5leHBvcnRzID0gaW5zdGFsbENvbXBhdDtcblxuXG4vKioqLyB9KVxuLyoqKioqKi8gXSlcbn0pO1xuOyJdfQ==
